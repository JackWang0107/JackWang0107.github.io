<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ROS杂篇 ROS中使用Kinect V2：安装+使用</title>
      <link href="/2021/11/18/ros-za-pian-an-zhuang-kinect-v2-qu-dong/"/>
      <url>/2021/11/18/ros-za-pian-an-zhuang-kinect-v2-qu-dong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Kinect是非常流行的获取深度、彩色、点云的相机。本文介绍了Kinect相机的具体性能，以及如何在ROS调用Kinect相机。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118214830894.png" alt="最终效果图"></p><span id="more"></span><h1 id="ROS杂篇-ROS中使用Kinect-V2：安装-使用"><a href="#ROS杂篇-ROS中使用Kinect-V2：安装-使用" class="headerlink" title="ROS杂篇 ROS中使用Kinect V2：安装+使用"></a>ROS杂篇 ROS中使用Kinect V2：安装+使用</h1><blockquote><p>前言：为什么要写这篇博客</p></blockquote><p>由于我目前的工作需要我编写服务机器人的代码，而服务机器人就免不了需要视觉信息来指导机器人完成服务。包括RGB彩色相机获得的彩色图像、深度相机获得的深度图像等等各种视觉传感器。对于简单的RGB相机拍摄到的RGB彩色图像，由于全球统一的接口，因此有很多工具都可以帮助我们从<code>/dev/video*</code>中读取到彩色图像。通过OpenCV的<code>VideoCapture</code>就可以读到。然而问题的关键在于，针对一些特定的设备，例如深度相机，目前全球尚无统一的标准，因此在数据流中图像的格式各个厂家都是不一样的。因此这个时候想要读取到这些特殊相机的图像就需要花一番功夫了。尤其是在硬件厂商不提供Linux的驱动的时候更难受。</p><p>由于我具体的开发平台配置就是 <code>Ubuntu 18.04</code> + <code>ROS Melodic</code> + <code>Kinect V2</code>相机。<strong>所以特地写这篇博客记录一下ROS中如何配置Kinect V2相机</strong></p><p><strong>下文针对Ubutnu 18.04 + ROS Melodic 验证可行</strong></p><h2 id="1-什么是-Kinect-相机？"><a href="#1-什么是-Kinect-相机？" class="headerlink" title="1. 什么是 Kinect 相机？"></a>1. 什么是 Kinect 相机？</h2><blockquote><p>正如我一向的态度，学什么、做什么前先问问为什么要学/做，再问问自己学/做的是什么。为什么要做上面已经回答了，因为我需要用它。那接下来就是要做的是什么？</p></blockquote><p>个人的角度来说，<code>Kinect</code> 相机就是一款特殊的相机，他可以读取到RGB彩色图像和深度图像，通过<code>Kinect</code>相机采集到的图像和深度信息，我们就能够快乐的进行开发~</p><p>虽然<code>Kinect V2</code>在2017年由于<code>Xbox</code>取消了<code>Kinect</code>的接口而停产，但是发现到<code>Kinect</code>相机价值的微软随后推出的 <code>Kinect V3</code> 和 <code>Kinect DK</code> 都是专门为科研推出的设备。（我有幸用过 <code>Kinect DK</code>，上面部署了现成的 <code>Human Motion Estimation</code> 的模型，可以直接获得人体的关键点，非常好用）</p><blockquote><p>摘自<code>维基百科</code></p><p><strong>Kinect</strong>是由<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%BB%9F">微软</a>开发，应用于<a href="https://zh.wikipedia.org/wiki/Xbox_360">Xbox 360</a>和<a href="https://zh.wikipedia.org/wiki/Xbox_One">Xbox One</a>主机的周边设备。它让玩家不需要手持或踩踏<a href="https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%99%A8">控制器</a>，而是使用<a href="https://zh.wikipedia.org/wiki/%E8%AF%AD%E9%9F%B3%E6%8C%87%E4%BB%A4">语音指令</a>或<a href="https://zh.wikipedia.org/wiki/%E6%89%8B%E5%8A%BF">手势</a>来操作Xbox 360和Xbox One的系统界面。它也能捕捉玩家全身上下的动作，用身体来进行游戏，带给玩家“免控制器的游戏与娱乐体验”。此设备是<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%BB%9F%E7%A0%94%E7%A9%B6%E9%99%A2">微软研究院</a>的研究成果之一。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118142428272.png" alt="维基百科上对Kinect相机的介绍"></p></blockquote><p>可以看得出来，<code>Kinect</code>相机最初其实是由Windows为<code>Xbox</code>游戏机准备的外设，通过Kinect相机可以玩一些体感游戏。不过多好的设备当然是要我们来折腾的，拿来单纯玩游戏就有点太奢侈了。</p><p>不过正式用于Kinect相机是微软家的产品，按照微软的尿性大概是不会给开源驱动的（虽然这几年微软逐渐在拥抱开源，可是KinectV1、V2都是2010年的产品啊），事实也的确如此。Kinect目前微软官方的驱动只有在Windows上才有。这也就是为什么我们稍后等下需要安装<code>Kinect V2</code>的驱动。</p><h2 id="2-Kinect-相机介绍"><a href="#2-Kinect-相机介绍" class="headerlink" title="2. Kinect 相机介绍"></a>2. Kinect 相机介绍</h2><blockquote><p>以下内容参考博客：<a href="https://www.cnblogs.com/traceplus/p/4136297.html">https://www.cnblogs.com/traceplus/p/4136297.html</a></p></blockquote><h3 id="A-Kinect-V1"><a href="#A-Kinect-V1" class="headerlink" title="A. Kinect V1"></a>A. Kinect V1</h3><p>2012年美国微软发售的<code>Kinect V1</code>，因为可以很方便就能取得Depth（深度）和 skeleton（人物姿势）等信息，被全世界的开发者和研究人员关注。</p><p><code>Kinect V1</code>的Depth传感器，采用了<code>Light Coding</code>的方式，读取投射的红外线的<code>pattern</code>，通过<code>pattern</code>的变形来取得Depth的信息。为此，Depth传感器分为投射红外线的IR Projector（左）和读取的IR Camera（右）。此外还有<code>Kinect V1</code>中间还搭载了RGB相机。</p><p><code>Light Coding</code>是以色列的<code>PrimeSense</code>公司的Depth传感器技术，于2013年被美国苹果公司收购。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/012317367015237.jpg" alt="Kinect V1的图片"></p><h3 id="B-Kinect-V2"><a href="#B-Kinect-V2" class="headerlink" title="B. Kinect V2"></a>B. Kinect V2</h3><p><code>Kinect V2</code>获得Depth信息采用的则是<code>Time of Flight(TOF)</code>的方式，通过从投射的红外线反射后返回的时间来取得Depth信息。红外发射器和接收器在面板底部，因此看不到外观，不过<code>Color Camera</code>旁边是红外线<code>Camera</code>(左)和投射脉冲变调红外线的<code>Porjector</code>（右）。</p><p>微软过去收购过基于<code>TOF</code>方式的深度传感器技术的公司（注：应该是指的3DV），已经在使用这个技术，不过没有详细的公布。</p><p>（额外插一句，TOF是目前大多数点云数据获取的方式）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/012317384052450.jpg" alt="Kinect V2"></p><h3 id="C-两者对比"><a href="#C-两者对比" class="headerlink" title="C.两者对比"></a>C.两者对比</h3><p><strong>首先是两者的参数</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118144936589.png" alt="Kinect V1 和 V2 性能对比"></p><p><strong>然后需要注意的是两者的接口</strong></p><ul><li>V1的要求是USB2.0理论传输速率是60MB/s，v2是USB3.0理论传输速率是500MB/s。</li><li>对于<code>Kinect V1</code>，对XRGB四通道图像，30fps的帧率下每秒所需传输的数据大小为640 x 480 x 4 x 30约为35M；再加上USHORT格式的深度图，30fps，每秒传输数据量为320 x 240 x 2 x 30约为4M。总计约为40MB/s，因为带宽有限，所以在保证画面帧率稳定的情况下，分辨率只能如此，而且基本上必须独占一个USB接口。</li><li>对于<code>Kinect V2</code>的情况，彩色图像1920 x 1080 x 4 x 30 约为237M，深度图像512 x 424 x 2 x 30约为12M，总计约为250M/s。所以非USB3.0不可，否则传输不了这么大的数据量。</li></ul><h2 id="3-安装Kinect驱动-ROS中间件"><a href="#3-安装Kinect驱动-ROS中间件" class="headerlink" title="3. 安装Kinect驱动+ROS中间件"></a>3. 安装Kinect驱动+ROS中间件</h2><h3 id="A-概述"><a href="#A-概述" class="headerlink" title="A. 概述"></a>A. 概述</h3><p>首先需要说明的是开发的方式，因为Kinect相机是物理硬件，所以获取到的是二进制数据流，我们首先需要使用驱动将二进制数据流转换为有意义的图像，然后在我们自己的程序针在这些图像的基础上去进行开发。</p><ul><li><strong>将二进制数据流转换为图像的程序对应下图的Kinect Driver</strong></li><li><strong>我们自己的程序对应下图的<code>Application</code></strong></li><li><strong>需要注意的是，在ROS中通常只会有一个程序调用Kinect Driver，因此不考虑右边的工作模型。右边的模型只有多人、多任务同时要调用Kinect</strong> <strong>Driver时候才会有用，针对单任务其实没有啥影响</strong></li></ul><p>在<code>Kinect</code>标准的<code>Windows</code>上，<code>Kinect</code>的驱动是Windows上直接下载的，然后<code>Windows</code>还提供了<code>Kinect</code>的SDK，里面有现成的人体骨架识别的<code>API</code>，所以可以直接用。<strong>但是在Linux的ROS上想要使用Kinect相机的话，把二进制数据流转换为图像的驱动需要我们自己写，然后SDK+程序得自己开发</strong>。</p><ul><li>幸运的是，已经有人写好了<code>Kinect</code>的驱动，因此我们直接下载驱动即可。但是<code>Kinect</code>驱动只能帮助我们能在<code>Ubuntu</code>上获得Kinect的图像，所以接下来我们需要做的第二件事就是编写一个<code>ROS</code>调用<code>Kinect</code>的节点来调用<code>Kinect</code>驱动，并将获得的图像以话题的形式发布到<code>ROS</code>中去。</li><li>更加幸运的是，这一步也已经有人帮我们做好了，我们需要需要做的下载、编译这个调用Kinect驱动获得图像、并以<code>ROS</code>话题形式发布的<code>ROS</code>功能包（相当于中间件）。</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/012317438589516.png" alt="开发方式"></p><p>因此，整个安装流程分成两步，</p><ol><li>安装 <code>Kinect</code> 的驱动</li><li>安装<code>ROS</code>功能包</li></ol><h3 id="B-安装Kinect-V2驱动——libfreenect2"><a href="#B-安装Kinect-V2驱动——libfreenect2" class="headerlink" title="B. 安装Kinect V2驱动——libfreenect2"></a>B. 安装Kinect V2驱动——libfreenect2</h3><p>首先需要安装<code>Kinect</code>在<code>Ubuntu</code>上的驱动：<code>libfreenect2</code>。</p><p>这个驱动是<code>Github</code>上开源的用<code>C++</code>和<code>Cmake</code>写的<code>Kinect V2</code>的驱动，所以我们稍后克隆下来之后安装一下依赖，然后配置<code>CMake</code>生成<code>Makefile</code>、然后make编译，最后make install安装库即可。</p><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><p>实现用apt包管理器安装下稍后编译时候的依赖</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential cmake pkg-config libturbojpeg libjpeg-turbo8-dev mesa-common-dev freeglut3-dev libxrandr-dev libxi-dev libglfw3-dev libglfw3-dev libopenni2-dev libusb-dev libturbojpeg0-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于我已经安装过了，所以这一步我不会安装任何东西。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118172852901.png" alt="安装依赖"></p><h4 id="2-下载源码"><a href="#2-下载源码" class="headerlink" title="2. 下载源码"></a>2. 下载源码</h4><p><code>git</code>直接下载源码即可，如果下载的慢的话，要么科学上网，要么先用国内的码云gitee克隆一下，然后再下载码云的仓库。关于如何使用码云加速<code>github</code>下载可以参考我的这篇文章（挖个坑，以后补）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">git</span> clone https://github.com/OpenKinect/libfreenect2.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118173143020.png" alt="下载源码"></p><p>下载之后的项目文件结构，可以看出来，是一个非常经典的<code>CMake</code>的项目</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118173557080.png" alt="下载后的项目结构"></p><h4 id="3-配置-amp-编译"><a href="#3-配置-amp-编译" class="headerlink" title="3. 配置&amp;编译"></a>3. 配置&amp;编译</h4><p>对于一个<code>CMake</code>工程，得到项目最后的成果，即最终的动态链接库/共享库、可执行文件一共需要两步。第一步是配置（<code>Config</code>），第二步是构建（<code>Build</code>）。配置指的是设置项目的一些配置，比如说编译器使用的语法标准、是否禁止编译器在编译阶段优化代码等等。这里不展开讲了，具体内容可以参考我的<code>CMake</code>系列文章（挖个坑）。</p><p>首先创建一个编译空间</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">cd</span> libfreenect2/<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2$ <span class="token function">mkdir</span> build<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2$ <span class="token function">cd</span> build/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来再使用<code>CMake</code>针对<code>build</code>文件夹外的<code>CMakeLists</code>进行配置，需要注意的是，由于我已经配好了<code>Nvidia</code>的显卡驱动和<code>CUDA</code>，因此我指定使用<code>CUDA</code>编译，这样运行的时候就会有加速。此外配置的时候要指定安装到的位置，这个安装到的位置稍后安装ROS功能包的时候会用到，所以不建议修改，用默认的就行。</p><p>具体来说我们都是在命令行使用-D参数来指定<code>CMake</code>的宏及其值(D=define)，<code>CMakeLists</code>中会检查这些宏的值。如果你不是<code>CUDA</code>的话就把后面指定<code>CUDA</code>的宏删掉即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ cmake <span class="token punctuation">..</span> -DCMAKE_INSTALL_PREFIX<span class="token operator">=</span><span class="token variable">$HOME</span>/freenect2 -DENABLE_CXX11<span class="token operator">=</span>ON -DCUDA_PROPAGATE_HOST_FLAGS<span class="token operator">=</span>off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118184945046.png" alt="CMake配置工程"></p><p>可以看到<code>CMake</code>配置的流程还是很清晰的，首先会去寻找系统中的编译器版本然后再去检查当前编译器是否至此指定版本的语法，接下来去寻找包等等。全部配置过程没有问题的话就会显示最后的三句话，当前<code>build</code>编译空间下也多出来很多中间文件。<code>Makefile</code>就是稍后<code>make</code>解析的对象。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118185449344.png" alt="配置的结果"></p><p>然后我们make编译即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我这里的编译可以说是顺风顺水，主要原因其实是我已经配置过一遍了，这是写教程时候删掉了全部的文件重头再来的结果。<strong>其实在第一次配的时候在编译这里遇到了两三个问题</strong>，不过我都解决掉了，现在没有办法把这些问题复现出来。这里挖个坑，下一次装机补上。主要的两个问题是第一次会报错不存在一个叫<code>libGL.so</code>的共享库，第二次则是在最后编译到100%之后链接的时候报错说没有定义的引用：<code>undefined reference to _glapi_tls_Current</code>。</p><p>其实这两个问题都和<code>OpenGL</code>这个图形库有关（<code>Graphic Librar</code>y）。图形负责渲染材质等等，是将数据显示到我们的显示器上的库，包括看到的桌面、窗口等等都是用图形库渲染出来的。而<code>Kinect</code>捕获到的数据要转成图片显示，就必然会用到<code>OpenGL</code>这个库。第一个报错是因为管道断开（<code>libGL.so</code>是一个软连接），重新链接就行，第二个报错则是因为<code>libGL.so</code>链接到的共享库版本太老，指定一个更新的即可。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118185715177.png" alt="编译的过程"></p><p>最后，由于<code>libfreenect2</code>最终生成的是一个驱动，因此他最终生成的结果不仅有可执行文件，还有共享库，我们需要<code>make install</code>来安装一下共享库。说是安装，其实就是把共享库复制到指定的位置去，一般的项目都是把共享库复制到系统链接时候的搜索路径，这样编译的时候系统会自动的去搜索。<strong>不过由于我们上面CMake在配置的时候指定了安装位置，因此他其实会安装到我们的家目录下面</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从命令的输出确实能够看到安装的位置就是我们的家目录</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118190908729.png" alt="安装的结果"></p><h4 id="4-设置USB规则"><a href="#4-设置USB规则" class="headerlink" title="4. 设置USB规则"></a>4. 设置USB规则</h4><p>由于<code>libfreenect2</code>是一个驱动，因此他需要和底层的硬件做交互，所以需要设置一下<code>USB</code>规则。在<code>Linux</code>中所有的串口都是由一个叫<code>udev</code>的程序负责的，他相当于<code>Windows</code>的设备管理器。这里挖个坑，以后补上关于<code>udev</code>的内容。更多细节可以参考<a href="https://www.jianshu.com/p/dd6cecd7755a">这篇简书的博客</a></p><blockquote><p><strong>以下内容引用自简书博客</strong></p><p><strong>udev在linux的那个位置</strong></p><p>udev的守护进程在linux的位置在systemd中的位置如下所示，举个例子：如果向pc中插入一个usb设备，kernel在总线上发现这个设备，使用dirver初始化，在sysfs创建device目录等操作之后，将通知用户空间的udev，然后上层的显示层才能看到这个usb设备，并最终将它显示在desktop上：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/330043-6ecf51d6a519b4fe.png" alt="Systemd守护进程所处的位置"></p></blockquote><p>我们直接把规则文件复制到<code>udev</code>的配置文件夹下即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> <span class="token punctuation">..</span>/platform/linux/udev/90-kinect2.rules /etc/udev/rules.d/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-验证安装"><a href="#5-验证安装" class="headerlink" title="5. 验证安装"></a>5. 验证安装</h4><p>最后上面的步骤一步步做下来，应该是没有问题的，不过在编译驱动的时候我们观察到make最后在生成一个叫做<code>Protonect</code>的可执行文件。这个程序其实就是验证安装的程序。我们接上<code>Kinect</code>的连接线，然后运行这个程序，如果安装成功就能够看到下面的图片</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ ./bin/Protonect <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>四张图中左上角是深度图，左下角是RGB图像，右下角是点云的图像，右上角是带有RGB的点云的图像。需要注意的是，点云的图像是通过深度图推算出来的。深度图只有一个Depth通道，数值越大表示越远，看起来就越黑。而点云图是XYZ三个通道，分别表示点相对相机的的XYZ坐标。而右上角的点云则是RGBXYZ六个通道图片。右边看到，有<code>CUDA</code>加速喧嚷延迟基本都在10ms左右，速度还是非常快的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118193300100.png" alt="验证程序的运行结果"></p><h4 id="6-安装驱动可能遇到的问题"><a href="#6-安装驱动可能遇到的问题" class="headerlink" title="6. 安装驱动可能遇到的问题"></a>6. 安装驱动可能遇到的问题</h4><p>暂时没有，留待下次重装系统时候补充。</p><h3 id="C-安装ROS-Kinect深度相机功能包——iai-kinect2"><a href="#C-安装ROS-Kinect深度相机功能包——iai-kinect2" class="headerlink" title="C. 安装ROS Kinect深度相机功能包——iai_kinect2"></a>C. 安装ROS Kinect深度相机功能包——iai_kinect2</h3><p>就像在<code>Melodic</code>上使用<code>CV_Bridge</code>一样（挖个<code>Melodic</code>编译<code>CV_Bridge</code>的坑，以后补上），<code>iai_kinect2</code>也需要我们从<code>github</code>上下载源码然后编译。</p><p>在编译之后，我们想要通过Kinect获得深度图像、点云图像等等直接启动这个<code>iai_kinect2</code>中的节点就行。这个节点将会调用libfreenect，并将获取到的图像发布到指定的话题里，因此我们订阅指定的话题即可得到数据。</p><h4 id="1-下载并编译功能包"><a href="#1-下载并编译功能包" class="headerlink" title="1. 下载并编译功能包"></a>1. 下载并编译功能包</h4><p>由于iai-<code>kinect2</code>本质上是<code>ROS</code>的一个功能包，而<code>ROS</code>的功能包的发布都是以功能包的形式发布的，因此我们只需要把这个功能包下载到工作空间中并进行编译即可。为了不污染我们自己的工作空间，避免每次都要编译这个包，我们新创建一个叫做<code>install_iai_kinect</code>的工作空间的安装这个包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">mkdir</span> install_iai_kinect2<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">cd</span> install_iai_kinect2/<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ <span class="token function">mkdir</span> src<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ <span class="token function">cd</span> src/<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src$ catkin_init_workspace <span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src$ <span class="token function">cd</span> <span class="token punctuation">..</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ catkin_make<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118205323865.png" alt="初始化之后的工作空间"></p><p>然后git下载功能并安装依赖，注意这里如果前面改了<code>libfreenect</code>的安装路径的话，这里编译的时候要添加一个<code>CMake</code>的宏来指定<code>libfreenect</code>的路径，参考<a href="https://github.com/code-iai/iai_kinect2#install">文章</a>。</p><p>此外，在使用<code>rosdep</code>安装的时候会遇到一个“报错”（见下），这个其实是正常的，因为<code>kinect2_brideg</code>、<code>kinect2_cailbration</code>、<code>kinect2_caliration</code>、<code>kinect2_viewer</code>这四个节点被<code>rosdep</code>认为是功能包了，但他们其实都只是<code>iai_kinect2</code>的一部分。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ <span class="token function">cd</span> src/<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src$ <span class="token function">git</span> clone https://github.com/code-iai/iai_kinect2.git<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src$ <span class="token function">cd</span> iai_kinect2<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src/iai_kinect2$ rosdep <span class="token function">install</span> -r --from-paths <span class="token keyword">.</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src/iai_kinect2$ <span class="token function">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ catkin_make -DCMAKE_BUILD_TYPE<span class="token operator">=</span><span class="token string">"Release"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ERROR: the following packages/stacks could not have their rosdepc keys resolved<br>to system dependencies:<br>kinect2_bridge: Cannot locate rosdep definition for [kinect2_registration]<br>kinect2_calibration: Cannot locate rosdep definition for [kinect2_bridge]<br>kinect2_viewer: Cannot locate rosdep definition for [kinect2_bridge]<br>iai_kinect2: Cannot locate rosdep definition for [kinect2_registration]</p></blockquote><p>最后没有error就成功安装功能包了，但是不要忘记<code>source</code>一下，因为这个功能包不在<code>ROS</code>的元功能包中。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118205948236.png" alt="编译的结果"></p><h4 id="2-验证安装"><a href="#2-验证安装" class="headerlink" title="2. 验证安装"></a>2. 验证安装</h4><p>同样，经历过上面的步骤之后，我们脸上<code>Kinect V2</code>的连接线来跑跑节点，看看有没有问题。类似于<code>cv_bridge</code>，<code>iai-kinect2</code>编译之后会得到一个<code>kinect_bridge</code>，我们利用其中的launch文件来测试一下。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ <span class="token function">source</span> devel/setup.bash <span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ roslaunch kinect2_bridge kinect2_bridge.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118204334851.png" alt="launch启动整个kinect_bridge"></p><p>然后我们再开一个终端来看看节点图</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ rqt_graph <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看起来还不错，可以看到<code>kinect_bridge</code>其实只是一个交互的节点，他的后端数据处理都是依靠的其他的节点，<code>kinect2</code>负责调用<code>libfreenect</code>驱动，剩下的hd、sd、qhd分别负责处理高中低分辨率的图像。</p><p>不过由于rqt是通过rosmaster中的注册信息来画节点图的，因此没有被订阅的话题无法被显示出来，我们看看所有的话题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118203224904.png" alt="Kinect_Bridge节点图"></p><p>新开一个终端</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~$ rostopic list <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到有很多的话题，不过其实所有的话题分成三组，<code>hd</code>表示高分辨率，<code>qhd</code>表示中分辨率，<code>sd</code>表示低分辨率</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118203435667.png" alt="Kinect_Bridge发布的所有的画图"></p><p>最后其实<code>kinect_bridge</code>提供了可视化的节点，不过首先需要对kinect相机进行校准，否则是有偏差的，不过我们这里只是为了验证，因此跑起来看看</p><pre class="line-numbers language-bash"><code class="language-bash">rosrun kinect2_viewer kinect2_viewer kinect2 sd cloud<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看起来效果还不错，不过由于订阅的是低分辨的图片，因此图片放大之后实际上像素间就会出现一些缺失的黑色点</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118203934128.png" alt="可视化的结果"></p><h4 id="3-安装时候的一些说明"><a href="#3-安装时候的一些说明" class="headerlink" title="3. 安装时候的一些说明"></a>3. 安装时候的一些说明</h4><blockquote><h4 id="1-编译的时候弹出来警告"><a href="#1-编译的时候弹出来警告" class="headerlink" title="1. 编译的时候弹出来警告"></a>1. 编译的时候弹出来警告</h4><p>具体的警告如下图。只是警告而已，不是错误，不用管。因为<code>catkin</code>作为<code>cmake</code>的上级编译系统，最后还是调用的<code>g++</code>，<code>g++</code>在编译的是帮我们检查代码，警告我们哪里语法不规范啥的，没必要管，能用就行。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118202235817.png" alt="编译时候的警告"></p></blockquote><h4 id="4-安装功能包可能会遇到的问题"><a href="#4-安装功能包可能会遇到的问题" class="headerlink" title="4. 安装功能包可能会遇到的问题"></a>4. 安装功能包可能会遇到的问题</h4><blockquote><h4 id="1-CMake-Error-at-usr-lib-x86-64-linux-gnu-cmake-Qt5Gui-Qt5GuiConfig-cmake-27-message-：Qt5的报错"><a href="#1-CMake-Error-at-usr-lib-x86-64-linux-gnu-cmake-Qt5Gui-Qt5GuiConfig-cmake-27-message-：Qt5的报错" class="headerlink" title="1. **CMake Error at /usr/lib/x86_64-linux-gnu/cmake/Qt5Gui/Qt5GuiConfig.cmake:27 (message)**：Qt5的报错"></a>1. **CMake Error at /usr/lib/x86_64-linux-gnu/cmake/Qt5Gui/Qt5GuiConfig.cmake:27 (message)**：Qt5的报错</h4><p>具体报错如下图，即缺少了<code>libEGL.so</code>这个共享库</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118200845339.png" alt="Qt5报错"></p><p><strong>解决方法：</strong></p><p>和上面安装驱动时候遇到的报错差不多，估计是一个尿性，即软连接断了，先去<code>/usr/lib/x86-linux-gnu</code>下看看。果然，红色的字体，断开的链接。即<code>/usr/lib/x86_64-linux-gnu/libEGL.so</code>这个软连接本来指向的文件没了。不过看这个样子有一个1.1.0版本的，估计是某次<code>apt upgrade</code>时候更新了这个库。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ ll /usr/lib/x86_64-linux-gnu/libEGL.so* <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118201305342.png" alt="libEGL.so断开的软连接"></p><p>那么解决思路就很简单了，我们先删掉原有的断掉的链接，然后让他再指向新版本就行了，毕竟新版本一般都是向后兼容的。除了<code>Python2</code>到<code>Python3</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ <span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib/x86_64-linux-gnu/libEGL.so <span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ <span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/lib/x86_64-linux-gnu/libEGL.so.1.1.0 /usr/lib/x86_64-linux-gnu/libEGL.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在看着就没问题了，管道对了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118201854870.png" alt="重置libEGL.so的指向"></p><p>然后再进行编译即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118202028422.png" alt="功能包可以正常编译"></p></blockquote><h2 id="4-使用kinect-bridge"><a href="#4-使用kinect-bridge" class="headerlink" title="4. 使用kinect_bridge"></a>4. 使用kinect_bridge</h2><p>使用<code>kinect_bridge</code>其实特别简单，就是订阅话题而已，为此我们快速写一个<code>Python</code>脚本测试，注意测试时候新建的功能包的依赖要不要加<code>iai_kinect2</code>都行，因为<code>kinect_bridge</code>实现了低耦合性，所有的消息全部都是<code>ROS</code>中的标准消息类型，我这里加了。（挖个坑，以后出一个关于<code>Vscode</code>开发<code>ROS</code>的环境搭建，真的<code>VScode</code>越用越爽）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118210715487.png" alt="功能包的依赖"></p><p>正因为<code>kinect_bridge</code>中的消息全部都是<code>ROS</code>的标准消息，所有的图像都是<code>sensor_msgs/Image</code>或者<code>sensor_msgs/CompressedImage</code>。而点云则是<code>sensor_msgs/PointCloud2</code>，我们可以非常快速的写一个测试代码，代码见下（<strong>注意如果你要写C++的话不要在iai_bridge的工作空间中编译，会报错，因为Kinect_Bridge没有提供</strong>）</p><p>关于<code>ROS</code>中使用<code>conda</code>、还有<code>cv_bridge</code>、<code>ROS</code>使用<code>Python</code>等问题先挖个坑，后面补上文章</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /home/jack/anaconda3/envs/ros/bin/python</span><span class="token triple-quoted-string string">"""rospy 中使用 通过 kinect 获取点云的示例代码 """</span><span class="token triple-quoted-string string">"""@author: Jack Wang@copyright: Jack Wang@time: 2021-11-18"""</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> datetime<span class="token keyword">import</span> time<span class="token keyword">import</span> cv2<span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span class="token comment" spellcheck="true"># 我在 Python3 下编译了cv_bridge，所以要避免import了下载ROS时候一并下载的系统的Python2.7的cv_bridge</span><span class="token keyword">for</span> path_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"2.7"</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span>path_idx<span class="token punctuation">]</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>path_idx<span class="token punctuation">)</span>        <span class="token keyword">break</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> sensor_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Image<span class="token keyword">from</span> cv_bridge <span class="token keyword">import</span> CvBridge<span class="token keyword">class</span> <span class="token class-name">MyKinectViewer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    bridge <span class="token operator">=</span> CvBridge<span class="token punctuation">(</span><span class="token punctuation">)</span>    today<span class="token punctuation">:</span> str <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span>    start_sec<span class="token punctuation">:</span> float <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    font <span class="token operator">=</span> cv2<span class="token punctuation">.</span>FONT_HERSHEY_DUPLEX    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>msg<span class="token operator">=</span>f<span class="token string">"{Fore.GREEN}启动KinectBridge订阅节点！{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        subcriber <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/kinect2/sd/image_color_rect"</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>image_cb<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">image_cb</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">:</span> Image<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        cv_img <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>imgmsg_to_cv2<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        cv_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>cv_img<span class="token punctuation">,</span> f<span class="token string">"{self.today}, start times: {time.time()-self.start_sec:>.2f}"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span>        cv_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>cv_img<span class="token punctuation">,</span> f<span class="token string">"-- by Jack Wang"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"kinect_test"</span><span class="token punctuation">,</span> cv_img<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}关闭节点{Style.RESET_ALL}"</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>signal_shutdown<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"pressed esc"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"kinect_test"</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    mkv <span class="token operator">=</span> MyKinectViewer<span class="token punctuation">(</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出来，效果还不错</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118214830894.png" alt="节点效果图"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118214855870.png" alt="按下ESC键退出节点"></p><p>结合我之前写的<code>YOLO V5</code>的<code>ROS</code>图像处理节点，最后可以实现的效果（<code>Yolo V5</code>的<code>ROS</code>节点代码后面会发出来）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118220436969.png" alt="image-20211118220436969"></p><p>至此，本文全部结束，我们首先介绍了什么是<code>Kinect</code>相机；然后就<code>Kinect</code>相机的参数、工作原理进行了介绍；接下来讲解了如何在<code>Linux(Ubuntu)</code>上安装<code>Kinect V2</code>相机的驱动：<code>libfreenect2</code>和安装<code>ROS</code>中的<code>Kinect</code>相机调用节点；在最后我们给出了一个简单的小例子，来演示如何使用<code>iai-kinect2</code>功能包得到的图像数据。</p><p>关于iai-kinect2的更多使用教程，请看下一篇文章：<code>ROS</code>中<code>iai-kinect2</code>功能包的使用。</p><p>6200字，码字不易~，欢迎打赏~，一起推动开源事业进步</p>]]></content>
      
      
      <categories>
          
          <category> ROS杂篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> Kinect V2 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> melodic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo的个人技术博客搭建 —— Part-3 matery主题下的Hexo博客优化.md</title>
      <link href="/2021/11/14/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-3-matery-zhu-ti-xia-de-hexo-you-hua-md-md/"/>
      <url>/2021/11/14/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-3-matery-zhu-ti-xia-de-hexo-you-hua-md-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>hexo本身只是提供了一个博客的框架，博客网站的美化和优化还是需要靠自己配置主题。本讲将带领读者利用Matery主题对Hexo搭建的博客进行深度优化</p></blockquote><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Part-3-matery主题下的Hexo博客优化"><a href="#基于Hexo的个人技术博客搭建-——-Part-3-matery主题下的Hexo博客优化" class="headerlink" title="基于Hexo的个人技术博客搭建 ——  Part 3 matery主题下的Hexo博客优化"></a>基于Hexo的个人技术博客搭建 ——  Part 3 matery主题下的Hexo博客优化</h1><p>在前面的一章中，我们已经通过<code>hexo</code>在本地搭建出了一个博客。但是目前，这个博客还存在一些问题</p><ol><li><strong>目前博客网站运行在本地，所以只有我们自己能看到</strong></li><li><strong>Hexo默认的博客不够美观、功能不够多</strong></li></ol><p>针对上面两个我们，本章和下一章就将进行解决。本章首先解决第二个问题，即优化Hexo博客。</p><h2 id="1-为什么使用其他的Hexo主题？"><a href="#1-为什么使用其他的Hexo主题？" class="headerlink" title="1. 为什么使用其他的Hexo主题？"></a>1. 为什么使用其他的Hexo主题？</h2><p>在前面一章中我们讲过，<code>Hexo</code>主题的工作原理其实就是<code>Hexo</code>的主题里面写的<code>JavaScript</code>和<code>CSS</code>覆盖掉了<code>hexo</code>的<code>JavaScript</code>和<code>CSS</code>。而CSS决定了<code>Hexo</code>博客的外观，因此是否美观实际上取决于主题里的<code>CSS</code>。同样JavaScript决定了网页和我们的交互，因此网页的功能如何实际上也取决与我们的主题。因此，一个优秀的主题是有一个完美的<code>Hexo</code>博客的先决条件。有了一个优秀的主题，我们的博客不仅更加美观，功能也会更加强大。</p><p>因此我们对<code>Hexo</code>博客进行优化，实际上就是使用其他主题，并对这些主题进行配置、</p><p>后面，就将以<code>Hexo</code>的<code>matery</code>主题为例，进行优化</p><h2 id="2-基于Matery主题的Hexo博客优化"><a href="#2-基于Matery主题的Hexo博客优化" class="headerlink" title="2. 基于Matery主题的Hexo博客优化"></a>2. 基于Matery主题的Hexo博客优化</h2><p><code>Matery</code>主题是由国内的闪烁之狐（blinkfox）制作的一款美观的主题，包括我在写这篇博客时候我的博客所用的主题就是<code>Matery</code>。</p><p>之所以使用<code>Matery</code>主题，美观只是一个方面，更重要的是<code>Matery</code>以插件的形式提供了非常多优秀的程序，通过这些程序使得我们能够极大地优化我们的网站。</p><p>访问闪烁之狐的<a href="http://blinkfox.com/">Hexo博客</a>和他的<code>Matery</code>主题的<a href="https://github.com/blinkfox/hexo-theme-matery">Github</a>查看更多的信息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115010655463.png" alt="闪烁之狐的Matery主题示例"></p><p>接下来我们就将基于<code>Matery</code>主题来对我们的<code>Hexo</code>博客进行优化</p><blockquote><p>注意，下面的很多教程在<code>Matery</code>的<code>Github</code>上已经有介绍了，因此下面的介绍更多的是关注<code>Matery Github</code>上没有讲到的点</p></blockquote><h3 id="1-安装Matery"><a href="#1-安装Matery" class="headerlink" title="1. 安装Matery"></a>1. 安装Matery</h3><p><code>Matery</code>的<code>Github</code>中的中文说明已经讲过了，在<code>Hexo</code>博客文件夹下的<code>theme</code>文件夹<code>clone</code> 下<code>Matery</code>项目即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">cd</span> themes/<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test/themes$ <span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成之后，我们hexo博客看看效果</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test/themes$ <span class="token function">cd</span> <span class="token punctuation">..</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>发现和之前的博客并没有任何变化</strong>，这是因为我们需要在<code>Hexo</code>的配置文件中指定使用<code>Matery</code>主题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115011512753.png" alt="博客没有任何变化"></p><h3 id="2-切换Matery主题"><a href="#2-切换Matery主题" class="headerlink" title="2. 切换Matery主题"></a>2. 切换Matery主题</h3><p><code>vim</code>修改<code>hexo</code>博客根目录下的<code>_config.yml</code>，将<code>theme</code>的值改为 <code>hexo-theme-matery</code>，这样就启用了Matery主题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115011735922.png" alt="修改之后的值"></p><p>接下来运行一下博客，就能够看到效果了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，默认配置就已经非常漂亮了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115011929561.png" alt="Matery主题的首页"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115012203467.png" alt="Matery主题的底部"></p><p>但是这个默认的主题也有一些小问题，需要我们去修改，比如说网站的左上角的logo，中间浮动打印的语句，中间的github链接需要修改成我们自己的，我的梦想栏的语句需要修改成自己的，右下角的联系方式需要改成我们自己的……</p><p>除了这些个人信息配置以外，还有最关键的一点就是右上角选项卡除了<code>首页</code>以外，其他的点击都会直接没有对应的界面显示。<strong>这是因为Matery默认没有这些界面，需要我们自己配置</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115012428235.png" alt="点击后显示错误"></p><h3 id="3-添加缺失的页面"><a href="#3-添加缺失的页面" class="headerlink" title="3. 添加缺失的页面"></a>3. 添加缺失的页面</h3><p>在前面的一章中，我们讲到<code>hexo</code>中一篇博客的源文件是一个<code>.md</code>文件，通过使用<code>hexo generta</code>命令，hexo自动的为我们的博文生成一个网页以及对应的资源文件。而其实在<code>hexo</code>，中一个页面对应的也是一个<code>.md</code>文件，同样我们稍后使用<code>hexo generta</code>来生成新的页面。只不过页面对应的<code>.md</code>文件会和博客的<code>.md</code>存在一些不同</p><p>下面就将以添加<code>关于</code>界面为例，讲解Hexo的页面工作原理的同时带领读者配置<code>Matery</code>的页面</p><h4 id="A-添加关于About页面"><a href="#A-添加关于About页面" class="headerlink" title="A. 添加关于About页面"></a>A. 添加<code>关于About</code>页面</h4><p>我们首先在根目录下使用<code>hexo new page xxx</code>命令来生成一个新的页面。同样为了后续的讲解，我们首先保存下现在的目录结构</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> before_about.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> after_about.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> before_about.txt <span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们需要修改刚刚新生成的<code>.md</code>来说明这个是一个页面而非博客，这样稍后生成博客的时候就会生成出来一个新的页面</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim source/about/index.md <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将<code>index.md</code>修改为如下内容，当然日期可以按照你自己的来</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: aboutdate: 2021-11-15 01:37:51type: "about"<span class="token title important">layout: "about"<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115014047478.png" alt="修改后的index.md"></p><p>接下来我们生成一下添加后的博客，别忘了生成之前<code>clean</code>一下，清除掉之前的博客。同时下面由于要讲解原理，因此生成后我们输出一下生成之后的目录结构</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo clean<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo gen<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> after_about.txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们运行下博客看看效果</p><p>可以看到，此时点击<code>关于</code>就可以正常显示处页面了，底部则显示出我们的制作的项目</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115014533558.png" alt="正常显示的关于页面"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115014620968.png" alt="关于页面的底部"></p><p>当然，这些信息都是默认的信息，我们稍后是肯定需要修改成我们自己的。不过在这之前，先别着急，我们先了解一下<code>hexo</code>是怎么样新生成一个页面的</p><h4 id="B-Hexo是怎么样生成新的页面的？"><a href="#B-Hexo是怎么样生成新的页面的？" class="headerlink" title="B. Hexo是怎么样生成新的页面的？"></a>B. Hexo是怎么样生成新的页面的？</h4><p>我们利用上面两次输出的目录结构，来看看添加、生成页面之后博客目录结构的变化</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim -d before_about.txt after_about.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先是发布的博客的<code>public</code>文件夹下多了非常多的东西。除了我们之前添加的第一篇博客外，还多出了<code>about</code>、<code>css</code>、<code>js</code>等一些文件夹</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115015145727.png" alt="Public文件夹的变化"></p><p>此外，我们的源代码文件夹中也多了<code>about</code>文件夹和在其下面的<code>index.md</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115015222432.png" alt="source文件夹下的不同"></p><p>实际上到这里你应该能够猜出来了，<code>hexo</code>和<code>matery</code>生成新的页面的工作原理就是：</p><ul><li>首先<code>hexo</code>认为<code>source</code>文件夹下的一个文件夹就是一个页面，这个页面必须要有一个<code>index.md</code>来说明这个页面的信息，例如上面指定生成页面使用的模板</li><li>其次，<code>matery</code>在生成项目的时候，会在public下生成新的网站的配置文件来修改默认的页面。因此我们的确可以修改这个<code>public</code>下面的<code>matery</code>生成的资源文件。但是并不推荐这样做，因为所有的修改在后续<code>generate</code>之后就会丢失。与此相比，下面会介绍更好的修改、配置<code>matery</code>主题的方式</li></ul><p>最后，我们依照<code>Matery Github</code>（<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">链接</a>）中的<code>README</code>的指引，如法炮制添加剩下的所有页面。</p><p>完成了之后，你可以尽情的探索一下新得到的页面。</p><h3 id="4-配置Matery主题"><a href="#4-配置Matery主题" class="headerlink" title="4. 配置Matery主题"></a>4. 配置Matery主题</h3><p>上面我们通过简单的Matery主题的配置得到了一些界面，下面我们就将进一步配置Matery主题。</p><p>授人以鱼不如授人以渔，因此下面我会首先讲解Matery主题的配置是如何工作的而非单纯的罗列，在讲解完原理之后会留下我参考过的不错的链接，读者可以去里面根据自己的需求配置。</p><p>下面将以安装文章字数插件为例进行讲解。</p><h4 id="A-文章字数统计"><a href="#A-文章字数统计" class="headerlink" title="A. 文章字数统计"></a>A. 文章字数统计</h4><p>细心地读者已经发现，在我们上面的博客底部其实是没有文章字数统计的，而闪烁之狐的实例网页中却具有文章字数统计。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115021145362.png" alt="我们的界面"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115021216163.png" alt="闪烁之狐的网站"></p><p>实际上，这个功能是依靠第三方插件<code>+Matery</code>配置完成的。我们首先下载这个插件，不过注意，我们在前面安装了<code>cnpm</code>，因此使用<code>cnpm</code>安装即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ cnpm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成之后，我们还要修改<code>theme</code>文件夹下<code>Matery</code>主题的配置文件来激活插件，<strong>注意是Matey主题的配置文件</strong>。因为页面的样式信息都是Matery负责的。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim themes/hexo-theme-matery/_config.yml <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改为</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115021824246.png" alt="修改后的_config.yml"></p><p>然后我们同样clean之后generate看看效果</p><p>可以看到，已经出现统计信息了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115021949461.png" alt="底部具有了统计信息"></p><h4 id="B-Matery的配置是如何工作的？"><a href="#B-Matery的配置是如何工作的？" class="headerlink" title="B. Matery的配置是如何工作的？"></a>B. Matery的配置是如何工作的？</h4><p>事实上，<code>Matery</code>主题依靠其主题文件夹下的<code>_config.yml</code>来进行配置。这个文件中提供了诸如：网站上方选项卡的选项、个人信息、头像、logo等资源文件位置这类的配置，还有是否激活xx插件、xx效果等配置。因此我们通过<code>Matery</code>的<code>_config.yml</code>来进行配置。</p><p>在我们配置完了之后，在<code>generate</code>的过程中，<code>matery</code>就会根据我们的配置来生成对应的文件。可以说是非常方便。</p><p>例如我们修改在关于页面中显示的个人信息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115023301903.png" alt="修改个人信息"></p><p>同样，我们修改之后clean、gen、server来看看效果</p><p>可以看到，相关信息已经被修改了，不过由于我没有改头像，因此头像没有变</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115023432763.png" alt="修改后的效果"></p><p>此外，由于闪烁之狐大佬良好的代码风格，因此在<code>Matery</code>的配置文件夹下，几乎可以看到所有的配置以及修改方式~。大家可以多试试</p><p>此外，推荐一个我参考过的博客，他也是基于<code>Matery</code>进行了配置和优化，并且自己改了一些<code>JavaScript</code>，以实现更好的效果，<a href="https://m3df.xyz/2020/06/13/e9fff968/">零下三度的极寒的博客</a></p><p>最后，本章到了这里就结束了。在本章我们首先讲解了为什么要使用第三方的<code>Hexo</code>主题，以及为什么使用<code>Matery</code>主题。接下来我们结合两个案例讲解了如何对<code>Matery</code>主题进行配置并解释了<code>Matery</code>配置的工作原理，在明白工作原理之后，大家去修改自己的博客网站就会得心应手很多。最后我们提供了其他的参考链接来帮助大家配置自己的博客网站。</p><p>在下一章中，我们将讲解如何低成本的把自己的博客部署到公网上去，使得所有人都能够访问你的博客。</p><p>码字不易，3100字，欢迎打赏~，一起推动开源事业~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人技术博客搭建 —— Part 2 Hexo快速建站以网站基础信息配置</title>
      <link href="/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-2-hexo-shi-yong-he-ji-chu-pei-zhi-md/"/>
      <url>/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-2-hexo-shi-yong-he-ji-chu-pei-zhi-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解如何使用Hexo快速搭建出一个博客网站，接下来对<code>Hexo</code>搭建的博客网站进行介绍，最后对Hexo搭建的博客网站进行网站基础信息的设置。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113193858319.png" alt="快速建站最终实现的效果"></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Part-2-Hexo快速建站以网站基础信息配置"><a href="#基于Hexo的个人技术博客搭建-——-Part-2-Hexo快速建站以网站基础信息配置" class="headerlink" title="基于Hexo的个人技术博客搭建 —— Part 2 Hexo快速建站以网站基础信息配置"></a>基于Hexo的个人技术博客搭建 —— Part 2 Hexo快速建站以网站基础信息配置</h1><p>在前面的章节中，我们已经讲解了配置<code>Hexo</code>的开发环境，本节将讲解如何使用Hexo快速建立自己的个人博客以及对个人博客进行基本信息设置</p><h2 id="1-Hexo快速建站"><a href="#1-Hexo快速建站" class="headerlink" title="1. Hexo快速建站"></a>1. Hexo快速建站</h2><blockquote><p>前面说过，<code>Hexo</code>搭建得到的博客本质上就是一个文件夹，因此<code>Hexo</code>进行的各种操作都是对这个文件夹里的文件进行操作。</p></blockquote><h3 id="1-初始化博客-——-hexo-init"><a href="#1-初始化博客-——-hexo-init" class="headerlink" title="1. 初始化博客 ——  hexo init"></a>1. 初始化博客 ——  <code>hexo init</code></h3><p><code>Hexo</code>提供了init命令来初始化一个博客，为此我们首先新建一个目录用来存放博客的所有文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">mkdir</span> blog-test<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ hexo init blog-test/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>hexo init</code>本质上就是去<code>github</code>上克隆<code>hexo starter</code>项目</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113194931504.png" alt="hexo init初始化博客的过程"></p><h3 id="2-运行博客-——-hexo-server"><a href="#2-运行博客-——-hexo-server" class="headerlink" title="2. 运行博客 —— hexo server"></a>2. 运行博客 —— <code>hexo server</code></h3><p>接下来，在博客所在的文件夹的根目录下运行<code>hexo server</code>，来启动<code>hexo</code>的服务程序，这样就可以显示出我们的博客网站。<code>hexo</code>默认是带有一个欢迎界面的，因此即便我们什么都不做也可以正常的运行</p><pre><code>(base) jack@jack-Alienware-m15-R3:~/project$ cd blog-test/(base) jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo server</code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113195611688.png" alt="image-20211113195611688"></p><p>运行之后浏览器中访问该端口就能够看到默认的界面，不过默认的界面的问题还是比较多的，比如网站用的默认主题并不是非常好看、网站的信息都不是，后面我们会慢慢优化。这里看到的效果如下</p><p>可以看到左下角的版权信息是默认的人名，左上角的选项卡选项也很少，右侧的菜单栏消息也很少，下一步我们就将慢慢改掉默认的界面</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113205754034.png" alt="朴素的Hexo"></p><p>为了等下讲解<code>Hexo</code>的原理，我们这里先创建三个文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> before_gen.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> after_gen.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> added_gen.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> before_gen.txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-生成博客-——-hexo-clean-amp-hexo-generate"><a href="#3-生成博客-——-hexo-clean-amp-hexo-generate" class="headerlink" title="3. 生成博客 —— hexo clean &amp; hexo generate"></a>3. 生成博客 —— <code>hexo clean</code> &amp; <code>hexo generate</code></h3><p>前面说道，<code>Hexo</code>的工作原理是通过<code>Markdown</code>引擎将<code>Markdown</code>格式的文本渲染成<code>HTML</code>，因此每一次我们在写完文章之后都需要生成一下博文，注意<code>hexo</code>提供了简写命令，因此g、gen、generate都是可以的</p><pre><code>(base) jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo gen</code></pre><p>可以看到生成了不少文件内容</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113215116668.png" alt="hexo gen生成博文"></p><p>最后输出一下目录方便后面查看hexo的运行原理</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> after_gen.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-新加一篇博客-——-hexo-new"><a href="#4-新加一篇博客-——-hexo-new" class="headerlink" title="4. 新加一篇博客 —— hexo new"></a>4. 新加一篇博客 —— <code>hexo new</code></h3><p>我们自己添加博客，需要使用<code>hexo new 文章名</code>，如果文章名称中含有特殊字符，需要用<code>''</code>包裹起来</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo new 第一篇博文<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新添加的博客在<code>source/_posts/</code>下，使用编辑器打开即可，后面会写一个<code>Typora + 腾讯云床</code>的博客编写环境教程，挖个坑</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token keyword">echo</span> <span class="token string">"# 大标题"</span> <span class="token operator">>></span> source/_posts/第一篇博文.md <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来继续生成博客，然后我们启动server来看看我们新写的博文，server的简写是s</p><p>注意，在生成前需要用clean清除一下中间的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo clean<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo gen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113220005285.png" alt="新添加一篇博文"></p><p>可以看到多了一篇文章</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113220330894.png" alt="添加文章之后的结果"></p><p>同样，我们记录一下，方便后面讲解原理</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> added_gen.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上就是关于<code>Hexo</code>的一些基础命令使用</p><h2 id="2-Hexo的运行原理"><a href="#2-Hexo的运行原理" class="headerlink" title="2. Hexo的运行原理"></a>2. Hexo的运行原理</h2><h3 id="1-Hexo的目录结构"><a href="#1-Hexo的目录结构" class="headerlink" title="1. Hexo的目录结构"></a>1. Hexo的目录结构</h3><p>我们通过<code>tree</code>命令来查看</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree -L 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，每个文件/文件夹的作用为：</p><ul><li><code>_config.yml</code>：网站的<strong>基础配置</strong>信息，可以在这里配置网站的一些基本参数，例如作者等等。<strong>之所以是基础配置信息，是因为使用不同的主题将会在极大程度上修改、覆盖这里的配置信息</strong>。</li><li><code>package.json</code>：Hexo生成网页、运行服务器等的应用程序信息。<code>EJS</code>, <code>Stylus</code> 和 <code>Markdown renderer</code> 已默认安装，可以由我们自由移除。</li><li><code>scaffolds</code>：模版文件夹。当您生成、新建文章时，<code>Hexo</code> 会根据 <code>scaffold</code> 来建立文件。<strong>不建议修改</strong></li><li><code>source</code>：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</li><li><code>themes</code>：主题文件夹。<code>Hexo</code> 会根据主题来生成静态页面。</li></ul><p>这些文件、文件夹中对我们而言最重要的就是<code>_config.yml</code>、<code>themes</code>、<code>source</code>这三个，其他的其实一般我们用不到也不需要改</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114095916621.png" alt="Hexo博客的架构"></p><h3 id="2-Hexo是如何生成和发布的博文"><a href="#2-Hexo是如何生成和发布的博文" class="headerlink" title="2. Hexo是如何生成和发布的博文"></a>2. Hexo是如何生成和发布的博文</h3><p>上面从整体上介绍了<code>Hexo</code>的目录结构。下面我们将深入了解一下<code>Hexo</code>生成博文的原理。</p><p>我们上面使用tree生成了三次目录结构，接下来我们查看下生成博文和添加博文之后博客项目的变化，使用<code>vim -d</code>比较下三个文件的内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim -d before_gen.txt after_gen.txt added_gen.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，我们编写的博客都被添加到了<code>source/_posts</code>文件夹下，而我们运行<code>hexo generate</code>后生成的静态博文网页资源就都放在<code>public</code>文件夹下，具体来说，文章放在以日期为名的系列文件夹下，<code>CSS</code>等资源文件则是单独放置</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113223040926.png" alt="hexo new、add之后文件目录的变化"></p><h3 id="3-Hexo是如何管理主题的"><a href="#3-Hexo是如何管理主题的" class="headerlink" title="3. Hexo是如何管理主题的"></a>3. Hexo是如何管理主题的</h3><p>下面我们通过我当前的这个博客来了解下<code>Hexo</code>是如何管理主题的，以及主题是如何工作的</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/hexo-blogs$ tree themes/  -L 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，<code>theme</code>文件夹下，一个文件夹就是一个主题。一个主题内部又有其自身的结构，不同的目录有不同的作用。例如<code>language</code>负责不同语言的博文的设置，<code>source</code>则存放主题的<code>css</code>、<code>js</code>等资源文件，<code>_config.yml</code>则负责主题的配置。</p><p><strong>因此在后续我们美化、深度定制Hexo时候就是修改下载好的主题</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114021748798.png" alt="Hexo的主题目录"></p><h2 id="3-Hexo-基础信息配置"><a href="#3-Hexo-基础信息配置" class="headerlink" title="3. Hexo 基础信息配置"></a>3. Hexo 基础信息配置</h2><p>前面我们讲到，<code>Hexo</code>自身的<code>_config.yml</code>虽然负责整个项目的配置，但是通常会被我们自己下载的主题的<code>_config.yml</code>所覆盖，因此我们只在Hexo的<code>_config.yml</code>中进行一些基础信息的配置，以便于我们为我们的博客打上自己的信息。</p><p>首先通过<code>vim</code>或者其他编辑器打开根目录下的<code>_config.yml</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim _config.yml <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114022512202.png" alt="Hexo 根目录下的配置文件"></p><h3 id="1-个人信息设置"><a href="#1-个人信息设置" class="headerlink" title="1. 个人信息设置"></a>1. 个人信息设置</h3><p>我们只需要修改 <code># Site</code>中的信息即可，这样将网站的默认信息改为我们自己的信息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114023546668.png" alt="修改后的个人信息"></p><h3 id="2-URL修改"><a href="#2-URL修改" class="headerlink" title="2. URL修改"></a>2. URL修改</h3><p>注意，<code># URL</code>下的内容修改则在未来将会在别人从我们的网站中复制内容之后作为后续的内容提醒版权，此外也会在文章底部说明版权。</p><p>我们暂时先不做这个修改，等后续博客上线、具有具体的域名/网址后再进行修改。</p><p>进行完上面所有的配置之后，我们就可以查看最终的效果了，我们开启下server查看效果</p><p>可以看到首页的文字和页脚的信息已经改掉了，当然，每篇文章里作者的信息也已经改变了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114023717905.png" alt="修改后的首页"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114023757242.png" alt="修改后的页脚信息"></p><p>至此，本章就已经结束了。本章我们首先讲解了<code>Hexo</code>的基础命令，然后研究了<code>Hexo</code>的目录结构和工作原理，方便我们后续修改，最后我们对网站的基础信息做了修改，更多的网站内容和信息的设置详见下一章~</p><p>码字不易，2200多字，欢迎打赏~，一起推动开源事业进步~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人技术博客搭建-Part 1 Hexo介绍以及环境搭建</title>
      <link href="/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-1-hexo-jie-shao-yi-ji-huan-jing-da-jian-md/"/>
      <url>/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-1-hexo-jie-shao-yi-ji-huan-jing-da-jian-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍什么是Hexo，为什么我们要使用Hexo搭建我们的博客以及Hexo环境搭建</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113024418805.png" alt="Hexo官网"></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-Part-1-Hexo介绍以及环境搭建-md"><a href="#基于Hexo的个人技术博客搭建-Part-1-Hexo介绍以及环境搭建-md" class="headerlink" title="基于Hexo的个人技术博客搭建-Part 1 Hexo介绍以及环境搭建.md"></a>基于Hexo的个人技术博客搭建-Part 1 Hexo介绍以及环境搭建.md</h1><p>在前一章概述中，我们讲解了为什么我认为一个Geek需要一个个人技术博客，并且简单的展示了最终效果，在接下来的章节里，我将一步步的介绍如何打造这样的效果。</p><h2 id="1-What-is-Hexo"><a href="#1-What-is-Hexo" class="headerlink" title="1. What is Hexo"></a>1. What is Hexo</h2><blockquote><p>等等，什么是<code>Hexo</code>？</p></blockquote><p>在开始学习前，我们需要<strong>首先</strong>知道我们将要学的东西是什么以及学习它能带来的好处（为什么要学他），这样我们学起来会轻松很多。因为这样做我们首先对需要学的东西搭建了一个大的框架，后续的学习都是在填充它，不断丰满这个框架，并且也有了充足的动力去学习。</p><ul><li>正如<code>Hexo</code>官网上所说：<strong>Hexo是一个快速、简洁且高效的博客框架</strong>。（<del>虽然这个官网充满了不少广告</del>）</li></ul><p>所谓框架，即指已经为我们构建了基本的博客工具和博客结构（框架），我们后续只需要在这个框架上不断的填充（发布自己的文章）、修改（修改<code>Hexo</code>的代码）。因为<code>Hexo</code>开源，因此我们实际上可以针对<code>Hexo</code>进行任意程度的自定义修改，只有你想不到，没有你改不了。非常庆幸的是，<code>Hexo</code>的作者是台湾人，因此他的官方文档的中文支持是非常好的，这也为我们使用<code>Hexo</code>提供了便利。</p><ol><li><code>Hexo</code>是基于<code>Node.js</code>开发的应用（因此我们稍后在安装的时候会安装<code>Node.js</code>的环境）。借助于<code>Node.js</code>，<code>Hexo</code>可以快速的渲染出漂亮的文章</li></ol><blockquote><p><strong>什么是<code>Node.js</code></strong></p><p>说清这个问题，要说的可不少。接触过网络的人都应该知道，前端页面是由<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>三大技术/三件套支持的，其中<code>HTML</code>负责定义网页改在哪个地方显示什么内容，<code>CSS</code>定义哪个地方的哪个内容该以什么样的方式显示，<code>JavaScript</code>则定义当你与这个内容交互的时候会有什么样的效果。</p><p>举个简单例子，在<a href="https://www.baidu.com/">百度</a>的首页，</p><ol><li>为什么百度的Logo会显示在中间，而备案等网站信息显示在底部？–&gt; <code>HTML</code></li><li>为什么百度的背景是白色的，而不是黑色？  –&gt; <code>CSS</code></li><li>为什么鼠标悬停在左上角的更多的时候会弹出来浮窗？  –&gt; <code>JavaScript</code></li></ol><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113031023828.png" alt="百度的首页"></p><p>正是因为有了这三件套，我们的网页变得多姿多彩了起来，有有价值的信息(<code>HTML</code>)、漂亮的页面(<code>CSS</code>)和友好的交互(<code>JavaScript</code>)。</p><p>然而，渐渐地，<strong>本来地位平等的三件套逐渐开始出现区别</strong>。<code>HTML</code>和<code>CSS</code>都是静态的，在编写结束之后用户能看到的内容就已经固定（关于模板稍后再说），当用户访问这个网页，看到的就是其中的内容；然而<code>JavaScript</code>却由于需要处理的用户的操作不同而做不同的处理，例如在百度的页面中，如果我不是悬浮而是右击怎么办？如果我不是悬浮而是掠过怎么办？正是由于需要处理诸多用户导致的多种多样的Event，<code>JavaScript</code>也具有了if-else等编程语言常见的语句。<strong>渐渐地，随着技术的进步，JavaScript需要处理的问题越来越多，在其能力变强的同时，JavaScript也变得越来越像一门编程语言</strong>。</p><p>然而，这个时候的<code>JavaScript</code>还并不能独当一面。因为在最早的网页中，<code>JavaScript</code>、<code>HTML</code>、<code>CSS</code>是绑定的三件套，当用户访问某个网页，服务器会将该网页的三件套发送给用户，然后由<strong>用户的浏览器解析、渲染、执行HTML、CSS、JavaScript三件套</strong>，从而显示网页。因此这个时候的<code>JavaScript</code>是无法脱离浏览器的。我们从另一个角度考虑，由于JavaScript是由浏览器解析执行的，因此其可以看做是一门解释性语言，在执行<code>JavaScript</code>的时候，CPU执行的机器码来自于其<code>解释器</code>——浏览器。</p><p>后来随着，<code>JavaScript</code>的功能越来越强大，简单的在网页中进行交互已经完全发挥其能力了。因此就出现了诸多项目，这些项目独立于传统浏览器，基于浏览器的<code>JavaScript</code>解析器内核（学名：引擎）亦或是自己编写了<code>JavaScript</code>的解析器来执行<code>JavaScript</code>。至此，<code>JavaScript</code>已经能够独立于浏览器被单独执行了，而非必须在浏览器中以网页的形式打开。</p><p>在前面介绍了那么多之后，终于，到了我们的主角，<code>Node.js</code>。大名鼎鼎的<code>Node.js</code>其实就是基于<code>Chrome V8</code> 引擎的 <code>JavaScript</code> 运行时环境。简单的来说，它能够利用<code>Chrome V8</code>引擎来解析、执行<code>JavaScript</code>。<code>Node.js</code>可以粗暴的理解成<code>JavaScript</code>的解释器。基于此，<code>JavaScript</code>在很多方面都很像<code>Python</code>，包括包管理器、解释器等等</p></blockquote><ol start="2"><li><code>Hexo</code>利用<code>Markdown</code>来作为源文章，其内置<code>Markdown</code>的渲染引擎，我们只需要书写Markdown，而后通过<code>Hexo</code>就能够生成<code>HTML</code>等前端文件，非常方便</li></ol><blockquote><p>正如下面这张图，这篇文章也是我用Markdown写出来的，在后续部分除了网站搭建以外，还会讲讲如何搭建写作环境，以实现畅快写作</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113110048831.png" alt="我的Markdown写作环境：Typora+腾讯云图床+Dracula主题"></p></blockquote><ol start="3"><li>Hexo搭建出的博客网站是一个静态网站，这就意味着单纯<code>Hexo</code>本身只能提供博客的显示、有限的交互，如果需要登录、发表评论这类需要后端程序支持的运用，就需要第三方插件了。如果非常需要这些功能，要么使用<code>WordPress</code>，要么折腾<code>Hexo</code>的插件</li></ol><p>到这里，你应该明白了<code>Hexo</code>是一个基于<code>Node.js</code>的程序，他帮助我们渲染文章、管理文章，通过这个<code>Hexo</code>我们可以快速、低成本的部署自己的博客</p><h2 id="2-Why-is-Hexo"><a href="#2-Why-is-Hexo" class="headerlink" title="2. Why is Hexo"></a>2. Why is Hexo</h2><blockquote><p>Ok，我知道了什么<code>Hexo</code>，可是为什么要用它它？</p></blockquote><p>事实上，选取<code>Hexo</code>作为我们的博客网站框架来帮助我们搭建技术博客有很多好处：</p><ol><li><code>Hexo</code>框架的学习成本非常低，学起来非常快速，命令行几条语句就能够学会。在整个<code>博客搭建过程</code>中，学习<code>Hexo</code>可能只占很少的时间，主要时间在于挑选一个好看的主题并自己修改、添加自己的个人信息</li><li><code>Hexo</code>搭建的博客非常易于管理。<code>Hexo</code>管理的博客本质上是一个文件夹。因为Hexo搭建出的只是静态博客网站，因此不需要后端程序，所以网站所有的资源（<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>）都放在一个文件夹里就行。如果中间配置出问题了，那么直接删掉整个文件夹就行。</li><li><code>Hexo</code>搭建的博客部署、迁移非常方便。同样是由于Hexo管理的博客网站是一个文件夹，因此我们可利用Git<code>来保存</code>、同步你的博客。此外，由于<code>Github</code>和<code>Gitee</code>提供静态网页的<code>Page</code>服务，所以我们其实可以利用<code>Github</code>和<code>Gitee</code>等<code>Git</code>托管网站来托管我们的网站。防止网络攻击这些都由他们帮我们做好了。</li><li><code>Hexo</code>搭建的博客成本非常低。正是因为我们利用<code>Github</code>和<code>Gitee</code>来托管我们的网站，因此我们只需要花钱买域名和图床即可，买公网服务器什么的全部省掉了。</li><li><code>Hexo</code>具有非常多美观的主题。通过这些主题，我们只需要进行配置和有限的修改就能够做出来非常美观的博客网站。</li></ol><blockquote><p><code>Hexo</code>的官网上提供了非常多的主题（<a href="https://hexo.io/themes/">点击查看</a>），截止我写这篇文章的时候一共有348个官方收录的主题。除此以外还有非常多的未被收录的主题，强推我现在正在用的由<code>闪烁之狐</code>制作的<code>Matery</code>主题，后面也会讲解如何配置<code>Matery</code>主题，这是Matery主题的<a href="http://blinkfox.com/">展示网站</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113112326777.png" alt="Hexo官网收录的主题"></p></blockquote><ol start="6"><li>……（暂时只想到这几个点）</li></ol><h2 id="3-Hexo环境搭建"><a href="#3-Hexo环境搭建" class="headerlink" title="3. Hexo环境搭建"></a>3. Hexo环境搭建</h2><blockquote><p>开发第一步：搭建环境</p></blockquote><p>注意，由于我本人长期使用<code>Debian/Ubuntu</code>来做开发，因此以下教程都将是基于<code>Ubuntu</code>编写的教程。如果你是其他<code>Linux</code>发行版用户，适度修改即可；如果你是<code>Windows</code>用户，那么你还需要配置不少东西，知乎、简书上你还得查查。</p><p>下面我们就将一步步搭建Hexo环境出来</p><h3 id="1-安装Node-js环境"><a href="#1-安装Node-js环境" class="headerlink" title="1. 安装Node.js环境"></a>1. 安装Node.js环境</h3><p>前面说道，<code>Hexo</code>是基于<code>Node.js</code>开发的程序，因此其运行就需要<code>Node.js</code>，所以我们第一步就是安装<code>Node.js</code></p><blockquote><p>注意：官网上说明，<code>Hexo</code>需要的<code>Node.js</code>的版本不低于<strong>10.13</strong>，强烈建议<code>Node.js</code><strong>12.0</strong>以上的版本</p></blockquote><p>我们首先用<code>apt</code>查一下Ubuntu的仓库里的nodejs的版本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~$ <span class="token function">sudo</span> apt search nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113124733292.png" alt="apt搜索nodejs的结果"></p><p>不难看出来，<code>apt</code>仓库里的<code>nodejs</code>的版本过低，因此我们需要自己从<code>nodejs</code>官网上下载新版本的<code>nodejs</code>，<a href="https://nodejs.org/zh-cn/">官网传送门</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113124918179.png" alt="Node.js的官网"></p><p>在我写这篇文章的时候最新版是16.13，由于遵循Linux的传统，双数版本是LTS（Long Time Supported）版本，而单数版本都是尝鲜（Beta）版本，所以选择<strong>稳定版即可</strong></p><p>下载之后解压会得到一个文件夹，这个文件夹里<code>bin</code>目录放的就是官方替我们已经编译好了的二进制可执行文件，可以看到除了node，别的都是软连接</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ tree -L 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意，我这里是已经安装过了<code>Node.js</code>，正常情况下是没有<code>cnpm</code>的，稍后会安装<code>cnpm</code></p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113125500195.png" alt="解压之后的文件夹"></p><p>由于后续需要在命令行中调用<code>Node.js</code>，因此还要把这个<code>bin</code>文件的路径加入到<code>Shell</code>搜索可执行文件路径的<code>PATH</code>环境变量中，这里图方便直接在.<code>bashrc</code>中添加了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ vim ~/.bashrc  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113125903583.png" alt="添加了Node.js的PATH"></p><p>这样未来在命令行就可以正常的调用<code>node.js</code>和附带的<code>npm</code>了，测试一波</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ node <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113130048060.png" alt="测试Node.js"></p><p>OK，装完了<code>Node.js</code>，下一步</p><h3 id="2-安装cnpm"><a href="#2-安装cnpm" class="headerlink" title="2. 安装cnpm"></a>2. 安装cnpm</h3><p>前面讲到，Node.js中利用了Chrome V8引擎从而实现了JavaScript的运行时环境，从而做到了类似于解释器的效果。做过<code>Python</code>的人应该都会知道<code>pip</code>和<code>conda</code>，他们都是<code>Python</code>的包管理器（当然conda还可以管理环境）。通过<code>pip install xxx</code>或者<code>conda install xxx</code>就能安装Python的第三方库。</p><p><code>Node.js</code>也提供了类似的包管理工具，即<code>npm（Node.js Package Management）</code>，通过npm我们就能够安装<code>Node.js</code>的第三方库。</p><p>但是这些包管理工具的共性就是下载的这些库都是在包管理工具官网上维护的包，我们使用<code>xxx install xxx</code>的时候，会去<code>xxx</code>的包管理网站上搜索<code>xxx</code>包，然后下载。问题的关键就出在了下载这一步，由于这些包管理网站服务器都在国外，因此国内下载就会很慢。为此，我们通过换源来解决，即指定去国内的包管理网站上下载。在<code>pip</code>中我们可以指定<code>-i</code>参数，从而指定去清华源或者中科大源下载<code>Python</code>第三方包。而<code>npm</code>我们同样也可以指定<code>--registry</code>参数，从而指定国内的源（一般都是淘宝源）。</p><p>但是每次都使用<code>--registry</code>参数有点蠢，我们直接使用淘宝做好的<code>cnpm</code>包管理工具就行。<code>cnpm</code>和<code>npm</code>在作用上是一样的，不过对国内用户做了很不错的优化。</p><p>我们首先通过npm指定<code>--registry</code>参数来安装<code>cnpm</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ <span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span><span class="token string">"https://registry.npm.taobao.org"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍等片刻即可，警告是已经安装的别的包报的错，都后面没啥影响，因为我已经安装过了cnpm，所以下面的截图和你的可能不一样</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113131609169.png" alt="安装cnpm"></p><p>安装之后检查下安装是否成功，当然由于路径等环境不一样，输出结果也不太一样，但是能够正常输出就表示安装对了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ cnpm --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113131849887.png" alt="检查cnpm是否安装成功"></p><p>OK，下一步安装Git</p><h3 id="3-安装git"><a href="#3-安装git" class="headerlink" title="3. 安装git"></a>3. 安装git</h3><p>由于<code>Hexo</code>内置了博客的同步、部署等功能，因此<code>Hexo</code>依赖于<code>git</code>，所以我们首先需要安装<code>git</code></p><p>安装git就简单了，直接<code>apt</code>安装即可，同样由于我已经安装过了，所以输出会不一样</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ <span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113132146054.png" alt="apt安装git"></p><p>同样，查看下<code>git</code>的版本确认安装成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ <span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113132257442.png" alt="确认git安装成功"></p><h3 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h3><p>在前面所有必备的环境安装成功后，下面将安装<code>Hexo</code></p><p>前面由于已经安装了<code>cnpm</code>，因此我们直接使用<code>cnpm</code>来安装<code>Hexo</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ cnpm <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍等片刻就安装好了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113132546043.png" alt="安装hexo"></p><p>为了后续我们能够直接在命令行调用<code>hexo</code>的命令，我们把<code>hexo</code>的可执行文件添加到<code>PATH</code>中去</p><p>注意，<code>npm</code>和<code>cnpm</code>的工作原理都是把下载的包放到<code>node.js</code>所在的根目录的<code>lib</code>中，和<code>pip</code>是异曲同工之秒，我们打开之前node.js在的文件夹就能看到</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113133034708.png" alt="hexo的安装位置"></p><p>同样用<code>vim</code>编辑<code>.bashrc</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113133331507.png" alt="添加hexo可执行文件"></p><p>最后命令行查看下hexo的版本确认成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ hexo --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113133455333.png" alt="确认hexo安装成功"></p><p>至此，我们已经成功搭建了Hexo的环境。</p><p>本章结束~</p><p>本章我们首先讲解了什么是<code>hexo</code>，然后讲解了为什么我们要使用<code>hexo</code>，最后讲解了如何安装<code>hexo</code>。</p><p>下一节预告：<code>Hexo使用以及配置</code></p><p>码字不易，4000字，欢迎打赏~，一起为开源事业做贡献~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人技术博客搭建 —— Part 0 概述</title>
      <link href="/2021/11/12/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-0-gai-shu/"/>
      <url>/2021/11/12/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-0-gai-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列文章面向前端小白，希望以尽量简单而又不啰嗦的语言介绍如何搭建<code>基于Hexo的个人技术博客</code></p></blockquote><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Part-0-概述"><a href="#基于Hexo的个人技术博客搭建-——-Part-0-概述" class="headerlink" title="基于Hexo的个人技术博客搭建 —— Part 0 概述"></a>基于Hexo的个人技术博客搭建 —— Part 0 概述</h1><p>作为一个热爱开源的技术爱好者，我热爱学习新的技术、也热衷分享自己掌握的技术。然而分享却并非易事，想要将你的开源技术以个人技术博客的形式分享到互联网上需要有以下的诸多步骤：</p><ol><li>掌握HTML、CSS、JavaScript、Vue.js、Node.js等前端技术，至少能够写出来一个静态网站；或者在静态网页的基础上掌握Nginx、Apache等等后端技术，为前端提供登陆等功能以实现一个动态网站。</li><li>购买具有公网IP的服务器以运行你的网站，使得任何想要访问你网站的人都能够通过公网上的服务器来访问你的网站。</li><li>购买一个域名并为其添加DNS解析、安装SSL证书</li><li>Optional：中国域名<strong>xxxx.xxxx.cn</strong>下的网站需要进行备案</li><li>配置你的服务器以避免来自公网上的攻击</li><li>……</li></ol><p>完成了以上诸多步骤，你的技术网站才能够被其他人访问，别人才能够正常的来阅读你的技术博客。<strong>如此繁琐的程序，往往在前几步就吓退了不少人</strong>。也正是因为如此，就出现了不少帮助我们分享技术的工具，例如：帮助我们快速搭建博客而不需要自己掌握前端技术的<code>WordPress</code>、帮助我们维护文章的<code>CSDN</code>、<code>知乎</code>、<code>简书</code>等等；然而这些工具，也有他们的缺点</p><ul><li><code>WordPress</code>：尽管<code>WordPress</code>使得我们可以可视化的建立、管理前端页面。但是首先，上面的流程中诸多步骤仍然需要自己来完成，购买公网服务器、购买域名等等都是不小的开销；其次<code>WordPress</code>类似于<code>Vscode</code>，具有一个强大的插件系统，即软件本身只具有一定的功能，更多的功能需要靠插件来实现。然而和<code>Vscode</code>不同的是<code>WordPress</code>上好用的插件是要收费的，而且价格不菲（<del>忽略掉万能的淘宝</del>）</li><li><code>CSDN</code>、<code>简书</code>、<code>博客园</code>：尽管类似于<code>CSDN</code>、<code>简书</code>、<code>博客园</code>等这类博客网站已经帮助我们完成了网站安全防护、搜索引擎优化、文章编辑发布和管理等功能，他们的问题存在于盗帖实在太过于严重，很多时候搜索自己需要解决的问题，结果搜出来的全都是一模一样的、爬虫复制粘贴的文章，对解决问题毫无帮助，自己的文章和这些垃圾文章在一起，实在是于心不忍；其次，作为<strong>一名优秀的程序员，拥有自己的技术博客网站将会极大地帮助自己的未来，无论是求职也好亦或是求学……</strong></li></ul><p>因此自己搭建一个博客就非常有必要了。</p><p>本系列最终将通过一系列文章，来帮助你低成本（<strong>可能也就几块钱</strong>）的构建出属于你自己的、美观的个人技术博客</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211112180102412.png" alt="最终效果展示"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/12/hello-world/"/>
      <url>/2021/11/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
