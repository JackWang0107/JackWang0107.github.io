<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XV6：增加系统调用</title>
      <link href="/2022/10/22/xv6-zeng-jia-xi-tong-diao-yong/"/>
      <url>/2022/10/22/xv6-zeng-jia-xi-tong-diao-yong/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221022160403946.png" alt="为XV6增加系统调用"></p><h1 id="XV6：增加系统调用"><a href="#XV6：增加系统调用" class="headerlink" title="XV6：增加系统调用"></a>XV6：增加系统调用</h1><p>本文介绍了<code>XV6</code>操作系统（Unix Version 6）中系统调用的工作流程，此外也介绍了如何为<code>XV6</code>操作系统添加函数调用</p><h2 id="1-目标"><a href="#1-目标" class="headerlink" title="1. 目标"></a>1. 目标</h2><p>稍后我们会讲解<code>XV6</code>中的系统调用的工作原理，包括如何从用户态跳转到内核态，系统调用功能号等等。</p><p>但是光听不练假把式，所以为了更好的能够去理解<code>XV6</code>中系统调用的工作原理，我们还要实践一下，也就是说为<code>XV6</code>增加新的系统调用。</p><p>本文中我们需要增加两个系统调用，分别是<code>trace(const char *pathname)</code>和<code>getcount()</code></p><p>这两个系统调用的功能是，<code>trace</code>接受一个文件路径，此后系统开始追踪该文件，被追踪的文件每被打开一次，那么计数器就会加一，而<code>getcount</code>将会返回该文件被打开的次数。</p><p>两个系统调用的函数原型如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来我们将首先介绍<code>XV6</code>中系统调用的原理，而后再增加这两个系统调用</p><h2 id="2-系统调用全流程"><a href="#2-系统调用全流程" class="headerlink" title="2. 系统调用全流程"></a>2. 系统调用全流程</h2><p>前面我们介绍了<code>XV6</code>项目的<code>Makefile</code>，我们从<code>Makefile</code>的<code>kernel</code>和<code>fs.img</code>这两个目标中就能够看出来，</p><p>After looking the <code>Makefile</code> of <code>xv6</code> project, we know that the kernel and user program are mutually independent programs. They are conceptually equal, both of them have <code>main</code> functions.</p><p>For example, in <code>main.c</code>, the <code>main</code> function of the program looks like</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Bootstrap processor starts running C code here.</span><span class="token comment" spellcheck="true">// Allocate a real stack and switch to it, first</span><span class="token comment" spellcheck="true">// doing some setup required for memory allocator to work.</span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">kinit1</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> <span class="token function">P2V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// phys page allocator</span>  <span class="token function">kvmalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// kernel page table</span>  <span class="token function">mpinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// detect other processors</span>  <span class="token function">lapicinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// interrupt controller</span>  <span class="token function">seginit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// segment descriptors</span>  <span class="token function">picinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// disable pic</span>  <span class="token function">ioapicinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// another interrupt controller</span>  <span class="token function">consoleinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// console hardware</span>  <span class="token function">uartinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// serial port</span>  <span class="token function">pinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// process table</span>  <span class="token function">tvinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// trap vectors      // == 中断向量表</span>  <span class="token function">binit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// buffer cache</span>  <span class="token function">fileinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// file table</span>  <span class="token function">ideinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// disk </span>  <span class="token function">startothers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// start other processors</span>  <span class="token function">kinit2</span><span class="token punctuation">(</span><span class="token function">P2V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">P2V</span><span class="token punctuation">(</span>PHYSTOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// must come after startothers()</span>  <span class="token function">userinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// first user process        // == 开启第一个用户进程</span>  <span class="token function">mpmain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// finish this processor's setup</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>and the <code>main</code> function of user program <code>ls</code> looks like</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ls</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">ls</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>So, the user program and kernel are two independent program. </p><p><strong>Then, how does system call work</strong>?</p><h3 id="A-User-Program’s-Developer’s-Perspective-of-System-Call"><a href="#A-User-Program’s-Developer’s-Perspective-of-System-Call" class="headerlink" title="A. User Program’s (Developer’s) Perspective of System Call"></a>A. User Program’s (Developer’s) Perspective of System Call</h3><p>To start, we first look from the user program’s perspectie of system call.</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// User program test_trace.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"types.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stat.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"user.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"fcntl.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token constant">stdout</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"Start my syscall testing...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"ls count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"ls count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"ls count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"ls count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"pwd count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"test count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"pwd count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"666 count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"test finished\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>trace</code> and <code>getcount</code> are two system call. So from the perspective of user program, system call are just like function calls.</p><p>By using these <strong>special function</strong>, the user program can leverage functionalities offered by the kernel.</p><h3 id="B-Kernel’s-Operating-System’s-Perspective-of-System-Call"><a href="#B-Kernel’s-Operating-System’s-Perspective-of-System-Call" class="headerlink" title="B. Kernel’s (Operating System’s) Perspective of System Call"></a>B. Kernel’s (Operating System’s) Perspective of System Call</h3><p>Let us take a look of what does system call looks like in the perspective of kernel.</p><p><code>kill</code> is a system call, and it’s defined in <code>proc.c</code>.</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// proc.c</span><span class="token comment" spellcheck="true">// Kill the process with the given pid.</span><span class="token comment" spellcheck="true">// Process won't exit until it returns</span><span class="token comment" spellcheck="true">// to user space (see trap in trap.c).</span><span class="token keyword">int</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> ptable<span class="token punctuation">.</span>proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>pid <span class="token operator">==</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>      p<span class="token operator">-></span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Wake process from sleep if necessary.</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>state <span class="token operator">==</span> SLEEPING<span class="token punctuation">)</span>        p<span class="token operator">-></span>state <span class="token operator">=</span> RUNNABLE<span class="token punctuation">;</span>      <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>So, from the perspective of kernel, system call are just normal functions defined in kernel.</strong></p><p><strong>But here’s the problem, user program and kernel are two program, they are mutually independent. Since they do not link together, how can one program calls functions defined in another program</strong>?</p><h3 id="C-From-User-Program-to-Kernel"><a href="#C-From-User-Program-to-Kernel" class="headerlink" title="C. From User Program to Kernel"></a>C. From User Program to Kernel</h3><p>To solve the problem listed above, we need to understand the path from user program to kernel.</p><h4 id="1-usys-S"><a href="#1-usys-S" class="headerlink" title="1) usys.S "></a>1) <span id="scn"><code>usys.S</code> </span></h4><p>The first step of system call is <code>usys.S</code>. It’s a <code>AT&amp;T</code> format assembly, where it defines a macro function <code>SYSCALL</code></p><pre class="line-numbers language-assembly"><code class="language-assembly">#include "syscall.h"#include "traps.h"#define SYSCALL(name) \  .globl name; \  name: \    movl $SYS_ ## name, %eax; \    int $T_SYSCALL; \    retSYSCALL(fork)SYSCALL(exit)SYSCALL(wait)SYSCALL(pipe)SYSCALL(read)SYSCALL(write)SYSCALL(close)SYSCALL(kill)SYSCALL(exec)SYSCALL(open)SYSCALL(mknod)SYSCALL(unlink)SYSCALL(fstat)SYSCALL(link)SYSCALL(mkdir)SYSCALL(chdir)SYSCALL(dup)SYSCALL(getpid)SYSCALL(sbrk)SYSCALL(sleep)SYSCALL(uptime)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>##</code> is concate operator in assembly, so after passing <code>fork</code> as parameter of <code>SYSCALL</code>, the function looks like</p><pre class="line-numbers language-assembly"><code class="language-assembly">; SYSCALL(fork) will expand as#define SYSCALL(fork) \  .globl fork; \  fork: \    movl $SYS_fork, %eax; \    int $T_SYSCALL; \    ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Variable <code>SYS_fork</code> is defined in <span id="anchor"> <code>syscall.h</code> </span></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// syscall.h</span><span class="token comment" spellcheck="true">// System call numbers</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_fork    1</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_exit    2</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_wait    3</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_pipe    4</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_read    5</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_kill    6</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_exec    7</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_fstat   8</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_chdir   9</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_dup    10</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_getpid 11</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_sbrk   12</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_sleep  13</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_uptime 14</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_open   15</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_write  16</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_mknod  17</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_unlink 18</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_link   19</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_mkdir  20</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_close  21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Also, the value of variable <code>T_SYSCALL</code> is <code>64</code>, defined in <code>traps.h</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// These are arbitrarily chosen, but with care not to overlap</span><span class="token comment" spellcheck="true">// processor defined exceptions or interrupt vectors.</span><span class="token macro property">#<span class="token directive keyword">define</span> T_SYSCALL       64      </span><span class="token comment" spellcheck="true">// system call</span><span class="token macro property">#<span class="token directive keyword">define</span> T_DEFAULT      500      </span><span class="token comment" spellcheck="true">// catchall</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>In summary, the macro function <code>SYSCALL</code> defines a assembly function that store the system call number into <code>eax</code> register and then call #64 interrput.</p><p>And <code>usys.S</code> simply defines assembly functions for all system call.</p><h4 id="2-vector-S"><a href="#2-vector-S" class="headerlink" title="2) vector.S"></a>2) <code>vector.S</code></h4><p>The next stop system call is <code>vector.S</code>, #64 is defined here.</p><pre class="line-numbers language-assembly"><code class="language-assembly">.globl vector64vector64:  pushl $0  pushl $64  jmp alltraps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vector.S</code> simply push immediate number <code>0</code> and <code>64</code> into stack and then jump to function <code>alltraps</code>.</p><h4 id="3-trapasm-S"><a href="#3-trapasm-S" class="headerlink" title="3) trapasm.S"></a>3) <code>trapasm.S</code></h4><p><code>alltraps</code> is also an assembly function that defined in <code>trapasm.S</code></p><pre class="line-numbers language-assembly"><code class="language-assembly">.globl alltrapsalltraps:  # Build trap frame.  pushl %ds  pushl %es  pushl %fs  pushl %gs  pushal  # Set up data segments.  movw $(SEG_KDATA<<3), %ax  movw %ax, %ds  movw %ax, %es  # Call trap(tf), where tf=%esp  pushl %esp  call trap  addl $4, %esp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Before jump to function <code>trap</code>, function <code>alltraps.S</code> push register into stack and them call function <code>trap</code>.</p><h4 id="4-trap-c"><a href="#4-trap-c" class="headerlink" title="4) trap.c"></a>4) <code>trap.c</code></h4><p>Function <code>trap</code> is defined in <code>trap.c</code> and <code>trap</code> is a <code>C</code> function.</p><p>The source code of <code>trap</code> doesn’t matter, the only thing we need to know is that on line #9, it calls <code>syscall</code> function to deal different system call.</p><p>What matters is:</p><ol><li><code>trap</code> takes an argument <code>struct trapframe *tf</code>. Calling a function and passing argument is easy within <code>C</code>, we can call <code>trap</code> like <code>trap(mytf)</code> in <code>my_trap_call_test.c</code>. But how to pass argument when we call <code>C</code> functions in assembly codes like <code>trapasm.S</code>?</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//PAGEBREAK: 41</span><span class="token keyword">void</span><span class="token function">trap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> trapframe <span class="token operator">*</span>tf<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>tf<span class="token operator">-></span>trapno <span class="token operator">==</span> T_SYSCALL<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>killed<span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>tf <span class="token operator">=</span> tf<span class="token punctuation">;</span>    <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>killed<span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>tf<span class="token operator">-></span>trapno<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_TIMER<span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cpuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tickslock<span class="token punctuation">)</span><span class="token punctuation">;</span>      ticks<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ticks<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tickslock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_IDE<span class="token punctuation">:</span>    <span class="token function">ideintr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_IDE<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// Bochs generates spurious IDE1 interrupts.</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_KBD<span class="token punctuation">:</span>    <span class="token function">kbdintr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_COM1<span class="token punctuation">:</span>    <span class="token function">uartintr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">:</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_SPURIOUS<span class="token punctuation">:</span>    <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"cpu%d: spurious interrupt at %x:%x\n"</span><span class="token punctuation">,</span>            <span class="token function">cpuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token operator">-></span>cs<span class="token punctuation">,</span> tf<span class="token operator">-></span>eip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//PAGEBREAK: 13</span>  <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>tf<span class="token operator">-></span>cs<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// In kernel, it must be our mistake.</span>      <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n"</span><span class="token punctuation">,</span>              tf<span class="token operator">-></span>trapno<span class="token punctuation">,</span> <span class="token function">cpuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token operator">-></span>eip<span class="token punctuation">,</span> <span class="token function">rcr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"trap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// In user space, assume process misbehaved.</span>    <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"pid %d %s: trap %d err %d on cpu %d "</span>            <span class="token string">"eip 0x%x addr 0x%x--kill proc\n"</span><span class="token punctuation">,</span>            <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>pid<span class="token punctuation">,</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">,</span> tf<span class="token operator">-></span>trapno<span class="token punctuation">,</span>            tf<span class="token operator">-></span>err<span class="token punctuation">,</span> <span class="token function">cpuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token operator">-></span>eip<span class="token punctuation">,</span> <span class="token function">rcr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The answer to problem 1 is that <code>C</code> passes function argument via stack. When we call functions between <code>C</code>, it is the compiler who autmatically push the argument into stack and hide all details.</p><p>So, when we call <code>C</code> functions in assembly, we need to push the argument into stack by ourselves. That’s the reason why assembly function <code>alltraps</code> pushes register into stack. <strong>The order of push is exactly reverse to the definition of <code>trapframe</code></strong>:</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// definition of trapframe in x86.h</span><span class="token comment" spellcheck="true">//PAGEBREAK: 36</span><span class="token comment" spellcheck="true">// Layout of the trap frame built on the stack by the</span><span class="token comment" spellcheck="true">// hardware and by trapasm.S, and passed to trap().</span><span class="token keyword">struct</span> trapframe <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// registers as pushed by pusha</span>  uint edi<span class="token punctuation">;</span>  uint esi<span class="token punctuation">;</span>  uint ebp<span class="token punctuation">;</span>  uint oesp<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// useless &amp; ignored</span>  uint ebx<span class="token punctuation">;</span>  uint edx<span class="token punctuation">;</span>  uint ecx<span class="token punctuation">;</span>  uint eax<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// rest of trap frame</span>  ushort gs<span class="token punctuation">;</span>  ushort padding1<span class="token punctuation">;</span>  ushort fs<span class="token punctuation">;</span>  ushort padding2<span class="token punctuation">;</span>  ushort es<span class="token punctuation">;</span>  ushort padding3<span class="token punctuation">;</span>  ushort ds<span class="token punctuation">;</span>  ushort padding4<span class="token punctuation">;</span>  uint trapno<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// below here defined by x86 hardware</span>  uint err<span class="token punctuation">;</span>  uint eip<span class="token punctuation">;</span>  ushort cs<span class="token punctuation">;</span>  ushort padding5<span class="token punctuation">;</span>  uint eflags<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// below here only when crossing rings, such as from user to kernel</span>  uint esp<span class="token punctuation">;</span>  ushort ss<span class="token punctuation">;</span>  ushort padding6<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// push in alltraps</span><span class="token punctuation">.</span>globl alltrapsalltraps<span class="token punctuation">:</span>  <span class="token macro property"># Build trap frame.</span>  pushl <span class="token operator">%</span>ds  pushl <span class="token operator">%</span>es  pushl <span class="token operator">%</span>fs  pushl <span class="token operator">%</span>gs  pushal  <span class="token macro property"># Set up data segments.</span>  movw $<span class="token punctuation">(</span>SEG_KDATA<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>ax  movw <span class="token operator">%</span>ax<span class="token punctuation">,</span> <span class="token operator">%</span>ds  movw <span class="token operator">%</span>ax<span class="token punctuation">,</span> <span class="token operator">%</span>es  <span class="token macro property"># Call trap(tf), where tf=%esp</span>  pushl <span class="token operator">%</span>esp  call trap  addl $<span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">%</span>esp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Nonetheless, the most important thing here in <code>trap.c</code> is that <strong>we are already executing kernel codes</strong>, which means:</p><ol><li>we are already in kernel mode</li><li>we jump from user program to kernel.</li></ol><p><code>So, in summary, the os uses three assembly functions to jump from User Program to Kernel</code>.</p><h3 id="D-Interior-Mechanism-of-Syscall"><a href="#D-Interior-Mechanism-of-Syscall" class="headerlink" title="D. Interior Mechanism of Syscall"></a>D. Interior Mechanism of Syscall</h3><p>Continue, the function <code>syscall</code> is defined in <span id="sc"><code>syscall.c</code></span>.</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// syscall.c</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_chdir</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_close</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_dup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_exec</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_fstat</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_getpid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_kill</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_link</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_mkdir</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_mknod</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_open</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_pipe</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_read</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_sbrk</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_sleep</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_unlink</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_wait</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_write</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_uptime</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>syscalls<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>SYS_fork<span class="token punctuation">]</span>    sys_fork<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exit<span class="token punctuation">]</span>    sys_exit<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_wait<span class="token punctuation">]</span>    sys_wait<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_pipe<span class="token punctuation">]</span>    sys_pipe<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_read<span class="token punctuation">]</span>    sys_read<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_kill<span class="token punctuation">]</span>    sys_kill<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exec<span class="token punctuation">]</span>    sys_exec<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_fstat<span class="token punctuation">]</span>   sys_fstat<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_chdir<span class="token punctuation">]</span>   sys_chdir<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_dup<span class="token punctuation">]</span>     sys_dup<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_getpid<span class="token punctuation">]</span>  sys_getpid<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sbrk<span class="token punctuation">]</span>    sys_sbrk<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sleep<span class="token punctuation">]</span>   sys_sleep<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_uptime<span class="token punctuation">]</span>  sys_uptime<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_open<span class="token punctuation">]</span>    sys_open<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_write<span class="token punctuation">]</span>   sys_write<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mknod<span class="token punctuation">]</span>   sys_mknod<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_unlink<span class="token punctuation">]</span>  sys_unlink<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_link<span class="token punctuation">]</span>    sys_link<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mkdir<span class="token punctuation">]</span>   sys_mkdir<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_close<span class="token punctuation">]</span>   sys_close<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">syscall</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>curproc <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  num <span class="token operator">=</span> curproc<span class="token operator">-></span>tf<span class="token operator">-></span>eax<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>syscalls<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> syscalls<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    curproc<span class="token operator">-></span>tf<span class="token operator">-></span>eax <span class="token operator">=</span> syscalls<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"%d %s: unknown sys call %d\n"</span><span class="token punctuation">,</span>            curproc<span class="token operator">-></span>pid<span class="token punctuation">,</span> curproc<span class="token operator">-></span>name<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    curproc<span class="token operator">-></span>tf<span class="token operator">-></span>eax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Variable <code>syscall</code> is a function array, and <code>SYS_xxx</code> are macros defined in <code>syscall.h</code> (refer <a href="#anchor">syscall.h</a>)</p><p>Rember, system call number is store in <code>eax</code> (refer <a href="#scn">usys.S</a>).</p><p>So, <code>syscall</code> first get the system call number from <code>eax</code> register (line #55), and then pick out corresponding system call function to run (line #57).</p><p> <code>extern</code> is used to mark up system call function like <code>sys_exit</code>, <code>sys_close</code>, and <code>sys_mkdir</code> are defined in other files, </p><p>Finally, take a look at the real definition of <code>sys_kill</code> in <code>sysproc.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// sysproc.c</span><span class="token keyword">int</span><span class="token function">sys_kill</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> pid<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pid<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>and <code>kill</code> in <code>proc.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// proc.c</span><span class="token comment" spellcheck="true">// Kill the process with the given pid.</span><span class="token comment" spellcheck="true">// Process won't exit until it returns</span><span class="token comment" spellcheck="true">// to user space (see trap in trap.c).</span><span class="token keyword">int</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> ptable<span class="token punctuation">.</span>proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>pid <span class="token operator">==</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>      p<span class="token operator">-></span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Wake process from sleep if necessary.</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>state <span class="token operator">==</span> SLEEPING<span class="token punctuation">)</span>        p<span class="token operator">-></span>state <span class="token operator">=</span> RUNNABLE<span class="token punctuation">;</span>      <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="F-One-More-Thing-Passing-Argument"><a href="#F-One-More-Thing-Passing-Argument" class="headerlink" title="F. One More Thing: Passing Argument"></a>F. One More Thing: Passing Argument</h3><p>User program can include <code>user.h</code>, where prototypes of system call are provided.</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// user.h</span><span class="token comment" spellcheck="true">// system calls</span><span class="token keyword">int</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">pipe</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">mknod</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">fstat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> stat<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">link</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">sbrk</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">uptime</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>However, the function prototype defined in <code>syscall.c</code> has not argument (refer <a href="#sc">syscall.c</a>).</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_chdir</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_close</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_dup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_exec</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_fstat</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_getpid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_kill</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_link</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_mkdir</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_mknod</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_open</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_pipe</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_read</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_sbrk</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_sleep</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_unlink</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_wait</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_write</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_uptime</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>As explained ahead, <code>C</code> uses stack to pass the argument when calling function. So, <strong>we can actually get argument via calling program’s stack</strong>.</p><p>Here, we remain the pototype argument void is because the function array <code>syscall</code> that forces us keeping the prototype same argument.</p><p>To get the argument from calling program’s stack, we can use function <code>argstr</code> and <code>argint</code> defined in <code>syscall.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Fetch the int at addr from the current process.</span><span class="token keyword">int</span><span class="token function">fetchint</span><span class="token punctuation">(</span>uint addr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>ip<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>curproc <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">>=</span> curproc<span class="token operator">-></span>sz <span class="token operator">||</span> addr<span class="token operator">+</span><span class="token number">4</span> <span class="token operator">></span> curproc<span class="token operator">-></span>sz<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token operator">*</span>ip <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Fetch the nul-terminated string at addr from the current process.</span><span class="token comment" spellcheck="true">// Doesn't actually copy the string - just sets *pp to point at it.</span><span class="token comment" spellcheck="true">// Returns length of string, not including nul.</span><span class="token keyword">int</span><span class="token function">fetchstr</span><span class="token punctuation">(</span>uint addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>pp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>ep<span class="token punctuation">;</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>curproc <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">>=</span> curproc<span class="token operator">-></span>sz<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span>  ep <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>curproc<span class="token operator">-></span>sz<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token operator">*</span>pp<span class="token punctuation">;</span> s <span class="token operator">&lt;</span> ep<span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>s <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> s <span class="token operator">-</span> <span class="token operator">*</span>pp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Fetch the nth 32-bit system call argument.</span><span class="token keyword">int</span><span class="token function">argint</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>ip<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">fetchint</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>tf<span class="token operator">-></span>esp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Fetch the nth word-sized system call argument as a string pointer.</span><span class="token comment" spellcheck="true">// Check that the pointer is valid and the string is nul-terminated.</span><span class="token comment" spellcheck="true">// (There is no shared writable memory, so the string can't change</span><span class="token comment" spellcheck="true">// between this check and being used by the kernel.)</span><span class="token keyword">int</span><span class="token function">argstr</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>pp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> addr<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">argint</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">fetchstr</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> pp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Add-trace-and-getcount"><a href="#3-Add-trace-and-getcount" class="headerlink" title="3. Add trace and getcount"></a>3. Add <code>trace</code> and <code>getcount</code></h2><p>After figuring out how the system call works in <code>xv6</code> system, we start to add <code>trace</code> and <code>getcount</code> systemcall.</p><h3 id="1-Add-system-call-number"><a href="#1-Add-system-call-number" class="headerlink" title="1. Add system call number"></a>1. Add system call number</h3><p>First, we need to add system call number in <code>syscall.h</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// my syscall</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_trace  22</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_getcount  23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-26%20%E4%B8%8B%E5%8D%882.02.24.png" alt="Add Syscall number"></p><h3 id="2-Add-SYSCALL-Macro"><a href="#2-Add-SYSCALL-Macro" class="headerlink" title="2. Add SYSCALL Macro"></a>2. Add <code>SYSCALL</code> Macro</h3><p>The second step is to add <code>SYSCALL</code> macro in <code>usys.S</code></p><pre class="line-numbers language-assembly"><code class="language-assembly">SYSCALL(trace)SYSCALL(getcount)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-26%20%E4%B8%8B%E5%8D%882.04.52.png" alt="Add SYSCALL Macro"></p><h3 id="3-Add-prototype-in-syscall-c"><a href="#3-Add-prototype-in-syscall-c" class="headerlink" title="3. Add prototype in syscall.c"></a>3. Add prototype in <code>syscall.c</code></h3><p>Add my system call function prototype in <code>syscall.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// my syscall</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_trace</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_getcount</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>syscalls<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>SYS_fork<span class="token punctuation">]</span>    sys_fork<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exit<span class="token punctuation">]</span>    sys_exit<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_wait<span class="token punctuation">]</span>    sys_wait<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_pipe<span class="token punctuation">]</span>    sys_pipe<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_read<span class="token punctuation">]</span>    sys_read<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_kill<span class="token punctuation">]</span>    sys_kill<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exec<span class="token punctuation">]</span>    sys_exec<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_fstat<span class="token punctuation">]</span>   sys_fstat<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_chdir<span class="token punctuation">]</span>   sys_chdir<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_dup<span class="token punctuation">]</span>     sys_dup<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_getpid<span class="token punctuation">]</span>  sys_getpid<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sbrk<span class="token punctuation">]</span>    sys_sbrk<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sleep<span class="token punctuation">]</span>   sys_sleep<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_uptime<span class="token punctuation">]</span>  sys_uptime<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_open<span class="token punctuation">]</span>    sys_open<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_write<span class="token punctuation">]</span>   sys_write<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mknod<span class="token punctuation">]</span>   sys_mknod<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_unlink<span class="token punctuation">]</span>  sys_unlink<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_link<span class="token punctuation">]</span>    sys_link<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mkdir<span class="token punctuation">]</span>   sys_mkdir<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_close<span class="token punctuation">]</span>   sys_close<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_trace<span class="token punctuation">]</span> sys_trace<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_getcount<span class="token punctuation">]</span> sys_getcount<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Realize-trace-and-getcount"><a href="#4-Realize-trace-and-getcount" class="headerlink" title="4. Realize trace and getcount"></a>4. Realize <code>trace</code> and <code>getcount</code></h3><p>Finally, realize <code>trace</code> and <code>getcount</code> in <code>sysfile.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// sysfile.c</span><span class="token comment" spellcheck="true">// my syscall data structure</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> trace_file<span class="token punctuation">{</span>  <span class="token keyword">char</span> filename<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> open_counter<span class="token punctuation">;</span>  <span class="token keyword">int</span> trace_enabled<span class="token punctuation">;</span><span class="token punctuation">}</span> trace_file<span class="token punctuation">;</span><span class="token keyword">int</span> num_traced<span class="token punctuation">;</span>trace_file tracing_file<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sys_trace</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// get param from stack char *path;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">;</span>  <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">argstr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    tracing_file<span class="token punctuation">.</span>filename<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  tracing_file<span class="token punctuation">.</span>filename<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>tracing_file<span class="token punctuation">.</span>open_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  tracing_file<span class="token punctuation">.</span>trace_enabled <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">sys_getcount</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>tracing_file<span class="token punctuation">.</span>trace_enabled <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> tracing_file<span class="token punctuation">.</span>open_counter<span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>as well as modify <code>sysopen</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">sys_open</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">;</span>  <span class="token keyword">int</span> fd<span class="token punctuation">,</span> omode<span class="token punctuation">;</span>  <span class="token keyword">struct</span> file <span class="token operator">*</span>f<span class="token punctuation">;</span>  <span class="token keyword">struct</span> inode <span class="token operator">*</span>ip<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// check if trace enabled and add counter</span>  <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">argstr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>omode<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ppath <span class="token operator">=</span> path<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ptf <span class="token operator">=</span> tracing_file<span class="token punctuation">.</span>filename<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>ppath<span class="token punctuation">,</span> ptf<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tracing_file<span class="token punctuation">.</span>trace_enabled<span class="token punctuation">)</span>      tracing_file<span class="token punctuation">.</span>open_counter <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">begin_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>omode <span class="token operator">&amp;</span> O_CREATE<span class="token punctuation">)</span><span class="token punctuation">{</span>    ip <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> T_FILE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">end_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ip <span class="token operator">=</span> <span class="token function">namei</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">end_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ilock</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ip<span class="token operator">-></span>type <span class="token operator">==</span> T_DIR <span class="token operator">&amp;&amp;</span> omode <span class="token operator">!=</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">iunlockput</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">end_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">filealloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">fdalloc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>      <span class="token function">fileclose</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iunlockput</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">end_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">iunlock</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">end_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  f<span class="token operator">-></span>type <span class="token operator">=</span> FD_INODE<span class="token punctuation">;</span>  f<span class="token operator">-></span>ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>  f<span class="token operator">-></span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  f<span class="token operator">-></span>readable <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>omode <span class="token operator">&amp;</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  f<span class="token operator">-></span>writable <span class="token operator">=</span> <span class="token punctuation">(</span>omode <span class="token operator">&amp;</span> O_WRONLY<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>omode <span class="token operator">&amp;</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> fd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-26%20%E4%B8%8B%E5%8D%882.12.01.png" alt="Add sys_trace and sys_getcount"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-26%20%E4%B8%8B%E5%8D%882.11.49.png" alt="Modify sys_open"></p><h2 id="4-Result"><a href="#4-Result" class="headerlink" title="4. Result"></a>4. Result</h2><p>Since this blog is actually a project of CS537: Operating System of UW-Madison, so the course do offer a test script to test the system call you developed.</p><p>PS: The courses material is open source, and serves as material of the book Operating System: Three Easy Piece by Remzi, the lecture of this course. He create a repository called OS Steps, and pull all course materials like project introduction, project testing tools in that material. So maybe you can find the testing script in Remzi’s github.</p><p>To strat test, simply</p><pre class="line-numbers language-shell"><code class="language-shell">~cs537-1/test/p1b/runtest.sh -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-26%20%E4%B8%8B%E5%8D%882.14.21.png" alt="Test Result"></p>]]></content>
      
      
      <categories>
          
          <category> xv6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Operating System </tag>
            
            <tag> xv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XV6：介绍及项目结构</title>
      <link href="/2022/10/21/xv6-xiang-mu-jie-shao/"/>
      <url>/2022/10/21/xv6-xiang-mu-jie-shao/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220928233603685-20221022150622618.png" alt="XV6 (Unix Version 6) System"></p><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>我之前说过我正在开发自己的操作系统<code>JackOS</code>，但是在开启页表之后就遇到了困难，所以为了后续能够更好的开发<code>JackOS</code>，这段时间就去学习了一下<code>XV6</code>操作系统。</p><p>毕竟实践出真知，因此后面的安排就是准备魔改一下<code>xv6</code>系统，即在<code>xv6</code>的代码的基础上魔改其功能，例如增加系统调用、修改Shell、修改<code>Scheduler</code>等等。</p><p>因此，在开始这些项目之前，先写一篇文章来介绍<code>XV6</code>系统</p><h2 id="1-XV6介绍"><a href="#1-XV6介绍" class="headerlink" title="1. XV6介绍"></a>1. XV6介绍</h2><h3 id="A-Unix"><a href="#A-Unix" class="headerlink" title="A. Unix"></a>A. Unix</h3><p><code>UNIX</code>（非复用信息和计算机服务，英语：<code>Uniplexed Information and Computing Service</code>，<code>UnICS</code>），一种多用户、多进程的计算机操作系统，源自于从20世纪70年代开始在美国AT&amp;T公司的贝尔实验室开发的AT&amp;T Unix。<code>Unix</code>是第一个广泛流行的操作系统（原先最早的操作系统，类似于<code>Multics</code>这类的并没有广泛使用的操作系统我们就不说了）。</p><p><code>Unix</code>的前身为1964年开始的<code>Multics</code>，1965年时，贝尔实验室加入一项由通用电气和麻省理工学院合作的计划；该计划要创建一套多用户、多任务、多层次（multi－user、multi－processor、multi－level）的<code>MULTICS</code>操作系统。贝尔实验室参与了这个操作系统的研发，但因为开发速度太慢，1969年贝尔实验室决定退出这个计划。贝尔实验室的工程师，肯·汤普逊和丹尼斯·里奇，在此时自行开发了<code>Unix</code>。</p><p>此后的10年，<code>Unix</code>在学术机构和大型企业中得到了广泛的应用，当时的<code>UNIX</code>拥有者<code>AT&amp;T</code>公司以低廉甚至免费的许可将<code>Unix</code>源码授权给学术机构做研究或教学之用，许多机构在此源码基础上加以扩展和改进，形成了所谓的“<code>Unix</code>变种”，这些变种反过来也促进了<code>Unix</code>的发展，其中最著名的变种之一是由加州大学伯克利分校开发的伯克利软件套件(<code>BSD</code>)产品。</p><p>后来<code>AT&amp;T</code>意识到了<code>Unix</code>的商业价值，不再将<code>Unix</code>源码授权给学术机构，并对之前的<code>Unix</code>及其变种声明了著作权权利。<code>BSD</code>在<code>Unix</code>的历史发展中具有相当大的影响力，被很多商业厂家采用，成为很多商用<code>Unix</code>的基础。其不断增大的影响力终于引起了<code>AT&amp;T</code>的关注，于是开始了一场持久的著作权官司，这场官司一直打到<code>AT&amp;T</code>将自己的<code>Unix</code>系统实验室卖掉，新接手的<code>Novell</code>采取了一种比较开明的做法，允许UC Berkeley分校自由发布自己的<code>Unix</code>变种，但是前提是必须将来自于<code>AT&amp;T</code>的代码完全删除，于是诞生了<code>4.4 BSD Lite</code>版，由于这个版本不存在法律问题，<code>4.4 BSD Lite</code>成为了现代Berkeley软件包的基础版本。尽管后来，非商业版的<code>Unix</code>系统又经过了很多演变，但其中有不少最终都是创建在<code>BSD</code>版本上（<code>Linux</code>、<code>Minix</code>等系统除外）。所以从这个角度上，<code>4.4 BSD</code>又是所有自由版本<code>Unix</code>的基础，它们和<code>System V</code>及<code>Linux</code>等共同构成Unix操作系统。</p><h3 id="B-Version-6-Unix-V6"><a href="#B-Version-6-Unix-V6" class="headerlink" title="B. Version 6 Unix (V6)"></a>B. Version 6 Unix (V6)</h3><p><code>UNIX第六版</code>（英语：<code>Version 6 Unix</code>，简称 <code>V6</code>），由贝尔实验室于1975年5月释出的<code>UNIX</code>操作系统，是第一个对外公开的<code>UNIX</code>版本，主要运行在<code>DEC PDP-11</code>系列的小型计算机（Minicomputer）家族。前身为<code>Version 5 Unix</code>，后继版本为1978年至1979年发布的<code>Version 7 Unix</code>，但是直到1985年为止，<code>Version 6 Unix</code> 仍然可以运行。</p><p><code>Version 5 Unix</code>这个版本，<code>AT&amp;T</code>公司只授权给学术机构使用。<code>Version 6 Unix</code>以$200美元授权给学校等学术机构，而非学术机构也可以以美金$20,000的价格获得授权以进行商业使用。</p><h3 id="C-XV6"><a href="#C-XV6" class="headerlink" title="C. XV6"></a>C. XV6</h3><p><strong><code>XV6</code>是在ANSI C中针对多处理器x86系统的Unix第六版的现代重新实现</strong>。它在麻省理工学院的操作系统工程（6.828）课程中用于教学目的。</p><p>与<code>Linux</code>或<code>BSD</code>注重实用性不同，<code>XV6</code>注重教学，因此其非常简单，足以在一个学期内讲完。尽管简单，但<code>XV6</code>中仍然包含<code>Unix</code>的重要概念和组织。由于<code>V6</code>是基于<code>PDP-11</code>硬件系统编写的，而由于<code>PDP-11</code>机器没有被广泛使用，并且由于最初的操作系统是用过时的pre-ANSI C编写的，所以<code>MIT 6.838</code>这门课程没有学习原始的<code>V6</code>代码</p><p>这门课的教师基于原始的<code>V6</code>的代码进行了改变，使得<code>V6</code>能够在现代的计算机上运行，而最终形成的修改版操作系统称为<code>XV6</code></p><h2 id="2-XV6项目结构：理解Makefile"><a href="#2-XV6项目结构：理解Makefile" class="headerlink" title="2. XV6项目结构：理解Makefile"></a>2. XV6项目结构：理解<code>Makefile</code></h2><p>上面我们介绍了<code>XV6</code>系统的历史，而<code>XV6</code>系统是用<code>Makefile</code>组织的，因此为了后续魔改<code>XV6</code>系统，我们首先需要明白<code>XV6</code>的组织结构。</p><p><code>XV6</code>的<code>Makefile</code>内容如下</p><pre class="line-numbers language-makefile"><code class="language-makefile">OBJS <span class="token operator">=</span> \    bio.o\    console.o\    exec.o\    file.o\    fs.o\    ide.o\    ioapic.o\    kalloc.o\    kbd.o\    lapic.o\    log.o\    main.o\    mp.o\    picirq.o\    pipe.o\    proc.o\    sleeplock.o\    spinlock.o\    string.o\    swtch.o\    syscall.o\    sysfile.o\    sysproc.o\    trapasm.o\    trap.o\    uart.o\    vectors.o\    vm.o\<span class="token comment" spellcheck="true"># Cross-compiling (e.g., on Mac OS X)</span><span class="token comment" spellcheck="true"># TOOLPREFIX = i386-jos-elf</span><span class="token comment" spellcheck="true"># Using native tools (e.g., on X86 Linux)</span><span class="token comment" spellcheck="true">#TOOLPREFIX = </span><span class="token comment" spellcheck="true"># Try to infer the correct TOOLPREFIX if not set</span><span class="token keyword">ifndef</span> TOOLPREFIXTOOLPREFIX <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> if i386-jos-elf-objdump -i 2>&amp;1 <span class="token operator">|</span> grep <span class="token string">'^elf32-i386$$'</span> >/dev/null 2>&amp;1<span class="token punctuation">;</span> \    then echo <span class="token string">'i386-jos-elf-'</span><span class="token punctuation">;</span> \    elif objdump -i 2>&amp;1 <span class="token operator">|</span> grep <span class="token string">'elf32-i386'</span> >/dev/null 2>&amp;1<span class="token punctuation">;</span> \    then echo <span class="token string">''</span><span class="token punctuation">;</span> \    <span class="token keyword">else</span> echo <span class="token string">"***"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** Error: Couldn't find an i386-*-elf version of GCC/binutils."</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** Is the directory with i386-jos-elf-gcc in your PATH?"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** If your i386-*-elf toolchain is installed with a command"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** prefix other than 'i386-jos-elf-', set your TOOLPREFIX"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** environment variable to that prefix and run 'make' again."</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** To turn off this error, run 'gmake TOOLPREFIX= ...'."</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"***"</span> 1>&amp;2<span class="token punctuation">;</span> exit 1<span class="token punctuation">;</span> fi<span class="token punctuation">)</span><span class="token keyword">endif</span><span class="token comment" spellcheck="true"># If the makefile can't find QEMU, specify its path here</span><span class="token comment" spellcheck="true"># QEMU = qemu-system-i386</span><span class="token comment" spellcheck="true"># Try to infer the correct QEMU</span><span class="token keyword">ifndef</span> QEMUQEMU <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> if which qemu > /dev/null<span class="token punctuation">;</span> \    then echo qemu<span class="token punctuation">;</span> exit<span class="token punctuation">;</span> \    elif which qemu-system-i386 > /dev/null<span class="token punctuation">;</span> \    then echo qemu-system-i386<span class="token punctuation">;</span> exit<span class="token punctuation">;</span> \    elif which qemu-system-x86_64 > /dev/null<span class="token punctuation">;</span> \    then echo qemu-system-x86_64<span class="token punctuation">;</span> exit<span class="token punctuation">;</span> \    <span class="token keyword">else</span> \    qemu<span class="token operator">=</span>/Applications/Q.app/Contents/MacOS/i386-softmmu.app/Contents/MacOS/i386-softmmu<span class="token punctuation">;</span> \    if test -x <span class="token variable">$$qemu;</span> then echo <span class="token variable">$$qemu;</span> exit<span class="token punctuation">;</span> fi<span class="token punctuation">;</span> fi<span class="token punctuation">;</span> \    echo <span class="token string">"***"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** Error: Couldn't find a working QEMU executable."</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** Is the directory containing the qemu binary in your PATH"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** or have you tried setting the QEMU variable in Makefile?"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"***"</span> 1>&amp;2<span class="token punctuation">;</span> exit 1<span class="token punctuation">)</span><span class="token keyword">endif</span>CC <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>TOOLPREFIX<span class="token punctuation">)</span>gccAS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>TOOLPREFIX<span class="token punctuation">)</span>gasLD <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>TOOLPREFIX<span class="token punctuation">)</span>ldOBJCOPY <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>TOOLPREFIX<span class="token punctuation">)</span>objcopyOBJDUMP <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>TOOLPREFIX<span class="token punctuation">)</span>objdumpCFLAGS <span class="token operator">=</span> -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointerCFLAGS <span class="token operator">+=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -fno-stack-protector -E -x c /dev/null >/dev/null 2>&amp;1 &amp;&amp; echo -fno-stack-protector<span class="token punctuation">)</span>ASFLAGS <span class="token operator">=</span> -m32 -gdwarf-2 -Wa,-divide<span class="token comment" spellcheck="true"># FreeBSD ld wants ``elf_i386_fbsd''</span>LDFLAGS <span class="token operator">+=</span> -m <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> -V <span class="token operator">|</span> grep elf_i386 2>/dev/null <span class="token operator">|</span> head -n 1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Disable PIE when possible (for Ubuntu 16.10 toolchain)</span><span class="token keyword">ifneq</span> <span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -dumpspecs 2>/dev/null <span class="token operator">|</span> grep -e <span class="token string">'[^f]no-pie'</span><span class="token punctuation">)</span>,<span class="token punctuation">)</span>CFLAGS <span class="token operator">+=</span> -fno-pie -no-pie<span class="token keyword">endif</span><span class="token keyword">ifneq</span> <span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -dumpspecs 2>/dev/null <span class="token operator">|</span> grep -e <span class="token string">'[^f]nopie'</span><span class="token punctuation">)</span>,<span class="token punctuation">)</span>CFLAGS <span class="token operator">+=</span> -fno-pie -nopie<span class="token keyword">endif</span><span class="token symbol">xv6.img</span><span class="token punctuation">:</span> bootblock kernel    dd if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>xv6.img count<span class="token operator">=</span>10000    dd if<span class="token operator">=</span>bootblock of<span class="token operator">=</span>xv6.img conv<span class="token operator">=</span>notrunc    dd if<span class="token operator">=</span>kernel of<span class="token operator">=</span>xv6.img seek<span class="token operator">=</span>1 conv<span class="token operator">=</span>notrunc<span class="token symbol">xv6memfs.img</span><span class="token punctuation">:</span> bootblock kernelmemfs    dd if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>xv6memfs.img count<span class="token operator">=</span>10000    dd if<span class="token operator">=</span>bootblock of<span class="token operator">=</span>xv6memfs.img conv<span class="token operator">=</span>notrunc    dd if<span class="token operator">=</span>kernelmemfs of<span class="token operator">=</span>xv6memfs.img seek<span class="token operator">=</span>1 conv<span class="token operator">=</span>notrunc<span class="token symbol">bootblock</span><span class="token punctuation">:</span> bootasm.S bootmain.c    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -fno-pic -O -nostdinc -I. -c bootmain.c    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -fno-pic -nostdinc -I. -c bootasm.S    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -N -e start -Ttext 0x7C00 -o bootblock.o bootasm.o bootmain.o    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S bootblock.o > bootblock.asm    <span class="token variable">$</span><span class="token punctuation">(</span>OBJCOPY<span class="token punctuation">)</span> -S -O binary -j .text bootblock.o bootblock    ./sign.pl bootblock<span class="token symbol">entryother</span><span class="token punctuation">:</span> entryother.S    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -fno-pic -nostdinc -I. -c entryother.S    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -N -e start -Ttext 0x7000 -o bootblockother.o entryother.o    <span class="token variable">$</span><span class="token punctuation">(</span>OBJCOPY<span class="token punctuation">)</span> -S -O binary -j .text bootblockother.o entryother    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S bootblockother.o > entryother.asm<span class="token symbol">initcode</span><span class="token punctuation">:</span> initcode.S    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -nostdinc -I. -c initcode.S    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -N -e start -Ttext 0 -o initcode.out initcode.o    <span class="token variable">$</span><span class="token punctuation">(</span>OBJCOPY<span class="token punctuation">)</span> -S -O binary initcode.out initcode    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S initcode.o > initcode.asm<span class="token symbol">kernel</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> entry.o entryother initcode kernel.ld    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -T kernel.ld -o kernel entry.o <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> -b binary initcode entryother    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S kernel > kernel.asm    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -t kernel <span class="token operator">|</span> sed <span class="token string">'1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d'</span> > kernel.sym<span class="token comment" spellcheck="true"># kernelmemfs is a copy of kernel that maintains the</span><span class="token comment" spellcheck="true"># disk image in memory instead of writing to a disk.</span><span class="token comment" spellcheck="true"># This is not so useful for testing persistent storage or</span><span class="token comment" spellcheck="true"># exploring disk buffering implementations, but it is</span><span class="token comment" spellcheck="true"># great for testing the kernel on real hardware without</span><span class="token comment" spellcheck="true"># needing a scratch disk.</span>MEMFSOBJS <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">filter-out</span> ide.o,<span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span><span class="token punctuation">)</span> memide.o<span class="token symbol">kernelmemfs</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>MEMFSOBJS<span class="token punctuation">)</span> entry.o entryother initcode kernel.ld fs.img    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -T kernel.ld -o kernelmemfs entry.o  <span class="token variable">$</span><span class="token punctuation">(</span>MEMFSOBJS<span class="token punctuation">)</span> -b binary initcode entryother fs.img    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S kernelmemfs > kernelmemfs.asm    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -t kernelmemfs <span class="token operator">|</span> sed <span class="token string">'1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d'</span> > kernelmemfs.sym<span class="token symbol">tags</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> entryother.S _init    etags *.S *.c<span class="token symbol">vectors.S</span><span class="token punctuation">:</span> vectors.pl    ./vectors.pl > vectors.SULIB <span class="token operator">=</span> ulib.o usys.o printf.o umalloc.o<span class="token symbol">_%</span><span class="token punctuation">:</span> %.o <span class="token variable">$</span><span class="token punctuation">(</span>ULIB<span class="token punctuation">)</span>    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -N -e main -Ttext 0 -o <span class="token variable">$@</span> <span class="token variable">$^</span>    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S <span class="token variable">$@</span> > <span class="token variable">$*.asm</span>    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -t <span class="token variable">$@</span> <span class="token operator">|</span> sed <span class="token string">'1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d'</span> > <span class="token variable">$*.sym</span><span class="token symbol">_forktest</span><span class="token punctuation">:</span> forktest.o <span class="token variable">$</span><span class="token punctuation">(</span>ULIB<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># forktest has less library code linked in - needs to be small</span>    <span class="token comment" spellcheck="true"># in order to be able to max out the proc table.</span>    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -N -e main -Ttext 0 -o _forktest forktest.o ulib.o usys.o    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S _forktest > forktest.asm<span class="token symbol">mkfs</span><span class="token punctuation">:</span> mkfs.c fs.h    gcc -Werror -Wall -o mkfs mkfs.c<span class="token comment" spellcheck="true"># Prevent deletion of intermediate files, e.g. cat.o, after first build, so</span><span class="token comment" spellcheck="true"># that disk image changes after first build are persistent until clean.  More</span><span class="token comment" spellcheck="true"># details:</span><span class="token comment" spellcheck="true"># http://www.gnu.org/software/make/manual/html_node/Chained-Rules.html</span><span class="token builtin">.PRECIOUS</span><span class="token punctuation">:</span> %.oUPROGS<span class="token operator">=</span>\    _cat\    _echo\    _forktest\    _grep\    _init\    _kill\    _ln\    _ls\    _mkdir\    _rm\    _sh\    _stressfs\    _usertests\    _wc\    _zombie\<span class="token symbol">fs.img</span><span class="token punctuation">:</span> mkfs README <span class="token variable">$</span><span class="token punctuation">(</span>UPROGS<span class="token punctuation">)</span>    ./mkfs fs.img README <span class="token variable">$</span><span class="token punctuation">(</span>UPROGS<span class="token punctuation">)</span><span class="token keyword">-include</span> *.d<span class="token symbol">clean</span><span class="token punctuation">:</span>     rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \    *.o *.d *.asm *.sym vectors.S bootblock entryother \    initcode initcode.out kernel xv6.img fs.img kernelmemfs \    xv6memfs.img mkfs .gdbinit \    <span class="token variable">$</span><span class="token punctuation">(</span>UPROGS<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># make a printout</span>FILES <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> grep -v <span class="token string">'^\#'</span> runoff.list<span class="token punctuation">)</span>PRINT <span class="token operator">=</span> runoff.list runoff.spec README toc.hdr toc.ftr <span class="token variable">$</span><span class="token punctuation">(</span>FILES<span class="token punctuation">)</span><span class="token symbol">xv6.pdf</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>PRINT<span class="token punctuation">)</span>    ./runoff    ls -l xv6.pdf<span class="token symbol">print</span><span class="token punctuation">:</span> xv6.pdf<span class="token comment" spellcheck="true"># run in emulators</span><span class="token symbol">bochs </span><span class="token punctuation">:</span> fs.img xv6.img    if [ ! -e .bochsrc ]<span class="token punctuation">;</span> then ln -s dot-bochsrc .bochsrc<span class="token punctuation">;</span> fi    bochs -q<span class="token comment" spellcheck="true"># try to generate a unique GDB port</span>GDBPORT <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> expr `id -u` % 5000 + 25000<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># QEMU's gdb stub command line changed in 0.11</span>QEMUGDB <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> if <span class="token variable">$</span><span class="token punctuation">(</span>QEMU<span class="token punctuation">)</span> -help <span class="token operator">|</span> grep -q <span class="token string">'^-gdb'</span><span class="token punctuation">;</span> \    then echo <span class="token string">"-gdb tcp::$(GDBPORT)"</span><span class="token punctuation">;</span> \    <span class="token keyword">else</span> echo <span class="token string">"-s -p $(GDBPORT)"</span><span class="token punctuation">;</span> fi<span class="token punctuation">)</span><span class="token keyword">ifndef</span> CPUSCPUS <span class="token operator">:=</span> 2<span class="token keyword">endif</span>QEMUOPTS <span class="token operator">=</span> -drive file<span class="token operator">=</span>fs.img,index<span class="token operator">=</span>1,media<span class="token operator">=</span>disk,format<span class="token operator">=</span>raw -drive file<span class="token operator">=</span>xv6.img,index<span class="token operator">=</span>0,media<span class="token operator">=</span>disk,format<span class="token operator">=</span>raw -smp <span class="token variable">$</span><span class="token punctuation">(</span>CPUS<span class="token punctuation">)</span> -m 512 <span class="token variable">$</span><span class="token punctuation">(</span>QEMUEXTRA<span class="token punctuation">)</span><span class="token symbol">qemu</span><span class="token punctuation">:</span> fs.img xv6.img<span class="token symbol">    <span class="token variable">$</span>(QEMU) -serial mon</span><span class="token punctuation">:</span>stdio <span class="token variable">$</span><span class="token punctuation">(</span>QEMUOPTS<span class="token punctuation">)</span><span class="token symbol">qemu-memfs</span><span class="token punctuation">:</span> xv6memfs.img    <span class="token variable">$</span><span class="token punctuation">(</span>QEMU<span class="token punctuation">)</span> -drive file<span class="token operator">=</span>xv6memfs.img,index<span class="token operator">=</span>0,media<span class="token operator">=</span>disk,format<span class="token operator">=</span>raw -smp <span class="token variable">$</span><span class="token punctuation">(</span>CPUS<span class="token punctuation">)</span> -m 256<span class="token symbol">qemu-nox</span><span class="token punctuation">:</span> fs.img xv6.img    <span class="token variable">$</span><span class="token punctuation">(</span>QEMU<span class="token punctuation">)</span> -nographic <span class="token variable">$</span><span class="token punctuation">(</span>QEMUOPTS<span class="token punctuation">)</span><span class="token symbol">.gdbinit</span><span class="token punctuation">:</span> .gdbinit.tmpl    sed <span class="token string">"s/localhost:1234/localhost:$(GDBPORT)/"</span> &lt; <span class="token variable">$^</span> > <span class="token variable">$@</span><span class="token symbol">qemu-gdb</span><span class="token punctuation">:</span> fs.img xv6.img .gdbinit    <span class="token operator">@</span>echo <span class="token string">"*** Now run 'gdb'."</span> 1>&amp;2<span class="token symbol">    <span class="token variable">$</span>(QEMU) -serial mon</span><span class="token punctuation">:</span>stdio <span class="token variable">$</span><span class="token punctuation">(</span>QEMUOPTS<span class="token punctuation">)</span> -S <span class="token variable">$</span><span class="token punctuation">(</span>QEMUGDB<span class="token punctuation">)</span><span class="token symbol">qemu-nox-gdb</span><span class="token punctuation">:</span> fs.img xv6.img .gdbinit    <span class="token operator">@</span>echo <span class="token string">"*** Now run 'gdb'."</span> 1>&amp;2    <span class="token variable">$</span><span class="token punctuation">(</span>QEMU<span class="token punctuation">)</span> -nographic <span class="token variable">$</span><span class="token punctuation">(</span>QEMUOPTS<span class="token punctuation">)</span> -S <span class="token variable">$</span><span class="token punctuation">(</span>QEMUGDB<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># CUT HERE</span><span class="token comment" spellcheck="true"># prepare dist for students</span><span class="token comment" spellcheck="true"># after running make dist, probably want to</span><span class="token comment" spellcheck="true"># rename it to rev0 or rev1 or so on and then</span><span class="token comment" spellcheck="true"># check in that version.</span>EXTRA<span class="token operator">=</span>\    mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\    ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\    printf.c umalloc.c\    README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\    .gdbinit.tmpl gdbutil\<span class="token symbol">dist</span><span class="token punctuation">:</span>    rm -rf dist    mkdir dist    for i in <span class="token variable">$</span><span class="token punctuation">(</span>FILES<span class="token punctuation">)</span><span class="token punctuation">;</span> \    do \        grep -v PAGEBREAK <span class="token variable">$$i</span> >dist/<span class="token variable">$$i;</span> \    done    sed <span class="token string">'/CUT HERE/,$$d'</span> Makefile >dist/Makefile    echo >dist/runoff.spec    cp <span class="token variable">$</span><span class="token punctuation">(</span>EXTRA<span class="token punctuation">)</span> dist<span class="token symbol">dist-test</span><span class="token punctuation">:</span>    rm -rf dist    make dist    rm -rf dist-test    mkdir dist-test    cp dist/* dist-test    cd dist-test<span class="token punctuation">;</span> <span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> print    cd dist-test<span class="token punctuation">;</span> <span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> bochs <span class="token operator">|</span><span class="token operator">|</span> true    cd dist-test<span class="token punctuation">;</span> <span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> qemu<span class="token comment" spellcheck="true"># update this rule (change rev#) when it is time to</span><span class="token comment" spellcheck="true"># make a new revision.</span><span class="token symbol">tar</span><span class="token punctuation">:</span>    rm -rf /tmp/xv6    mkdir -p /tmp/xv6    cp dist/* dist/.gdbinit.tmpl /tmp/xv6    <span class="token punctuation">(</span>cd /tmp<span class="token punctuation">;</span> tar cf - xv6<span class="token punctuation">)</span> <span class="token operator">|</span> gzip >xv6-rev10.tar.gz  <span class="token comment" spellcheck="true"># the next one will be 10 (9/17)</span><span class="token builtin">.PHONY</span><span class="token punctuation">:</span> dist-test dist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="A-调试XV6-make-qemu-nox-gdb"><a href="#A-调试XV6-make-qemu-nox-gdb" class="headerlink" title="A. 调试XV6: make qemu-nox-gdb"></a>A. 调试XV6: <code>make qemu-nox-gdb</code></h3><p>为了调试<code>XV6</code>，我们在命令行中使用的命令是</p><pre class="line-numbers language-shell"><code class="language-shell">make qemu-nox-gdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而这个命令表示我们运行<code>Makefile</code>中的 <code>qemu-nox-gdb</code>目标。</p><p><code>Makefile</code>中的 <code>qemu-nox-gdb</code>目标如下：</p><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">qemu-nox-gdb</span><span class="token punctuation">:</span> fs.img xv6.img .gdbinit    <span class="token operator">@</span>echo <span class="token string">"*** Now run 'gdb'."</span> 1>&amp;2    <span class="token variable">$</span><span class="token punctuation">(</span>QEMU<span class="token punctuation">)</span> -nographic <span class="token variable">$</span><span class="token punctuation">(</span>QEMUOPTS<span class="token punctuation">)</span> -S <span class="token variable">$</span><span class="token punctuation">(</span>QEMUGDB<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>@echo</code>是输出命令</li><li><code>QEMU</code>、<code>QEMUOPTS</code>和<code>QEMUGDB</code>三个都是宏</li><li><code>qemu-nox-gdb: fs.img xv6.img .gdbinit</code>表示目标<code>qemu-nox-gdb</code>依赖目标<code>fs.img</code>, <code>xv6.img</code>和 <code>.gdbinit</code>，即在build目标<code>qemu-nox-gdb</code>之前，要先build后面三个目标</li></ul><p>宏 <code>QEMU</code>, <code>QEMUOPTS</code>和 <code>QEMUGDB</code>的定义为</p><pre class="line-numbers language-makefile"><code class="language-makefile">QEMU <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> if which qemu > /dev/null<span class="token punctuation">;</span> \    then echo qemu<span class="token punctuation">;</span> exit<span class="token punctuation">;</span> \    elif which qemu-system-i386 > /dev/null<span class="token punctuation">;</span> \    then echo qemu-system-i386<span class="token punctuation">;</span> exit<span class="token punctuation">;</span> \    elif which qemu-system-x86_64 > /dev/null<span class="token punctuation">;</span> \    then echo qemu-system-x86_64<span class="token punctuation">;</span> exit<span class="token punctuation">;</span> \    <span class="token keyword">else</span> \    qemu<span class="token operator">=</span>/Applications/Q.app/Contents/MacOS/i386-softmmu.app/Contents/MacOS/i386-softmmu<span class="token punctuation">;</span> \    if test -x <span class="token variable">$$qemu;</span> then echo <span class="token variable">$$qemu;</span> exit<span class="token punctuation">;</span> fi<span class="token punctuation">;</span> fi<span class="token punctuation">;</span> \    echo <span class="token string">"***"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** Error: Couldn't find a working QEMU executable."</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** Is the directory containing the qemu binary in your PATH"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** or have you tried setting the QEMU variable in Makefile?"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"***"</span> 1>&amp;2<span class="token punctuation">;</span> exit 1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-makefile"><code class="language-makefile">QEMUOPTS <span class="token operator">=</span> -drive file<span class="token operator">=</span>fs.img,index<span class="token operator">=</span>1,media<span class="token operator">=</span>disk,format<span class="token operator">=</span>raw -drive file<span class="token operator">=</span>xv6.img,index<span class="token operator">=</span>0,media<span class="token operator">=</span>disk,format<span class="token operator">=</span>raw -smp <span class="token variable">$</span><span class="token punctuation">(</span>CPUS<span class="token punctuation">)</span> -m 512 <span class="token variable">$</span><span class="token punctuation">(</span>QEMUEXTRA<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-makefile"><code class="language-makefile">QEMUGDB <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> if <span class="token variable">$</span><span class="token punctuation">(</span>QEMU<span class="token punctuation">)</span> -help <span class="token operator">|</span> grep -q <span class="token string">'^-gdb'</span><span class="token punctuation">;</span> \    then echo <span class="token string">"-gdb tcp::$(GDBPORT)"</span><span class="token punctuation">;</span> \    <span class="token keyword">else</span> echo <span class="token string">"-s -p $(GDBPORT)"</span><span class="token punctuation">;</span> fi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以<code>QEMU</code>这个宏就是就是循找系统上当前可用的<code>qemu</code>版本，而<code>QEMUOPTS</code>定义了一系列运行<code>qemu</code>时候的命令行参数，而<code>QEMUGDB</code>宏就是指定用<code>gdb</code>进行调试，同时指定<code>gdbserver</code>的端口</p><p><strong>此外，需要注意的是，在宏<code>QEMUOPTS</code>中，<code>-drive</code>选项后面定义了运行虚拟机时候使用了两个硬盘镜像：<code>fs.img</code>和<code>xv6.img</code>。换而言之，<code>-drive</code>选项说了我们的系统是安装在<code>fs.img</code>和<code>xv6.img</code>这两个硬盘镜像上的。</strong></p><h3 id="B-xv6-img"><a href="#B-xv6-img" class="headerlink" title="B. xv6.img"></a>B. <code>xv6.img</code></h3><p>接下来向上追溯，看看<code>xv6.img</code>这个target：</p><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">xv6.img</span><span class="token punctuation">:</span> bootblock kernel    dd if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>xv6.img count<span class="token operator">=</span>10000    dd if<span class="token operator">=</span>bootblock of<span class="token operator">=</span>xv6.img conv<span class="token operator">=</span>notrunc    dd if<span class="token operator">=</span>kernel of<span class="token operator">=</span>xv6.img seek<span class="token operator">=</span>1 conv<span class="token operator">=</span>notrunc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>xv6.img</code>这个目标首先创建了一个空的磁盘映像<code>xv6.img</code>，然后把<code>bootblock</code>写入到了磁盘的第零个块，而后把<code>kernel</code>写入到第一个块。</p><p>此外，<code>xv6.img</code>目标依赖于<code>bootblock</code>和<code>kernel</code>这两个目标。</p><h3 id="C-kernel"><a href="#C-kernel" class="headerlink" title="C. kernel"></a>C. <code>kernel</code></h3><p><code>xv6.img</code>目标依赖了<code>bootblock</code>和<code>kernel</code>这两个目标，所以我们接下来先看看<code>kernel</code>这个目标</p><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">kernel</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> entry.o entryother initcode kernel.ld    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -T kernel.ld -o kernel entry.o <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> -b binary initcode entryother    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S kernel > kernel.asm    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -t kernel <span class="token operator">|</span> sed <span class="token string">'1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d'</span> > kernel.sym<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>看这个样子，<code>kernel</code>这个目标干的事情就是把目标<code>entry.o</code>、<code>entryother</code>等等编译出来的目标文件（<code>.o</code>）连接在一起，最终输出<code>kernel</code>这个可执行文件。</p><p>而后通过<code>objdump</code>这个命令（在宏<code>OBJDUMP</code>中定义）把<code>kernel</code>反汇编出来，并且把其中的的符号全部列出来。</p><h3 id="D-bootblock"><a href="#D-bootblock" class="headerlink" title="D. bootblock"></a>D. <code>bootblock</code></h3><p>接下来看看<code>bootblock</code>这个目标，<code>bootblock</code>这个目标内容如下</p><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">bootblock</span><span class="token punctuation">:</span> bootasm.S bootmain.c    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -fno-pic -O -nostdinc -I. -c bootmain.c    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -fno-pic -nostdinc -I. -c bootasm.S    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -N -e start -Ttext 0x7C00 -o bootblock.o bootasm.o bootmain.o    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S bootblock.o > bootblock.asm    <span class="token variable">$</span><span class="token punctuation">(</span>OBJCOPY<span class="token punctuation">)</span> -S -O binary -j .text bootblock.o bootblock    ./sign.pl bootblock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体来说，<code>bootblock</code>目标干的事情就是编译了<code>bootmain.c</code>和<code>bootasm.S</code>这两个程序，然后把它们连接在一起之后生成<code>bootblock.o</code></p><p>接下来通过<code>objdump</code>和<code>objcopy</code>来分别进行反汇编和代码段拷贝。</p><p>最后运行<code>sign.pl</code>脚本来进行处理。</p><h3 id="E-fs-img"><a href="#E-fs-img" class="headerlink" title="E. fs.img"></a>E. <code>fs.img</code></h3><p>介绍完了<code>xv6.img</code>接下来我们介绍<code>fs.img</code></p><pre class="line-numbers language-makefile"><code class="language-makefile">UPROGS<span class="token operator">=</span>\    _cat\    _echo\    _forktest\    _grep\    _init\    _kill\    _ln\    _ls\    _mkdir\    _rm\    _sh\    _stressfs\    _usertests\    _wc\    _zombie\<span class="token symbol">fs.img</span><span class="token punctuation">:</span> mkfs README <span class="token variable">$</span><span class="token punctuation">(</span>UPROGS<span class="token punctuation">)</span>    ./mkfs fs.img README <span class="token variable">$</span><span class="token punctuation">(</span>UPROGS<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>fs.img</code>这个目标主要就是通过<code>mkfs</code>这个程序来向<code>fs.img</code>中写入宏<code>UPROGS</code>中指明的程序。</p><h3 id="F-总结"><a href="#F-总结" class="headerlink" title="F. 总结"></a>F. 总结</h3><p>总结一下，当我们在命令行中运行<code>make qemu-nox-gdb</code>命令的时候，<code>make</code>在背后默默为我们做了下面这些事：</p><ol><li>编译内核，并将得到的<code>kernel</code>程序写入到<code>xv6.img</code>这个磁盘映像文件中。</li><li>编译用户程序，而后将所有的用户程序写入到<code>fs.img</code>中</li><li>将<code>xv6.img</code>和<code>fs.img</code>作为虚拟机的磁盘，通过<code>qemu</code>启动虚拟机</li><li>使用<code>qemu</code>的时候启动<code>gdb server</code>以支持远程调试</li></ol><p>到现在为止，我们已经介绍了<code>XV6</code>项目的历史渊源，并且介绍了<code>XV6</code>的项目结构</p>]]></content>
      
      
      <categories>
          
          <category> xv6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Operating System </tag>
            
            <tag> xv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMS教程 8：最小费用流问题</title>
      <link href="/2022/10/17/gams-jiao-cheng-8-zui-xiao-fei-yong-liu-wen-ti/"/>
      <url>/2022/10/17/gams-jiao-cheng-8-zui-xiao-fei-yong-liu-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221017221456195.png" alt="最小费用流问题"></p><h1 id="GAMS教程-8：最小费用流问题"><a href="#GAMS教程-8：最小费用流问题" class="headerlink" title="GAMS教程 8：最小费用流问题"></a>GAMS教程 8：最小费用流问题</h1><p>我们前面介绍了如何使用GAMS求解网络模型中的最佳匹配问题，但事实上网络模型中还有很多问题。本节就将介绍最小费用流问题。</p>]]></content>
      
      
      <categories>
          
          <category> GAMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMS教程 7：最佳匹配集合问题/分配问题</title>
      <link href="/2022/10/16/gams-jiao-cheng-7-wang-luo-mo-xing/"/>
      <url>/2022/10/16/gams-jiao-cheng-7-wang-luo-mo-xing/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221017010621239.png" alt="GAMS解决网络模型"></p><h1 id="GAMS教程-7：最佳匹配集合问题"><a href="#GAMS教程-7：最佳匹配集合问题" class="headerlink" title="GAMS教程 7：最佳匹配集合问题"></a>GAMS教程 7：最佳匹配集合问题</h1><p>前面我们介绍了如何使用<code>GAMS</code>解决线性模型、时序模型。本文将介绍第三类模型，即网络模型。</p><p>网络模型中有很多的问题，今天讲介绍网络模型中的最佳匹配集合问题</p><h2 id="1-网络模型与最佳匹配集合问题"><a href="#1-网络模型与最佳匹配集合问题" class="headerlink" title="1. 网络模型与最佳匹配集合问题"></a>1. 网络模型与最佳匹配集合问题</h2><p>类似前面的时序模型，我们通过一个例子来引入网络模型。而后再介绍最佳匹配集合问题。其实最佳匹配集合问题就是分配问题。</p><h3 id="A-问题背景：作业分配问题"><a href="#A-问题背景：作业分配问题" class="headerlink" title="A. 问题背景：作业分配问题"></a>A. 问题背景：作业分配问题</h3><p>假设某门课上一共有五个学生，而老师一共布置了五个Project。每个学生对不同的项目有不同的喜好，这个喜好具体可以用0-10的preference score来衡量。0表示最不喜欢该项目，而10表示最喜欢该项目。</p><p>现在我们作为教师，希望能够通过合理的分配为每个学生分配一个项目，从而使得总体的满意度最高。</p><h3 id="B-问题抽象"><a href="#B-问题抽象" class="headerlink" title="B. 问题抽象"></a>B. 问题抽象</h3><h4 id="描述满意度"><a href="#描述满意度" class="headerlink" title="描述满意度"></a>描述满意度</h4><p>我们接下来的第一个问题就是该如何描述学生对每个项目的满意度。</p><p>事实上，我们可以使用类似图表示函数的方式来表示学生对每个项目的满意度。例如下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221017013017612.png" alt="描述学生对每个项目的满意度" style="zoom: 33%;"></p><p>上图中：</p><ul><li>我们把每个学生抽象为一个节点，把每个项目抽象为一个节点</li><li>我们把学生对项目的满意抽象为节点与检点之间的边</li></ul><p><strong>通过这种方式，我们就实现了用图来描述匹配问题</strong>。</p><p>因此，我们就可以使用一个矩阵来描述</p><script type="math/tex; mode=display">c_{ij} = 学生i对项目j的偏好</script><p>其中：</p><ul><li>集合$i$是学生集合，集合$j$是项目集合</li></ul><h4 id="描述分配关系"><a href="#描述分配关系" class="headerlink" title="描述分配关系"></a>描述分配关系</h4><p>我们上面通过边表示了学生对每个项目的满意度，下面我们还需要描述项目的分配情况。</p><p>为此，我们也可以使用一个分配矩阵来描述，即</p><script type="math/tex; mode=display">x_{ij}=\left \{\begin{aligned}&1, &若学生i分配到了任务j\\&0, &若学生i没分配到任务j\end{aligned}\right.</script><p>其中：</p><ul><li><p>集合$i$是学生集合，集合$j$是项目集合</p></li><li><p>由于一个学生完成一个项目，因此存在下述约束</p></li></ul><script type="math/tex; mode=display">\begin{aligned}\sum_i x_{ij} &=& 1\\\sum_j x_{ij} &=& 1\end{aligned}</script><h4 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h4><p>我们的目标是最大化总体的满意度，因此优化目标为</p><script type="math/tex; mode=display">\max \sum_{i\in I}\sum_{j\in J}c_{ij}x_{ij}</script><p>其中：</p><ul><li>$x_{ij}\in{0,1},i\in I, j\in J$</li></ul><h3 id="C-数学模型"><a href="#C-数学模型" class="headerlink" title="C. 数学模型"></a>C. 数学模型</h3><p>我们接下来综合上面的三个部分，得到作业分配问题的数学模型。</p><p>首先是决策变量，我们需要决定的就是那个作业被分配给那个学生，因此，决策变量其实就是</p><script type="math/tex; mode=display">x_{ij}=\left \{\begin{aligned}&1, &若学生i分配到了任务j\\&0, &若学生i没分配到任务j\end{aligned}\right.\quad,\qquad\forall i\in I,\ \forall j\in J</script><p>而后是优化目标</p><script type="math/tex; mode=display">\max \sum_{i\in I}\sum_{j\in J}c_{ij}x_{ij}</script><p>最后是约束</p><script type="math/tex; mode=display">\begin{aligned}\sum_i x_{ij} &=& 1\\\sum_j x_{ij} &=& 1\end{aligned}</script><p>综合，我们的数学模型为</p><script type="math/tex; mode=display">\max_{x_{ij}} \sum_{i\in I}\sum_{j\in J}c_{ij}x_{ij}\\\left\{\begin{array}{**lr**}\sum_i x_{ij} &=& 1\\\sum_j x_{ij} &=& 1\\x_{ij} &\in&\{0,1\}\end{array}\right.</script><h3 id="D-网络"><a href="#D-网络" class="headerlink" title="D. 网络"></a>D. 网络</h3><p>我们上面虽然成功建立了作业分配问题的数学模型，但是我们到目前为止都不知道作业分配问题和网络模型以及最佳匹配集合问题之间的联系。</p><p>我们接下来首先给出网络在数学上的定义，而后介绍分配问题和网络之间的关系。</p><h4 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h4><p>定义：图 $G$ 是定义在结点集合 $V$ 和边集 $E\subseteq V\times V$，即 $G=(V,E)$</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221017180701073.png" alt="图的定义" style="zoom:50%;"></p><h4 id="二分图的定义"><a href="#二分图的定义" class="headerlink" title="二分图的定义"></a>二分图的定义</h4><p>二分图：图 $G=(V,E)$ 是一个二分图，若节点 $V$可以分为两个集合，即 $V=L\cup R$，使得所有的边都是在这两个集合间的，即</p><script type="math/tex; mode=display">图G=(V,E)是二分图，当且仅当\\\exists L,R, 使得,V=L\cup R, 且\\e=(i,j)\in E\Rightarrow((i\in L)\cap (j\in R))\cup ((i\in R)\cap (j\in L))</script><p>因此，描述分配问题的图其实就是一个二分图。我们接下来将介绍网络的定义，并将分配问题与网络结合起来。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221017182525685.png" alt="分配问题就是一个二分图" style="zoom:33%;"></p><h4 id="网络的定义"><a href="#网络的定义" class="headerlink" title="网络的定义"></a>网络的定义</h4><p>定义：网络 $G=(N,A)$ 是由一系列结点 $N$ 和弧 $A$ 所组成的图。</p><p>注意，当有方向的边(edge)成为弧(arc)，因此网络即有向图。</p><p>一个容量网络即指网络中的每一个弧 $a\in A$ 都有对应的容量 $u_a$</p><h4 id="网络的描述：节点-边链接矩阵（Node-Arc-Incidence-Matrix）"><a href="#网络的描述：节点-边链接矩阵（Node-Arc-Incidence-Matrix）" class="headerlink" title="网络的描述：节点-边链接矩阵（Node-Arc Incidence Matrix）"></a>网络的描述：节点-边链接矩阵（Node-Arc Incidence Matrix）</h4><p>我们可以用节点-边链接矩阵来描述一个网络，例如下面的网络</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221017180008176.png" alt="使用节点-边链接矩阵描述网络" style="zoom: 33%;"></p><p>其中：</p><ul><li>节点-边链接矩阵的行对应节点，而列对应所有的边。</li><li>节点-边链接矩阵中的每一行描述了对应节点连接情况</li><li>若边进入节点，则值为<code>-1</code>，若边从节点离开，则值为<code>1</code></li><li>节点-边链接矩阵最大的形状是$n\times 2\cdot C_n^2$</li></ul><h4 id="匹配集合"><a href="#匹配集合" class="headerlink" title="匹配集合"></a>匹配集合</h4><p>匹配集合 $M\subseteq E$ 指的是对于结点集合 $V$ 中的每一个节点 $v$，$M$ 中至少有一个边是与节点 $v$ 连接的</p><p>而完美匹配集合指的是对于节点集合 $V$ 中的每一个节点 $v$，$M$ 中恰好有一个边是与节点 $v$ 连接 </p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221017191039934.png" alt="匹配问题" style="zoom:50%;"></p><p>因此，作业分配问题其实就是在一个带权二分图中寻找到一个最大权的最佳匹配集合。</p><p>有很多算法都能解决任务分配问题，例如匈牙利算法，时间复杂度是$O(n^3)$。目前做的最好的算法的时间复杂度是$O(m+n^2)$。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221017191114353.png" alt="作业分配问题" style="zoom:50%;"></p><h2 id="2-GAMS求解网络模型"><a href="#2-GAMS求解网络模型" class="headerlink" title="2. GAMS求解网络模型"></a>2. GAMS求解网络模型</h2><p>我们接下来讲解<code>GAMS</code>中如何求解网络模型</p><h3 id="A-数据声明"><a href="#A-数据声明" class="headerlink" title="A. 数据声明"></a>A. 数据声明</h3><p>数据声明其实很简单，就是两个集合，分别对应学生和项目。然后还有学生对每个项目的满意度，是一个表格。</p><p>而决策变量$x_{ij}$要么就是1，要么就是0，因此是一个二元的变量。所以我们下面声明决策变量<code>x</code>是一个表格形式的变量</p><pre class="line-numbers language-gas"><code class="language-gas">$title Assigning students to projects to maximize overall satisfactionoption limrow=0, limcol=0;$onecho > cplex.optlpmethod 3netfind 2preind 0$offechoset projects/proj1*proj5/    students/student1*student5/;table preferences(students,projects)             proj1     proj2     proj3     proj4    proj5student1      7          6        5          8       9student2      0          3        0          8       5student3      0          0        0          4       3student4      0          9        3          0       9student5      0          6        7          6       0;* want x to be 1 if that student is assigned to that project; 0 otherwise* (actually in this simple assignment problem, dont need the variables to* be binary)binary variable x(students,projects);variable satisfaction;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B-约束声明"><a href="#B-约束声明" class="headerlink" title="B. 约束声明"></a>B. 约束声明</h3><p>约束声明比较简单，就是求和等于1。决策变量的约束就是循环求和。</p><pre class="line-numbers language-gas"><code class="language-gas">equations EQassignProjects(projects), EQassignStudents(students), objective;* ensure that each project is assigned to one of the studentEQassignProjects(projects)..     sum(students, x(students,projects)) =e= 1;* ensure that each students is assigned exactly one projectEQassignStudents(students)..      sum(projects, x(students,projects)) =e= 1;* satisfaction indexobjective..  satisfaction =e= sum((students,projects),    x(students,projects) * preferences(students,projects));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-模型声明与求解"><a href="#C-模型声明与求解" class="headerlink" title="C. 模型声明与求解"></a>C. 模型声明与求解</h3><p>最后，我们直接声明模型并求解</p><pre class="line-numbers language-gas"><code class="language-gas">model  happyclass /EQassignProjects, EQassignStudents, objective/;x.up(students,projects) = 1;solve happyclass using mip maximizing satisfaction;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们上面声明了<code>x</code>是<code>binary</code>的变量，所以其实没必要声明<code>x</code>的上界。</p><h3 id="D-综合"><a href="#D-综合" class="headerlink" title="D. 综合"></a>D. 综合</h3><p>最后，我们求解网络模型的GAMS程序为</p><pre class="line-numbers language-gas"><code class="language-gas">$title Assigning students to projects to maximize overall satisfactionoption limrow=0, limcol=0;$ontextA teacher wishes to assign 5 projects to 5 different students. Eachstudent has indicated their preference for each project by assigning it ascore between 0 and 10 (0 indicating strong dislike and 10 indicatingstrong preference). The teacher wishes to make the assignment of projectsto students in a way that maximizes their overall satisfaction, asmeasured by the sum of the preferences for the given assignments.$offtext$onecho > cplex.optlpmethod 3netfind 2preind 0$offechoset projects/proj1*proj5/    students/student1*student5/;table preferences(students,projects)             proj1     proj2     proj3     proj4    proj5student1      7          6        5          8       9*student1      0          0        5.2        8.3     0student2      0          3        0          8       5student3      0          0        0          4       3student4      0          9        3          0       9student5      0          6        7          6       0;* want x to be 1 if that student is assigned to that project; 0 otherwise* (actually in this simple assignment problem, dont need the variables to* be binary)binary variable x(students,projects);variable satisfaction;equations EQassignProjects(projects), EQassignStudents(students), objective;* ensure that each project is assigned to one of the studentEQassignProjects(projects).. sum(students, x(students,projects)) =e= 1;* ensure that each students is assigned exactly one projectEQassignStudents(students)..  sum(projects, x(students,projects)) =e= 1;* satisfaction indexobjective..  satisfaction =e= sum((students,projects),    x(students,projects) * preferences(students,projects));model  happyclass /EQassignProjects, EQassignStudents, objective/;* happyclass.optfile = 1;x.up(students,projects) = 1;solve happyclass using mip maximizing satisfaction;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> GAMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMS教程 6：绝对值约束与MinMax目标变量</title>
      <link href="/2022/10/16/gams-jiao-cheng-6-jue-dui-zhi-yue-shu-yu-minmax-mu-biao-bian-liang/"/>
      <url>/2022/10/16/gams-jiao-cheng-6-jue-dui-zhi-yue-shu-yu-minmax-mu-biao-bian-liang/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016214309645.png" alt="绝对值约束与MinMax目标变量"></p><h1 id="GAMS教程-6：绝对值约束与MinMax目标变量"><a href="#GAMS教程-6：绝对值约束与MinMax目标变量" class="headerlink" title="GAMS教程 6：绝对值约束与MinMax目标变量"></a>GAMS教程 6：绝对值约束与MinMax目标变量</h1><p>本节我们不讲新的优化模型，相反，这节我们讲讲<code>GAMS</code>如何处理优化问题中两个常见的问题。</p><h2 id="1-绝对值约束"><a href="#1-绝对值约束" class="headerlink" title="1. 绝对值约束"></a>1. 绝对值约束</h2><p>我们前面介绍了线性模型和时序模型，虽然时序模型并不仅限于线性模型，时序模型的约束完全可以是二次的、三次的。但是考虑到我们只讲了线性模型，所以为了方便理解时序模型，我们才使用的现行约束。</p><p>事实上，我们的优化问题中经常会出现一类约束，这类约束就是绝对值约束。我们下面就将讲解如何使用GAMS来处理绝对值约束。</p><h3 id="A-绝对值约束的定义"><a href="#A-绝对值约束的定义" class="headerlink" title="A. 绝对值约束的定义"></a>A. 绝对值约束的定义</h3><p>绝对值约束是指形如下面的约束</p><script type="math/tex; mode=display">|f(x)|\leq b</script><p>其中：</p><ul><li>$f(x)$不一定是线性的。<strong>但是为了便于理解，我们还是线性为例</strong>。</li><li>$|f(x)|$不是线性约束。</li></ul><p>为了方便简介，后面我们设</p><script type="math/tex; mode=display">f(x) = a^Tx</script><h3 id="B-GAMS中处理绝对值约束"><a href="#B-GAMS中处理绝对值约束" class="headerlink" title="B. GAMS中处理绝对值约束"></a>B. GAMS中处理绝对值约束</h3><p>对于绝对值，有</p><script type="math/tex; mode=display">|a^Tx| \leq b \Leftrightarrow \max\{a^Tx, -a^Tx\}</script><p>因此为了在<code>GAMS</code>中为了处理绝对值，我们可以进行如下的变换</p><script type="math/tex; mode=display">|a^Tx|\leq b \Leftrightarrow\left\{\begin{array}{**lr**}a^Tx &\leq&b\\-a^Tx &\leq&b\end{array}\right.</script><h2 id="2-MinMax目标变量"><a href="#2-MinMax目标变量" class="headerlink" title="2. MinMax目标变量"></a>2. MinMax目标变量</h2><p>和上面的绝对值约束一样，为了便于讲解如何利用<code>GAMS</code>解决<code>MinMax</code>目标变量问题，我们下面还是以线性模型为例。</p><h3 id="A-MinMax目标变量的含义"><a href="#A-MinMax目标变量的含义" class="headerlink" title="A. MinMax目标变量的含义"></a>A. MinMax目标变量的含义</h3><p>所谓<code>MinMax</code>目标变量指的是我们在很多优化问题中，遇到一类优化问题的目标变量是混合了<code>min</code>和<code>max</code>的目标变量，即</p><script type="math/tex; mode=display">\max p\\p=f(x)=\min a^Tx</script><p>或</p><script type="math/tex; mode=display">\min p\\p=f(x)=\max a^Tx</script><h3 id="B-GAMS处理MinMax目标变量"><a href="#B-GAMS处理MinMax目标变量" class="headerlink" title="B. GAMS处理MinMax目标变量"></a>B. GAMS处理MinMax目标变量</h3><p><code>GAMS</code>中处理<code>MinMax</code>目标变量的方法和处理绝对值约束的思路其实差不多，都是进行等价变换，将其转换为额外的约束。</p><p>处理<code>MinMax</code>目标变量最核心的，就是下面的等价变换</p><script type="math/tex; mode=display">\begin{aligned}z&=&\min a^Tx &\Leftrightarrow& z&\leq& \min a^Tx &\Leftrightarrow& z&\leq& a^Tx\\z&=&\max a^Tx &\Leftrightarrow& z&\geq& \max a^Tx &\Leftrightarrow& z&\geq& a^Tx\end{aligned}</script><p>因此，在处理<code>MinMax</code>目标变量的时候，我们可以使用上面的等价变换先把内层的变换换掉，即</p><script type="math/tex; mode=display">\max z=\max (\min a^Tx)\\\Updownarrow\\\max p,\ p \leq a^Tx</script><p>即通过添加</p><script type="math/tex; mode=display">p\leq a^Tx</script><p>这个约束来把内层的循环消掉</p><p>同理，如果是外层<code>max</code>内层<code>max</code>的话，那么我们进行如下的变换</p><script type="math/tex; mode=display">\max z=\min (\max a^Tx)\\\Updownarrow\\\min p,\ p \geq a^Tx</script><p>即通过添加</p><script type="math/tex; mode=display">p \geq a^Tx</script><p>这个约束来消除内层循环</p>]]></content>
      
      
      <categories>
          
          <category> GAMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMS教程 5：时序模型</title>
      <link href="/2022/10/16/gams-jiao-cheng-5-shi-xu-mo-xing/"/>
      <url>/2022/10/16/gams-jiao-cheng-5-shi-xu-mo-xing/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016165700840.png" alt="时序模型"></p><h1 id="GAMS教程-5：时序模型"><a href="#GAMS教程-5：时序模型" class="headerlink" title="GAMS教程 5：时序模型"></a>GAMS教程 5：时序模型</h1><p>在很多优化模型中，我们都会遇到时序问题，即我们优化模型中的约束在每个月都有，而上个月的情况又会影响到下个月，例如工厂中上个月的原材料库存会影响到下个月的原材料进货。而我们的目标就是实现几个月内利润的最大化。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016170259021.png" alt="上个月的库存+本月产量=下个月库存+销售量"></p><p>因此，时序模型作为一大类模型，本节就将对其进行讲解。</p><h2 id="1-时序模型"><a href="#1-时序模型" class="headerlink" title="1. 时序模型"></a>1. 时序模型</h2><p>本节我么将以一个时序问题为例，讲解时序模型。</p><h3 id="A-问题背景Shoe-Company"><a href="#A-问题背景Shoe-Company" class="headerlink" title="A. 问题背景Shoe Company"></a>A. 问题背景Shoe Company</h3><p>假设我们现在开着一家鞋业公司<code>Shoe Company</code>。在每个月，我们都会收到不同数量的订单，我们需要满足这些订单。而在此基础上，我们可以选择额外多生产一些鞋子，以减轻下个月的生产压力。</p><p>换而言之，每个月我们可以利用上个月剩余的未售出的鞋子与本月新生产出的鞋子一起进行销售以满足每个月收到的订单，但是每个月末存储一双鞋需要消耗$3元。</p><p>我们在每月开始的时候，可以花钱新雇佣工人以提升本月的产能。每生产一双鞋需要消耗4个工时以及$15元的材料费。</p><p>在月初新雇佣一个工人需要花费$1600，而在月末开除一位工人需要花费$2000。一位工人一个月的工资是$1500元，在此基础上工人每个月的工时是160小时。</p><p>如果正在赶做订单，我们可以要求工人加班，加班费是一个小时$13元，而每位工人一个月最多加班20小时。</p><p>本时序优化问题的Planning Horizon是4个月，即由我们决定四个月内，每个月鞋子的生产量、新雇佣工人的数量、开除的工人数量、储存的鞋子数量等等，最终的目的就是最小化开销。</p><h3 id="B-任务数据"><a href="#B-任务数据" class="headerlink" title="B. 任务数据"></a>B. 任务数据</h3><p>问题中所有的数据如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016175102371.png" alt="任务数据-1"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016175117477.png" alt="任务数据-2"></p><h3 id="C-数学模型"><a href="#C-数学模型" class="headerlink" title="C. 数学模型"></a>C. 数学模型</h3><p>为了使用<code>GAMS</code>求解，我们首先需要写出上述任务的数学模型，而后使用<code>GAMS</code>进行求解</p><h4 id="决策变量"><a href="#决策变量" class="headerlink" title="决策变量"></a>决策变量</h4><p>问题的第一步就是确定问题的决策变量。一般来说，在一个复杂的问题中，这一步是最难的，因为我们往往无法准确的知道所有的决策变量，总是在建立数学模型的过程中才发现我们缺少某个决策变量。</p><p>这个问题中，我们需要决定的变量有：</p><ul><li>每个月生产的鞋子</li><li>每个月末存储的鞋子</li><li>每个月初可用的工人</li><li>每个月加班总时长</li><li>每个月初新雇佣的工人数</li><li>每个月末开除的工人数</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016175928403.png" alt="Shoe Company问题中的决策变量"></p><h4 id="目标变量：开销"><a href="#目标变量：开销" class="headerlink" title="目标变量：开销"></a>目标变量：开销</h4><p>假设四个月中，每个月生产$x_t$双鞋（$t\in{1,2,3,4}$）我们首先写出来任务中所有的开销项：</p><ul><li>材料费：$\sum_{t\in T}\delta\cdot x_t$</li><li>工资：$\sum_{t\in T}\alpha\cdot w_t$</li><li>加班工资：$\sum_{t\in T}\beta\cdot o_t$</li><li>月初新雇佣开销：$\sum_{t\in T}\eta\cdot h_t$</li><li>月末开除开销：$\sum_{t\in T}\zeta\cdot f_t$</li><li>库存开销：$\sum_{t\in T}\iota I_t$</li></ul><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><p>我们写出了目标变量的计算式之后，接下来就要写出问题中的约束。</p><p>在这个时序问题中，尽管没有直接的约束，但是其实还是存在逻辑上的约束，具体来说，包括：</p><ul><li>每个月生产使用的工时要小于总可用的工时</li></ul><script type="math/tex; mode=display">ax_t \leq Hw_t +o_t</script><ul><li>每个月加班总工时要在允许范围内</li></ul><script type="math/tex; mode=display">o_t \leq Ow_t</script><ul><li>每个月的需求必须被满足</li></ul><script type="math/tex; mode=display">I_t \geq 0</script><ul><li>上个月初的库存+本月新生产 = 需求 + 下个月初的库存</li></ul><script type="math/tex; mode=display">I_{t-1} + x_t     = d_t +I_t,\ \forall t\in T</script><ul><li>本月可用工人 = 上个月可用工人 + 本月初新雇佣工人 - 上个月末开除工人</li></ul><script type="math/tex; mode=display">w_t = w_{t-1}+h_t - f_t</script><h4 id="数学模型"><a href="#数学模型" class="headerlink" title="数学模型"></a>数学模型</h4><p>综合上面目标变量和约束，我们可以得到<code>Shoe Company</code>问题的数学模型为</p><script type="math/tex; mode=display">\min_{t\in T}\sum(\delta\cdot x_t+\alpha\cdot w_t+\beta\cdot o_t+\eta\cdot h_t+\zeta\cdot f_t+\iota \cdot I_t)\\\left\{\begin{array}{**lr**}ax_t &\leq& Hw_t +o_t\\o_t &\leq& Ow_t\\I_t &\geq& 0\\I_{t-1} + x_t     &=& d_t +I_t\\w_t &=& w_{t-1}+h_t - f_t\\I_0&=&\mathcal{I}_0\\w_0 &=& \mathcal{W}_0\end{array}\right.</script><h2 id="2-GAMS实现"><a href="#2-GAMS实现" class="headerlink" title="2. GAMS实现"></a>2. GAMS实现</h2><p>接下来，我们就要使用GAMS去实现一下上述的时序模型了。</p><h3 id="A-数据声明"><a href="#A-数据声明" class="headerlink" title="A. 数据声明"></a>A. 数据声明</h3><p>首先是数据声明部分，包括Scalar、Parameter、Table、Set以及Variable在内的。</p><p>和前面一样，为了实现数据和模型的分离，还是把所有的数据声明放在一个<code>.inc</code>文件里</p><pre class="line-numbers language-gas"><code class="language-gas">* shoeco.incparameter d / Jan 3000, Feb 5000, Mar 2000, Apr 1000/;I0 = 500;W0 = 100;alpha = 1500;MAXH = 160;MAXO = 20;beta = 13;a = 4;delta = 15;eta = 1600;zeta = 2000;iota = 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而后，在<code>shoeco.gams</code>的开头部分声明剩余的数据</p><pre class="line-numbers language-gas"><code class="language-gas">$title ShoeCo Aggregate Planning Model.set T;scalars    I0      Initial Inventory    W0      Initial Number of Workers    alpha   Dollars per month for worker    beta    Dollars per hour for overtime    MAXH    max hours per month    MAXO    max overtime hours per month    a       labor hours per shoe    delta   Raw material costs (dollars) per shoe    eta     hiring cost (dollars) per worker    zeta    firing cost (dollars) per worker    iota    inventory cost (dollars) per shoe;parameters    d(T<)    Demand;* Now assign all the data$include shoeco.incdisplay T;positive variables    x(T)    Production in period T    I(T)    Ending inventory in period T    w(T)    Worker level at end of period T    h(T)    Number of workers hired at beginning of T    f(T)    Number of workers fired at beginning of T    o(T)    Number of overtime hours in period T;free variable cost;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B-约束"><a href="#B-约束" class="headerlink" title="B. 约束"></a>B. 约束</h3><p>对于约束，其实有两个小问题：</p><ul><li>约束个数问题</li><li>边界问题</li></ul><h4 id="约束个数问题"><a href="#约束个数问题" class="headerlink" title="约束个数问题"></a>约束个数问题</h4><p>我们上面得到的优化模型的约束如下</p><script type="math/tex; mode=display">\left\{\begin{array}{**lr**}ax_t &\leq& Hw_t +o_t\\o_t &\leq& Ow_t\\I_t &\geq& 0\\I_{t-1} + x_t     &=& d_t +I_t\\w_t &=& w_{t-1}+h_t - f_t\\\end{array}\right.</script><p>这五项都是和时间$t$有关的，每个月都有一个约束。注意，第三个约束其实规定了下届，所以等下用<code>.lo</code>去处理。因此我们把四个月都算上的话，其实四个约束能展开成16个约束。</p><p>但是因为都是和时间有关的，所以我们其实可以把每个约束都声明成为一个矩阵约束。例如对于第一个约束来说，四个约束展开就是：</p><script type="math/tex; mode=display">\left\{\begin{array}{**lr**}ax_1 &\leq& Hw_1 + o_1\\ax_2 &\leq& Hw_2 + o_2\\ax_3 &\leq& Hw_3 + o_3\\ax_4 &\leq& Hw_4 + o_4\\\end{array}\right.\\\Updownarrow\\a\cdot\begin{bmatrix}x_1 \\ x_2 \\ x_3 \\ x_4 \end{bmatrix} \leqH\cdot\begin{bmatrix}w_1 \\ w_2 \\ w_3 \\ w_4\end{bmatrix}+\begin{bmatrix}o_1 \\ o_2 \\ o_3 \\ o_4\end{bmatrix}</script><p>因此这四个约束其实可以直接写成一个矩阵约束，即</p><pre class="line-numbers language-gas"><code class="language-gas">Set T /Jan, Feb, Mar, Apr/;Variable X(T);equation constraion1(T);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同理，剩下的三个约束都是矩阵约束，故有</p><pre class="line-numbers language-gas"><code class="language-gas">set T /Jan, Feb, Mar, Apr/;equations    RegLabor_eq(T)    OverLabor_eq(T)    BalShoe_eq(T)    BalPeople_eq(T);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="边界问题"><a href="#边界问题" class="headerlink" title="边界问题"></a>边界问题</h4><p>我们所有的约束中有两个等式，一个是库存的等式，一个是工人的等式，即<code>BalShoe_eq</code>和<code>BalPeople_eq</code>。这两个等式虽然说都是矩阵约束，但是这两个约束在边界上存在问题。</p><p>具体来说就是在第一个月的时候，这两个约束是</p><script type="math/tex; mode=display">\left\{\begin{array}{**lr**}I_{0} + x_1     &=& d_1 +I_1\\w_1 &=& w_{0} + h_1 - f_1\\\end{array}\right.</script><p>可是$I_0$和$w_0$是两个Scalar，并不属于Variable <code>I(T)</code>和<code>w(T)</code>中。因此在第一个月，这两个约束和剩下月份的约束不同。</p><p>为此，这两个约束可以这样写</p><pre class="line-numbers language-gas"><code class="language-gas">BalShoe_eq(T)..    I0$(ord(T) eq 1) + I(T-1) + x(T) =E= d(T) + I(T) ;BalPeople_eq(T)..    W0$(ord(T) eq 1) + w(T-1) + h(T) =E=  w(T) + f(T) ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-综合"><a href="#C-综合" class="headerlink" title="C. 综合"></a>C. 综合</h3><p>综上，针对<code>Shoe Company</code>问题的GAMS程序为</p><pre class="line-numbers language-gas"><code class="language-gas">* shoeco.incparameter d / Jan 3000, Feb 5000, Mar 2000, Apr 1000/;I0 = 500;W0 = 100;alpha = 1500;MAXH = 160;MAXO = 20;beta = 13;a = 4;delta = 15;eta = 1600;zeta = 2000;iota = 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-gas"><code class="language-gas">* shoeco.gms$title ShoeCo Aggregate Planning Model.option limrow = 50, limcol = 0 ;set T;scalars    I0      Initial Inventory    W0      Initial Number of Workers    alpha   Dollars per month for worker    beta    Dollars per hour for overtime    MAXH    max hours per month    MAXO    max overtime hours per month    a       labor hours per shoe    delta   Raw material costs (dollars) per shoe    eta     hiring cost (dollars) per worker    zeta    firing cost (dollars) per worker    iota    inventory cost (dollars) per shoe;parameters    d(T<)    Demand;* Now assign all the data$include shoeco.incdisplay T;positive variables    x(T)    Production in period T    I(T)    Ending inventory in period T    w(T)    Worker level at end of period T    h(T)    Number of workers hired at beginning of T    f(T)    Number of workers fired at beginning of T    o(T)    Number of overtime hours in period T;free variable cost;equations    cost_eq    RegLabor_eq(T)    OverLabor_eq(T)    BalShoe_eq(T)    BalPeople_eq(T);cost_eq..    cost =E= sum(T, delta*x(T) + alpha * w(T) + beta * o(T) + eta * h(T) +                    zeta * f(T) + iota * I(t)) ;RegLabor_eq(T)..    a*x(T) =L= MAXH * w(T) + o(T) ;OverLabor_eq(T)..    o(T) =L= MAXO*w(T) ;BalShoe_eq(T)..    I0$(ord(T) eq 1) + I(T-1) + x(T) =E= d(T) + I(T) ;BalPeople_eq(T)..    W0$(ord(T) eq 1) + w(T-1) + h(T) =E=  w(T) + f(T) ;model shoeco /all/;* d(T) = 2*d(T);solve shoeco minimizing cost using lp;display x.l, I.l, w.l, h.l, f.l, o.l;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> GAMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMS教程 4：线性模型</title>
      <link href="/2022/10/15/gams-jiao-cheng-4-xian-xing-mo-xing/"/>
      <url>/2022/10/15/gams-jiao-cheng-4-xian-xing-mo-xing/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016165034176.png" alt="线性模型"></p><h1 id="GAMS教程-4：线性模型"><a href="#GAMS教程-4：线性模型" class="headerlink" title="GAMS教程 4：线性模型"></a>GAMS教程 4：线性模型</h1><p>在前面的几讲中，我们讲解了GAMS的基础知识，也仅限于GAMS中的基础知识。但事实上，GAMS作为一个工具，我们使用GAMS是为了求解优化问题。</p><p>因此，我们关于GAMS，其实要学习的内容包括两部分：</p><ul><li>第一部分是GAMS的基础知识，包括语法、程序结构等等</li><li>第二部分是如何使用GAMS求解优化问题的知识</li></ul><p>从本节开始，我们就将关注与第二部分，即讲解如何使用GAMS求解优化问题。</p><p>本节，我们就将讲解线性模型。我们首先给出线性模型的定义和几个特征（属性），而后再举几个线性模型的例子以及如何用GAMS求解线性模型。</p><h2 id="1-线性模型"><a href="#1-线性模型" class="headerlink" title="1. 线性模型"></a>1. 线性模型</h2><h3 id="A-定义"><a href="#A-定义" class="headerlink" title="A. 定义"></a>A. 定义</h3><p>线性模型指的是模型中的约束都是线性的优化模型。</p><p>用数学语言来描述，就是仅包含线性等式约束和线性不等式约束的优化模型</p><h4 id="线性等式约束"><a href="#线性等式约束" class="headerlink" title="线性等式约束"></a>线性等式约束</h4><p>线性等式约束的定义如下：</p><script type="math/tex; mode=display">f:\mathbb{R}^n\rightarrow \mathbb{R}是一个线性等式约束，当且仅当存在系数向量\ C=\{c_1,\cdots,c_n\}，\ 使得\\f(x_1,\cdots,x_n)=\sum_{i=1}^nc_ix_i\\即\\f(x) = c^Tx</script><h4 id="线性不等式约束"><a href="#线性不等式约束" class="headerlink" title="线性不等式约束"></a>线性不等式约束</h4><p>线性不等式约束的定义如下</p><script type="math/tex; mode=display">f:\mathbb{R}^n\rightarrow \mathbb{R}是一个线性不等式约束，当且仅当存在系数向量\ C=\{c_1,\cdots,c_n\}，\ 使得\\f(x_1,\cdots,x_n)=\sum_{i=1}^nc_ix_i\leq b\\即\\f(x) = c^Tx \leq b</script><h3 id="B-线性模型的特征"><a href="#B-线性模型的特征" class="headerlink" title="B. 线性模型的特征"></a>B. 线性模型的特征</h3><p>线性模型具有以下的特征：</p><ul><li><strong>Proportionality</strong>： Inputs/outputs/costs must keep same proportions as levels change</li><li><strong>Additivity</strong>： The activites (production amounts. etc), are an additive (linear) function of the input variables</li><li><strong>Divisibility</strong>：The activity can be operated at any real level between upper and lower bounds (if any)</li></ul><h2 id="2-使用GAMS解决线性模型"><a href="#2-使用GAMS解决线性模型" class="headerlink" title="2. 使用GAMS解决线性模型"></a>2. 使用GAMS解决线性模型</h2><p>我们接下来举几个GAMS解决线性模型的例子。</p><h3 id="A-TopBrass-Company"><a href="#A-TopBrass-Company" class="headerlink" title="A. TopBrass Company"></a>A. TopBrass Company</h3><p>第一个例子就是在前言中介绍的为<code>TopBrass Company</code>制作奖杯的问题</p><blockquote><p><code>Top Brass Trophy Company</code>是一家专门生产奖杯的公司，这家公司生产两种奖杯：</p><ul><li>足球奖杯（Soccer）</li><li>橄榄球奖杯（Football）</li></ul><p>卖出一个橄榄球奖杯将会获得$12的利润，而卖出一个足球奖杯将会获得$9元的利润。而生产一个奖杯，两种奖杯分别需要消耗：</p><ul><li>木质底座：橄榄球奖杯需要4平方英寸大小的木板，足球奖杯需要2平方英尺的奖杯</li><li>奖杯体：各消耗一个</li><li>顶端的标志物：橄榄球顶端有一个铜制橄榄球，而足球奖杯顶端有一个铜制足球。</li></ul><p>假设目前库存的原材料为：</p><ul><li>1000个黄铜橄榄球</li><li>1500个黄铜足球</li><li>1750个奖杯体</li><li>4900平方英寸的木板</li></ul><p>假设制作的所有奖杯都能够售出，那么<code>Top Brass Trophy Company</code>能够获得的最大利润是多少？</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012215548339.png" alt="制作所需的材料表" style="zoom: 33%;"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012215608795-20221016151444228.png" alt="库存的原材料" style="zoom:33%;"></p></blockquote><p>通常，我们在求解线性问题的时候，最好先列出线性问题的数学模型。</p><p>而<code>TopBrass Company</code>问题中的数学模型如下</p><script type="math/tex; mode=display">\max p\\\left\{\begin{array}{**lr**}12 f + 9s &=& p\\4f + 2s &\leq& 4800\\f + s &\leq&1750\\0 &\leq& f &\leq& 1000\\0 &\leq& s &\leq& 1500\\\end{array}\right.</script><p>该优化问题中，决策变量是$f$和$s$，目标变量是$p$，<em>因此我们一共要声明三个变量</em>。</p><p>此外，优化问题一共有7个约束。但是7个约束中的四个约束其实都是针对变量$f$和$s$的范围进行的约束，因此对于这四个约束，可以使用变量的属性来进行声明，即<code>.lo</code>和<code>.up</code>属性来声明变量的上下限。所以，我们<em>一共需要声明三个<code>equation</code></em>。</p><p>由于有三个约束，因此就需要三个参数（Parameter）。但是由于<code>f+s</code>的参数都是1，所以<em>其实只需要两个参数即可</em>。</p><p>因此，对于这个优化问题我们最终的解如下</p><pre class="line-numbers language-gas"><code class="language-gas">* Top Brass 4 介绍了Parameter，Scalar，针对Parameter的Sum操作以及集合中元素的属性set I/football, soccer/;free variable profit "total profit";positive variablesx(I) "trophies";parameters  profitMargin(I) / "football" 12 , "soccer" 9 /  boardFeet(I)    / "football"  4 , "soccer" 2 /  plaques(I)      / "football"  1 , "soccer" 1 /;scalar  plaquesMax /1750/  woodMax    /4800/  footballMax /1000/  soccerMax /1500/;equations  obj    "max total profit"  plaq   "bound on the number of plaques to be used",  wood   "bound on the amount of wood to be used";obj..  profit =e= sum(I, profitMargin(I)*x(I));plaq..  sum(I,plaques(I)*x(I)) =l= plaquesMax;wood..  sum(I,boardFeet(I)*x(I)) =l= woodMax;model topbrass /all/;x.up("football") = footballMax;x.up("soccer") = soccerMax;solve topbrass using lp maximizing profit;parameter pct(I) "holds the final percentages";alias (I,J);pct(I) = 100 * x.l(I)  / (sum(J,x.l(J)));display pct;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，我们可以把两个参数（Parameter）集合起来，组成一个表格（Table）。然后我们就把两个资源限制的公式集合起来。具体代码如下：</p><pre class="line-numbers language-gas"><code class="language-gas">$title Top Brass (LP) Example 5.1 of Rardin (1998)  (modified)option limrow = 0, limcol = 0;option solprint=off;set I /football,soccer/;set R /plaques,wood/;table a(R,I)  "Per-Unit resource requirements"         football   soccerplaques     1         1wood        4         2  ;parameters    c(I) / "football" 12 , "soccer" 9 /    u(I) / "football" 1000 , "soccer"  1500 /    b(R) / "plaques"  1750,  "wood"  4800 /;free variable profit "total profit";positive variablesx(I)     "number trophies" ;equations    profit_eq         "profit definition"    resource_con(R)   "resource limit" ;profit_eq..  profit =E= sum(I,c(I)*x(I));resource_con(R)..  sum(I, a(R,I)*x(I)) =L= b(R);x.up(I) = u(I);model btb /all/;solve btb using lp maximizing profit;parameter pct(I) "holds the final percentages";alias (I,J);pct(I) = 100 * x.l(I)  / sum(J, x.l(J))display pct;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B-BigTop-Brass"><a href="#B-BigTop-Brass" class="headerlink" title="B. BigTop Brass"></a>B. BigTop Brass</h3><p>在<code>TopBrass</code>问题中，我们只有两种奖杯、三种资源。如果我们把问题的规模在扩大一下，变成20种奖杯、200种资源呢？此时问题就会非常非常大，我们基本上没法手动解决。</p><p>所以在这种时候，我们必须要用<code>GAMS</code>来帮助我们解决问题。</p><p>我们可以把数据声明单独写成一个文件<code>.inc</code>文件</p><pre class="line-numbers language-gas"><code class="language-gas">* bigtopbrass.incset I /football,soccer/;set R /plaques,wood/;table a(R,I)  "Per-Unit resource requirements"         football   soccerplaques     1         1wood        4         2  ;parameters    c(I) / "football" 12 , "soccer" 9 /    u(I) / "football" 1000 , "soccer"  1500 /    b(R) / "plaques"  1750,  "wood"  4800 /;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再描述模型的<code>.gams</code>文件中<code>include</code>数据声明文件</p><pre class="line-numbers language-gas"><code class="language-gas">$ondollar$title Big Top Brass (LP)$include bigtopbrass-1.incfree variable profit "total profit";positive variablesx(I)     "number trophies" ;equationsprofit_eq         "profit definition"resource_con(R)   "resource limit" ;profit_eq..  profit =E= sum(I,c(I)*x(I));resource_con(R)..  sum(I, a(R,I)*x(I)) =L= b(R);x.up(I) = u(I);model btb /all/;solve btb using lp maximizing profit;display x.l;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-McGrease营养问题"><a href="#C-McGrease营养问题" class="headerlink" title="C. McGrease营养问题"></a>C. McGrease营养问题</h3><p>通常人们认为快餐是不营养的，但是快餐的味道却非常好。不巧的是，美国有非常多的快餐。而<code>McGrease</code>问题研究的就是对于麦当劳中的每种食物，我们该如何吃、吃出什么样的配比才能够保证我们营养的同时开销最小。</p><p>假设现在一共有以下几种麦当劳的食物（都是美国这里的麦当劳经典款）</p><blockquote><p>QP: Quarter Pounder                        // 牛肉汉堡</p><p>MD: McLean Deluxe                        // 另一种汉堡</p><p>BM: Big Mac                                     // 双层牛肉堡</p><p>FF: Filet-O-Fish                                // 鳕鱼堡</p><p>MC: McGrilled Chicken                    // 麦乐鸡</p><p>FR: Small Fries                                 // 薯条</p><p>SM: Sausage McMuffiffiffin          // 下午茶的香肠</p><p>1M: 1% Milk                                      // 牛奶</p><p>OJ: Orange Juice                            // 橙汁</p></blockquote><p>而我们需要的营养有以下几种</p><blockquote><p>Prot: Protein</p><p>VitA: Vitamin A</p><p>VitC: Vitamin C</p><p>Calc: Calcium</p><p>Iron: Iron</p><p>Cals: Calories</p><p>Carb: Carbohydrates</p></blockquote><p>而每种食物各种营养成分的含量、价格以及我们需要的营养成分如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016155949636.png" alt="价格、营养成分表"></p><p>拿到一个优化问题后，我们首先需要考虑的就是确定决策变量和优化目标，而后才是问题中的优化目标。</p><p><code>McGrease</code>问题中的决策变量就是九种食物每种事物的食用量，而目标变量就是总价，约束就是每种食物提供的营养的总和。</p><p>所以上面的优化问题的数学描述为：</p><script type="math/tex; mode=display">\min c\\\left\{\begin{array}{**lr**}1.84x_{QP} &+& 2.19x_{MD} &+& 1.84x_{BM} && +1.44x_{FF} &+& 2.29x_{MC} &+& 0.77x_{FR} &+& 1.29x_{SM} &+& 0.6x_{1m} &+& 0.72x_{OJ} &=& c\\15x_{QP} &+& 15x_{MD} &+& 6x_{BM} &+& 2x_{FF} &+& 8x_{MC} &+& 0x_{FR}&+& 4x_{SM} &+& 10x_{1M} &+& 2x_{OJ} &\ge& VitAReq \\28x_{QP} &+& 24x_{MD} &+& 25x_{BM} &+& 14x_{FF} &+& 31x_{MC} &+& 3x_{FR}&+& 15x_{SM} &+& 9x_{1M} &+& x_{OJ} &\ge& ProtReq \\6x_{QP} &+& 10x_{MD} &+& 2x_{BM} &+& 15x_{FF} &+& 15x_{MC} &+& 15x_{FR}&+& 0x_{SM} &+& 4x_{1M} &+& 120x_{OJ} &\ge& VitCReq \\30x_{QP} &+& 20x_{MD} &+& 25x_{BM} &+& 15x_{FF} &+& 15x_{MC} &+& 0x_{FR}&+& 20x_{SM} &+& 30x_{1M} &+& 2x_{OJ} &\ge& Calc \\20x_{QP} &+& 20x_{MD} &+& 20x_{BM} &+& 10x_{FF} &+& 8x_{MC} &+& 2x_{FR}&+& 0x_{SM} &+& 15x_{1M} &+& 2x_{OJ} &\ge& Iron \\510x_{QP} &+& 370x_{MD} &+& 500x_{BM} &+& 370x_{FF} &+& 400x_{MC} &+& 220x_{FR}&+& 345x_{SM} &+& 110x_{1M} &+& 80x_{OJ} &\ge& Calo \\34x_{QP} &+& 35x_{MD} &+& 42x_{BM} &+& 38x_{FF} &+& 42x_{MC} &+& 26x_{FR}&+& 27x_{SM} &+& 12x_{1M} &+& 20x_{OJ} &\ge& Carbs \\20x_{QP} &,& 20x_{MD} &,& 20x_{BM} &,& 10x_{FF} &,& 8x_{MC} &,& 2x_{FR}&,& 0x_{SM} &,& 15x_{1M} &,& 2x_{OJ} &\ge& 0 \\\end{array}\right.</script><p>我们使用如下的记号，以简化问题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016163825010.png" alt="问题的记号"></p><p>则<code>McGrease</code>问题可以简化为下述形式</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016163859721.png" alt="McGrease问题"></p><p>这就是典型的一个优化问题</p><p>而对<code>McGrease</code>问题进行求解的<code>GAMS</code>程序为</p><pre class="line-numbers language-gas"><code class="language-gas">$title McGreasy Diet Problemoption limrow=10, limcol=0;set food /QP, MD, BM, FF, MC, FR, SM, 1M, OJ/;set nutr /Prot, VitA, VitC, Calc, Iron, Cals, Carb/;table a(nutr,food)  per unit nutrients        QP  MD  BM  FF  MC  FR  SM  1M   OJProt    28  24  25  14  31   3  15   9    1VitA    15  15   6   2   8   0   4  10    2VitC     6  10   2   0  15  15   0   4  120Calc    30  20  25  15  15   0  20  30    2Iron    20  20  20  10   8   2  15   0    2Cals   510 370 500 370 400 220 345 110   80Carb    34  33  42  38  42  26  27  12   20;parameter         min_nutr(nutr) /Prot 55, VitA 100, VitC 100, Calc 100, Iron 100, Cals 2000, Carb 350 /;parameter        cost(food) /QP 1.84, MD 2.19, BM 1.84, FF 1.44, MC 2.29, FR 0.77, SM 1.29, 1M 0.6, OJ 0.72 /;free variables    total_cost  Total Cost of Daily Diet;positive variables    x(food)     Number of each type of food to eat;equations    cost_eqn        Define Objective    min_nutr_eqn(nutr)    Minimum Daily Requirement;min_nutr_eqn(nutr)..    sum(food,a(nutr,food)*x(food)) =G= min_nutr(nutr) ;cost_eqn..    total_cost =E= sum(food,cost(food)*x(food)) ;model diet1 /cost_eqn, min_nutr_eqn/;solve diet1 using lp min total_cost;display x.l;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> GAMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMS教程 3：子集与条件表达式</title>
      <link href="/2022/10/15/gams-jiao-cheng-3-zi-ji-yu-luo-ji-biao-da-shi/"/>
      <url>/2022/10/15/gams-jiao-cheng-3-zi-ji-yu-luo-ji-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016023519058.png" alt="GAMS文档：条件表达式"></p><h1 id="GAMS教程-3：子集与条件表达式"><a href="#GAMS教程-3：子集与条件表达式" class="headerlink" title="GAMS教程 3：子集与条件表达式"></a>GAMS教程 3：子集与条件表达式</h1><p>我们在前面的章节中介绍了GAMS中的基础数据类型、GAMS程序的基本结构、GAMS语法、GAMS的基本运算符以及GAMS中的函数。</p><p>本节我们将继续深入，讲解GAMS中的子集与逻辑表达式。</p><h2 id="1-子集-Subset-Dynamic-Set"><a href="#1-子集-Subset-Dynamic-Set" class="headerlink" title="1. 子集(Subset/Dynamic Set)"></a>1. 子集(Subset/Dynamic Set)</h2><p>我们在最前面介绍了GAMS中的基础数据类型：集合（Set）、参数（Parameter）、表格（Table）、标量（Scalar）以及变量（Variable）</p><p>其中：</p><ul><li>变量可以是集合、参数、表格、标量中的任意一种。</li><li>集合和参数、表格不同。集合起着索引的作用，而没有具体的值；参数和表格和具体得集合关联，并且对应集合中每一个元素都有对应的值。</li></ul><p><strong>本节中我们将介绍集合的另外一个知识，即子集</strong>。</p><p><strong>GAMS中将数学上的子集（Subset）称为动态集合（Dynamic Set），而之所以将子集称为动态集合，是因为GAMS中允许向子集中随时增减元素</strong>。相反，<strong>前面的介绍的集合中的元素是不能动态增减的，因此相应的称为静态集合（Static Set）</strong></p><h3 id="A-子集的声明"><a href="#A-子集的声明" class="headerlink" title="A. 子集的声明"></a>A. 子集的声明</h3><p><code>GAMS</code>中子集声明的语法如下</p><pre class="line-numbers language-gas"><code class="language-gas">Set dynamic_set_name(parent_set_name)    [/item1, {item2}/];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li><code>[]</code>表示可选项，<code>{}</code>表示可重复项</li><li><code>parent_set_name</code>表示子集的父集。<strong>需要注意的是，在声明子集的时候，一定要先声明父集</strong>。</li><li><strong>如果在声明子集的时候指定子集中包含的元素，那么子集中的元素必须包含在父集中。因为GAMS会进行范围检查（Domain Check），如果子集中存在不在父集中的元素的话，那么就会报错。</strong></li></ul><p>下面给出一个声明子集的例子。</p><pre class="line-numbers language-gas"><code class="language-gas">Set  item            "all items"              / dish, ink, lipstick, pen, pencil, perfume /,     subitem1(item)  "first subset of item"   / pen, pencil /,     subitem2(item)  "second subset of item";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要注意的是，子集的声明和参数很类似，都是<code>变量名字(另一个集合名字)</code>的形式。</p><pre class="line-numbers language-gas"><code class="language-gas">Set set_a /one, two, three, four/;; 子集的()表示声明父集Set subset(set_a) /one, four/;; 参数的()是和索引集合关联Parameter param(set_a) /"one" 1, "two" 2/;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然形式一样，但其实两者存在本质上的不同。<code>GAMS</code>编译器会根据上下文来区别对待。</p><h3 id="B-子集动态元素增减"><a href="#B-子集动态元素增减" class="headerlink" title="B. 子集动态元素增减"></a>B. 子集动态元素增减</h3><p>我们前面说过，之所以<code>GAMS</code>中将子集称为动态集合，就是因为GAMS中的子集可以动态增减元素。</p><p><code>GAMS</code>中子集动态增减元素的语法如下</p><pre class="line-numbers language-gas"><code class="language-gas">set_name(index_list | label) = yes | no ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li><code>yes</code>/<code>no</code>分别表示将元素加入集合或者从集合中删除</li><li><code>index_list</code>表示对某个集合整体设置，而<code>label</code>表示对某个元素进行设置</li></ul><p>子集的动态增减如下</p><pre class="line-numbers language-gas"><code class="language-gas">Set  item            "all items"              / dish, ink, lipstick, pen, pencil, perfume /     subitem1(item)  "first subset of item"   / pen, pencil /     subitem2(item)  "second subset of item";* subitem1 = /pen, pencil/;* subitem2 = null;subitem1('ink')      = yes;   * subitem1 = /pen, pencil, ink/;subitem1('lipstick') = yes;   * subitem1 = /pen, pencil, ink, lipstick/;subitem2(item)       = yes;   * subitem2 = /disk, ink, lipstick, pen, pencil, perfume/;subitem2('perfume')  = no ;   * subitem2 = /disk, ink, lipstick, pen, pencil/;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>index_list</code>可以是一个静态集合，也可以是一个动态集合，即子集。</p><h2 id="2-条件表达式"><a href="#2-条件表达式" class="headerlink" title="2. 条件表达式"></a>2. 条件表达式</h2><p><code>GAMS</code>中提供了条件表达式，我们下面就将介绍进行介绍。</p><h3 id="1-条件表达式的声明"><a href="#1-条件表达式的声明" class="headerlink" title="1. 条件表达式的声明"></a>1. 条件表达式的声明</h3><p><code>GAMS</code>中条件表达式的语法如下</p><pre class="line-numbers language-gas"><code class="language-gas">term $ logical_condition<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即</p><pre class="line-numbers language-gas"><code class="language-gas">项 $ 逻辑表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>条件表达式类似于C语言中的三元运算符，但是相比于三元运算符能够根据逻辑表达语句的值在两个项中选择，<strong><code>GAMS</code>中的条件表达式只能根据逻辑表达式的值在有项和无项之间选择</strong>。</p><p>例如下面这段C语言代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> <span class="token number">1.5</span><span class="token punctuation">)</span>  a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">else</span>    a <span class="token operator">=</span> null<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这里的<code>null</code>并不是C语言中的<code>null</code>，而是直接没有这项。上面的C语言的描述使用<code>GAMS</code>的条件表达式描述，如下</p><pre class="line-numbers language-gas"><code class="language-gas">a $ (b > 1.5) = 2 ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再举例来说</p><pre class="line-numbers language-gas"><code class="language-gas">Scalar x /15/;Scalar y;y = 12$(x < 20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>表示如果<code>x</code>的值小于<code>20</code>，那么<code>y=12</code>，否则<code>y</code>的值就依旧是待定的。</p><p>再举一个例子，如果我们想要实现下面这段C语言程序</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span>      y <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">else</span>      y <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对应的<code>GAMS</code>的语句为</p><pre class="line-numbers language-gas"><code class="language-gas">Scalar x /15/;Scalar y;y = 12$(x < 20) + 21$(x >= 20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意<code>GAMS</code>中的条件语句在条件不成立的时候直接就没有这一项，所以不要看这里有两个条件语句，<code>y = 12$(x &lt; 20) + 21$(x &gt;= 20)</code>这个表达式，其实在任何时候都只有一项。当然这个其实还和我们的条件有关。</p><pre class="line-numbers language-gas"><code class="language-gas">Set A /1, 2, 3, 4, 5, 6/;Parameter param(A);param(A) = 1$(ord(A) < 4);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-条件表达式与参数"><a href="#2-条件表达式与参数" class="headerlink" title="2. 条件表达式与参数"></a>2. 条件表达式与参数</h3><p>我们上面的例子中展示了如何使用条件表达式为一个标量赋值，条件表达式其实也能够为参数赋值</p><h4 id="子集"><a href="#子集" class="headerlink" title="子集"></a>子集</h4><p>对于逻辑表达式与子集的结合，我们举例如下</p><pre class="line-numbers language-gas"><code class="language-gas">Set        i     / i1*i5 /           j(i)  / i1*i3 / ;Parameter  s(i)  / i1 3, i2 5, i3 11, i4 8, i5 1 /           t(i);t(i) $ j(i) = s(i) + 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，集合<code>j</code>是集合<code>i</code>的子集，而<strong>逻辑表达式<code>t(i)$j(i)</code>则表示对于集合<code>j(i)</code>中的所有值</strong>。</p><p>因此参数<code>t(i)</code>最终的值为</p><pre class="line-numbers language-gas"><code class="language-gas">t(i) = / "i1" 6, "i2" 8, "i3" 14/;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>对于逻辑表达式与参数的使用，我们举例如下</p><pre class="line-numbers language-gas"><code class="language-gas">Set        i     / i1*i5 /Parameter  s(i)  / i1 3, i2 5, i3 11, i4 8, i5 1 /           t(i);t(i) $ (s(i) < 6) = s(i) + 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，<code>s(i)</code>与<code>t(i)</code>都是参数，而逻辑表达式<code>t(i) $ (s(i) &lt; 6)</code>表示遍历<code>s</code>中的所有元素。当<code>s(i)</code>的值小于6时，存在<code>t(i)</code>这一项，否则就不存在。</p><p>所以<code>t(i)</code>最终的值为</p><pre class="line-numbers language-gas"><code class="language-gas">t(i) = /"i1" 6, "i2" 8, "i5" 4/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="ord函数"><a href="#ord函数" class="headerlink" title="ord函数"></a>ord函数</h4><p>逻辑表达式与<code>ord</code>函数的联合使用如下</p><pre class="line-numbers language-gas"><code class="language-gas">Set I /a, b, c, d, e, f/;Parameter X(I) /"a" -1, "b" -2, "c" -3, "d" -4, "e" -5, "f" -6/;Parameter A(I);A(I) = 1$(ord(I) <= 2) + X(I-2)$(ord(I) > 2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ord</code>函数将会返回一个参数，具体来说，该参数的值为<code>/"a" 1, "b" 2, "c" 3, "d" 4, "e" 5, "f" 6/</code></p><p>那么这个时候，情况就转为了上面逻辑表达式与参数的情况。此外，还需要注意的是<code>X(I-2)</code>这一项。<code>GAMS</code>中对参数取值的时候，对<code>index</code>集合进行减法，则只有当括号里的值大于0的时候，才会获取参数的内容。</p><p>所以对于<code>X(I-2)</code>这一项，当<code>I &gt; 2</code>的时候，才会取参数<code>X</code>中的值。</p><p>所以综上，表达式<code>A(I) = 1$(ord(I) &lt;= 2) + X(I-2)$(ord(I) &gt; 2)</code>的意思就是，让<code>A(I)</code>的前两项是1，后面的项等于<code>X</code>的前面的项。</p><p>所以<code>A(I)</code>最终的值为：</p><pre class="line-numbers language-gas"><code class="language-gas">A(I) = /"a" 1, "b" 1, "c" -1, "d" -2, "e" -3, "f" -4/;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-逻辑表达式与逻辑运算符"><a href="#3-逻辑表达式与逻辑运算符" class="headerlink" title="3. 逻辑表达式与逻辑运算符"></a>3. 逻辑表达式与逻辑运算符</h3><p>上面我们说<code>GAMS</code>中的条件表达式是根据逻辑表达式的值来计算项的，但是我们其实并没有详细的介绍<code>GAMS</code>中的逻辑表达式。</p><p>我们下面就将详细讲解<code>GAMS</code>中的逻辑表达式，以及与此相关的逻辑运算符。</p><h4 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h4><p><code>GAMS</code>中的逻辑表达式的值判断准则很简单，<strong>计算得到的逻辑表达式的值为0则为False，除此以外所有值都为True</strong></p><p>例如下面的例子</p><pre class="line-numbers language-gas"><code class="language-gas">b $ (2*a - 4) = 7;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当<code>a = 2</code>时，逻辑表达式<code>2*a - 4</code>的逻辑值为False，其他时候都是True。</p><p>注意，集合没有值，而参数有值，所有以后有些情况我们可以这样写</p><pre class="line-numbers language-gas"><code class="language-gas">Set i /a * e/,        j(i) /a, b, c/;Parameter pm(i) /"a" 1, "b" 2, "c" 3, "d" 4, "e" 5/,        p1(i),        p2(i);* 下面的式子因为pm是参数，所有pm(i)是有值的，因此下面的式子表示当pm(i)不等于0的时候，p1(i)等于1p1(i) $ (pm(i)) = 1;* 下面的式子因为j是子集，所以表达的意思遍历子集j中的所有元素p2(i) $ (j(i)) =<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p><code>GAMS</code>中有很多用于计算逻辑表达式的值的运算符，具体来说有有</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016002853934.png" alt="GAMS中的逻辑运算符-1"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016002936753.png" alt="GAMS中的逻辑运算符-2"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221016003005996.png" alt="GAMS中的逻辑运算符-2的真值表"></p><h3 id="4-嵌套条件表达式"><a href="#4-嵌套条件表达式" class="headerlink" title="4. 嵌套条件表达式"></a>4. 嵌套条件表达式</h3><p><code>GAMS</code>中允许使用嵌套表达式，即</p><pre class="line-numbers language-gas"><code class="language-gas">term $ (logical_condition1$(logical_condition2$(...)))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是其实嵌套表达式可以使用<code>and</code>语句来连接，两者在本质上是等价的。</p><pre class="line-numbers language-gas"><code class="language-gas">term $ (logical_condition1 and logical_condition2 and ...)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举一个嵌套条件表达式的例子。假设<code>i</code>是一个静态集合，而<code>k</code>和<code>j</code>都是<code>i</code>的子集，<code>v</code>和<code>u</code>都是参数。那么下面的式子表示让<code>j</code>和<code>v</code>的交集中的元素等于<code>v(i)</code>中对应的值。</p><pre class="line-numbers language-gas"><code class="language-gas">u(i) $ (j(i)$k(i)) = v(i) ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们举具体得值为例</p><pre class="line-numbers language-gas"><code class="language-gas">Sets i /i1 * i6/,    j(i) /i1 * i4/,    k(i) /i3 * i6/;Parameters v(i) /"i1" -1, "i2" -2, "i3" -3, "i4" -4, "i5" -5, "i6" -6/,    u(i);u(i) $ (j(i)$k(i)) = v(i) ;display u;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则最终<code>u</code>的值为</p><pre class="line-numbers language-gas"><code class="language-gas">u = /"i3" -3, "i4" -4/;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>话说回来，其实嵌套的条件表达式并不推荐使用，最好还是使用<code>and</code>条件运算符。</p><p>上面的条件用<code>and</code>条件运算符的版本为</p><pre class="line-numbers language-gas"><code class="language-gas">u(i) $ (j(i) and k(i)) = v(i) ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-条件表达式与赋值语句"><a href="#5-条件表达式与赋值语句" class="headerlink" title="5. 条件表达式与赋值语句"></a>5. 条件表达式与赋值语句</h3><p>事实上，条件表达式的位置不同，赋值的结果也不同。我们上面出现了条件表达式在<code>=</code>左边、在<code>=</code>右边，但是我们其实没有强调在左边和在右边之间的不同。</p><p>其实这两者还是存在微妙的不同的，下面我们就将介绍之间的不同。</p><h4 id="xxx：条件表达式在左"><a href="#xxx：条件表达式在左" class="headerlink" title="$() = xxx：条件表达式在左"></a>$() = xxx：条件表达式在左</h4><p><strong>条件表达式在<code>=</code>左边表示只有当条件表达式值为真的时候，才会有整个赋值表达式</strong>。</p><p>例如下面的例子</p><pre class="line-numbers language-gas"><code class="language-gas">rho(i) $ (sig(i) <> 0) = (1./sig(i)) - 1. ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设<code>sig</code>是一个参数，则只有当<code>sig(i)</code>不等于0的时候，才会有<code>rho(i) = (1./sig(I)) -1.</code>这个赋值表达式。</p><p>当然，上面说过了只有非0值的逻辑表达式的值为True，所以上面的式子其实可以这样简写</p><pre class="line-numbers language-gas"><code class="language-gas">rho(i) $ sig(i)  =  (1./sig(i)) - 1. ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>于此类似的，所有不等于的某个数<code>x</code>的式子可以这样写</p><pre class="line-numbers language-gas"><code class="language-gas">s(i) $ (t(i) - x) = t(i);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="xxx-xxx：条件表达式在中间"><a href="#xxx-xxx：条件表达式在中间" class="headerlink" title="xxx $= xxx：条件表达式在中间"></a>xxx $= xxx：条件表达式在中间</h4><p>当条件表达式在中间的时候，形式上有些奇怪，因为没有逻辑表达式。具体形式为</p><pre class="line-numbers language-gas"><code class="language-gas">项 $= 项<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而<strong>条件表达式在中间的含义就是只有当右侧的值不为0的时候，才会有整个赋值表达式</strong>。</p><p>例如</p><pre class="line-numbers language-gas"><code class="language-gas">Set       i                                         /a,b,c/Parameter d2(i)  "Data to be used to overwrite d1"  /a 0, b -2 /          d3(i)  "Empty data parameter";d3(i) $= d2(i);* Result: d3('a')=1; d3('b')=-2; d3('c')=1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="xxx-：条件表达式在右边"><a href="#xxx-：条件表达式在右边" class="headerlink" title="xxx = $()：条件表达式在右边"></a>xxx = $()：条件表达式在右边</h4><p><strong>当条件表达式在<code>=</code>右侧的时候，表示逻辑表达式的值不为0时，条件表达式的值为项的值，否则为0</strong>。</p><p>例子就是前面的例子：</p><pre class="line-numbers language-gas"><code class="language-gas">A(I) = 1$(ord(I) <= 2) + X(I-2)$(ord(I) > 2);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-条件表达式与等式（Equation）"><a href="#6-条件表达式与等式（Equation）" class="headerlink" title="6. 条件表达式与等式（Equation）"></a>6. 条件表达式与等式（Equation）</h3><p><code>GAMS</code>中的等式与赋值语句是完全不同的两码事。等式就是首先使用<code>equation</code>声明，而后具体定义的式子。等式中使用的符号和正常的<code>=</code>、<code>&lt;</code>、<code>&gt;</code>不同，就是因为等式是和赋值语句是完全不同的两码事。</p><p>上面介绍了赋值语句和条件表达式的细节，下面将介绍等式与条件表达式之间的细节。</p><h4 id="条件表达式出现在等式定义中"><a href="#条件表达式出现在等式定义中" class="headerlink" title="条件表达式出现在等式定义中"></a>条件表达式出现在等式定义中</h4><p><strong>当条件表达式出现在等式中，含义其实和条件表达式出现在赋值语句的右侧相同，都是当逻辑表达式的值不为0的时候，存在该项，否则该项为0</strong></p><p>注意，在等式中，条件表达式和等式中的等号<code>=e=</code>的位置其实没有关系，不管在那边都是上面的含义。</p><p>所以下面的式子</p><pre class="line-numbers language-gas"><code class="language-gas">equation eq2;eq2(i)..          sum(j, x(i,j)) $ b =e=  -s(i) $ b;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>表达就是当<code>b = 0</code>时，等式<code>eq2</code>就被定义为<code>0 =e= 0</code></p><h4 id="条件表达式出现在等式定义前"><a href="#条件表达式出现在等式定义前" class="headerlink" title="条件表达式出现在等式定义前"></a>条件表达式出现在等式定义前</h4><p><strong>当条件表达式出现在等式定义前，表达的含义是当逻辑表达式的值为0的时候，不会定义该等式，否则定义该等式</strong></p><p>所以下面的式子</p><pre class="line-numbers language-gas"><code class="language-gas">equation eq1(i);eq1(i) $ b..      sum(j, x(i,j))     =g=  -s(i);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>表达的就是当<code>b = 0</code>时，不定义等式<code>eq1(i)</code>，所以此时，仅有<code>eq1(i)</code>的声明。如果稍后不定义而直接在模型中使用的话，就会报错。</p>]]></content>
      
      
      <categories>
          
          <category> GAMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMS教程 2：GAMS中的运算符与函数</title>
      <link href="/2022/10/13/gams-jiao-cheng-2-sum-qiu-he-ord-han-shu-yi-ji-tiao-jian-biao-da-shi/"/>
      <url>/2022/10/13/gams-jiao-cheng-2-sum-qiu-he-ord-han-shu-yi-ji-tiao-jian-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221015211831052.png" alt="GAMS用户手册"></p><h1 id="GAMS教程-2：GAMS中的运算符与函数"><a href="#GAMS教程-2：GAMS中的运算符与函数" class="headerlink" title="GAMS教程 2：GAMS中的运算符与函数"></a>GAMS教程 2：GAMS中的运算符与函数</h1><p>GAMS作为一门用于科学家计算的语言，那么常见的求余、指数计算等等都不能少。本文就将介绍GAMS中的运算符、常见的函数。</p><p>此外，在常见的函数中有一个特殊的函数<code>ord</code>函数，这个函数非常重要，本文还将讲解这个特殊的函数。</p><h2 id="1-GAMS中的运算符"><a href="#1-GAMS中的运算符" class="headerlink" title="1. GAMS中的运算符"></a>1. GAMS中的运算符</h2><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013170535852.png" alt="GAMS中常见的运算符" style="zoom:33%;"></p><h3 id="A-概述"><a href="#A-概述" class="headerlink" title="A. 概述"></a>A. 概述</h3><p>GAMS中的运算符包含两类：</p><ul><li>算术运算符（Algebra Operator）</li><li>索引运算符（Indexed Operator）</li></ul><p>算术运算符指的就是就是一般见到的加减乘除等等运算符，具体来说包括<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>**</code>。这些运算符我们都这些都不会讲解，直接用就行了，非常简单。</p><p>我们真正关注的、具有难度的、需要讲解的就是索引运算符，索引运算符具体来说包含下面的几个</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013174314966.png" alt="GAMS中的索引运算符" style="zoom: 67%;"></p><p>下面将详细讲解索引运算符</p><h3 id="B-索引运算符"><a href="#B-索引运算符" class="headerlink" title="B. 索引运算符"></a>B. 索引运算符</h3><p>所谓索引运算符，值的其实就是循环计算，例如在数学上，我们经常会有下面的表达式</p><script type="math/tex; mode=display">\begin{array}{**lr**}    x &=& \sum_{i=1}^{20}a_{i}\\    y &=& \prod_{j=1}^{15}b_{j}\\    z &=& \land_{k=1}^{5} c_{k}\\\end{array}</script><p>GAMS中实现这些运算的的方式就是通过索引运算符。</p><p>GAMS中索引运算符的调用方式如下</p><pre class="line-numbers language-gas"><code class="language-gas">indexed_op( (index_list), expression);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li><code>index_list</code>指明了需要求和的维度</li><li><code>expression</code>指明了需要求和的维度</li></ul><h4 id="1-sum运算符"><a href="#1-sum运算符" class="headerlink" title="1 ) sum运算符"></a>1 ) sum运算符</h4><p><code>sum</code>用于求set indexed expression的累加和</p><p>我们下面给出几个数学式的GAMS实现</p><script type="math/tex; mode=display">count = \sum_{i}A_i</script><pre class="line-numbers language-gas"><code class="language-gas">* Set    i;* Parameter A(i);count = sum(i, A(i));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script type="math/tex; mode=display">size = \sum_{i}\sum_{j}B_{ij}</script><pre class="line-numbers language-gas"><code class="language-gas">* Set i, j;* Table B(i,j);size = sum(i, sum(j, B(i,j)));* 简化的写法为size = sum((i,j), B(i,j));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script type="math/tex; mode=display">prodcution = \sum_{i} C_{i}D_{i}</script><pre class="line-numbers language-gas"><code class="language-gas">* Set i;* Parameter C(i)， D(i);production = sum(i, C(i) * D(i));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-prod运算符"><a href="#2-prod运算符" class="headerlink" title="2 ) prod运算符"></a>2 ) prod运算符</h4><p><code>prod</code>运算符其实和<code>sum</code>运算符是一样的，只不过从加法变成了乘法，因此略。</p><h4 id="3-smin运算符"><a href="#3-smin运算符" class="headerlink" title="3 ) smin运算符"></a>3 ) smin运算符</h4><p><code>smin</code>运算符用于求一个set indexed expression中的最小值</p><p>下面给出几个例子</p><script type="math/tex; mode=display">x = \min\{1,2, 3,-1,-2,100,-14\}</script><pre class="line-numbers language-gas"><code class="language-gas">* Set i;* Parameter S(i);x = smin(i, S(i));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script type="math/tex; mode=display">S = \{-2, -1, 0, 1, 2\}\\x=\min\{\ i^2+2i+1,\qquad for\ i\in S\}</script><pre class="line-numbers language-gas"><code class="language-gas">* Set i;* Parameter S(i);x = smin(i, S(i)**2 + 2*S(i) + 1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-smax运算符"><a href="#4-smax运算符" class="headerlink" title="4 ) smax运算符"></a>4 ) smax运算符</h4><p><code>smax</code>运算符和<code>smin</code>运算符类似，只不过是用于求最大值。故略。</p><h4 id="5-sand运算符"><a href="#5-sand运算符" class="headerlink" title="5 ) sand运算符"></a>5 ) sand运算符</h4><p><code>sand</code>运算符和前面的类似，只不过是求多个值相与的结果。</p><h4 id="6-sor运算符"><a href="#6-sor运算符" class="headerlink" title="6 ) sor运算符"></a>6 ) sor运算符</h4><p><code>sor</code>运算符求多个值相或的结果。</p><h2 id="2-GAMS中的函数"><a href="#2-GAMS中的函数" class="headerlink" title="2. GAMS中的函数"></a>2. GAMS中的函数</h2><p>GAMS中的函数可以分为两种：</p><ul><li><strong>内部函数</strong>：GAMS语言本身所支持的函数</li><li><strong>外部函数</strong>：用户自己自定义的函数</li></ul><p>我们这里不讲解外部函数，主要讲解GAMS中的内部函数。</p><p>GAMS中的内部函数可以分为五种：</p><ul><li><strong>数学函数（Mathematical Functions）</strong></li><li><strong>字符串处理函数（String Manipulation Functions）</strong></li><li><strong>逻辑函数（Logical Functions）</strong></li><li><strong>时间日期函数（Time and Calendar Functions）</strong></li><li><strong>GAMS系统内置函数（GAMS Utility and Performance Functions）</strong></li></ul><p>因为每类函数都很多，所以先对每类函数进行介绍，至于具体的函数等以后用到了再具体介绍。</p><h3 id="A-数学函数（Mathematical-Functions）"><a href="#A-数学函数（Mathematical-Functions）" class="headerlink" title="A. 数学函数（Mathematical Functions）"></a>A. 数学函数（Mathematical Functions）</h3><p>数学函数顾名思义，就是我们数学中见到的函数，例如：<code>cos</code>、<code>sin</code>等等</p><p>GAMS中支持的数学函数有很多，这里就不一一列举了，具体可以参阅官方手册：<a href="https://www.gams.com/40/docs/UG_Parameters.html#UG_Parameters_MathFunctions">https://www.gams.com/40/docs/UG_Parameters.html#UG_Parameters_MathFunctions</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221014003221610.png" alt="GAMS中的数学函数-1"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221014003307362.png" alt="GAMS中的数学函数-2"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221014003403903.png" alt="GAMS中的数学函数-3"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221014003454517.png" alt="GAMS中的数学函数-4"></p><h3 id="B-字符串处理函数（String-Manipulation-Functions）"><a href="#B-字符串处理函数（String-Manipulation-Functions）" class="headerlink" title="B. 字符串处理函数（String Manipulation Functions）"></a>B. 字符串处理函数（String Manipulation Functions）</h3><p>虽然说字符串处理函数名字是字符串处理函数，但其实从它们的功能上来看更加类似于集合处理函数。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221014003812311.png" alt="GAMS中的字符串处理函数"></p><h4 id="card函数"><a href="#card函数" class="headerlink" title="card函数"></a>card函数</h4><p><code>card</code>函数用于返回一个集合中元素的个数</p><pre class="line-numbers language-gas"><code class="language-gas">Set i /1, 2, 3, 4, 5/;Scalar num_i;num_i = card(i);   * num_i = 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ord函数"><a href="#ord函数" class="headerlink" title="ord函数"></a>ord函数</h4><p><code>ord</code>函数接受一个集合，返回一个参数。参数中索引的值就是相应的位置。</p><pre class="line-numbers language-gas"><code class="language-gas">Set i /a, b, c, d/;Parameter ord_i(i);ord_i = ord(i);     * ord_i(i) = /"a" 1, "b" 2, "c" 3, "d" 4/;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-逻辑函数（Logical-Functions）"><a href="#C-逻辑函数（Logical-Functions）" class="headerlink" title="C. 逻辑函数（Logical Functions）"></a>C. 逻辑函数（Logical Functions）</h3><p>GAMS中提供了逻辑函数用于计算逻辑表达式的值。</p><p>关于逻辑函数、逻辑表达式具体内容将在下一节进行讲解</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221014021442474.png" alt="GAMS中的逻辑函数"></p><h3 id="D-时间日期函数（Time-and-Calendar-Functions）"><a href="#D-时间日期函数（Time-and-Calendar-Functions）" class="headerlink" title="D. 时间日期函数（Time and Calendar Functions）"></a>D. 时间日期函数（Time and Calendar Functions）</h3><p>GAMS中的时间日期处理函数专门用于处理时间和日期的相关内容</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221014022511046.png" alt="GAMS中的时间日期处理函数-1"></p><h3 id="E-GAMS系统内置函数（GAMS-Utility-and-Performance-Functions）"><a href="#E-GAMS系统内置函数（GAMS-Utility-and-Performance-Functions）" class="headerlink" title="E. GAMS系统内置函数（GAMS Utility and Performance Functions）"></a>E. GAMS系统内置函数（GAMS Utility and Performance Functions）</h3><p>GAMS的系统内置函数主要是用于或许系统一些内置信息，或者设置系统的内置信息。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221014025253813.png" alt="GAMS的系统内置函数-1"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221014025353325.png" alt="GAMS的系统内置函数-2"></p>]]></content>
      
      
      <categories>
          
          <category> GAMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMS教程 1：数据类型及程序结构</title>
      <link href="/2022/10/12/gams-jiao-cheng-1-shu-ju-lei-xing-yi-ji-cheng-xu-jie-gou/"/>
      <url>/2022/10/12/gams-jiao-cheng-1-shu-ju-lei-xing-yi-ji-cheng-xu-jie-gou/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012223017100.png" alt="GAMS基础语法"></p><h1 id="GAMS教程-1：数据类型及程序结构"><a href="#GAMS教程-1：数据类型及程序结构" class="headerlink" title="GAMS教程 1：数据类型及程序结构"></a>GAMS教程 1：数据类型及程序结构</h1><h2 id="1-GAMS的数据类型"><a href="#1-GAMS的数据类型" class="headerlink" title="1. GAMS的数据类型"></a>1. GAMS的数据类型</h2><p>GAMS中一种有5种数据类型，分别是：</p><ul><li><strong>集合（Set)</strong></li><li><strong>参数（Parameter）</strong></li><li><strong>标量（Scalar）</strong></li><li><strong>变量（Variable）</strong></li><li><strong>表格（Table）</strong></li></ul><p>其中：</p><ul><li>标量是一种独立的数据类型</li><li>参数、变量和列表具有相互依赖关系</li></ul><p>而由于变量是特殊的数据类型，因此下面将单独变量。</p><h3 id="A-集合（Set）"><a href="#A-集合（Set）" class="headerlink" title="A. 集合（Set）"></a>A. 集合（Set）</h3><p>集合是<code>GAMS</code>中最基础的数据类型，其他的数据类型，例如参数、变量和表格都依赖于集合。</p><h4 id="集合的声明"><a href="#集合的声明" class="headerlink" title="集合的声明"></a>集合的声明</h4><p>数学上我们按照下面的方式声明一个集合</p><script type="math/tex; mode=display">S = \{a,b,c\}</script><p>而在GAMS中，我们按照下面的方式声明一个集合</p><pre class="line-numbers language-gas"><code class="language-gas">Set S / a, b, c /;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>详细的声明规则如下</p><pre class="line-numbers language-gas"><code class="language-gas">Set[s] set_name ["text"] [/element [text] {,element [text]} /]     {,set_name ["text"] [/element [text] {,element [text]} /] } ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>text</code>表示注释，如果我们为集合整体注释的话，必须要加<code>""</code>，但是为集合中的元素注释则不需要</li><li><code>[]</code>表示可选项，因此在声明集合的时刻可以只声明集合的名称，而不用声明集合中的元素，也可以不用对集合整体或者每个元素进行注释</li><li><code>{}</code>表示可重复项</li><li>我们可以同时声明多个集合，如果声明多个集合的话，就必须使用<code>Sets</code></li></ul><p>通常来说，我们认识中的集合的作用就是收集并保存一堆元素。<strong>GAMS中的集合更多的其实起着数组下标的作用，每个元素没有具体得数值</strong>。关于这个作用在稍后的参数和表格中会涉及到。</p><p>一个集合的例子为</p><pre class="line-numbers language-gas"><code class="language-gas">Set letters /a, b, c, d/;Sets numbers /1, 2, 3, 4, 5/,     cities "我去过的   所有城市"            / Edmonton  "2019去的埃德蒙顿", Xian  "2021年在西安读大学", Madison  "2022年在麦迪逊交换"/;display letters, numbers, cities;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是：</p><ul><li><p><code>GAMS</code>语言和一般的编程语言不同，<code>GAMS</code>变成语言并没有整数、浮点书、字符串这些数据类型，在<code>GAMS</code>看来，他们都是<code>element</code></p></li><li><p><code>display</code>类似于<code>printf</code>，即输出变量的值。</p></li></ul><p>运行后<code>lst</code>文件中的结果表明，我们在第8行输出了前面定义的三个集合</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012225725245.png" alt="lst文件中的结果"></p><h3 id="B-参数（Parameter）"><a href="#B-参数（Parameter）" class="headerlink" title="B. 参数（Parameter）"></a>B. 参数（Parameter）</h3><p>上面我们说过，<code>GAMS</code>中的集合起着数组下标的作用，那么<code>GAMS</code>中的参数其实起着数组的作用。一般来说，我们的模型中约束的系数就保存在参数这个数据结构中。既然参数更多起着数组的作用，那么参数可以声明，可以赋值也可以取值。我们下面先介绍参数的声明，然后再介绍参数的赋值与取值。</p><h4 id="参数的声明"><a href="#参数的声明" class="headerlink" title="参数的声明"></a>参数的声明</h4><p>声明Parameter数据类型的语法如下</p><pre class="line-numbers language-gas"><code class="language-gas">parameter[s] param_name[(index_list)] [text] [/ element [=] numerical_value                                              {,element [=] numerical_value} /]           {,param_name[(index_list)] [text] [/ element [=] numerical_value                                              {,element [=] numerical_value} /]} ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>[]</code>是可选项，<code>text</code>是注释，<code>{}</code>表示可重复项</li><li><code>index_list</code>表示选用做下标的集合</li><li>需要注意，<code>element</code>必须是索引集合中的元素，<code>numerical_value</code>必须是可以解释的数值，要么是字面量的数值，要么是稍后介绍的标量，要么是稍后介绍的参数、表格的取值。</li></ul><p>声明参数的例子如下</p><pre class="line-numbers language-gas"><code class="language-gas">Set letters /a, b, c, d/;Sets numbers /1, 2, 3, 4, 5/,     cities "我去过的   所有城市"            / Edmonton  "2019去的埃德蒙顿", Xian  "2021年在西安读大学", Madison  "2022年在麦迪逊交换"/;Parameters    param_letter(letters)   "以letters集合作为索引集合的参数"        / a    1, b    2, c    3, d    4 /,    param_num(numbers)      "以numbers集合作为索引集合的参数"        / 1 = 11, 2 = 12, 3 = 13, 4 = 14, 5 = 15 /,    param_city(cities)      "以cities集合作为索引集合的参数"        / Edmonton   2019, Xian = 2021/;display letters, param_letter;display numbers, param_num;display cities, param_city;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li>我们对<code>param_letter</code>和<code>param_num</code>这两个参数在声明的时候就进行了初始化，即为每一个下标赋值</li><li><code>param_city</code>参数只进行了部分赋值</li></ul><p>运行之后的结果中需要注意的是：</p><ul><li>每一个数值</li><li><code>param_city</code>中只有<code>Edmonton</code>和<code>Xian</code>这两个下标有值</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012232511788.png" alt="lst文件中的结果"></p><h4 id="参数的赋值"><a href="#参数的赋值" class="headerlink" title="参数的赋值"></a>参数的赋值</h4><p>我们其实可以在参数初始化借助之后单独对某些下标赋值，语法如下</p><pre class="line-numbers language-gas"><code class="language-gas">prameter_name('element') = neumerical_value;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：</p><ul><li><code>element</code>的值必须是在索引集合中的元素</li><li><code>neumerical_value</code>必须是可以解释的数值，包括整数和浮点数</li></ul><p>继续利用上面的那个例子，为<code>param_city</code>中的<code>Madison</code>这个元素赋值</p><pre class="line-numbers language-gas"><code class="language-gas">Set letters /a, b, c, d/;Sets numbers /1, 2, 3, 4, 5/,     cities "我去过的   所有城市"            / Edmonton  "2019去的埃德蒙顿", Xian  "2021年在西安读大学", Madison  "2022年在麦迪逊交换"/;Parameters    param_letter(letters)   "以letters集合作为索引集合的参数"        / a    1, b    2, c    3, d    4 /,    param_num(numbers)      "以numbers集合作为索引集合的参数"        / 1 = 11, 2 = 12, 3 = 13, 4 = 14, 5 = 15 /,    param_city(cities)      "以cities集合作为索引集合的参数"        / Edmonton   2019, Xian = 2021/;param_city('Madison') = 2022;display letters, param_letter;display numbers, param_num;display cities, param_city;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行的结果中，可以发现<code>Madison</code>的值已经成了2022</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012234419981.png" alt="lst文件中的结果"></p><h4 id="参数的取值"><a href="#参数的取值" class="headerlink" title="参数的取值"></a>参数的取值</h4><p>参数的取值语法其实和参数的赋值语法没什么两样</p><pre class="line-numbers language-gas"><code class="language-gas">param_name("element")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结合上面的例子，我们把<code>param_num('1')</code>的值赋给<code>param_city('Madison')</code></p><pre class="line-numbers language-gas"><code class="language-gas">Set letters /a, b, c, d/;Sets numbers /1, 2, 3, 4, 5/,     cities "我去过的   所有城市"            / Edmonton  "2019去的埃德蒙顿", Xian  "2021年在西安读大学", Madison  "2022年在麦迪逊交换"/;Parameters    param_letter(letters)   "以letters集合作为索引集合的参数"        / a    1, b    2, c    3, d    4 /,    param_num(numbers)      "以numbers集合作为索引集合的参数"        / 1 = 11, 2 = 12, 3 = 13, 4 = 14, 5 = 15 /,    param_city(cities)      "以cities集合作为索引集合的参数"        / Edmonton   2019, Xian = 2021/;param_city('Madison') = param_num('1') * 20;display letters, param_letter;display numbers, param_num;display cities, param_city;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行之后的结果为</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013000948870.png" alt="lst文件中的结果"></p><h3 id="C-表格（Table）"><a href="#C-表格（Table）" class="headerlink" title="C. 表格（Table）"></a>C. 表格（Table）</h3><p>表格其实就是多维数组（一般都用作二维数组），因此和参数相比，表格在声明的时候需要两个集合作为索引集合，而在取值、索引的时候需要两个索引。</p><p>和参数一样下面将按照表格的声明、赋值和取值来介绍</p><h4 id="表格的声明"><a href="#表格的声明" class="headerlink" title="表格的声明"></a>表格的声明</h4><p><code>GAMS</code>中表格声明的语法如下</p><pre class="line-numbers language-gas"><code class="language-gas">table table_name[(index_list)]  [text] [EOL                element               { element }     EOL  element    numerical_value       { numerical_value} EOL {element    numerical_value       { numerical_value} EOL}] ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>[]</code>是可选项，<code>text</code>是注释，<code>{}</code>表示可重复项</li><li><code>element</code>必须是来自于索引集合中的元素</li><li><code>neumerical_value</code>必须是可解释的数值</li><li><code>EOL</code>表示回车换行</li></ul><p>一个表格声明的例子如下</p><pre class="line-numbers language-gas"><code class="language-gas">Sets    r_idx   "行索引"    /r1 * r4/,    c_idx   "列索引"    /a * e/;Table t_example(r_idx, c_idx)       "一个Table Example"        a       b       c       d       er1      0       1       2       3       4r2      5       6       7       8       r3      10      11      12      13      14r4              16      17      18      19;display r_idx, c_idx;display t_example;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是：</p><ul><li>我们在声明参数的时候，可以使用<code>*</code>来进行省略声明，只需要元素内是有序的即可</li><li>赋值是按照分隔符来给的，具体效果可以看下面的运行结果</li></ul><p>运行结果如下，</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013003553953.png" alt="lst文件中的结果"></p><h4 id="表格的赋值与取值"><a href="#表格的赋值与取值" class="headerlink" title="表格的赋值与取值"></a>表格的赋值与取值</h4><p>表格的赋值与取值其实和参数一样的，语法为</p><pre class="line-numbers language-gas"><code class="language-gas">table_name('element1', 'element2') = table_name('element3', 'element4')<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面给出一个表格赋值与取值的例子</p><pre class="line-numbers language-gas"><code class="language-gas">Sets    r_idx   "行索引"    /r1 * r4/,    c_idx   "列索引"    /a * e/;Table t_example(r_idx, c_idx)       "一个Table Example"        a       b       c       d       er1      0       1       2       3       4r2      5       6       7       8       r3      10      11      12      13      14r4              16      17      18      19;t_example('r4', 'a') = -2;t_example('r2', 'e') = t_example('r2', 'c');display r_idx, c_idx;display t_example;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013003918044.png" alt="lst文件中的结果"></p><h3 id="D-标量（Scalar）"><a href="#D-标量（Scalar）" class="headerlink" title="D. 标量（Scalar）"></a>D. 标量（Scalar）</h3><p><code>GAMS</code>中的标量就相当于C语言中的符号常量，非常简单。</p><h4 id="标量的声明"><a href="#标量的声明" class="headerlink" title="标量的声明"></a>标量的声明</h4><p><code>Scalar</code>的声明如下</p><pre class="line-numbers language-gas"><code class="language-gas">scalar[s] scalar_name [text] [/numerical_value/]       {  scalar_name [text] [/numerical_value/]} ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>[]</code>表示可选项，<code>text</code>表示注释，<code>{}</code>表示可重复项</li><li><code>neumerical_value</code>表示可解释的数值，可以是整数或浮点数</li></ul><p>标量声明的一个例子为</p><pre class="line-numbers language-gas"><code class="language-gas">Sets    idx   "索引"    /i1 * i4/;Scalar    day     "今天是这个月的第几天"      / 13 /;display idx;display day;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013011344971.png" alt="lst文件中的结果"></p><h4 id="标量的赋值与取值"><a href="#标量的赋值与取值" class="headerlink" title="标量的赋值与取值"></a>标量的赋值与取值</h4><p>标量的赋值与取值非常简单，如下</p><pre class="line-numbers language-gas"><code class="language-gas">Sets    idx   "索引"    /i1 * i4/;Scalars    day         "今天是这个月的第几天"      / 13 /,    day_copy    "天数的一个备份";day_copy = day;display idx;display day, day_copy;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013011540814.png" alt="lst文件中的结果"></p><h3 id="E-向量化操作"><a href="#E-向量化操作" class="headerlink" title="E. 向量化操作"></a>E. 向量化操作</h3><p><code>Python</code>中的<code>Numpy</code>包中提供了向量化操作以及广播机制，类似的，<code>GAMS</code>中也支持向量化操作，但是需要注意的是，<code>GAMS</code>不支持广播。</p><p>所谓向量化操作，意思就是逐元素操作。</p><p>向量化操作的例子如下</p><pre class="line-numbers language-gas"><code class="language-gas">Sets    r_idx   "行索引"    /r1 * r4/,    c_idx   "列索引"    /a * e/;Parameters    p0(r_idx)   "待向量化操作以逐元素赋值的参数",    p1(r_idx)   "第一个参数"    / "r1"   -1, "r2"   -2, "r3"    -3, "r4"    -4/,    p2(c_idx)   "第二个参数"    / "a"    10, "b"    20, "c"     30, "d"     40, "e"     50/;Table t_example(r_idx, c_idx)       "待向量化逐元素赋值的列表"        a       c       d       er1      0       2       3       4r3      10      12      13      14r4      21      17      18      19;* 参数与参数的逐元素赋值p0(r_idx) = p1(r_idx) * 10;* 列表和参数的逐元素赋值t_example(r_idx, 'b') = p1(r_idx);t_example('r2', c_idx) = p2(c_idx);display r_idx, c_idx;display p0;display p1, p2;display t_example;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是：</p><ul><li>向量化操作的时候需要指明逐元素逐的是哪个索引集合</li><li><code>*</code>表示这一行为注释</li></ul><p>运行的结果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013010042336.png" alt="lst文件中的结果"></p><h2 id="2-GAMS中的变量（Variable）"><a href="#2-GAMS中的变量（Variable）" class="headerlink" title="2. GAMS中的变量（Variable）"></a>2. GAMS中的变量（Variable）</h2><p>通常我们的优化模型有下面几个部分组成：</p><ul><li><strong>目标变量</strong></li><li><strong>决策变量</strong></li><li><strong>约束（等式约束、不等式约束）</strong></li></ul><p>在约束和目标变量中，我们会有许多的参数，因此在<code>GAMS</code>中，使用上面介绍的Scalar、Parameter和Table三类数据类型来存储模型中的参数。</p><p>模型中的参数往往是已知值，而决策变量就是我们要求解的未知值，例如前面介绍的<code>Top Brass Company</code>的例子中的生产足球和橄榄球的个数。</p><p>因此，在本质上变量（Variable）是一类不同的数据类型，相比于普通的参数，会有额外的特殊属性，因此要额外介绍。</p><h3 id="A-变量的声明"><a href="#A-变量的声明" class="headerlink" title="A. 变量的声明"></a>A. 变量的声明</h3><p>所谓变量，值得其实就是值不知道的量，具体可以是值不知道的Scalar、值不知道的Parameter、值不知道的Table（一般多是Scalar和Parameter）。</p><p>因此变量的声明其实和前面说的三种数据类型的声明差不多的。</p><p>具体来说，变量声明的语法如下</p><pre class="line-numbers language-gas"><code class="language-gas">[var_type] variable[s] var_name [(index_list)] [text] [/var_data/] {, var_name [(index_list)] [text] [/var_data/]}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li><code>[]</code>表示可选项，<code>text</code>表示注释，<code>{}</code>表示可重复项</li><li><code>var_type</code>表示变量的类型，可以是<code>free</code>、<code>positive</code>等等，反正具体的含义就是表示了变量的取值范围。<code>var_type</code>所有可能的取值如下</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013014833623.png" alt="image-20221013014833623"></p><p>下面给出一个变量声明的例子。</p><p>注意：</p><ul><li>在下面的例子中，我们声明了一个标量类型的变量和一个参数类型的变量</li><li>我们使用了变量的<code>.l</code>属性，变量的属性将在下面介绍，在这里<code>.l</code>属性表示变量的值</li></ul><pre class="line-numbers language-gas"><code class="language-gas">Sets    m           "月份"                    / m1 * m4/;Scalar    today         "今天是这个月的第几天"      / 13 /;Parameter    month_sale(m)  "每个月的销售额"           / 'm1'    1, 'm2'    2, 'm3'    3, 'm4'    4/;Variables    what_day    "今天是第几天?",    month_earn(m)  "每个月的利润";what_day.l = today;month_earn.l(m) = month_sale(m) * 20;display what_day.l, month_earn.l;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行的结果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013015230758.png" alt="lst文件中的结果"></p><h3 id="B-变量的属性"><a href="#B-变量的属性" class="headerlink" title="B. 变量的属性"></a>B. 变量的属性</h3><p>每一个变量都有多个属性，例如上限、下限、变量的值等等。我们可以通过特殊的后缀来访问这些属性。</p><p>具体来说，所有的属性如下表所示，一般常用的就是<code>.lo</code>、<code>.up</code>和<code>.l</code>这三个属性</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013015914710.png" alt="一个变量所具有的所有属性"></p><p>此外，需要注意的是，变量是什么了类型，对应的属性就是什么类型，例如上面的例子中<code>month_earn(m)</code>是参数类型的变量。</p><p>那么<code>month_earn.l</code>就是一个参数，我们对<code>month_earn.l</code>这个参数的取值和上面的参数没有任何不同。</p><p>例如下面的例子</p><pre class="line-numbers language-gas"><code class="language-gas">Sets    m           "月份"                    / m1 * m4/;Scalar    today         "今天是这个月的第几天"      / 13 /;Parameter    month_sale(m)  "每个月的销售额"           / 'm1'    1, 'm2'    2, 'm3'    3, 'm4'    4/;Variables    what_day    "今天是第几天?",    month_earn(m)  "每个月的利润";what_day.l = today;month_earn.l(m) = month_sale(m) * 20;month_earn.l('m3') = -100;display what_day.l, month_earn.l;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013021154180.png" alt="lst文件中的结果"></p><h2 id="3-GAMS程序的结构"><a href="#3-GAMS程序的结构" class="headerlink" title="3. GAMS程序的结构"></a>3. GAMS程序的结构</h2><h3 id="A-概述"><a href="#A-概述" class="headerlink" title="A. 概述"></a>A. 概述</h3><p><code>GAMS</code>程序通常包含如下的四个部分：</p><ul><li>数据声明：包括Set、Scalar、Parameter和Table的声明，这里把Variable的声明也包含在内了</li><li>约束声明：声明所有模型中的所有约束（包含目标变量的计算式）</li><li>模型声明：声明某个模型包含的约束</li><li>求解声明：声明求解某个模型使用哪个求解器</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013164516195.png" alt="GAMS的结构"></p><p>我们前面介绍了数据声明，下面节将介绍如何声明约束、模型和求解。</p><h3 id="B-约束声明"><a href="#B-约束声明" class="headerlink" title="B. 约束声明"></a>B. 约束声明</h3><p>约束包含两种：</p><ul><li>等式约束</li><li>不等式约束</li></ul><p>此外，<code>GAMS</code>中把目标变量的计算也视为约束。</p><p>约束的声明分为两步：</p><ul><li>第一步：声明约束名称</li><li>第二步：定义约束计算</li></ul><h4 id="声明约束名称"><a href="#声明约束名称" class="headerlink" title="声明约束名称"></a>声明约束名称</h4><p>约束名称的声明规则如下</p><pre class="line-numbers language-gas"><code class="language-gas">Equation[s] eqn_name [(index_list)] [explanatory text] [/eqn_data/] {, eqn_name [(index_list)] [explanatory text] [/eqn_data/]} ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li><code>[]</code>表示可选项，<code>text</code>表示注释，<code>{}</code>表示可重复项</li></ul><p>声明约束的例子如下：</p><pre class="line-numbers language-gas"><code class="language-gas">Sets  sl                      'supply locations'               /s1, s2/  wh                      'warehouse locations'            /a, b, c/;Equations  tcost_eq                'total cost accounting equation'  supply_eq(sl)           'limit on supply available at supply location'  capacity_eq(wh)         'warehouse capacity'  /a.scale 50, a.l 10, b.m 20/;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要注意的是，理论上来说，一个约束就是一个等式，那为什么约束<code>supply_eq</code>和<code>capacity_eq</code>还和<code>sl</code>、<code>wh</code>这样的索引集合关联起来呢？</p><p>原因是这样的：</p><p>我们考虑一个真实的优化问题</p><script type="math/tex; mode=display">max_{x_1, x_2}\ 12 x_1 + 8 x_2\\\left\{    \begin{array}{**lr**}        mx_1 &+& nx_2 &= &z\\        ox_2 &+& px_2 &\leq &q\\        a_{11} x_1 &+& a_{12} x_2 &\leq &b_1\\    a_{21} x_1 &+& a_{22} x_2 &\leq &b_2\\    \end{array}\right.</script><p>那么上面这个这个优化问题用矩阵来描述实际上可以写成下面的样子</p><script type="math/tex; mode=display">max_{x_1, x_2}\ 12 x_1 + 8 x_2\\\left\{    \begin{array}{**lr**}        mx_1 &+& nx_2 &= &z\\        ox_2 &+& px_2 &\leq &q\\        \begin{bmatrix}            a_{11} & a_{12}\\            a_{21} & a_{22}        \end{bmatrix} &\cdot&        \begin{bmatrix}            x_1\\ x_2        \end{bmatrix} &\leq&         \begin{bmatrix}            b_1\\ b_2        \end{bmatrix}     \end{array}\right.</script><p>那么上面的约束实际上只有三个，其中：</p><ul><li>第一个约束是一个标量等式约束</li><li>第二个约束是一个标量不等式约束</li><li>第三个约束是一个矩阵不等式约束</li></ul><p>但是第三个约束实际上是对$x_1$和$x_2$和两个变量的约束，因此我们在GAMS中声明矩阵约束的时候，实际上就需要和索引集合关联起来。</p><h4 id="定义约束计算"><a href="#定义约束计算" class="headerlink" title="定义约束计算"></a>定义约束计算</h4><p>约束计算的式子如下</p><pre class="line-numbers language-gas"><code class="language-gas">eqn_name(index_list)[$logical_condition(s)].. expression eqn_type expression ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li><code>[]</code>是可选项</li><li><code>eqn_type</code>是约束的类型，<code>expression</code>就是加减乘除的表达式</li><li><code>$logical_condition</code>是逻辑表达式，我们在下一讲中将涵盖这个主题</li></ul><p>所有的<code>eqn_type</code>有</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013145104831.png" alt="所有的eqn_type"></p><p>定义约束计算的一个例子如下</p><pre class="line-numbers language-gas"><code class="language-gas">Variables  phi, phipsi, philam, phipi, phieps ;Equations  obj ;obj..     phi  =e=  phipsi + philam + phipi - phieps ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="标量约束"><a href="#标量约束" class="headerlink" title="标量约束"></a>标量约束</h4><p>我们在上面介绍了标量约束和矩阵约束，下面将给出下面这个约束问题代码</p><script type="math/tex; mode=display">max_{x_1, x_2}\ 12 x_1 + 8 x_2\\\left\{    \begin{array}{**lr**}        mx_1 &+& nx_2 &= &z\\        ox_2 &+& px_2 &\leq &q\\        \begin{bmatrix}            a_{11} & a_{12}\\            a_{21} & a_{22}        \end{bmatrix} &\cdot&        \begin{bmatrix}            x_1\\ x_2        \end{bmatrix} &\leq&         \begin{bmatrix}            b_1\\ b_2        \end{bmatrix}     \end{array}\right.</script><p>首先是标量约束的定义和声明</p><script type="math/tex; mode=display">\left\{    \begin{array}{**lr**}        mx_1 &+& nx_2 &= &z\\        ox_2 &+& px_2 &\leq &q\\    \end{array}\right.</script><pre class="line-numbers language-gas"><code class="language-gas">Scalars    m  /1/,    n  /2/,    z  /3/,    o  /4/,    p  /5/,    q  /6/;Set    position        "位置索引"            /1, 2/;Parameters    eq1_p(position)                "第一个等式约束的参数"      /    "1"    1, "2"   2 /,    eq2_p(position)                "第二个不等式约束的参数"  / "1"    4, "2"   5 /;Free Variable     objective,    decision(position);Equations    eq1,    eq2;eq1..    sum(position, eq1_p(position) * decision(position)) =e= z;eq2..    sum(position, eq2_p(position) * decision(position)) =l= q;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="矩阵约束"><a href="#矩阵约束" class="headerlink" title="矩阵约束"></a>矩阵约束</h4><p>然后我们再定义矩阵约束</p><script type="math/tex; mode=display">\left\{    \begin{array}{**lr**}                \begin{bmatrix}            a_{11} & a_{12}\\            a_{21} & a_{22}        \end{bmatrix} &\cdot&        \begin{bmatrix}            x_1\\ x_2        \end{bmatrix} &\leq&         \begin{bmatrix}            b_1\\ b_2        \end{bmatrix}     \end{array}\right.</script><p>注意，这里使用<code>alias</code>的原因是因为我们的等式应该是对每行循环的，而求和是对每个变量循环的。</p><pre class="line-numbers language-gas"><code class="language-gas">Scalars    a11 /7/,    a12 /8/,    a21 /9/,    a22 /10/,    b1  /11/,    b2  /12/;Set    position        "位置索引"            /1, 2/;alias (row, position);Parameters  eq3_b(row)             "第三个矩阵约束"         / "1"    11, "2"  12 /;Table a(row, position) "系数矩阵a"        "1"     "2""1"     7       8"2"     9       10;Free Variable     objective,    decision(position);Equations    eq3(row);eq3(row)..    sum(position, a(row, position) * decision(position)) =l= eq3_b(row);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-模型声明"><a href="#C-模型声明" class="headerlink" title="C. 模型声明"></a>C. 模型声明</h3><p>模型声明很简单，语法如下</p><pre class="line-numbers language-gas"><code class="language-gas">model[s] model_name [text] [/ (all | eqn_name {, eqn_name}) {, var_name(set_name)} /]       {,model_name [text] [/ (all | eqn_name {, eqn_name}) {, var_name(set_name)} /]} ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>[]</code>表示可选项，<code>{}</code>表示可重复项，<code>text</code>表示注释</li></ul><p>语法具体来说就先声明模型的名字，然后在<code>//</code>中声明模型包含的约束</p><p>例如对上面的例子，我们声明的模型为</p><pre class="line-numbers language-gas"><code class="language-gas">model example "示例"    /eq1, eq2, eq3/;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="D-求解声明"><a href="#D-求解声明" class="headerlink" title="D. 求解声明"></a>D. 求解声明</h3><p>求解声明其实就是说明我们需要使用哪个求解器求解模型，具体语法如下</p><pre class="line-numbers language-gas"><code class="language-gas">solve model_name using model_type maximizing|minimizing var_name;solve model_name maximizing|minimizing var_name using model_type ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>model_name</code>就是需要求接的模型名称</li><li><code>model_type</code>就是使用的求解器的名称</li><li><code>var_name</code>就是需要最大或者最小化的目标变量</li></ul><p>常用的求解器有：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013163050320.png" alt="常见的求解器" style="zoom: 50%;"></p><p>对于上面的模型，我们的求解声明如下</p><pre class="line-numbers language-gas"><code class="language-gas">Set    position        "位置索引"            /1, 2/;Free Variable     objective,    decision(position);Equations    obj_eq;obj_eq..    objective =e= 12 * decision("1") + 8 * decision("2");model example "示例"    /obj_eq/;solve example using lp maximizing objective;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="E-总结"><a href="#E-总结" class="headerlink" title="E. 总结"></a>E. 总结</h3><p>最后，我们把上面所有的内容结合起来，就完成下属优化模型的GAMS程序描述</p><script type="math/tex; mode=display">max_{x_1, x_2}\ 12 x_1 + 8 x_2\\\left\{    \begin{array}{**lr**}        mx_1 &+& nx_2 &= &z\\        ox_2 &+& px_2 &\leq &q\\        \begin{bmatrix}            a_{11} & a_{12}\\            a_{21} & a_{22}        \end{bmatrix} &\cdot&        \begin{bmatrix}            x_1\\ x_2        \end{bmatrix} &\leq&         \begin{bmatrix}            b_1\\ b_2        \end{bmatrix}     \end{array}\right.</script><p>GAMS程序为</p><pre class="line-numbers language-gas"><code class="language-gas">Scalars    m  /1/,    n  /2/,    z  /3/,    o  /4/,    p  /5/,    q  /6/,    a11 /7/,    a12 /8/,    a21 /9/,    a22 /10/,    b1  /11/,    b2  /12/;Set    position        "位置索引"            /1, 2/;alias (row, position);Parameters    eq1_p(position)                "第一个等式约束的参数"      /    "1"    1, "2"   2 /,    eq2_p(position)                "第二个不等式约束的参数"  / "1"    4, "2"   5 /,    eq3_b(row)             "第三个矩阵约束"         / "1"    11, "2"  12 /;Table a(row, position) "系数矩阵a"        "1"     "2""1"     7       8"2"     9       10;Free Variable     objective,    decision(position);Equations    eq1,    eq2,    eq3(row),    obj_eq;eq1..    sum(position, eq1_p(position) * decision(position)) =e= z;eq2..    sum(position, eq2_p(position) * decision(position)) =l= q;eq3(row)..    sum(position, a(row, position) * decision(position)) =l= eq3_b(row);obj_eq..    objective =e= 12 * decision("1") + 8 * decision("2");model example "示例"    /eq1, eq2, eq3, obj_eq/;solve example using lp maximizing objective;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后的结果如下，变量<code>objective</code>的最大值是4</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221013154207091.png" alt="lst文件中的结果"></p>]]></content>
      
      
      <categories>
          
          <category> GAMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode调试C/C++项目</title>
      <link href="/2022/10/10/vscode-diao-shi-c-c-xiang-mu/"/>
      <url>/2022/10/10/vscode-diao-shi-c-c-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011012250590.png" alt="使用VSCode来调试C/C++工程"></p><h1 id="VSCode调试C-C-项目"><a href="#VSCode调试C-C-项目" class="headerlink" title="VSCode调试C/C++项目"></a>VSCode调试C/C++项目</h1><p>VS Code作为宇宙第一编辑器，在众多插件的加持下，具有了调试、单元测试等等功能，使其越来越像一个IDE。</p><p>然而很多人其实并不会使用VS Code的调试功能，只是把VS Code当做了一个带有语法补全的编辑器。这实际上极大地浪费了VS Code的功能，尤其是对于C/C++开发者来说，使用命令行的GDB调试远不如使用VS Code内嵌的GDB图形化界面调试来的舒服。</p><p>本文就讲介绍如何使用VS Code调试C/C++项目</p><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>通常我们在调试一个C/C++工程的时候，大体上的流程可以分为两步：</p><ul><li><strong>启动调试器（GDB）前的准备工作</strong></li><li><strong>启动调试器（GDB）进行调试</strong></li></ul><p>例如对于一个<code>CMake</code>组织的C/C++项目，这两大步具体包含的流程如下（编写<code>CMakeLists.txt</code>是在编码阶段，编码是与调试独立的阶段）：</p><ul><li><strong>启动调试器（GDB）前的准备工作</strong><ol><li>创建<code>build</code>文件夹：<code>mkdir -p build</code></li><li>切换到<code>build</code>文件夹：<code>cd build</code></li><li>配置（Configure）项目：<code>cmake .. &lt;option&gt;</code></li><li>构建/编译（Build）项目：<code>make</code></li></ol></li><li><strong>启动调试器（GDB）进行调试</strong><ol><li>启动调试器：<code>gdb &lt;path-to-executable</code></li></ol></li></ul><p>对于不同的项目（<code>npm</code>项目、<code>C#</code>项目、<code>java</code>项目等等），可能在启动调试器前的准备工作不同，但是大体上都可以分为进行调试前需要进行的一系列任务，以及结合具体参数启动时调试器</p><p>因此，对于这两个阶段，VSCode中提供了<code>tasks.json</code>和<code>launch.json</code>两个文件来分别描述<code>调试前的准备工作</code>以及<code>以指定的参数启动调试器</code></p><h2 id="2-调试前的准备工作：tasks-json"><a href="#2-调试前的准备工作：tasks-json" class="headerlink" title="2. 调试前的准备工作：tasks.json"></a>2. 调试前的准备工作：tasks.json</h2><p>VSCode使用<code>tasks.json</code>来描述启动调试前的准备工作。</p><h3 id="A-tasks-json的结构"><a href="#A-tasks-json的结构" class="headerlink" title="A. tasks.json的结构"></a>A. tasks.json的结构</h3><p><code>tasks.json</code>的结构一般如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"inputs"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011021938530.png" alt="tasks.json的一般结构"></p><h3 id="B-version标签"><a href="#B-version标签" class="headerlink" title="B.  version标签"></a>B.  version标签</h3><p><code>version</code>标签指定了<code>Tasks.json</code>的版本，因为不同的版本支持的标签不一样，所以需要使用<code>version</code>标签指明版本。</p><p>目前<code>version</code>支持<code>2.0.0</code>版本，所以直接指定<code>version</code>为<code>2.0.0</code>即可。</p><h3 id="C-tasks标签"><a href="#C-tasks标签" class="headerlink" title="C. tasks标签"></a>C. tasks标签</h3><p><code>tasks</code>标签是一个列表，我们在其中定义不同的<code>task</code>，而关于具体的<code>task</code>如何定义则见下</p><p>我们以创建<code>build</code>文件夹这个任务为例</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>        <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"create dir"</span><span class="token punctuation">,</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"mkdir"</span><span class="token punctuation">,</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"-p"</span><span class="token punctuation">,</span>            <span class="token string">"build"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"windows"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-Force"</span><span class="token punctuation">,</span>                <span class="token string">"build"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"shell"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"executable"</span><span class="token operator">:</span> <span class="token string">"powershell.exe"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-label标签"><a href="#1-label标签" class="headerlink" title="1) label标签"></a>1) label标签</h4><p><code>label</code>标签定义了一个任务的名字，稍后我们能用通过名字取定位一个任务，从而实现诸如将多个任务合并为一个组，而后执行一组任务这样的操作。</p><p><code>label</code>标签的值是随我们自己喜欢，想写什么就写什么的。</p><h4 id="2-type标签"><a href="#2-type标签" class="headerlink" title="2) type标签"></a>2) type标签</h4><p><code>type</code>标签指定了一个任务的类型。所有的任务大致上可以分为两类：</p><ul><li>第一类就是在<code>Shell</code>中执行的命令，值为<code>shell</code></li><li>第二类就是一个进程，例如我们写的程序是操作<code>MySQL</code>数据库的程序，那么就需要在调试前启动<code>MySQL</code>数据库，则此时<code>MySQL</code>数据库就是进程形式的任务。进程形式的任务的值为<code>process</code></li></ul><h4 id="3-command标签"><a href="#3-command标签" class="headerlink" title="3 ) command标签"></a>3 ) command标签</h4><p><code>command</code>标签指定了需要执行的命令或者程序。</p><ul><li>如果是<code>Shell</code>中的命令的话，那么<code>command</code>的值为需要执行的命令。</li><li>如果是进程的话，那么<code>command</code>的值为需要执行的可执行程序的位置，可执行程序可以是有x权限的<code>.sh</code>，也可以是<code>.exe</code>等可执行程序。</li></ul><h4 id="4-args标签"><a href="#4-args标签" class="headerlink" title="4 ) args标签"></a>4 ) args标签</h4><p><code>args</code>标签指定了执行的命令或者程序时传入的命令行参数。在具体执行的时候会把多个参数用空格连接起来而后执行。</p><p>结合<code>command</code>标签，我们执行的命令就是下面这句话</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-windows标签"><a href="#5-windows标签" class="headerlink" title="5 ) windows标签"></a>5 ) windows标签</h4><p><code>windows</code>标签指定了只有在<code>windows</code>系统上的配置。我们在<code>windows</code>标签中指定了两个标签<code>options</code>标签和<code>args</code>标签。</p><ul><li><p>对于<code>args</code>标签就意味着在其他系统（<code>Linux</code>/<code>MacOS</code>）上，使用<code>-p build</code>作为命令行参数，而在<code>Windows</code>系统上，使用<code>-Force build</code>作为命令行参数。</p><p>这是因为在<code>Linux</code>/<code>MacOS</code>系统上，创建一个文件夹使用下面的命令就行了</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p 文件夹名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是在<code>Windows</code>平台上，创建一个文件夹需要使用下面的命令</p><pre class="line-numbers language-powershell"><code class="language-powershell">mkdir <span class="token operator">-</span>Force 文件夹名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>对于<code>options</code>标签就意味着只有在<code>Windows</code>平台上才会有这个标签。</p></li></ul><h4 id="6-options标签"><a href="#6-options标签" class="headerlink" title="6 ) options标签"></a>6 ) options标签</h4><p><code>options</code>标签指明了运行命令的<code>shell</code>的位置（<code>shell</code>标签）、运行命令的环境变量（<code>env</code>标签）以及运行命令的文件夹（<code>cwd</code>标签）。当然这里只用了<code>shell</code>这一个标签。</p><p>使用<code>shell</code>标签的原因是因为在<code>Windows</code>上有两个命令行，一个是<code>cmd</code>一个是<code>powershell</code>。而<code>mkdir</code>这个命令是在<code>powershell</code>中的，因此我们需要特殊指明在<code>Windwos</code>上需要使用<code>powershell.exe</code>作为Shell的解释器</p><h3 id="D-input标签"><a href="#D-input标签" class="headerlink" title="D. input标签"></a>D. input标签</h3><p><code>input</code>标签用于生成一个选项卡，接收用户的输入，一般是和<code>args</code>标签一起使用我们稍后再讲解这个标签的用法。</p><h2 id="3-启动调试器：launch-json"><a href="#3-启动调试器：launch-json" class="headerlink" title="3. 启动调试器：launch.json"></a>3. 启动调试器：launch.json</h2><h3 id="A-launch-json的结构"><a href="#A-launch-json的结构" class="headerlink" title="A. launch.json的结构"></a>A. launch.json的结构</h3><p><code>launch.json</code>的结构一般如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问<span class="token operator">:</span> https<span class="token operator">:</span>//go.microsoft.com/fwlink/?linkid=<span class="token number">830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"GDB"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/${command:AskForProgramName}"</span><span class="token punctuation">,</span>            <span class="token property">"stopOnEntry"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"arguments"</span><span class="token operator">:</span> <span class="token string">""</span>，            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011145556587.png" alt="launch.json的结构"></p><h3 id="B-version标签-1"><a href="#B-version标签-1" class="headerlink" title="B. version标签"></a>B. version标签</h3><p><code>launch.json</code>中的<code>version</code>标签和<code>tasks.json</code>中的<code>version</code>标签作用是一样的，一般都用<code>0.2.0</code>。</p><h3 id="C-configuration标签"><a href="#C-configuration标签" class="headerlink" title="C. configuration标签"></a>C. configuration标签</h3><p><code>configuration</code>标签中定义了开始启动调试器时候的具体的配置信息。具体来说，可以有多套配置信息。即<code>configuration</code>标签下可以有多个条目。</p><h4 id="1-name标签"><a href="#1-name标签" class="headerlink" title="1 ) name标签"></a>1 ) name标签</h4><p><code>name</code>标签定义了一套配置信息的名称，这个名称稍后可以在左边的<code>运行与调试</code>页面中看到。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011155916661.png" alt="name定义调试的配置名称，可以在运行与调试界面选择需要运行的配置"></p><h4 id="2-type标签-1"><a href="#2-type标签-1" class="headerlink" title="2 ) type标签"></a>2 ) type标签</h4><p><code>type</code>标签指定了调试时启动的调试器：</p><ul><li><p>对于<code>C/C++</code>项目来说，<code>type</code>的值指定为<code>cppdbg</code>或者是<code>cppvsdbg</code></p><ul><li>在<code>Windows</code>上开发一般用的编译器都是<code>Visual Studio</code>中自带的<code>msvc</code>编译器，适用的调试器也是<code>Visual Studio</code>自带的，此时就需要把值设为<code>cppvsdbg</code></li><li><code>`Linux</code>上用的一般都是<code>gcc</code>，<code>MacOS</code>上用的编译器一般都是<code>clang</code>，对应的调试器分别是<code>gdb</code>和<code>lldb</code>，此时需要把值设为`cppdbg</li></ul></li><li><p>对于<code>Python</code>项目来说，<code>type</code>的值指定为<code>python</code>，因为<code>python</code>解释器自带了<code>pdb</code>这个调试器</p></li><li>…</li></ul><p>剩下的具体查询手册：<a href="https://code.visualstudio.com/docs">https://code.visualstudio.com/docs</a></p><h4 id="3-request标签"><a href="#3-request标签" class="headerlink" title="3 ) request标签"></a>3 ) request标签</h4><p><code>request</code>标签指明了调试器调试程序的方式。具体来说有两种：</p><ul><li><code>launch</code>：表示调试器直接启动程序进行调试，类似于使用命令<code>gdb helloworld</code>，将会直接运行命令<code>helloworld</code></li><li><code>attach</code>：有时候，我们需要调试的程序运行在远程服务器上，此时在服务器上已经运行了一个<code>gdb</code>，而且服务器上的<code>gdb</code>把调试服务暴露在某一个端口上，此时我们在本机上运行<code>gdb</code>的时候，通过链接远程服务器该端口，从而实现用本地的<code>gdb</code>调试远程服务器上的程序。<strong>此时，远程服务器上的<code>gdb</code>称为<code>gdb server</code></strong>。这种调试方式称为<code>attach</code>，即把调试器附加到一个<code>gdb server</code>上去。</li></ul><p>一般在本机做调试的时候值都是<code>launch</code>。</p><h4 id="4-program标签"><a href="#4-program标签" class="headerlink" title="4 ) program标签"></a>4 ) program标签</h4><p><code>program</code>标签指定了我们需要调试的程序。注意，如果<code>request</code>标签的值是<code>attach</code>的话，那么就不能使用<code>program</code>标签。</p><h4 id="5-workspaceFolder宏"><a href="#5-workspaceFolder宏" class="headerlink" title="5 ) workspaceFolder宏"></a>5 ) workspaceFolder宏</h4><p><code>CMake</code>中有<code>EXECUTABLE_OUTPUT_PATH</code>宏，我们可以指定<code>EXECUTABLE_OUTPUT_PATH</code>宏的值从而指定可执行文件输出的路径，也可以通过<code>${}</code>来读取<code>EXECUTABLE_OUTPUT_PATH</code>宏的值来打印到屏幕上或者用于为其他宏赋值。</p><p>类似的，<code>VSCode</code>中也有功能类似的宏，<code>workspaceFolder</code>这个宏就表示了当前打开的目录。我们也可以使用<code>${}</code>来获取这个宏的值。</p><h4 id="6-command-AskForProgramName"><a href="#6-command-AskForProgramName" class="headerlink" title="6 ) command:AskForProgramName"></a>6 ) command:AskForProgramName</h4><p><code>command:AskForProgramName</code>这个宏的作用就是在程序运行的时候在上面弹出来一个选项卡，询问用户需要调试的程序的名字。</p><p>例如我们直接对着<code>launch.json</code>这个程序按下<code>F5</code>，然后就会弹出来一个选项卡让我们输入需要调试的程序的名字</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011155802472.png" alt="VSCode弹出选项卡要求用户输入程序的名字"></p><h4 id="7-stopAtEntry标签"><a href="#7-stopAtEntry标签" class="headerlink" title="7 ) stopAtEntry标签"></a>7 ) stopAtEntry标签</h4><p><code>stopAtEntry</code>标签表示在进入到主程序之后就会停下来，对于<code>C/C++</code>来说就是在进入<code>main</code>之后就停下来。</p><p>但是一般我们都是打上断点，然后直接运行到断点处，所以这个<code>stopAtEntry</code>的值一般用的都是<code>false</code>。</p><h4 id="8-Arguments标签"><a href="#8-Arguments标签" class="headerlink" title="8 ) Arguments标签"></a>8 ) Arguments标签</h4><p>这个标签我没用过，所以我也搞不清楚，如果要传参的给程序的话，用<code>args</code>标签</p><h4 id="9-preLaunchTask标签"><a href="#9-preLaunchTask标签" class="headerlink" title="9 ) preLaunchTask标签"></a>9 ) preLaunchTask标签</h4><p><code>preLaunchTask</code>标签可以说是最重要的标签之一，它沟通了<code>launch.json</code>和<code>tasks.json</code>这两个文件。</p><p>前面我们在<code>tasks.json</code>中定义了一系列任务，而<code>launch.json</code>中的这个标签说明了在启动调试器前需要执行的<code>tasks.json</code>中的那个任务。</p><p>所以利用这个标签，我们就可以实现从调试前的准备工作再到启动调试器这一连串的任务。</p><h2 id="4-一个Toy-Example-echo-宏"><a href="#4-一个Toy-Example-echo-宏" class="headerlink" title="4. 一个Toy Example: echo 宏"></a>4. 一个Toy Example: echo 宏</h2><p>下面展示一个Toy Example来展示<code>tasks.json</code>和<code>launch.json</code>的workflow</p><h3 id="A-tasks-json的内容"><a href="#A-tasks-json的内容" class="headerlink" title="A. tasks.json的内容"></a>A. tasks.json的内容</h3><p>Toy Example中<code>tasks.json</code>的内容如下</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"example"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"echo"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"${file}\n"</span><span class="token punctuation">,</span>                <span class="token string">"${fileBasename}\n"</span><span class="token punctuation">,</span>                <span class="token string">"${fileBasenameNoExtension}\n"</span><span class="token punctuation">,</span>                <span class="token string">"${fileDirname}\n"</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体来说我们就是想要执行一下下面的命令</p><pre class="line-numbers language-shell"><code class="language-shell">echo "${file}\n" "${fileBasename}\n" "${fileBasenameNoExtension}\n" "${fileDirname}\n"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主要是看一看这四个宏的值分别是什么</p><h3 id="B-launch-json的内容"><a href="#B-launch-json的内容" class="headerlink" title="B. launch.json的内容"></a>B. launch.json的内容</h3><p>Toy Example中<code>lauch.json</code>的内容如下</p><pre class="line-numbers language-shell"><code class="language-shell">{    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387    "version": "0.2.0",    "configurations": [        {            "type": "gdb",            "request": "launch",            "name": "Toy Example",            "program": "${workspaceFolder}/${file}",            "stopOnEntry": true,            "preLaunchTask": "example"        }    ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体来说就是在启动调试器之前运行一下上面定义的<code>example</code>这个task。</p><h3 id="C-hello-world-c"><a href="#C-hello-world-c" class="headerlink" title="C. hello_world.c"></a>C. hello_world.c</h3><p>我们接下来写一个<code>hello_world.c</code>，里面的内容如下：</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="D-开始调试"><a href="#D-开始调试" class="headerlink" title="D. 开始调试"></a>D. 开始调试</h3><p>首先在<code>运行和调试</code>界面把调试的配置选定为<code>Toy Example</code>，然后编辑器打开<code>hello_world.c</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011163456116.png" alt="开始调试"></p><p>接下来按<code>F5</code>开始调试</p><p>此时我们在终端就能够看到执行的任务以及输出</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011163622369.png" alt="执行的任务以及输出"></p><p>很清楚就能看到，上面四个宏的值分别是</p><pre class="line-numbers language-json"><code class="language-json">$<span class="token punctuation">{</span>file<span class="token punctuation">}</span>                                                    <span class="token operator">:</span>        /Users/jack/project/test/vscode_test/hello_world.c$<span class="token punctuation">{</span>fileBasename<span class="token punctuation">}</span>                                    <span class="token operator">:</span>        hello_world.c$<span class="token punctuation">{</span>fileBasenameNoExtension<span class="token punctuation">}</span>            <span class="token operator">:</span>        hello_world$<span class="token punctuation">{</span>fileDirname<span class="token punctuation">}</span>                                    <span class="token operator">:</span>        /Users/jack/project/test/vscode_test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-一个Toy-Example：编译文件"><a href="#5-一个Toy-Example：编译文件" class="headerlink" title="5. 一个Toy Example：编译文件"></a>5. 一个Toy Example：编译文件</h2><p>我们对上面的Toy Example进行修改，增加一个自动编译的功能</p><h3 id="A-tasks-json的内容-1"><a href="#A-tasks-json的内容-1" class="headerlink" title="A. tasks.json的内容"></a>A. tasks.json的内容</h3><p>我们给<code>tasks.json</code>新加一个task，即自动编译，此外我们修改一下输出宏的task</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"echo"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"echo"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"${file}\n"</span><span class="token punctuation">,</span>                <span class="token string">"${pathSeparator}\n"</span><span class="token punctuation">,</span>                <span class="token string">"${fileBasenameNoExtension}\n"</span><span class="token punctuation">,</span>                <span class="token string">"${fileDirname}${pathSeparator}${fileBasenameNoExtension}.o\n"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"gcc"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"${file}"</span><span class="token punctuation">,</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span>                <span class="token string">"${fileDirname}${pathSeparator}${fileBasenameNoExtension}.o"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B-launch-json的内容-1"><a href="#B-launch-json的内容-1" class="headerlink" title="B. launch.json的内容"></a>B. launch.json的内容</h3><p>我们再给launch.json中新加一个配置信息</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问<span class="token operator">:</span> https<span class="token operator">:</span>//go.microsoft.com/fwlink/?linkid=<span class="token number">830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Echo Macros"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/${file}"</span><span class="token punctuation">,</span>            <span class="token property">"stopOnEntry"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"echo"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Gcc Compile"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}${pathSeparator}${fileBasenameNoExtension}.o"</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"build"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-运行Echo-Macros"><a href="#C-运行Echo-Macros" class="headerlink" title="C. 运行Echo Macros"></a>C. 运行Echo Macros</h3><p>首先输出一下在<code>build</code>这个task中使用到的宏。</p><p>具体来说在<code>运行和调试</code>界面选择配置为<code>Echo Macros</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011173622994.png" alt="选择配置为Echo Macros"></p><p>然后按下<code>F5</code>开始运行</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011173912976.png" alt="Echo Macros运行的结果"></p><p>可以看到，上面四个宏的值是</p><pre class="line-numbers language-json"><code class="language-json">$<span class="token punctuation">{</span>file<span class="token punctuation">}</span>                                                                                                                <span class="token operator">:</span>        /Users/jack/project/test/vscode_test/hello_world.c$<span class="token punctuation">{</span>pathSeparator<span class="token punctuation">}</span>                                                                                            <span class="token operator">:</span>        /$<span class="token punctuation">{</span>fileBasenameNoExtension<span class="token punctuation">}</span>                                                                        <span class="token operator">:</span>        hello_world$<span class="token punctuation">{</span>fileDirname<span class="token punctuation">}</span>$<span class="token punctuation">{</span>pathSeparator<span class="token punctuation">}</span>$<span class="token punctuation">{</span>fileBasenameNoExtension<span class="token punctuation">}</span>.o        <span class="token operator">:</span>        /Users/jack/project/test/vscode_test/hello_world.o<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="D-运行Gcc-Compile"><a href="#D-运行Gcc-Compile" class="headerlink" title="D. 运行Gcc Compile"></a>D. 运行Gcc Compile</h3><p>接下来我们运行<code>Gcc Compile</code>，类似的，还是先在<code>运行和调试</code>界面选择<code>Gcc Compile</code>，然后按下<code>F5</code>开始运行</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011174815269.png" alt="选择配置为Gcc Compile"></p><p>而后我们就会发现在文件夹下就出现了编译后的文件</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011174929291.png" alt="Gcc Compile运行的结果"></p><h2 id="6-一个Toy-Example：调试程序"><a href="#6-一个Toy-Example：调试程序" class="headerlink" title="6. 一个Toy Example：调试程序"></a>6. 一个Toy Example：调试程序</h2><p>我们上面做到了编译程序，而在编译之后我们需要干的就是去调试这个程序。</p><p>首先需要明白的是，我们如果想要使用<code>gdb</code>、<code>lldb</code>等调试器去调试一个程序的时候，我们必须要在编译的时候指定<code>-g</code>参数，这样编译器（例如<code>gcc</code>、<code>clang</code>）在编译的时候就会把源代码、符号表等等信息写入到程序里面去。</p><p>而后在调试的时候，我们使用命令<code>gdb xxxx</code>/<code>lldb xxxx</code>，<code>gdb</code>/<code>lldb</code>就回去读取源代码和符号表，从而开始调试。</p><h3 id="A-tasks-json的内容-2"><a href="#A-tasks-json的内容-2" class="headerlink" title="A. tasks.json的内容"></a>A. tasks.json的内容</h3><p>我们首先新增加一个名为<code>debug_build</code>的task，具体来说就是在编译的时候加上<code>-g</code>参数</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"debug_build"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"gcc"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"${file}"</span><span class="token punctuation">,</span>                <span class="token string">"-g"</span><span class="token punctuation">,</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span>                <span class="token string">"${fileDirname}${pathSeparator}${fileBasenameNoExtension}.o"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B-launch-json的内容-2"><a href="#B-launch-json的内容-2" class="headerlink" title="B. launch.json的内容"></a>B. launch.json的内容</h3><p>为了要进行debug，我们在launch.json中新加入一项，这一项可能会有些复杂</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问<span class="token operator">:</span> https<span class="token operator">:</span>//go.microsoft.com/fwlink/?linkid=<span class="token number">830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"LLDB Debug"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}${pathSeparator}${fileBasenameNoExtension}.o"</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"debug_build"</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}"</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"lldb"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细的解释如下：</p><ul><li><code>"type":"cppdbg"</code>：新加入的这一项的类型是<code>cppdgb</code>，表示<code>C/C++ Debug</code>。因为我们新添加的运行配置的目的就是给<code>C/C++</code>程序Debug，所以我们让这一项的类型是<code>cppdgb</code>。如果我们是别的项目的话，例如是<code>node.js</code>的项目的话，那么我们让这个运行配置的<code>type</code>是<code>node</code>即可</li><li><code>"cwd:"${workspaceFolder}"</code>：因为在开始调试的时候我们需要在指定的文件夹下运行调试器，所以就需要使用<code>cwd</code>标签指定工作目录，一般制定成项目的根目录，也就是<code>workspaceFolder</code>就行了</li><li><code>"MIMode":"lldb"</code>：不同的系统上使用的调试器不同，<code>MacOS</code>、<code>Linux</code>、<code>Windows</code>使用的调试器分别是<code>lldb</code>、<code>gdb</code>、<code>msvc</code>/<code>gdb</code>（<code>msvc</code>是<code>Visual Studio</code>带的调试器，<code>gdb</code>是<code>MinGW</code>带的调试器），所以我们需要使用<code>MIMode</code>标签指定使用的调试器的类型。</li></ul><p>此外，我们其实还可以使用<code>miDebuggerArgs</code>和<code>miDebuggerPath</code>来专门制定调用调试器时候传入的参数以及调试器的路径。</p><p>因为我写这篇博客时候用的是<code>Mac</code>，所以用的调试器就是<code>LLDB</code></p><h3 id="C-运行LLDB-Debug"><a href="#C-运行LLDB-Debug" class="headerlink" title="C. 运行LLDB Debug"></a>C. 运行LLDB Debug</h3><p>我们给前面的程序加上一个断点，然后选择运行配置为<code>LLDB Debug</code>，然后按下<code>F5</code>开始调试。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011184233211.png" alt="运行LLDB Debug"></p><p>接下来我们就进入了调试页面：</p><ul><li>下方：显示了所有的任务</li><li>左侧：显示了当前所有的变量以及变量的值、监视的变量以及表达式、函数的调用堆栈</li><li>中间：显式了正在调试的程序</li><li>上方：显式了调试的功能按钮</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011184352703.png" alt="image-20221011184352703"></p><h2 id="7-一个Toy-Example：顺序执行"><a href="#7-一个Toy-Example：顺序执行" class="headerlink" title="7. 一个Toy Example：顺序执行"></a>7. 一个Toy Example：顺序执行</h2><p>我们上面调试了一个程序。但是在现实中，我们往往在调试前是需要顺序执行多个命令的，而不是简单的编译。</p><p>我们接下来给出的Toy Example在启动调试前就将顺序执行两步命令：</p><ul><li>创建一个<code>bin</code>文件夹</li><li>将编译好的源文件输出到<code>bin</code>文件夹中</li></ul><h3 id="A-tasks-json中的内容"><a href="#A-tasks-json中的内容" class="headerlink" title="A. tasks.json中的内容"></a>A. tasks.json中的内容</h3><p>我们在<code>tasks.json</code>中创建下面的两个任务</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"create_bin"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"mkdir"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-p"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}${pathSeparator}/bin"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"debug_build"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"gcc"</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"${file}"</span><span class="token punctuation">,</span>                <span class="token string">"-g"</span><span class="token punctuation">,</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span>                <span class="token string">"${fileDirname}${pathSeparator}bin${pathSeparator}${fileBasenameNoExtension}.o"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"dependsOn"</span><span class="token operator">:</span> <span class="token string">"create_bin"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>create_bin</code>任务就是老三样，没啥好说的。</p><p>关键就在于修改之后的<code>debug_build</code>任务，<code>debug_build</code>任务中新增加了一个<code>dependsOn</code>标签，这个标签说明了在运行<code>debug_build</code>任务之前需要运行的任务。</p><p>在这里就表示在运行<code>debug_build</code>任务之前，需要运行<code>create_bin</code>任务。</p><h3 id="B-launch-json的内容-3"><a href="#B-launch-json的内容-3" class="headerlink" title="B. launch.json的内容"></a>B. launch.json的内容</h3><p><code>launch.json</code>中的内容保持不变，还是<code>LLDB Debug</code></p><pre class="line-numbers language-shell"><code class="language-shell">{    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387    "version": "0.2.0",    "configurations": [        {            "type": "cppdbg",            "request": "launch",            "name": "LLDB Debug",            "program": "${workspaceFolder}${pathSeparator}bin${pathSeparator}${fileBasenameNoExtension}.o",            "stopAtEntry": false,            "preLaunchTask": "debug_build",            "cwd": "${workspaceFolder}",            "MIMode": "lldb",        },    ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-运行LLDB-Debug-1"><a href="#C-运行LLDB-Debug-1" class="headerlink" title="C. 运行LLDB Debug"></a>C. 运行LLDB Debug</h3><p>运行<code>LLDB Debug</code>的结果如下，可以发现首先<code>bin</code>文件被创建了，接着可执行文件输出到了<code>bin</code>文件夹中，而后开始debug</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221011222558619.png" alt="image-20221011222558619"></p><h2 id="8-一个真实的例子：CMake工程"><a href="#8-一个真实的例子：CMake工程" class="headerlink" title="8. 一个真实的例子：CMake工程"></a>8. 一个真实的例子：CMake工程</h2><p>我们上面讲了四个Toy Example，介绍了VSCode的<code>tasks.json</code>和<code>launch.json</code>最基本的功能，接下来我们就把这些功能结合到一起，用VSCode调试一个真实的<code>CMake</code>工程。</p><h3 id="A-CMake工程结构及文件"><a href="#A-CMake工程结构及文件" class="headerlink" title="A. CMake工程结构及文件"></a>A. CMake工程结构及文件</h3><p><code>CMake</code>工程的结构如下</p><pre class="line-numbers language-shell"><code class="language-shell">tree ././├── CMakeLists.txt├── main.c├── wish.c└── wish.h0 directories, 4 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目的源文件一共有四个，其中：</p><ul><li><code>CMakeLists.txt</code>定义了项目结构</li><li><code>wish.c</code>和<code>wish.h</code>定义了<code>libwish</code>静态库</li><li><code>main.c</code>调用了<code>libwish</code>库</li></ul><h4 id="1-CMakeLists-txt"><a href="#1-CMakeLists-txt" class="headerlink" title="1 ) CMakeLists.txt"></a>1 ) CMakeLists.txt</h4><p><code>CMakeLists.txt</code>中的内容如下：</p><pre class="line-numbers language-cmake"><code class="language-cmake">project(WISH)cmake_minimum_required(VERSION 3.9)set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)add_library(    libwish STATIC    wish.c)add_executable(    wish    main.c)target_link_libraries(wish libwish)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-wish-h-和-wish-c"><a href="#2-wish-h-和-wish-c" class="headerlink" title="2 ) wish.h 和 wish.c"></a>2 ) wish.h 和 wish.c</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// wish.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> _WISH_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> _WISH_H 1</span><span class="token macro property">#<span class="token directive keyword">define</span> WISH_EXIT_SUCCESS 0</span><span class="token macro property">#<span class="token directive keyword">define</span> WISH_EXIT_FAILURE -1</span><span class="token macro property">#<span class="token directive keyword">define</span> WISH_BUF_SIZE 1024</span><span class="token macro property">#<span class="token directive keyword">define</span> WISH_MY_SEARCH 1</span><span class="token macro property">#<span class="token directive keyword">define</span> WISH_BUILTIN_NUM sizeof(builtin_str) / sizeof(char *)</span><span class="token macro property">#<span class="token directive keyword">define</span> WISH_MAX_WORD 20</span><span class="token macro property">#<span class="token directive keyword">define</span> WISH_MAX_FNAME 1024</span><span class="token macro property">#<span class="token directive keyword">define</span> WISH_MAX_PATH 128</span><span class="token macro property">#<span class="token directive keyword">define</span> WISH_DEBUG 1</span><span class="token comment" spellcheck="true">// Base Functions</span><span class="token keyword">void</span> <span class="token function">wish_loop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment" spellcheck="true">// main loop of wish</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">wish_read_line</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment" spellcheck="true">// read user input line</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token function">wish_split_line</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// split user input line into words</span><span class="token keyword">int</span> <span class="token function">wish_redirection</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">// parse user input token to </span><span class="token keyword">int</span> <span class="token function">wish_execute</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rarg_sht<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// execute user input command</span><span class="token keyword">int</span> <span class="token function">wish_launch</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rarg_sht<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// launch other program</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">wish_search</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">// search program in PATH</span><span class="token keyword">void</span> <span class="token function">wish_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                      <span class="token comment" spellcheck="true">// report error</span><span class="token keyword">void</span> <span class="token function">wish_line</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">wish_cd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">wish_exit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">wish_path</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">wish_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">wish_env</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// wish.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"wish.h"</span></span><span class="token comment" spellcheck="true">// path</span><span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">[</span>WISH_MAX_PATH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"/bin"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Shell Builtin Funtions</span><span class="token keyword">char</span> <span class="token operator">*</span>builtin_str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"cd"</span><span class="token punctuation">,</span>    <span class="token string">"exit"</span><span class="token punctuation">,</span>    <span class="token string">"path"</span><span class="token punctuation">,</span>    <span class="token string">"help"</span><span class="token punctuation">,</span>    <span class="token string">"wenv"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>builtin_func<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">&amp;</span>wish_cd<span class="token punctuation">,</span>    <span class="token operator">&amp;</span>wish_exit<span class="token punctuation">,</span>    <span class="token operator">&amp;</span>wish_path<span class="token punctuation">,</span>    <span class="token operator">&amp;</span>wish_help<span class="token punctuation">,</span>    <span class="token operator">&amp;</span>wish_env<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">wish_loop</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>line<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">;</span>    bool status<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"wish> "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        line <span class="token operator">=</span> <span class="token function">wish_read_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args <span class="token operator">=</span> <span class="token function">wish_split_line</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">wish_redirection</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            args<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        status <span class="token operator">=</span> <span class="token function">wish_execute</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> WISH_MAX_WORD<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token function">free</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>status<span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span>WISH_EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">wish_read_line</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> bufsize <span class="token operator">=</span> WISH_BUF_SIZE<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> bufsize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> buffer<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"wish: Memory allocation failed for read line.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>WISH_EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// read a char</span>        c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token constant">EOF</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            buffer<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> buffer<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            buffer<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// resize buffer</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">>=</span> bufsize<span class="token punctuation">)</span><span class="token punctuation">{</span>            bufsize <span class="token operator">+</span><span class="token operator">=</span> WISH_BUF_SIZE<span class="token punctuation">;</span>            <span class="token keyword">char</span> <span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> bufsize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> temp<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"wish: Memory allocation failed for read line.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// copy and reset pointer to new buffer</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> position<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                temp<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> buffer<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>                num<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">free</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token function">wish_split_line</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>line<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>words <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> WISH_MAX_WORD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> WISH_MAX_WORD<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>temp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span> <span class="token operator">||</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\t'</span> <span class="token operator">||</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>            words<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">strncpy</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            words<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>             j <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> words<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">wish_redirection</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'>'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> i<span class="token punctuation">;</span>        i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">wish_execute</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rarg_sht<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// run builtin command</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> WISH_BUILTIN_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> builtin_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>builtin_func<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">wish_launch</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> rarg_sht<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">wish_launch</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> rarg_sht<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// search path</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>executable_path <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> WISH_MAX_FNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> WISH_MAX_FNAME<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        executable_path<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span> temp_path <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> WISH_MAX_FNAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// copy path[i] to temp and then concate</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncpy</span><span class="token punctuation">(</span>temp_path<span class="token punctuation">,</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">wish_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">wish_line</span><span class="token punctuation">(</span><span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> WISH_EXIT_FAILURE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>temp_path<span class="token punctuation">)</span><span class="token punctuation">;</span>        temp_path<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">;</span>        temp_path<span class="token punctuation">[</span>len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcat</span><span class="token punctuation">(</span>temp_path<span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">wish_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">wish_line</span><span class="token punctuation">(</span><span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> WISH_EXIT_FAILURE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// check privilege</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">access</span><span class="token punctuation">(</span>temp_path<span class="token punctuation">,</span> X_OK<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcpy</span><span class="token punctuation">(</span>executable_path<span class="token punctuation">,</span> temp_path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">wish_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">wish_line</span><span class="token punctuation">(</span><span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> WISH_EXIT_FAILURE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>temp_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// print error if not found</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executable_path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>executable_path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wish_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wish_line</span><span class="token punctuation">(</span><span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EXIT_FAILURE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> status<span class="token punctuation">;</span>    pid_t son_pid<span class="token punctuation">,</span> wait_pid<span class="token punctuation">;</span>    son_pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>son_pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// child process</span>        <span class="token comment" spellcheck="true">// redirection</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">!=</span> rarg_sht <span class="token operator">&amp;&amp;</span> <span class="token constant">NULL</span> <span class="token operator">!=</span> args<span class="token punctuation">[</span>rarg_sht<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// get real path</span>            <span class="token keyword">char</span> rp<span class="token punctuation">[</span>WISH_MAX_FNAME<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">realpath</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>rarg_sht<span class="token punctuation">]</span><span class="token punctuation">,</span> rp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token function">freopen</span><span class="token punctuation">(</span>rp<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span> <span class="token constant">stdout</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"wish: redirection file %s open fail!\n"</span><span class="token punctuation">,</span> rp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// run cmd</span>        <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>WISH_MY_SEARCH <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            func <span class="token operator">=</span> execvp<span class="token punctuation">;</span>        <span class="token keyword">else</span>            func <span class="token operator">=</span> execv<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// wish_error();</span>            <span class="token comment" spellcheck="true">// wish_line(__LINE__);</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// if run the following code, then it is wrong</span>        <span class="token function">exit</span><span class="token punctuation">(</span>WISH_EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>son_pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"wish: son process create fail by fork"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>             wait_pid <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span>son_pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> WUNTRACED<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">WIFSIGNALED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">wish_search</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">wish_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>err_msg <span class="token operator">=</span> <span class="token string">"An error has occurred\n"</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>STDERR_FILENO<span class="token punctuation">,</span> err_msg<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>err_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">wish_line</span><span class="token punctuation">(</span><span class="token keyword">int</span> lineno<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token macro property">#<span class="token directive keyword">ifdef</span> WISH_DEBUG</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"in line %d\n"</span><span class="token punctuation">,</span> lineno<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">wish_cd</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">wish_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">wish_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">wish_exit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wish_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">wish_path</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">wish_env</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> <span class="token operator">*</span> env <span class="token operator">=</span> <span class="token function">getenv</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s:\n"</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">wish_help</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"WISH written by Shihong Wang.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: command  argument [enter]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Builtin commands:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> WISH_BUILTIN_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\t%s"</span><span class="token punctuation">,</span> builtin_str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nRefer man page of other command.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-main-c"><a href="#3-main-c" class="headerlink" title="3 ) main.c"></a>3 ) main.c</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"wish.h"</span></span><span class="token keyword">extern</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>environ<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// command loop mode</span>        <span class="token function">wish_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// read-parse-execute mode</span>        FILE <span class="token operator">*</span>file<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token punctuation">(</span>file <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"wish: read-parse mode %s file not exists!\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span>WISH_EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// read a line, parse and execute</span>        <span class="token keyword">int</span> status<span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> args<span class="token punctuation">;</span>        size_t len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ssize_t read<span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>line <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> WISH_BUF_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>read <span class="token operator">=</span> <span class="token function">getline</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>line<span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            line<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>            args <span class="token operator">=</span> <span class="token function">wish_split_line</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token function">wish_redirection</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                args<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            status <span class="token operator">=</span> <span class="token function">wish_execute</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> WISH_MAX_WORD<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token function">free</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">free</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">free</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> WISH_EXIT_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B-tasks-json的内容"><a href="#B-tasks-json的内容" class="headerlink" title="B. tasks.json的内容"></a>B. tasks.json的内容</h3><p>我们在调试前，需要：</p><ul><li>创建<code>build</code>文件夹</li><li>进入<code>build</code>文件夹使用<code>cmake</code>配置项目</li><li>使用<code>make</code>或者<code>cmake --build ./ --target all</code>进行编译</li></ul><p>因此，我们需要再<code>tasks.json</code>中定义三个任务</p><pre class="line-numbers language-json"><code class="language-json">    <span class="token punctuation">{</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"create_build"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"mkdir"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-p"</span><span class="token punctuation">,</span>                <span class="token string">"${workspaceFolder}/build"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token string">"创建build文件夹"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"cmake_configure"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"cmake"</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/build"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-DCMAKE_BUILD_TYPE=${input:CMAKE_BUILD_TYPE}"</span><span class="token punctuation">,</span>                <span class="token string">"-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"</span><span class="token punctuation">,</span> // 生成compile_commands.json 供c/c++扩展提示使用                <span class="token string">"../"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"dependsOn"</span><span class="token operator">:</span> <span class="token string">"create_build"</span><span class="token punctuation">,</span>            <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token string">"CMake配置项目"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"make_build"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"make"</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/build"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"all"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"dependsOn"</span><span class="token operator">:</span> <span class="token string">"cmake_configure"</span><span class="token punctuation">,</span>            <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token string">"Make构建项目"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"inputs"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"CMAKE_BUILD_TYPE"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"pickString"</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"选择项目的编译类型(CMake Build Type)"</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"Debug"</span><span class="token punctuation">,</span>                <span class="token string">"Release"</span><span class="token punctuation">,</span>                <span class="token string">"RelWithDebInfo"</span><span class="token punctuation">,</span>                <span class="token string">"MinSizeRel"</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"Debug"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于<code>input</code>标签，参考手册的这一节：<a href="https://code.visualstudio.com/docs/editor/variables-reference">https://code.visualstudio.com/docs/editor/variables-reference</a></p><h3 id="C-launch-json的内容"><a href="#C-launch-json的内容" class="headerlink" title="C. launch.json的内容"></a>C. launch.json的内容</h3><p><code>launch.json</code>的内容如下</p><pre class="line-numbers language-shell"><code class="language-shell">{    // 使用 IntelliSense 了解相关属性。     // 悬停以查看现有属性的描述。    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387    "version": "0.2.0",    "configurations": [        {            "type": "cppdbg",            "request": "launch",            "name": "LLDB Debug",            "program": "${workspaceFolder}/bin/wish",            "stopAtEntry": true,            "preLaunchTask": "make_build",            "cwd": "${workspaceFolder}",            "MIMode": "lldb",        },    ]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="D-开始调试-1"><a href="#D-开始调试-1" class="headerlink" title="D. 开始调试"></a>D. 开始调试</h3><p>按下<code>F5</code>开始调试</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B62022-10-11-%E4%B8%8B%E5%8D%8811.28.15%20(1" alt="开始调试">.gif)</p><h2 id="9-CMake工程常用的tasks-json和launch-json"><a href="#9-CMake工程常用的tasks-json和launch-json" class="headerlink" title="9. CMake工程常用的tasks.json和launch.json"></a>9. CMake工程常用的tasks.json和launch.json</h2><p>下面给出一个<code>CMake</code>工程常用的<code>tasks.json</code>和<code>launch.json</code></p><pre class="line-numbers language-json"><code class="language-json">// tasks.json<span class="token punctuation">{</span>    // See https<span class="token operator">:</span>//go.microsoft.com/fwlink/?LinkId=<span class="token number">733558</span>    // for the documentation about the tasks.json format    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> // 在根文件夹中执行创建文件夹build的命令          // 除windows系统外执行的命令为`mkdir -p build`          // windows系统是在powershell中执行命令`mkdir -Force build`            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"build_dir"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"mkdir"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-p"</span><span class="token punctuation">,</span>                <span class="token string">"build"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"windows"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"shell"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"executable"</span><span class="token operator">:</span> <span class="token string">"powershell.exe"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"-Force"</span><span class="token punctuation">,</span>                    <span class="token string">"build"</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> // 在build文件夹中调用cmake进行项目配置          // 除windows系统外执行的命令为`cmake -DCMAKE_BUILD_TYPE=&lt;Debug|Release|RelWithDebInfo|MinSizeRel> ../`          // windows系统是在visual stuido的环境中执行命令`cmake -DCMAKE_BUILD_TYPE=&lt;Debug|Release|RelWithDebInfo|MinSizeRel>  ../ -G <span class="token string">"CodeBlocks - NMake Makefiles"</span>`            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"cmake"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"cmake"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-DCMAKE_BUILD_TYPE=${input:CMAKE_BUILD_TYPE}"</span><span class="token punctuation">,</span>                <span class="token string">"-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"</span><span class="token punctuation">,</span> // 生成compile_commands.json 供c/c++扩展提示使用                <span class="token string">"../"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/build"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"windows"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token string">"-DCMAKE_BUILD_TYPE=${input:CMAKE_BUILD_TYPE}"</span><span class="token punctuation">,</span>                    <span class="token string">"-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"</span><span class="token punctuation">,</span>                    <span class="token string">"../"</span><span class="token punctuation">,</span>                    <span class="token string">"-G"</span><span class="token punctuation">,</span>                    <span class="token string">"\"CodeBlocks - NMake Makefiles\""</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"shell"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        // 需要根据安装的vs版本调用vs工具命令提示符，根据自己的计算机上的路径进行修改                        <span class="token property">"executable"</span><span class="token operator">:</span> <span class="token string">"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat"</span><span class="token punctuation">,</span>                        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                            <span class="token string">"${input:PLATFORM}"</span><span class="token punctuation">,</span> //指定平台                            <span class="token string">"-vcvars_ver=${input:vcvars_ver}"</span><span class="token punctuation">,</span> //指定vc环境版本                            <span class="token string">"&amp;&amp;"</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"dependsOn"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"build_dir"</span> // 在task `build_dir` 后执行该task            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> // 在build文件夹中调用cmake编译构建debug程序          // 执行的命令为`cmake --build ./ --target all --`          //  windows系统如上需要在visual stuido的环境中执行命令            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"cmake"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"--build"</span><span class="token punctuation">,</span>                <span class="token string">"./"</span><span class="token punctuation">,</span>                <span class="token string">"--target"</span><span class="token punctuation">,</span>                <span class="token string">"all"</span><span class="token punctuation">,</span>                <span class="token string">"--"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/build"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token string">"$gcc"</span><span class="token punctuation">,</span>            <span class="token property">"windows"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"shell"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"executable"</span><span class="token operator">:</span> <span class="token string">"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat"</span><span class="token punctuation">,</span>                        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                            <span class="token string">"${input:PLATFORM}"</span><span class="token punctuation">,</span>                            <span class="token string">"-vcvars_ver=${input:vcvars_ver}"</span><span class="token punctuation">,</span>                            <span class="token string">"&amp;&amp;"</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token string">"$msCompile"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"dependsOn"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"cmake"</span> // 在task `cmake` 后执行该task            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"Open Terminal"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"osascript -e 'tell application \"Terminal\"\ndo script \"echo hello\"\nend tell'"</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"inputs"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"CMAKE_BUILD_TYPE"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"pickString"</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"What CMAKE_BUILD_TYPE do you want to create?"</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"Debug"</span><span class="token punctuation">,</span>                <span class="token string">"Release"</span><span class="token punctuation">,</span>                <span class="token string">"RelWithDebInfo"</span><span class="token punctuation">,</span>                <span class="token string">"MinSizeRel"</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"Debug"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"PLATFORM"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"pickString"</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"What PLATFORM do you want to create?"</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"x86"</span><span class="token punctuation">,</span>                <span class="token string">"amd64"</span><span class="token punctuation">,</span>                <span class="token string">"arm"</span><span class="token punctuation">,</span>                <span class="token string">"x86_arm"</span><span class="token punctuation">,</span>                <span class="token string">"x86_amd64"</span><span class="token punctuation">,</span>                <span class="token string">"amd64_x86"</span><span class="token punctuation">,</span>                <span class="token string">"amd64_arm"</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"amd64"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"vcvars_ver"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"pickString"</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"What vcvars_ver do you want to create?"</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"14.2"</span><span class="token punctuation">,</span> // <span class="token number">2019</span>                <span class="token string">"14.1"</span><span class="token punctuation">,</span> // <span class="token number">2017</span>                <span class="token string">"14.0"</span><span class="token punctuation">,</span> // <span class="token number">2015</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"14.2"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    // Use IntelliSense to learn about possible attributes.    // Hover to view descriptions of existing attributes.    // For more information<span class="token punctuation">,</span> visit<span class="token operator">:</span> https<span class="token operator">:</span>//go.microsoft.com/fwlink/?linkid=<span class="token number">830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Launch Debug"</span><span class="token punctuation">,</span> //名称            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span> //调试类型，除使用msvc进行调试外，均为该类型            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/${input:executable}"</span><span class="token punctuation">,</span> //指定C/C++程序位置            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> //指定运行参数            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}"</span><span class="token punctuation">,</span> //指定工作目录            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span> //在调试前会先调用build_debug这个task编译构建程序            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"osx"</span><span class="token operator">:</span> <span class="token punctuation">{</span> //macOS的特定配置                // <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"/Applications/Xcode.app/Contents/ Developer/usr/bin/lldb-mi"</span><span class="token punctuation">,</span> //修改使用的lldb-mi，一般不需要修改                <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"lldb"</span><span class="token punctuation">,</span> //指定使用lldb进行调试            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"linux"</span><span class="token operator">:</span> <span class="token punctuation">{</span> //linux的特定配置                <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span> //指定使用gdb调试                <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Enable pretty-printing for gdb"</span><span class="token punctuation">,</span>                        <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                        <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"windows"</span><span class="token operator">:</span> <span class="token punctuation">{</span> //windows的特定配置                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppvsdbg"</span><span class="token punctuation">,</span> //指定使用msvc进行调试                <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}/build/${workspaceFolderBasename}.exe"</span><span class="token punctuation">,</span> //指定C/C++程序位置            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"inputs"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"executable"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"promptString"</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"输入可执行文件的位置"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
            <tag> VSCode </tag>
            
            <tag> tasks.json </tag>
            
            <tag> launch.json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Method学习笔记</title>
      <link href="/2022/10/01/method-xue-xi-bi-ji/"/>
      <url>/2022/10/01/method-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Method学习笔记"><a href="#Method学习笔记" class="headerlink" title="Method学习笔记"></a>Method学习笔记</h1><p>迷男方法（The Mystery Method）全书一共可以分为两部分：</p><ul><li><strong>第一部分：前三章作为第一部分，介绍了把妹时候一些基本知识</strong></li><li><strong>第二部分：第四到第九章作为第二部分，介绍了一套把妹方法（M3模型）</strong></li></ul><h2 id="第二章：人生的终极目标"><a href="#第二章：人生的终极目标" class="headerlink" title="第二章：人生的终极目标"></a>第二章：人生的终极目标</h2><h3 id="1-人生的第一目标"><a href="#1-人生的第一目标" class="headerlink" title="1. 人生的第一目标"></a>1. 人生的第一目标</h3><p><strong>人生的第一目标就是生存，即活下去</strong></p><h3 id="2-人生的第二目标"><a href="#2-人生的第二目标" class="headerlink" title="2. 人生的第二目标"></a>2. 人生的第二目标</h3><p><strong>人生的第二目标就是繁衍</strong>，而<strong>优越的基因会逃避低劣的基因</strong>，</p><h3 id="3-人生的目标"><a href="#3-人生的目标" class="headerlink" title="3. 人生的目标"></a>3. 人生的目标</h3><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221001171416763.png" alt="人生的目标" style="zoom:50%;"></p><p>作为一台生物机器，我们的人生目标就是：<strong>活下去，并且进行繁殖</strong>。</p><p>人的一生只有几万天（28251天），即便活到100岁也只有36500天。因此我们的挑战就是：<strong>在有限的寿命自然终结之前繁衍、生下后代</strong>。</p><p>这一挑战包含生存和繁衍的两个维度。</p><p>为了面对这一挑战，最符合逻辑的、最正确的行为模式就是：</p><ul><li><strong>明白专门学习和训练的重要性</strong></li><li><strong>向别人学习有用的生存和繁衍策略</strong></li><li><strong>通过训练，将这些知识内化为本能的反应，从而运用在生活中</strong>。</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221001172155935.png" alt="我们需要学习的东西" style="zoom:50%;"></p><p>能够帮助生存和繁衍的策略分别是：武术和求爱艺术</p><p><strong>对于任何武术家而言，天生强壮的人不一定能够打赢，事前的准备和训练才是决定生死的关键。同样的，一次成功的求爱并不能只靠外表，我们需要一个完整的游戏计划，一套完整的策略才能够成功进行繁殖</strong>。</p><p>我们并不是唯一需要生存和繁衍的人，事实上，每个人，包括女人都具有相同的本能。</p><h3 id="4-S价值、R价值与社会同盟"><a href="#4-S价值、R价值与社会同盟" class="headerlink" title="4. S价值、R价值与社会同盟"></a>4. S价值、R价值与社会同盟</h3><p>为了实现生存，人们倾向于组成社会同盟。而在社会同盟中，我们更倾向避免与低劣基因的人组成同盟。</p><p><strong>而判断一个人的基因是否低劣，主要是通过一个人的生存（Survival）和繁衍（Reproduce）价值</strong>。</p><p>所有人类都本能地想要避开社交价值低劣或负面的人。反过来说，如果我们主动接近具有较高S与R价值的人，并与之缔结同盟关系，无论有没有性关系，就可能大幅提升生存繁殖的机会。</p><p>这种人包括：</p><ul><li><p>你没钱时能借你周转的有钱朋友</p></li><li><p>交友广阔能带你进入Party的人</p></li><li><p>能保护你免受欺负的死党</p></li><li><p>愿意跟你上床的健康女人</p></li><li><p>教你如何把妹的导师。</p></li></ul><p>上述人等都具有较高的社交价值，我们的天性就是要跟他们结盟。而当女人愿意与你在性方面结合，本质上就是她同意以她的生育价值换取你的价值。</p><h3 id="5-远古时代的遗留"><a href="#5-远古时代的遗留" class="headerlink" title="5. 远古时代的遗留"></a>5. 远古时代的遗留</h3><p>我们是生物机器，虽然极度先进又复杂，但你仍然是一部旧机种。简单地说，我们并没有跟上当下的发展，我们这个生物机器最合适的时候还是几百万年前的茹毛饮血的生活。</p><p>之所以我们是旧时代的机器，是因为在最近的100年间，社会的发展太快了。从进化的角度来说，首先，物质世界得先发生缓慢的变化，然后人体才会适应。我们的生理演化方向是一小批群居的猎人或采集者，但是现在却是许多人跟几百万人挤在大都市里。大自然还来不及重新调整人类以适应这样的新社交环境。</p><p><strong>因此，平时指导我们行为、做事准则的一些潜意识，其实就是源自于远古时代的。而又由于社会的快速发展导致我们的基因中仍然保存这样的潜意识</strong>。</p><h3 id="6-接近焦虑（Approach-Anxiety）"><a href="#6-接近焦虑（Approach-Anxiety）" class="headerlink" title="6. 接近焦虑（Approach Anxiety）"></a>6. 接近焦虑（Approach Anxiety）</h3><p>很多时候会有这样的一种现象：<strong>当你极度渴望接近一位具有高繁殖价值的女性时，却又同时冒出一股想要逃走的强烈欲望</strong>？</p><p>逃跑的行为不合理又缺乏建设性，毕竟被拒绝又不会少一块肉，可这样的现象却真实存在，我们称其为接近焦虑（Approach Anxiety）</p><p>产生接近焦虑的原因，恰恰是来自于我们体内的、千百万年前的基因</p><h4 id="A-害怕被别人报复"><a href="#A-害怕被别人报复" class="headerlink" title="A. 害怕被别人报复"></a>A. 害怕被别人报复</h4><p>接近焦虑的原因之一，<strong>就是女人可能已经名花有主，在这个情况下再去接近高价值的女性会对你的利益甚至生存具有潜在的影响</strong>。</p><p>因为在部落时代，如果你追求一个女人，碰巧她的男人是个影响力强大的人，他可能会教唆一些人往你头上砸石头，让你被野兽吃掉，以保护他的财产。</p><p><strong>但是在现代，我们已经有法律来保护我们的生命财产安全，因此其实由于害怕被别人报复而出现接近焦虑的前日条件已经已不存在了，可是我们依旧会担心害怕，这其实就是远古的记忆刻进了我们的DNA中</strong>。</p><h4 id="B-害怕被拒绝"><a href="#B-害怕被拒绝" class="headerlink" title="B. 害怕被拒绝"></a>B. 害怕被拒绝</h4><p>另外一个接近焦虑的原因就是<strong>我们害怕被拒绝</strong>。</p><p>在部落时代，任何部落都只有一小撮女人是可以用来繁殖的。如果我们接近其中一人，而后又说出或做出显得低落或负面的蠢事（例如被拒绝），部落里的每个女人很可能都会知道这件事。于是，对于所有女人而言，我们便不再具有任何 S 与 R 价值，再也没有机会交配，我们的基因就被消灭了</p><p><strong>然而在现代通讯发达的时代，我们被一个女人拒绝其实并不会让所有的女人知道，只会让这个女人和他的闺蜜知道。因此，在现代，我们因为害怕被拒绝而出现接近焦虑的前提条件已经不存在了，但是我们依旧会担心害怕，而这其实就是因为远古的记忆刻进了我们的DNA中</strong>。</p><p>因此事实上导致我们出现接近焦虑的原因都不存在了，只是我们生物的本能反应促使我们产生接近焦虑。因此，在我们通过训练内化求爱艺术之后，慢慢尝试去客服求爱艺术。</p><h3 id="7-需求层次理论"><a href="#7-需求层次理论" class="headerlink" title="7. 需求层次理论"></a>7. 需求层次理论</h3><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221001214536124.png" alt="需求层次理论" style="zoom:50%;"></p><p>每个人都有一套需求层次（Hierarchy of Needs），你（跟你的目标对象）所做的每件事，都是情感上必须迎合它所造成的直接或间接结果。</p><p>需求层次理论具体来说把人类的所有需求根据级别的从低到高，分成五个级别，分别是：</p><ul><li><p>生理需求：<strong>最基本的需求，例如空气、饮水、食物、温暖、睡眠与性</strong>。</p></li><li><p>安全：在混乱的世界上建立稳定与连贯性，这在现代社会多半属于心理层面。</p></li><li><p>爱：归属感的需求。人们都希望被爱、被他人接受。</p></li><li><p>尊重：这项内在产生的情绪，通常源自拥有能力达成或熟练一项工作，获得别人的注意、认同与社会地位。</p></li><li><p>自我实现：我们渴望达成自己能够达成一切，满足了上述所有需求的人，才有可能把潜力发挥到极限。</p></li></ul><h3 id="8-三大领域"><a href="#8-三大领域" class="headerlink" title="8. 三大领域"></a>8. 三大领域</h3><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221001221620034.png" alt="三大领域" style="zoom:50%;"></p><p><strong>人生中有三大领域，而当我们在这三大领域取得成功时，将会极大地确保我们的生存和繁衍的机会</strong>。</p><p>具体来说，这三大领域分别是：</p><ul><li><strong>健康：指身心两方面的健康</strong>。这得仰赖有效的方法或计划来维持。</li><li><p><strong>财富：帮助你维持健康和人际关系</strong>。我们需要衣食住行，而额外的生物舒适则有助于我们生存与繁殖。房子可以让我们免于日晒雨淋，同时也作为一个性爱的私人空间。交通工具不仅能让你工作赚钱，并能扩大活动范围，提升把妹的机会。我们需要一份可靠的财富规划以达成财务独立，这样才有本钱玩浪漫的游戏。加入健身房、治装、上夜店或餐厅应酬都是要花钱的。</p></li><li><p><strong>爱：主要指男女情爱，但也可能延伸到朋友、家人、同事</strong>。如果你想拥有成功的人际关系，就必须用心研究。</p></li></ul><p>三个领域中的任一领域都可能会维持现状、改善或恶化。我们在每个领域的成功程度都可以用 1 到 10 分来评估。任何得到 10 分的领域只需维持现状，低于 10 分的就得想个办法改善。<strong>如果我们疏忽某个领域太久，分数掉得太低，整体的生活品质就会恶化</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221001222221712.png" alt="三个领域息息相关" style="zoom:50%;"></p><p><strong>这三个领域之间是息息相关的，并非各自独立的</strong>：</p><ul><li><p><strong>在任何一个领域成功都会正面影响另外两者</strong>。事实上，有时候为了改善某个领域，你必须先全心改善另一个领域，例如你维持或改善财务与健康状况，就可以改善获得爱的机会。一个健康、强壮、充满活力的人，在社交中会散发出较高的繁殖价值，也较能够接触或吸引到周围的人。</p></li><li><p><strong>疏于维持任何一个领域也会对另外两者造成负面影响</strong>。当你忽视某个领域太久，反作用可能迅速波及第二个领域，然后又拖累第三个，以此类推。</p><ul><li><p><strong>忽略健康</strong>：如果我们有钱又有良好的爱（人际关系），但是缺乏健康（身心两方面），终究会减损财富（生产力与体力恶化）与人际关系的成就。不善待自己的人也得不到别人的尊重，不健康的就是无法吸引人。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221001223440726.png" alt="忽略健康的后果" style="zoom:50%;"></p></li><li><p><strong>忽略财富</strong>：如果我们很健康又有良好关系（爱），但是财务领域欠佳，终究会丧失资源无法维持爱（例如无法维持生活）与健康（均衡的饮食、健康的环境、运动器材）。能睡在自己公寓里的大床上，不仅比父母家的沙发来得安稳（健康），也有个地方可以带女人回来（爱）。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221001223603005.png" alt="忽略财富的后果" style="zoom:50%;"></p></li><li><p><strong>忽略爱（人际关系）</strong>：如果我们又健康又有钱，但是人际关系欠佳，这项失败会让我们觉得寂寞、自尊低落（心理健康），也会危害我们累计财富的计划。在工作上，我们会难以认识新朋友、组成网络、跟人“搏感情”，这会影响我们累计财富的潜力。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221001223842892.png" alt="忽略爱的后果" style="zoom:50%;"></p></li></ul></li></ul><h3 id="9-重点复习"><a href="#9-重点复习" class="headerlink" title="9. 重点复习"></a>9. 重点复习</h3><ul><li><strong>人生的终极目标是生存。</strong></li><li><strong>人生的次要目标是繁殖。人难逃一死，在大限来临前，必须传宗接代。</strong></li><li><strong>人的平均寿命只有 28251 天，最合理的行为模式就是找出最有效的生存繁殖方式，一直练习到成为本能反应为止。</strong></li><li><strong>武术需要反复练习，一旦内化之后，就能改善你的生存机会。求爱艺术也需要反复练习惯例与绝招，一旦内化之后，就能改善你的繁殖机会。</strong></li><li><strong>动态社交平衡是指自我保护与拉拢别人这两股动力的平衡状态。</strong></li><li><strong>最有利于 S 与 R 价值的时代背景，是古代的环境与部落社会的秩序，但那在几万年前早已消逝无踪。而今人们对于性爱的决策多半基于这套情感电路。</strong></li><li><strong>人们倾向与别人建立社交联盟（Social Alignment），只要这个联盟对他们的生存繁殖机会有利。</strong></li><li><strong>初次接近异性时，男人承受的风险比女人大。在古时候是真有安全顾虑，所以男人至今仍然有接近焦虑。</strong> </li><li><strong>如果一个男人已经被其他女人预选，女性会认为他比较迷人。</strong></li><li><strong>因为人类所受的规范，每个人都有一套必须满足的需求层次，包括生理需求、安全需求、社交需求等等。我们情感上的天性就是要激励自己满足这些需求。</strong></li><li><strong>我们人生最重要的三个焦点领域：健康、财富与爱。任何一项有所缺憾都会造成其他二者出问题</strong></li></ul><h2 id="第三章：改写她的恋爱电路"><a href="#第三章：改写她的恋爱电路" class="headerlink" title="第三章：改写她的恋爱电路"></a>第三章：改写她的恋爱电路</h2><h3 id="1-情感动物（面对女性需要注意的地方）"><a href="#1-情感动物（面对女性需要注意的地方）" class="headerlink" title="1. 情感动物（面对女性需要注意的地方）"></a>1. 情感动物（面对女性需要注意的地方）</h3><p><strong>逻辑与理性可以用来决定行动方式，但是无论男女两性都经常容易被自己的情感所驱使</strong>。只不过我们经常会不自知的寻找借口来合理化这些情绪化行为，从而忽略了事实。</p><p>情感对女性而言比起对男人深奥又广泛多了，因为女性的恋爱电路设计比较无关于男人的肉体特征，而是他的社交（与生存）价值，<strong>情感是女性思想与行为的核心</strong></p><p>因此，我们把妹的时候，要明白女性都是情感动物，有很多地方需要注意</p><h4 id="A-不要企图讲道理说服她"><a href="#A-不要企图讲道理说服她" class="headerlink" title="A. 不要企图讲道理说服她"></a>A. 不要企图讲道理说服她</h4><p><strong>别自找麻烦想要说服她、跟她争辩或以纯粹逻辑层面的方式跟她交往。逻辑永远不该用在这个领域作为刺激，因为女人都是情感动物，要用情感去刺激她，用情感去调动她</strong></p><h4 id="B-刺激她的情感"><a href="#B-刺激她的情感" class="headerlink" title="B. 刺激她的情感"></a>B. 刺激她的情感</h4><p><strong>女人都是情感动物，只要感觉对了，你的求爱意图会让她自己制造理由接受眼前发生的事。换句话说，女人会想出上千个理由不该跟你上床──但也会想出上千个理由这么做</strong>。</p><p>因此，为了能够实现TD，把妹达人对女人应该利用情感刺激（Emotional Stimulation）去调动女人的情绪</p><h4 id="C-绝对不要冷淡"><a href="#C-绝对不要冷淡" class="headerlink" title="C. 绝对不要冷淡"></a>C. 绝对不要冷淡</h4><p><strong>不要只试图给她“好”情绪同时避免“坏”情绪，要用好奇、着迷、联系、贬抑、认同、欢笑、困窘、快乐、哀伤与丧失价值的恐惧等各种情绪去刺激她。她越受刺激，体验对她而言越强烈</strong>。谜男方法的整个 A2 阶段（详述于第六章）都在论述这项技巧。</p><h4 id="D-直觉胜过分析"><a href="#D-直觉胜过分析" class="headerlink" title="D. 直觉胜过分析"></a>D. 直觉胜过分析</h4><p>女人分辨你对其是否是真心的时候，通常她不会用逻辑分析你说的话是否前后一致，而是会观察你的行为是否跟你说过的话一致。<strong>女人仰赖她们的直觉多过分析</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 专项学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GAMS教程 0:GAM介绍</title>
      <link href="/2022/09/28/gams-jiao-cheng-1-gam-jie-shao/"/>
      <url>/2022/09/28/gams-jiao-cheng-1-gam-jie-shao/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220929032629493.png" alt="GAMS官网"></p><h1 id="GAMS教程-0：GAMS介绍"><a href="#GAMS教程-0：GAMS介绍" class="headerlink" title="GAMS教程 0：GAMS介绍"></a>GAMS教程 0：GAMS介绍</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>这学期在UW-Madison交流，选的课程中有一门课是CS 524：Introduction to Optimization。</p><p>我本来以为这门课程会讲优化中的一些算法，例如：单纯形法、匈牙利算法等等。结果没想到，不是这门课，而是CS 7xx的一门课才会讲解这些算法，CS 524这门课的授课目标就是让学生能够从现实问题中抽象出来一个优化模型，而后通过<code>GAMS</code>去求解这个优化问题。</p><p>因此，CS 524这门课的授课目标就包含两部分：</p><ul><li>介绍<code>GAMS</code></li><li>介绍常见的模型以及相应的<code>GAMS</code>求解</li></ul><p>因此，学习这门课就得学习<code>GAMS</code>这个软件的用法。而且我自己在学习的时候确实发现<code>GAMS</code>这个软件挺有用的，所有就准备写个系列专栏记录下来。一方面是作为笔记，方便以后复习，另一个就是当做<code>GAMS</code>的中文学习资源，分享在互联网上。</p><h2 id="2-GAMS介绍"><a href="#2-GAMS介绍" class="headerlink" title="2. GAMS介绍"></a>2. GAMS介绍</h2><h3 id="A-概述"><a href="#A-概述" class="headerlink" title="A. 概述"></a>A. 概述</h3><p><code>GAMS</code>全称<code>The General Algebraic Modeling System</code> ，是一款数学规划和优化的高级建模系统。</p><p>简单来说：</p><ul><li><code>GAMS</code>就是一个软件，我们按照<code>GAMS</code>软件规定的语法把我们的优化问题描述出来之后，就可以利用<code>GAMS</code>这个软件进行求解。</li><li>对应的描述优化问题的语言称为<code>GAMS语言</code>，一般在不做特殊强调的情况下，<code>GAMS</code>既可以指代<code>GAMS</code>软件，又可以指代<code>GAMS</code>语言。具体指代的对象视上下文而定</li><li>使用<code>GAMS</code>程序规定的语法写成的、描述、求解优化问题的文件称为<code>GAMS</code>程序，<code>GAMS</code>程序文件的后缀为<code>.gams</code></li></ul><p>这样讲可能还是比较抽象，所以下面举一个使用<code>GAMS</code>求解规划问题的例子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012213727392.png" alt="GAMS软件、GAMS程序和GAMS语法"></p><h3 id="B-真实问题：Top-Brass-问题"><a href="#B-真实问题：Top-Brass-问题" class="headerlink" title="B. 真实问题：Top Brass 问题"></a>B. 真实问题：<code>Top Brass 问题</code></h3><blockquote><p><code>Top Brass Trophy Company</code>是一家专门生产奖杯的公司，这家公司生产两种奖杯：</p><ul><li>足球奖杯（Soccer）</li><li>橄榄球奖杯（Football）</li></ul><p>卖出一个橄榄球奖杯将会获得$12的利润，而卖出一个足球奖杯将会获得$9元的利润。而生产一个奖杯，两种奖杯分别需要消耗：</p><ul><li>木质底座：橄榄球奖杯需要4平方英寸大小的木板，足球奖杯需要2平方英尺的奖杯</li><li>奖杯体：各消耗一个</li><li>顶端的标志物：橄榄球顶端有一个铜制橄榄球，而足球奖杯顶端有一个铜制足球。</li></ul><p>假设目前库存的原材料为：</p><ul><li>1000个黄铜橄榄球</li><li>1500个黄铜足球</li><li>1750个奖杯体</li><li>4900平方英寸的木板</li></ul><p>假设制作的所有奖杯都能够售出，那么<code>Top Brass Trophy Company</code>能够获得的最大利润是多少？</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012215548339.png" alt="制作所需的材料表" style="zoom: 33%;"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012215608795.png" alt="库存的原材料" style="zoom:33%;"></p></blockquote><p>设生产橄榄球和足球分别为$f$和$s$个，上面的这个优化问题的数学语言描述是：</p><script type="math/tex; mode=display">max_{f,s} 12f+9s\\\left\{     \begin{array}{**lr**}        4f + 2s &\leq &4800\\        f + s &\leq & 1750\\        0 & \leq &f &\leq 1000\\    0 & \leq &s &\leq 1500    \end{array}\right.</script><p>手算求解画出的可行域如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012220348674.png" alt="可行域" style="zoom:33%;"></p><p>然后通过做平行线，得到的解为</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012220442813.png" alt="手算求解" style="zoom:33%;"></p><h3 id="C-GAMS语言描述"><a href="#C-GAMS语言描述" class="headerlink" title="C. GAMS语言描述"></a>C. GAMS语言描述</h3><p>使用<code>GAMS</code>语言描述上述优化问题的程序如下（文件名为<code>topbrass1.gams</code>：</p><pre class="line-numbers language-gas"><code class="language-gas">// topbrass1.gams$title Top Brass (LP) Example 5.1 of Rardin (1998)free variable p "total profit";positive variablesf "football trophies",s "soccer trophies";equationsobj    "max total profit",foot   "brass footballs",socc   "brass soccer balls",plaq   "brass plaques",wood   "bdft wood";obj..p =e= 12*f + 9*s;foot..f =l= 1000;socc..s =l= 1500;plaq..f + s =l= 1750;wood..4*f +2*s =l= 4800;model topbrass /all/;solve topbrass using lp maximizing p;scalar sst, mst;sst = topbrass.solvestat;mst = topbrass.modelstat;display sst,mst;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="D-GAMS软件求解"><a href="#D-GAMS软件求解" class="headerlink" title="D. GAMS软件求解"></a>D. GAMS软件求解</h3><p>接下来我们使用<code>GAMS</code>软件求解上述程序</p><p>求解后：</p><ul><li>左侧的面板显示了所有的文件，其中<code>topbrass1.gams</code>是源程序，<code>topbrass1.lst</code>是当前优化问题求解的结果</li><li>中间的面板显示了选中的文件，这里是打开了<code>topbrass1.gams</code>源程序</li><li>右侧的面板显示了求解过程中求解器输出的log信息</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012221110703.png" alt="image-20221012221110703"></p><p>打开<code>topbrass1.lst</code>查看求解的结果，会发现中间的面板被分成两部分，左侧显示了当前<code>list</code>文件的结构，右边显示了<code>list</code>文件的内容。通过点击左侧<code>lst</code>文件的结构就可以实现快速跳转</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012221602685.png" alt="image-20221012221602685"></p><p>我们直接跳转到最后去查看求解的结果。通过点击左侧的<code>SolVAR -- &gt; p</code>就可以直接看到最后的结果，利润最大为$17700</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20221012221751253.png" alt="image-20221012221751253"></p><h3 id="E-总结"><a href="#E-总结" class="headerlink" title="E. 总结"></a>E. 总结</h3><p>通过上面的例子，我们其实发现<code>GAMS</code>其实并不是单一的软件或者一门语言，相反，<code>GAMS</code>是求解软件 + 语言等等在内的一个集成开发环境，其目的就在于方便用户求解优化问题。</p><h2 id="3-后续"><a href="#3-后续" class="headerlink" title="3. 后续"></a>3. 后续</h2><p>本节介绍了什么是<code>GAMS</code>，并且通过举例具体得解释了<code>GAMS</code>。从下一讲开始，我们就讲集中讲解GAMS的语法。</p>]]></content>
      
      
      <categories>
          
          <category> GAMS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GAMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo matery主题代码高亮失效</title>
      <link href="/2022/09/28/hexo-matery-zhu-ti-dai-ma-gao-liang-shi-xiao/"/>
      <url>/2022/09/28/hexo-matery-zhu-ti-dai-ma-gao-liang-shi-xiao/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220929014633108.png" alt="代码高亮失效"></p><h1 id="hexo-matery主题代码高亮失效"><a href="#hexo-matery主题代码高亮失效" class="headerlink" title="hexo matery主题代码高亮失效"></a>hexo matery主题代码高亮失效</h1><p>每次在新的设备上从Github上下载了博客的源代码之后，代码高亮总是会失效。在网上搜索之后，绝大部分文章讲的都是Hexo原来的高亮插件不好用，要使用<code>hexo-prism-plugin</code>来进行代码高亮的渲染。</p><p>可是关键问题是已经使用了<code>prism</code>插件的基础上，代码高亮依旧失效。这个问题特别不好查，每次查都要查好久，这次换了mac，然后又因为距离上次新部署博客已经过来很久很久，已经忘了怎么解决的这个问题了，结果这次花了两个小时查这个问题。</p><p>所以就决定还是把这个问题记录在自己的博客上，方便未来查找。</p><h2 id="1-问题的原因"><a href="#1-问题的原因" class="headerlink" title="1. 问题的原因"></a>1. 问题的原因</h2><p>其实单纯的<code>prism</code>插件是能够渲染代码高亮的，问题的关键在于渲染数学公式的<code>kramed</code>和<code>prism</code>插件冲突了。</p><p>因为<code>karmed</code>插件会首先处理Markdown文章，然后再是<code>prism</code>插件进行处理。</p><p>而<code>karmed</code>插件在处理的时候会给所有的代码框的语言前面加上<code>lang</code>，所以就导致我们原来写的诸如<code>python</code>，<code>c++</code>之类的语言在<code>prism</code>处理的时候就变成了<code>lang-python</code>，<code>lang-c++</code>。那么自然<code>prism</code>插件就不会进行高亮渲染了。</p><p>从上面的图其实也能够看出来这一点，<code>python</code>被换成<code>lang-python</code>了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220929014633108.png" alt="python被换成lang-python"></p><h2 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2. 解决办法"></a>2. 解决办法</h2><p>明白了出问题的原因，自然就很好解决了。</p><p>因为文章的源代码先被<code>karmed</code>处理的，所以直接修改<code>karmed</code>的代码就行了。</p><p>具体来说修改<code>node_modules/kramed/lib/renderer.js</code></p><pre class="line-numbers language-shell"><code class="language-shell">cd 你的博客目录vim node_modules/kramed/lib/renderer.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后修改变量<code>defaultOption</code>，把其中的<code>langPrefix</code>的值从<code>'lang-'</code>换成<code>''</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220929022851115.png" alt="修改karmed的解析配置"></p><p>保存之后重新生成，问题解决</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220929023312811.png" alt="问题解决"></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Add System Call for XV6 (Unix Version 6)</title>
      <link href="/2022/09/27/add-system-call-for-xv6/"/>
      <url>/2022/09/27/add-system-call-for-xv6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220928233603685.png" alt="XV6 (Unix Version 6) System"></p><h1 id="Add-System-Call-for-XV6-Unix-Version-6"><a href="#Add-System-Call-for-XV6-Unix-Version-6" class="headerlink" title="Add System Call for XV6 (Unix Version 6)"></a>Add System Call for XV6 (Unix Version 6)</h1><p>This blog introduces system call function call of XV6 (Unix Version 6) and also teachs how to add a function call</p><h2 id="1-What-we-want-to-do"><a href="#1-What-we-want-to-do" class="headerlink" title="1. What we want to do"></a>1. What we want to do</h2><p>We need to add my own system call <code>trace(const char *pathname)</code> and the second is <code>getcount()</code></p><p>The function prototypes are</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>In the following blog, I will cover what is system call and then introduce how to add a system call.</p><h2 id="2-Understanding-the-Makefile"><a href="#2-Understanding-the-Makefile" class="headerlink" title="2. Understanding the Makefile"></a>2. Understanding the <code>Makefile</code></h2><p>To understand the <code>xv6</code> system, we need to understand the <code>Makefile</code> first.</p><h3 id="A-Debug-command-make-qemu-nox-gdb"><a href="#A-Debug-command-make-qemu-nox-gdb" class="headerlink" title="A. Debug command: make qemu-nox-gdb"></a>A. Debug command: <code>make qemu-nox-gdb</code></h3><p>The command used to debug the xv6 system is <code>make qemu-nox-gdb</code>, which means we make the target <code>qemu-nox-gdb</code>.</p><p>The target <code>qemu-nox-gdb</code> in Makefile is</p><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">qemu-nox-gdb</span><span class="token punctuation">:</span> fs.img xv6.img .gdbinit    <span class="token operator">@</span>echo <span class="token string">"*** Now run 'gdb'."</span> 1>&amp;2    <span class="token variable">$</span><span class="token punctuation">(</span>QEMU<span class="token punctuation">)</span> -nographic <span class="token variable">$</span><span class="token punctuation">(</span>QEMUOPTS<span class="token punctuation">)</span> -S <span class="token variable">$</span><span class="token punctuation">(</span>QEMUGDB<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>which means before make target <code>qemu-nox-gdb</code>, we need to make target <code>fs.img</code>, <code>xv6.img</code> and <code>.gdbinit</code>.</p><p>And the definitions of macro <code>QEMU</code>, <code>QEMUOPTS</code> and <code>QEMUGDB</code> are</p><pre class="line-numbers language-makefile"><code class="language-makefile">QEMU <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> if which qemu > /dev/null<span class="token punctuation">;</span> \    then echo qemu<span class="token punctuation">;</span> exit<span class="token punctuation">;</span> \    elif which qemu-system-i386 > /dev/null<span class="token punctuation">;</span> \    then echo qemu-system-i386<span class="token punctuation">;</span> exit<span class="token punctuation">;</span> \    elif which qemu-system-x86_64 > /dev/null<span class="token punctuation">;</span> \    then echo qemu-system-x86_64<span class="token punctuation">;</span> exit<span class="token punctuation">;</span> \    <span class="token keyword">else</span> \    qemu<span class="token operator">=</span>/Applications/Q.app/Contents/MacOS/i386-softmmu.app/Contents/MacOS/i386-softmmu<span class="token punctuation">;</span> \    if test -x <span class="token variable">$$qemu;</span> then echo <span class="token variable">$$qemu;</span> exit<span class="token punctuation">;</span> fi<span class="token punctuation">;</span> fi<span class="token punctuation">;</span> \    echo <span class="token string">"***"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** Error: Couldn't find a working QEMU executable."</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** Is the directory containing the qemu binary in your PATH"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"*** or have you tried setting the QEMU variable in Makefile?"</span> 1>&amp;2<span class="token punctuation">;</span> \    echo <span class="token string">"***"</span> 1>&amp;2<span class="token punctuation">;</span> exit 1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-makefile"><code class="language-makefile">QEMUOPTS <span class="token operator">=</span> -drive file<span class="token operator">=</span>fs.img,index<span class="token operator">=</span>1,media<span class="token operator">=</span>disk,format<span class="token operator">=</span>raw -drive file<span class="token operator">=</span>xv6.img,index<span class="token operator">=</span>0,media<span class="token operator">=</span>disk,format<span class="token operator">=</span>raw -smp <span class="token variable">$</span><span class="token punctuation">(</span>CPUS<span class="token punctuation">)</span> -m 512 <span class="token variable">$</span><span class="token punctuation">(</span>QEMUEXTRA<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-makefile"><code class="language-makefile">QEMUGDB <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">shell</span> if <span class="token variable">$</span><span class="token punctuation">(</span>QEMU<span class="token punctuation">)</span> -help <span class="token operator">|</span> grep -q <span class="token string">'^-gdb'</span><span class="token punctuation">;</span> \    then echo <span class="token string">"-gdb tcp::$(GDBPORT)"</span><span class="token punctuation">;</span> \    <span class="token keyword">else</span> echo <span class="token string">"-s -p $(GDBPORT)"</span><span class="token punctuation">;</span> fi<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>So, macro <code>QEMU</code> finds available <code>qemu</code> command on the machine and <code>QEMUOPTS</code> are command line options of qemu and <code>QEMUGDB</code> starts debug <code>QEMU</code> with <code>gdb</code>.</p><p><strong>Note that in <code>QEMUOPTS</code>, <code>-drive</code> option defines two driver <code>fs.img</code> and <code>vx6.img</code> </strong>.</p><h3 id="B-xv6-img"><a href="#B-xv6-img" class="headerlink" title="B. xv6.img"></a>B. <code>xv6.img</code></h3><p>Backtracing, the target <code>qemu-nox-gdb</code> depends target <code>xv6.img</code>, so take a look at target <code>xv6.img</code></p><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">xv6.img</span><span class="token punctuation">:</span> bootblock kernel    dd if<span class="token operator">=</span>/dev/zero of<span class="token operator">=</span>xv6.img count<span class="token operator">=</span>10000    dd if<span class="token operator">=</span>bootblock of<span class="token operator">=</span>xv6.img conv<span class="token operator">=</span>notrunc    dd if<span class="token operator">=</span>kernel of<span class="token operator">=</span>xv6.img seek<span class="token operator">=</span>1 conv<span class="token operator">=</span>notrunc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The command of target <code>xv6.img</code> simply creates disk image <code>xv6.img</code> and then bitwise copy <code>bootblock</code> and <code>kernel</code> into disk image <code>xv6.img</code>.</p><h3 id="C-kernel"><a href="#C-kernel" class="headerlink" title="C. kernel"></a>C. <code>kernel</code></h3><p>Again, the target <code>xv6.img</code> depends target <code>kernel</code>, we need to take a look at it.</p><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token symbol">kernel</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> entry.o entryother initcode kernel.ld    <span class="token variable">$</span><span class="token punctuation">(</span>LD<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>LDFLAGS<span class="token punctuation">)</span> -T kernel.ld -o kernel entry.o <span class="token variable">$</span><span class="token punctuation">(</span>OBJS<span class="token punctuation">)</span> -b binary initcode entryother    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -S kernel > kernel.asm    <span class="token variable">$</span><span class="token punctuation">(</span>OBJDUMP<span class="token punctuation">)</span> -t kernel <span class="token operator">|</span> sed <span class="token string">'1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d'</span> > kernel.sym<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Here, we can see that target <code>kernel</code> uses <code>ld</code> to link all objective file togeter and generate binary file <code>kernel</code> after <code>-o</code> option.</p><h3 id="D-fs-img"><a href="#D-fs-img" class="headerlink" title="D. fs.img"></a>D. <code>fs.img</code></h3><p>Target <code>qemu-nox-gdb</code> also depends on target <code>fs.xv6</code>. Here’s the definition of target <code>fs.vx6</code> and relevent macro</p><pre class="line-numbers language-makefile"><code class="language-makefile">UPROGS<span class="token operator">=</span>\    _cat\    _echo\    _forktest\    _grep\    _init\    _kill\    _ln\    _ls\    _mkdir\    _rm\    _sh\    _stressfs\    _usertests\    _wc\    _zombie\<span class="token symbol">fs.img</span><span class="token punctuation">:</span> mkfs README <span class="token variable">$</span><span class="token punctuation">(</span>UPROGS<span class="token punctuation">)</span>    ./mkfs fs.img README <span class="token variable">$</span><span class="token punctuation">(</span>UPROGS<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Target <code>fs.img</code> write user program <code>UPORGS</code> into <code>fs.img</code>.</p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>In summary, what does the command <code>make qemu-nox-gdb</code> do are:</p><ol><li>compile the kernel and write the kernel into <code>xv6.img</code></li><li>compile user programs and write user programs into <code>fs.img</code></li><li>start <code>qemu</code> with disk <code>xv6.img</code> and <code>fs.img</code></li><li>start <code>qemu</code> with <code>gdb</code> debugging</li></ol><p>After we firgure out the <code>Makefile</code> of the <code>xv6</code> project, we are now getting into the <code>xv6</code> project.</p><h2 id="3-The-Path-of-System-Call"><a href="#3-The-Path-of-System-Call" class="headerlink" title="3. The Path of System Call"></a>3. The Path of System Call</h2><p>After looking the <code>Makefile</code> of <code>xv6</code> project, we know that the kernel and user program are mutually independent programs. They are conceptually equal, both of them have <code>main</code> functions.</p><p>For example, in <code>main.c</code>, the <code>main</code> function of the program looks like</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Bootstrap processor starts running C code here.</span><span class="token comment" spellcheck="true">// Allocate a real stack and switch to it, first</span><span class="token comment" spellcheck="true">// doing some setup required for memory allocator to work.</span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">kinit1</span><span class="token punctuation">(</span>end<span class="token punctuation">,</span> <span class="token function">P2V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// phys page allocator</span>  <span class="token function">kvmalloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// kernel page table</span>  <span class="token function">mpinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// detect other processors</span>  <span class="token function">lapicinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// interrupt controller</span>  <span class="token function">seginit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// segment descriptors</span>  <span class="token function">picinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// disable pic</span>  <span class="token function">ioapicinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// another interrupt controller</span>  <span class="token function">consoleinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// console hardware</span>  <span class="token function">uartinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// serial port</span>  <span class="token function">pinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// process table</span>  <span class="token function">tvinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// trap vectors      // == 中断向量表</span>  <span class="token function">binit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// buffer cache</span>  <span class="token function">fileinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// file table</span>  <span class="token function">ideinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// disk </span>  <span class="token function">startothers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// start other processors</span>  <span class="token function">kinit2</span><span class="token punctuation">(</span><span class="token function">P2V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">P2V</span><span class="token punctuation">(</span>PHYSTOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// must come after startothers()</span>  <span class="token function">userinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// first user process        // == 开启第一个用户进程</span>  <span class="token function">mpmain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// finish this processor's setup</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>and the <code>main</code> function of user program <code>ls</code> looks like</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ls</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">ls</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>So, the user program and kernel are two independent program. </p><p><strong>Then, how does system call work</strong>?</p><h3 id="A-User-Program’s-Developer’s-Perspective-of-System-Call"><a href="#A-User-Program’s-Developer’s-Perspective-of-System-Call" class="headerlink" title="A. User Program’s (Developer’s) Perspective of System Call"></a>A. User Program’s (Developer’s) Perspective of System Call</h3><p>To start, we first look from the user program’s perspectie of system call.</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// User program test_trace.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"types.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stat.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"user.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"fcntl.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> <span class="token constant">stdout</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"Start my syscall testing...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"ls count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"ls count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"ls count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"ls count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"pwd count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"test count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"pwd count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"666 count = %d\n"</span><span class="token punctuation">,</span> <span class="token function">getcount</span><span class="token punctuation">(</span><span class="token string">"666"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"test finished\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>trace</code> and <code>getcount</code> are two system call. So from the perspective of user program, system call are just like function calls.</p><p>By using these <strong>special function</strong>, the user program can leverage functionalities offered by the kernel.</p><h3 id="B-Kernel’s-Operating-System’s-Perspective-of-System-Call"><a href="#B-Kernel’s-Operating-System’s-Perspective-of-System-Call" class="headerlink" title="B. Kernel’s (Operating System’s) Perspective of System Call"></a>B. Kernel’s (Operating System’s) Perspective of System Call</h3><p>Let us take a look of what does system call looks like in the perspective of kernel.</p><p><code>kill</code> is a system call, and it’s defined in <code>proc.c</code>.</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// proc.c</span><span class="token comment" spellcheck="true">// Kill the process with the given pid.</span><span class="token comment" spellcheck="true">// Process won't exit until it returns</span><span class="token comment" spellcheck="true">// to user space (see trap in trap.c).</span><span class="token keyword">int</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> ptable<span class="token punctuation">.</span>proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>pid <span class="token operator">==</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>      p<span class="token operator">-></span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Wake process from sleep if necessary.</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>state <span class="token operator">==</span> SLEEPING<span class="token punctuation">)</span>        p<span class="token operator">-></span>state <span class="token operator">=</span> RUNNABLE<span class="token punctuation">;</span>      <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>So, from the perspective of kernel, system call are just normal functions defined in kernel.</strong></p><p><strong>But here’s the problem, user program and kernel are two program, they are mutually independent. Since they do not link together, how can one program calls functions defined in another program</strong>?</p><h3 id="C-From-User-Program-to-Kernel"><a href="#C-From-User-Program-to-Kernel" class="headerlink" title="C. From User Program to Kernel"></a>C. From User Program to Kernel</h3><p>To solve the problem listed above, we need to understand the path from user program to kernel.</p><h4 id="1-usys-S"><a href="#1-usys-S" class="headerlink" title="1) usys.S "></a>1) <span id="scn"><code>usys.S</code> </span></h4><p>The first step of system call is <code>usys.S</code>. It’s a <code>AT&amp;T</code> format assembly, where it defines a macro function <code>SYSCALL</code></p><pre class="line-numbers language-assembly"><code class="language-assembly">#include "syscall.h"#include "traps.h"#define SYSCALL(name) \  .globl name; \  name: \    movl $SYS_ ## name, %eax; \    int $T_SYSCALL; \    retSYSCALL(fork)SYSCALL(exit)SYSCALL(wait)SYSCALL(pipe)SYSCALL(read)SYSCALL(write)SYSCALL(close)SYSCALL(kill)SYSCALL(exec)SYSCALL(open)SYSCALL(mknod)SYSCALL(unlink)SYSCALL(fstat)SYSCALL(link)SYSCALL(mkdir)SYSCALL(chdir)SYSCALL(dup)SYSCALL(getpid)SYSCALL(sbrk)SYSCALL(sleep)SYSCALL(uptime)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>##</code> is concate operator in assembly, so after passing <code>fork</code> as parameter of <code>SYSCALL</code>, the function looks like</p><pre class="line-numbers language-assembly"><code class="language-assembly">; SYSCALL(fork) will expand as#define SYSCALL(fork) \  .globl fork; \  fork: \    movl $SYS_fork, %eax; \    int $T_SYSCALL; \    ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Variable <code>SYS_fork</code> is defined in <span id="anchor"> <code>syscall.h</code> </span></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// syscall.h</span><span class="token comment" spellcheck="true">// System call numbers</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_fork    1</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_exit    2</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_wait    3</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_pipe    4</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_read    5</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_kill    6</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_exec    7</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_fstat   8</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_chdir   9</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_dup    10</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_getpid 11</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_sbrk   12</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_sleep  13</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_uptime 14</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_open   15</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_write  16</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_mknod  17</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_unlink 18</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_link   19</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_mkdir  20</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_close  21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Also, the value of variable <code>T_SYSCALL</code> is <code>64</code>, defined in <code>traps.h</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// These are arbitrarily chosen, but with care not to overlap</span><span class="token comment" spellcheck="true">// processor defined exceptions or interrupt vectors.</span><span class="token macro property">#<span class="token directive keyword">define</span> T_SYSCALL       64      </span><span class="token comment" spellcheck="true">// system call</span><span class="token macro property">#<span class="token directive keyword">define</span> T_DEFAULT      500      </span><span class="token comment" spellcheck="true">// catchall</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>In summary, the macro function <code>SYSCALL</code> defines a assembly function that store the system call number into <code>eax</code> register and then call #64 interrput.</p><p>And <code>usys.S</code> simply defines assembly functions for all system call.</p><h4 id="2-vector-S"><a href="#2-vector-S" class="headerlink" title="2) vector.S"></a>2) <code>vector.S</code></h4><p>The next stop system call is <code>vector.S</code>, #64 is defined here.</p><pre class="line-numbers language-assembly"><code class="language-assembly">.globl vector64vector64:  pushl $0  pushl $64  jmp alltraps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>vector.S</code> simply push immediate number <code>0</code> and <code>64</code> into stack and then jump to function <code>alltraps</code>.</p><h4 id="3-trapasm-S"><a href="#3-trapasm-S" class="headerlink" title="3) trapasm.S"></a>3) <code>trapasm.S</code></h4><p><code>alltraps</code> is also an assembly function that defined in <code>trapasm.S</code></p><pre class="line-numbers language-assembly"><code class="language-assembly">.globl alltrapsalltraps:  # Build trap frame.  pushl %ds  pushl %es  pushl %fs  pushl %gs  pushal  # Set up data segments.  movw $(SEG_KDATA<<3), %ax  movw %ax, %ds  movw %ax, %es  # Call trap(tf), where tf=%esp  pushl %esp  call trap  addl $4, %esp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Before jump to function <code>trap</code>, function <code>alltraps.S</code> push register into stack and them call function <code>trap</code>.</p><h4 id="4-trap-c"><a href="#4-trap-c" class="headerlink" title="4) trap.c"></a>4) <code>trap.c</code></h4><p>Function <code>trap</code> is defined in <code>trap.c</code> and <code>trap</code> is a <code>C</code> function.</p><p>The source code of <code>trap</code> doesn’t matter, the only thing we need to know is that on line #9, it calls <code>syscall</code> function to deal different system call.</p><p>What matters is:</p><ol><li><code>trap</code> takes an argument <code>struct trapframe *tf</code>. Calling a function and passing argument is easy within <code>C</code>, we can call <code>trap</code> like <code>trap(mytf)</code> in <code>my_trap_call_test.c</code>. But how to pass argument when we call <code>C</code> functions in assembly codes like <code>trapasm.S</code>?</li></ol><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//PAGEBREAK: 41</span><span class="token keyword">void</span><span class="token function">trap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> trapframe <span class="token operator">*</span>tf<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>tf<span class="token operator">-></span>trapno <span class="token operator">==</span> T_SYSCALL<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>killed<span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>tf <span class="token operator">=</span> tf<span class="token punctuation">;</span>    <span class="token function">syscall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>killed<span class="token punctuation">)</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>tf<span class="token operator">-></span>trapno<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_TIMER<span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">cpuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tickslock<span class="token punctuation">)</span><span class="token punctuation">;</span>      ticks<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ticks<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tickslock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_IDE<span class="token punctuation">:</span>    <span class="token function">ideintr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_IDE<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// Bochs generates spurious IDE1 interrupts.</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_KBD<span class="token punctuation">:</span>    <span class="token function">kbdintr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_COM1<span class="token punctuation">:</span>    <span class="token function">uartintr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">:</span>  <span class="token keyword">case</span> T_IRQ0 <span class="token operator">+</span> IRQ_SPURIOUS<span class="token punctuation">:</span>    <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"cpu%d: spurious interrupt at %x:%x\n"</span><span class="token punctuation">,</span>            <span class="token function">cpuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token operator">-></span>cs<span class="token punctuation">,</span> tf<span class="token operator">-></span>eip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">lapiceoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//PAGEBREAK: 13</span>  <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>tf<span class="token operator">-></span>cs<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// In kernel, it must be our mistake.</span>      <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n"</span><span class="token punctuation">,</span>              tf<span class="token operator">-></span>trapno<span class="token punctuation">,</span> <span class="token function">cpuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token operator">-></span>eip<span class="token punctuation">,</span> <span class="token function">rcr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"trap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// In user space, assume process misbehaved.</span>    <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"pid %d %s: trap %d err %d on cpu %d "</span>            <span class="token string">"eip 0x%x addr 0x%x--kill proc\n"</span><span class="token punctuation">,</span>            <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>pid<span class="token punctuation">,</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>name<span class="token punctuation">,</span> tf<span class="token operator">-></span>trapno<span class="token punctuation">,</span>            tf<span class="token operator">-></span>err<span class="token punctuation">,</span> <span class="token function">cpuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token operator">-></span>eip<span class="token punctuation">,</span> <span class="token function">rcr2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The answer to problem 1 is that <code>C</code> passes function argument via stack. When we call functions between <code>C</code>, it is the compiler who autmatically push the argument into stack and hide all details.</p><p>So, when we call <code>C</code> functions in assembly, we need to push the argument into stack by ourselves. That’s the reason why assembly function <code>alltraps</code> pushes register into stack. <strong>The order of push is exactly reverse to the definition of <code>trapframe</code></strong>:</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// definition of trapframe in x86.h</span><span class="token comment" spellcheck="true">//PAGEBREAK: 36</span><span class="token comment" spellcheck="true">// Layout of the trap frame built on the stack by the</span><span class="token comment" spellcheck="true">// hardware and by trapasm.S, and passed to trap().</span><span class="token keyword">struct</span> trapframe <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// registers as pushed by pusha</span>  uint edi<span class="token punctuation">;</span>  uint esi<span class="token punctuation">;</span>  uint ebp<span class="token punctuation">;</span>  uint oesp<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// useless &amp; ignored</span>  uint ebx<span class="token punctuation">;</span>  uint edx<span class="token punctuation">;</span>  uint ecx<span class="token punctuation">;</span>  uint eax<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// rest of trap frame</span>  ushort gs<span class="token punctuation">;</span>  ushort padding1<span class="token punctuation">;</span>  ushort fs<span class="token punctuation">;</span>  ushort padding2<span class="token punctuation">;</span>  ushort es<span class="token punctuation">;</span>  ushort padding3<span class="token punctuation">;</span>  ushort ds<span class="token punctuation">;</span>  ushort padding4<span class="token punctuation">;</span>  uint trapno<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// below here defined by x86 hardware</span>  uint err<span class="token punctuation">;</span>  uint eip<span class="token punctuation">;</span>  ushort cs<span class="token punctuation">;</span>  ushort padding5<span class="token punctuation">;</span>  uint eflags<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// below here only when crossing rings, such as from user to kernel</span>  uint esp<span class="token punctuation">;</span>  ushort ss<span class="token punctuation">;</span>  ushort padding6<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// push in alltraps</span><span class="token punctuation">.</span>globl alltrapsalltraps<span class="token punctuation">:</span>  <span class="token macro property"># Build trap frame.</span>  pushl <span class="token operator">%</span>ds  pushl <span class="token operator">%</span>es  pushl <span class="token operator">%</span>fs  pushl <span class="token operator">%</span>gs  pushal  <span class="token macro property"># Set up data segments.</span>  movw $<span class="token punctuation">(</span>SEG_KDATA<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>ax  movw <span class="token operator">%</span>ax<span class="token punctuation">,</span> <span class="token operator">%</span>ds  movw <span class="token operator">%</span>ax<span class="token punctuation">,</span> <span class="token operator">%</span>es  <span class="token macro property"># Call trap(tf), where tf=%esp</span>  pushl <span class="token operator">%</span>esp  call trap  addl $<span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">%</span>esp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Nonetheless, the most important thing here in <code>trap.c</code> is that <strong>we are already executing kernel codes</strong>, which means:</p><ol><li>we are already in kernel mode</li><li>we jump from user program to kernel.</li></ol><p><code>So, in summary, the os uses three assembly functions to jump from User Program to Kernel</code>.</p><h3 id="D-Interior-Mechanism-of-Syscall"><a href="#D-Interior-Mechanism-of-Syscall" class="headerlink" title="D. Interior Mechanism of Syscall"></a>D. Interior Mechanism of Syscall</h3><p>Continue, the function <code>syscall</code> is defined in <span id="sc"><code>syscall.c</code></span>.</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// syscall.c</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_chdir</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_close</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_dup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_exec</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_fstat</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_getpid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_kill</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_link</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_mkdir</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_mknod</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_open</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_pipe</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_read</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_sbrk</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_sleep</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_unlink</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_wait</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_write</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_uptime</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>syscalls<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>SYS_fork<span class="token punctuation">]</span>    sys_fork<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exit<span class="token punctuation">]</span>    sys_exit<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_wait<span class="token punctuation">]</span>    sys_wait<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_pipe<span class="token punctuation">]</span>    sys_pipe<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_read<span class="token punctuation">]</span>    sys_read<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_kill<span class="token punctuation">]</span>    sys_kill<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exec<span class="token punctuation">]</span>    sys_exec<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_fstat<span class="token punctuation">]</span>   sys_fstat<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_chdir<span class="token punctuation">]</span>   sys_chdir<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_dup<span class="token punctuation">]</span>     sys_dup<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_getpid<span class="token punctuation">]</span>  sys_getpid<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sbrk<span class="token punctuation">]</span>    sys_sbrk<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sleep<span class="token punctuation">]</span>   sys_sleep<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_uptime<span class="token punctuation">]</span>  sys_uptime<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_open<span class="token punctuation">]</span>    sys_open<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_write<span class="token punctuation">]</span>   sys_write<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mknod<span class="token punctuation">]</span>   sys_mknod<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_unlink<span class="token punctuation">]</span>  sys_unlink<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_link<span class="token punctuation">]</span>    sys_link<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mkdir<span class="token punctuation">]</span>   sys_mkdir<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_close<span class="token punctuation">]</span>   sys_close<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">syscall</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> num<span class="token punctuation">;</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>curproc <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  num <span class="token operator">=</span> curproc<span class="token operator">-></span>tf<span class="token operator">-></span>eax<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;</span> <span class="token function">NELEM</span><span class="token punctuation">(</span>syscalls<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> syscalls<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    curproc<span class="token operator">-></span>tf<span class="token operator">-></span>eax <span class="token operator">=</span> syscalls<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">cprintf</span><span class="token punctuation">(</span><span class="token string">"%d %s: unknown sys call %d\n"</span><span class="token punctuation">,</span>            curproc<span class="token operator">-></span>pid<span class="token punctuation">,</span> curproc<span class="token operator">-></span>name<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    curproc<span class="token operator">-></span>tf<span class="token operator">-></span>eax <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Variable <code>syscall</code> is a function array, and <code>SYS_xxx</code> are macros defined in <code>syscall.h</code> (refer <a href="#anchor">syscall.h</a>)</p><p>Rember, system call number is store in <code>eax</code> (refer <a href="#scn">usys.S</a>).</p><p>So, <code>syscall</code> first get the system call number from <code>eax</code> register (line #55), and then pick out corresponding system call function to run (line #57).</p><p> <code>extern</code> is used to mark up system call function like <code>sys_exit</code>, <code>sys_close</code>, and <code>sys_mkdir</code> are defined in other files, </p><p>Finally, take a look at the real definition of <code>sys_kill</code> in <code>sysproc.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// sysproc.c</span><span class="token keyword">int</span><span class="token function">sys_kill</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> pid<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pid<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>and <code>kill</code> in <code>proc.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// proc.c</span><span class="token comment" spellcheck="true">// Kill the process with the given pid.</span><span class="token comment" spellcheck="true">// Process won't exit until it returns</span><span class="token comment" spellcheck="true">// to user space (see trap in trap.c).</span><span class="token keyword">int</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token keyword">int</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>p<span class="token punctuation">;</span>  <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>p <span class="token operator">=</span> ptable<span class="token punctuation">.</span>proc<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> <span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>proc<span class="token punctuation">[</span>NPROC<span class="token punctuation">]</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>pid <span class="token operator">==</span> pid<span class="token punctuation">)</span><span class="token punctuation">{</span>      p<span class="token operator">-></span>killed <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Wake process from sleep if necessary.</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>state <span class="token operator">==</span> SLEEPING<span class="token punctuation">)</span>        p<span class="token operator">-></span>state <span class="token operator">=</span> RUNNABLE<span class="token punctuation">;</span>      <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">release</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ptable<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="F-One-More-Thing-Passing-Argument"><a href="#F-One-More-Thing-Passing-Argument" class="headerlink" title="F. One More Thing: Passing Argument"></a>F. One More Thing: Passing Argument</h3><p>User program can include <code>user.h</code>, where prototypes of system call are provided.</p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// user.h</span><span class="token comment" spellcheck="true">// system calls</span><span class="token keyword">int</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>noreturn<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">pipe</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">kill</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">mknod</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">short</span><span class="token punctuation">,</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">fstat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">struct</span> stat<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">link</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dup</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">sbrk</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">uptime</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>However, the function prototype defined in <code>syscall.c</code> has not argument (refer <a href="#sc">syscall.c</a>).</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_chdir</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_close</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_dup</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_exec</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_exit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_fork</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_fstat</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_getpid</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_kill</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_link</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_mkdir</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_mknod</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_open</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_pipe</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_read</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_sbrk</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_sleep</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_unlink</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_wait</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_write</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_uptime</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>As explained ahead, <code>C</code> uses stack to pass the argument when calling function. So, <strong>we can actually get argument via calling program’s stack</strong>.</p><p>Here, we remain the pototype argument void is because the function array <code>syscall</code> that forces us keeping the prototype same argument.</p><p>To get the argument from calling program’s stack, we can use function <code>argstr</code> and <code>argint</code> defined in <code>syscall.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// Fetch the int at addr from the current process.</span><span class="token keyword">int</span><span class="token function">fetchint</span><span class="token punctuation">(</span>uint addr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>ip<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>curproc <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">>=</span> curproc<span class="token operator">-></span>sz <span class="token operator">||</span> addr<span class="token operator">+</span><span class="token number">4</span> <span class="token operator">></span> curproc<span class="token operator">-></span>sz<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token operator">*</span>ip <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Fetch the nul-terminated string at addr from the current process.</span><span class="token comment" spellcheck="true">// Doesn't actually copy the string - just sets *pp to point at it.</span><span class="token comment" spellcheck="true">// Returns length of string, not including nul.</span><span class="token keyword">int</span><span class="token function">fetchstr</span><span class="token punctuation">(</span>uint addr<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>pp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>ep<span class="token punctuation">;</span>  <span class="token keyword">struct</span> proc <span class="token operator">*</span>curproc <span class="token operator">=</span> <span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>addr <span class="token operator">>=</span> curproc<span class="token operator">-></span>sz<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token operator">*</span>pp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span>  ep <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>curproc<span class="token operator">-></span>sz<span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token operator">*</span>pp<span class="token punctuation">;</span> s <span class="token operator">&lt;</span> ep<span class="token punctuation">;</span> s<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>s <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> s <span class="token operator">-</span> <span class="token operator">*</span>pp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Fetch the nth 32-bit system call argument.</span><span class="token keyword">int</span><span class="token function">argint</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>ip<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">fetchint</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">myproc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>tf<span class="token operator">-></span>esp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Fetch the nth word-sized system call argument as a string pointer.</span><span class="token comment" spellcheck="true">// Check that the pointer is valid and the string is nul-terminated.</span><span class="token comment" spellcheck="true">// (There is no shared writable memory, so the string can't change</span><span class="token comment" spellcheck="true">// between this check and being used by the kernel.)</span><span class="token keyword">int</span><span class="token function">argstr</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>pp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> addr<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">argint</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">fetchstr</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> pp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Add-trace-and-getcount"><a href="#4-Add-trace-and-getcount" class="headerlink" title="4. Add trace and getcount"></a>4. Add <code>trace</code> and <code>getcount</code></h2><p>After figuring out how the system call works in <code>xv6</code> system, we start to add <code>trace</code> and <code>getcount</code> systemcall.</p><h3 id="1-Add-system-call-number"><a href="#1-Add-system-call-number" class="headerlink" title="1. Add system call number"></a>1. Add system call number</h3><p>First, we need to add system call number in <code>syscall.h</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// my syscall</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_trace  22</span><span class="token macro property">#<span class="token directive keyword">define</span> SYS_getcount  23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-26%20%E4%B8%8B%E5%8D%882.02.24.png" alt="Add Syscall number"></p><h3 id="2-Add-SYSCALL-Macro"><a href="#2-Add-SYSCALL-Macro" class="headerlink" title="2. Add SYSCALL Macro"></a>2. Add <code>SYSCALL</code> Macro</h3><p>The second step is to add <code>SYSCALL</code> macro in <code>usys.S</code></p><pre class="line-numbers language-assembly"><code class="language-assembly">SYSCALL(trace)SYSCALL(getcount)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-26%20%E4%B8%8B%E5%8D%882.04.52.png" alt="Add SYSCALL Macro"></p><h3 id="3-Add-prototype-in-syscall-c"><a href="#3-Add-prototype-in-syscall-c" class="headerlink" title="3. Add prototype in syscall.c"></a>3. Add prototype in <code>syscall.c</code></h3><p>Add my system call function prototype in <code>syscall.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// my syscall</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_trace</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">sys_getcount</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>syscalls<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>SYS_fork<span class="token punctuation">]</span>    sys_fork<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exit<span class="token punctuation">]</span>    sys_exit<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_wait<span class="token punctuation">]</span>    sys_wait<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_pipe<span class="token punctuation">]</span>    sys_pipe<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_read<span class="token punctuation">]</span>    sys_read<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_kill<span class="token punctuation">]</span>    sys_kill<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_exec<span class="token punctuation">]</span>    sys_exec<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_fstat<span class="token punctuation">]</span>   sys_fstat<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_chdir<span class="token punctuation">]</span>   sys_chdir<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_dup<span class="token punctuation">]</span>     sys_dup<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_getpid<span class="token punctuation">]</span>  sys_getpid<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sbrk<span class="token punctuation">]</span>    sys_sbrk<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_sleep<span class="token punctuation">]</span>   sys_sleep<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_uptime<span class="token punctuation">]</span>  sys_uptime<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_open<span class="token punctuation">]</span>    sys_open<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_write<span class="token punctuation">]</span>   sys_write<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mknod<span class="token punctuation">]</span>   sys_mknod<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_unlink<span class="token punctuation">]</span>  sys_unlink<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_link<span class="token punctuation">]</span>    sys_link<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_mkdir<span class="token punctuation">]</span>   sys_mkdir<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_close<span class="token punctuation">]</span>   sys_close<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_trace<span class="token punctuation">]</span> sys_trace<span class="token punctuation">,</span><span class="token punctuation">[</span>SYS_getcount<span class="token punctuation">]</span> sys_getcount<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Realize-trace-and-getcount"><a href="#4-Realize-trace-and-getcount" class="headerlink" title="4. Realize trace and getcount"></a>4. Realize <code>trace</code> and <code>getcount</code></h3><p>Finally, realize <code>trace</code> and <code>getcount</code> in <code>sysfile.c</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">// sysfile.c</span><span class="token comment" spellcheck="true">// my syscall data structure</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> trace_file<span class="token punctuation">{</span>  <span class="token keyword">char</span> filename<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> open_counter<span class="token punctuation">;</span>  <span class="token keyword">int</span> trace_enabled<span class="token punctuation">;</span><span class="token punctuation">}</span> trace_file<span class="token punctuation">;</span><span class="token keyword">int</span> num_traced<span class="token punctuation">;</span>trace_file tracing_file<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sys_trace</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// get param from stack char *path;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">;</span>  <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">argstr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>    tracing_file<span class="token punctuation">.</span>filename<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>  tracing_file<span class="token punctuation">.</span>filename<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>tracing_file<span class="token punctuation">.</span>open_counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  tracing_file<span class="token punctuation">.</span>trace_enabled <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">sys_getcount</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>tracing_file<span class="token punctuation">.</span>trace_enabled <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> tracing_file<span class="token punctuation">.</span>open_counter<span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>as well as modify <code>sysopen</code></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span><span class="token function">sys_open</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">;</span>  <span class="token keyword">int</span> fd<span class="token punctuation">,</span> omode<span class="token punctuation">;</span>  <span class="token keyword">struct</span> file <span class="token operator">*</span>f<span class="token punctuation">;</span>  <span class="token keyword">struct</span> inode <span class="token operator">*</span>ip<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// check if trace enabled and add counter</span>  <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">argstr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>length <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">argint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>omode<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ppath <span class="token operator">=</span> path<span class="token punctuation">;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>ptf <span class="token operator">=</span> tracing_file<span class="token punctuation">.</span>filename<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>ppath<span class="token punctuation">,</span> ptf<span class="token punctuation">,</span> length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tracing_file<span class="token punctuation">.</span>trace_enabled<span class="token punctuation">)</span>      tracing_file<span class="token punctuation">.</span>open_counter <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token function">begin_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>omode <span class="token operator">&amp;</span> O_CREATE<span class="token punctuation">)</span><span class="token punctuation">{</span>    ip <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> T_FILE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ip <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">end_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ip <span class="token operator">=</span> <span class="token function">namei</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">end_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ilock</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ip<span class="token operator">-></span>type <span class="token operator">==</span> T_DIR <span class="token operator">&amp;&amp;</span> omode <span class="token operator">!=</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">iunlockput</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">end_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">filealloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">fdalloc</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>      <span class="token function">fileclose</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iunlockput</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">end_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">iunlock</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">end_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  f<span class="token operator">-></span>type <span class="token operator">=</span> FD_INODE<span class="token punctuation">;</span>  f<span class="token operator">-></span>ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>  f<span class="token operator">-></span>off <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  f<span class="token operator">-></span>readable <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span>omode <span class="token operator">&amp;</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  f<span class="token operator">-></span>writable <span class="token operator">=</span> <span class="token punctuation">(</span>omode <span class="token operator">&amp;</span> O_WRONLY<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>omode <span class="token operator">&amp;</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> fd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-26%20%E4%B8%8B%E5%8D%882.12.01.png" alt="Add sys_trace and sys_getcount"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-26%20%E4%B8%8B%E5%8D%882.11.49.png" alt="Modify sys_open"></p><h2 id="5-Result"><a href="#5-Result" class="headerlink" title="5. Result"></a>5. Result</h2><p>Since this blog is actually a project of CS537: Operating System of UW-Madison, so the course do offer a test script to test the system call you developed.</p><p>PS: The courses material is open source, and serves as material of the book Operating System: Three Easy Piece by Remzi, the lecture of this course. He create a repository called OS Steps, and pull all course materials like project introduction, project testing tools in that material. So maybe you can find the testing script in Remzi’s github.</p><p>To strat test, simply</p><pre class="line-numbers language-shell"><code class="language-shell">~cs537-1/test/p1b/runtest.sh -c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-26%20%E4%B8%8B%E5%8D%882.14.21.png" alt="Test Result"></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Operating System </tag>
            
            <tag> xv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu低频实用命令</title>
      <link href="/2022/07/29/ubuntu-di-pin-shi-yong-ming-ling/"/>
      <url>/2022/07/29/ubuntu-di-pin-shi-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220729210010695.png" alt="Ubuntu官网"></p><h1 id="Ubuntu低频实用命令"><a href="#Ubuntu低频实用命令" class="headerlink" title="Ubuntu低频实用命令"></a>Ubuntu低频实用命令</h1><p>最近在工作的时候，总是会遇到这样一个情况，就是在某个特定的场合下，需要用一个具体功能的命令，这个命令之很久之前用过，但是因为最近没怎么用，忘记了命令的格式。于是又不得不去网上搜索，然后找到熟悉的博客，找到丢失的记忆。</p><p>久而久之，就觉得很烦，所以决定专门写一个文章，把这些低频而又实用的命令记录下来。</p><h2 id="1-软连接：ln-s"><a href="#1-软连接：ln-s" class="headerlink" title="1. 软连接：ln -s"></a>1. 软连接：ln -s</h2><p><code>Linux</code>系统及其发行版系统中，使用的文件系统基本都是<code>ext</code>系列的。而<code>ext</code>文件系统中有一个概念，就是<code>链接</code>。链接可以视为文件或者目录的镜像。直观的理解，有所谓的链接(<code>link</code>)，我们可以将其视为文件或者目录的别名。</p><p>链接分<strong>软链接</strong>和<strong>硬链接</strong>两种，常用的是软连接，因为硬链接会导致文件在硬盘中存在多个镜像。</p><h3 id="A-创建软连接"><a href="#A-创建软连接" class="headerlink" title="A. 创建软连接"></a>A. 创建软连接</h3><p><code>ln</code>命令可以用于创建软连接或者硬链接，其格式为：</p><pre class="line-numbers language-shell"><code class="language-shell">ln [参数] [源文件或目录]  [目标文件或目录]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建软连接的格式为：</p><pre class="line-numbers language-shell"><code class="language-shell">ln -s [源文件或目录]  [目标文件或目录]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如我现在在当前目录下创建一个指向<code>~/project/data/cifar10</code>的软连接，则命令为：</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir datasetsln -s ~/projects/data/cifar10  ./datasets/cifar10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="B-删除软连接"><a href="#B-删除软连接" class="headerlink" title="B. 删除软连接"></a>B. 删除软连接</h3><p><code>rm</code>命令可以用于删除文件或者目录，软连接自然也可以。</p><pre class="line-numbers language-shell"><code class="language-shell">rm [软链接]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是需要注意的是，删除软连接的时候，不能加<code>/</code>，例如，现在要删除上面创建的<code>cifar10</code>软连接，<strong>那么就要用</strong></p><pre class="line-numbers language-shell"><code class="language-shell">rm -r cifar10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意，不能用</strong>：</p><pre class="line-numbers language-shell"><code class="language-shell">rm -r cifar10/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为<code>cifar10</code>是一个软连接，如果我们加了<code>/</code>，就会对其进行转义，从而删除掉<code>~/project/data/cifar10/</code>文件夹下的所有文件，但是<code>cifar10</code>这个链接文件本文会被保存下来。</p><h3 id="C-查看软连接"><a href="#C-查看软连接" class="headerlink" title="C. 查看软连接"></a>C. 查看软连接</h3><p>我们如果要查看软连接所指向的文件，那么直接用<code>ls</code>命令即可。</p><pre class="line-numbers language-shell"><code class="language-shell">ls -al ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>ls</code>的<code>-l</code>参数会解析软连接，并且显示出软连接指向的文件。</p><h2 id="2-压缩和解压缩-tar-gz-tgz"><a href="#2-压缩和解压缩-tar-gz-tgz" class="headerlink" title="2. 压缩和解压缩.tar.gz/.tgz"></a>2. 压缩和解压缩.tar.gz/.tgz</h2><p>压缩文件能够方便的在不同的计算机之间传输数据，亦或者是使用<code>at</code>、<code>crontab</code>等命令定期的备份数据。</p><p>压缩、解压<code>zip</code>格式压缩文件很简单，直接<code>zip</code>、<code>unzip</code>即可，而且参数也不多，非常好记。</p><p>但是用于压、解压<code>.tar.gz</code>/<code>.tgz</code>格式压缩文件的<code>tar</code>命令的参数很多，总是记不住，所以干脆就记录下来，方便以后查询</p><h3 id="A-基本参数"><a href="#A-基本参数" class="headerlink" title="A. 基本参数"></a>A. 基本参数</h3><table align="center">      <tbody>            <tr>                  <td>x</td>              <td>extract，解压</td>    </tr>    <tr>      <td>c</td>                  <td>compress，压缩</td>            </tr>            <tr>                  <td>z</td>                  <td>压缩/解压的文件是gzip，即后缀是.tar.gz或者.tgz</td>            </tr>            <tr>                  <td>v</td>                  <td>verbose，显式压缩（解压）过程中压缩（解压）的文件</td>            </tr>            <tr>                  <td>f</td>                  <td>解压的文件名（压缩时生成的压缩文件名）</td>            </tr>      </tbody></table><h3 id="B-压缩"><a href="#B-压缩" class="headerlink" title="B. 压缩"></a>B. 压缩</h3><p>压缩直接使用下面的组合</p><pre class="line-numbers language-shell"><code class="language-shell">tar -czvf 压缩后生成的文件名 要压缩的文件/文件夹名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此外，需要注意的是，<code>tar</code>在压缩的时候会保存文件夹的结构，因此我们要压缩一个文件夹的时候，最好在该文件夹外进行压缩。</p><p>例如我们要压缩一个名为<code>~/file/test/</code>的文件夹时，使用下面的命令</p><pre class="line-numbers language-shell"><code class="language-shell">cd ~/filetar -czvf test.tar.gz test/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样解压完了之后得到<code>test</code>一整个文件夹</p><p>但是如果我们按照下面的方式进行压缩</p><pre class="line-numbers language-shell"><code class="language-shell">cd ~/file/testtar -czvf ./*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么解压的时候就会得到很多文件</p><h3 id="C-解压"><a href="#C-解压" class="headerlink" title="C. 解压"></a>C. 解压</h3><p>解压使用下面的组合</p><pre class="line-numbers language-shell"><code class="language-shell">tar -xzvf 要解压的文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-非交互式SSH连接：sshpass"><a href="#3-非交互式SSH连接：sshpass" class="headerlink" title="3. 非交互式SSH连接：sshpass"></a>3. 非交互式SSH连接：sshpass</h2><p>在开发的过程中，很多时候我们都需要干一些重复的事情。因此如果有一些任务在未来一段时间我们重复会干的话，那么我们就可以把这一系列任务写成一个Shell脚本，以后直接调用即可。</p><p>而很多时候，我们在本机上完成好了开发之后，需要上传到内网的机器中进行测试。手动的用<code>tar</code>打包完了之后再用<code>scp</code>命令上传到内网服务器中是真的很麻烦。因此我们就想能不能把代码的打包以及上传写成一个脚本。</p><p>可是这样干优惠存在一个问题，就是<code>scp</code>或者<code>ssh</code>这样涉及到链接远程服务器的命令都是交互式的，换而言之需要我们手动输入密码，这样就为我们在<code>Shell</code>中集成工作流造成了很大的不便。</p><p>因此，我们就在想能不能把密码当成参数传给<code>scp</code>或者<code>ssh</code>，很可惜，这样不行。所以这个时候就有<code>sshpass</code>这个工具来帮助我们了。</p><h3 id="A-p-指定密码"><a href="#A-p-指定密码" class="headerlink" title="A. -p 指定密码"></a>A. -p 指定密码</h3><p>使用<code>-p</code>参数直接指定<code>ssh</code>和<code>scp</code>登录时的密码</p><pre class="line-numbers language-shell"><code class="language-shell"># 免密码登录sshpass -p password ssh username@host# 远程执行命令sshpass -p password ssh username@host <cmd># 通过scp上传文件sshpass -p password scp local_file root@host:remote_file # 通过scp下载文件sshpass -p password scp root@host:remote_file local_file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以组合在一起，我们首先在本地使用<code>tar</code>打包，然后使用<code>scp</code>把压缩好的文件上传到远程服务器上去，接下来使用<code>ssh</code>命令远程执行解压、编译、测试的命令。</p><p>类似的，如果想在远程执行多个命令，我们可以先用<code>scp</code>把写好的<code>shell</code>脚本上传到远程服务器上去，然后再使用<code>ssh</code>命令远程执行<code>shell</code>脚本。</p><h3 id="B-o-忽略RAS-Key检查"><a href="#B-o-忽略RAS-Key检查" class="headerlink" title="B. -o 忽略RAS Key检查"></a>B. -o 忽略RAS Key检查</h3><p>在第一次链接到远程服务器的时候，第一次认证时，一般会有<code>RSA Key</code>验证的提示：</p><pre class="line-numbers language-shell"><code class="language-shell">The authenticity of host ’10.x.x.x (10.x.x.x)' can't be established.RSA key fingerprint is a4:eb:8c:7d:2a:ef:d6:1c:a3:0c:e8:e5:00:d2:eb:60.Are you sure you want to continue connecting (yes/no)?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个时候可以指定<code>-o</code>参数来忽略<code>RSA Key</code>的验证</p><pre class="line-numbers language-shell"><code class="language-shell">sshpass -p "$SSH_PASSWD" ssh root@"$host" -o StrictHostKeyChecking=no "$@" 2>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="C-f-从文件中读取密码"><a href="#C-f-从文件中读取密码" class="headerlink" title="C. -f 从文件中读取密码"></a>C. -f 从文件中读取密码</h3><p>使用<code>-f</code>参数从文件中读取密码</p><pre class="line-numbers language-shell"><code class="language-shell">echo "password" > userpasswdsshpass -f userpasswd ssh username@x.x.x.x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当然可以配合<code>gpg</code>来加密密码，而使用时候把解密后的密码传给<code>sshpass</code>，最后再删掉即可。</p><pre class="line-numbers language-shell"><code class="language-shell">gpg -d -q .sshpassword.gpg > fifo; sshpass -f fifo ssh; rm fifo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="D-e-从环境变量中读取密码"><a href="#D-e-从环境变量中读取密码" class="headerlink" title="D. -e 从环境变量中读取密码"></a>D. -e 从环境变量中读取密码</h3><p>使用<code>-e</code>参数从环境变量中读取密码</p><pre class="line-numbers language-shell"><code class="language-shell">export SSHPASS="password"sshpass -e ssh username@x.x.x.x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NP完全性理论</title>
      <link href="/2022/07/26/np-wan-quan-xing-li-lun/"/>
      <url>/2022/07/26/np-wan-quan-xing-li-lun/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220728153924152.png" alt="NP完全性理论"></p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>算法对于一个计算机系的学术来说，是最终的课程之一，也是程序员必修内功之一。而本文其实是我在学习算法设计这门课的时候<code>NP完全性理论</code>部分的笔记。因为我自己真心觉得我这个笔记做得不错，所以特地将<code>NP完全性理论</code>部分的笔记整理出来，写成博客，以飨读者。</p><h2 id="2-NP完全性理论-——-基础"><a href="#2-NP完全性理论-——-基础" class="headerlink" title="2. NP完全性理论 —— 基础"></a>2. NP完全性理论 —— 基础</h2><blockquote><p>学一个东西，需要明白它是干什么用的</p></blockquote><p><strong><code>NP完全性理论</code>是一个研究问题类别的理论</strong>。和回溯法、动态规划等研究具体某一类问题的求解不同，<strong><code>NP完全性理论</code>是研究问题之间关系的理论</strong>。</p><p>因此，明白这个道理之后，我们就知道，<strong><code>NP完全性理论</code>其实并不是帮助我们去求解某一类问题的，而是帮助我们去认识问题的</strong>。</p><h3 id="A-Lead-in：多项式时间问题和指数时间问题"><a href="#A-Lead-in：多项式时间问题和指数时间问题" class="headerlink" title="A. Lead-in：多项式时间问题和指数时间问题"></a>A. Lead-in：多项式时间问题和指数时间问题</h3><p>时间复杂度有很多种，每一个问题都可以有一个求解算法，而每一个求解算法都有时间复杂度。因此我们如果用某一个问题的最优算法来表征这个问题，那么就可以说这个问题是<code>xxxx（时间复杂度）</code>问题。例如对于<code>0/1背包问题</code>，我们最好的求解算法的时间复杂度是$\mathcal{O}(2^n)$，那我们就可以称<code>0/1背包问题</code>为$\mathcal{O}(2^n)$问题。</p><p>那么根据时间复杂度来进行划分，我们就可以把问题分成两大类：<code>多项式时间问题（Polynomial Time Problem）</code>和<code>指数时间问题（Exponential Time Problem）</code>。</p><blockquote><p>后文中会把中文的<code>多项式时间问题</code>和<code>指数时间问题</code>与英文简称<code>Polynomial</code>和<code>Exponential</code>混用。</p></blockquote><p>常见的<code>多项式时间问题</code>和<code>指数时间问题</code>有：</p><div class="table-container"><table><thead><tr><th style="text-align:center">多项式时间问题</th><th style="text-align:center">多项式时间问题</th><th style="text-align:center">指数时间问题</th><th style="text-align:center">指数时间问题</th></tr></thead><tbody><tr><td style="text-align:center"><strong>算法名称</strong></td><td style="text-align:center"><strong>时间复杂度</strong></td><td style="text-align:center"><strong>算法名称</strong></td><td style="text-align:center"><strong>时间复杂度</strong></td></tr><tr><td style="text-align:center">Linear Search</td><td style="text-align:center">$\mathcal{O}(n)$</td><td style="text-align:center">0/1 Knapsack</td><td style="text-align:center">$\mathcal{O}(2^n)$</td></tr><tr><td style="text-align:center">Binary Search</td><td style="text-align:center">$\mathcal{O}(\log n)$</td><td style="text-align:center">Traveling SP</td><td style="text-align:center">$\mathcal{O}(2^n)$</td></tr><tr><td style="text-align:center">Intersection Sort</td><td style="text-align:center">$\mathcal{O}(n^2)$</td><td style="text-align:center">Sum of Subset</td><td style="text-align:center">$\mathcal{O}(2^n)$</td></tr><tr><td style="text-align:center">Merge Sort</td><td style="text-align:center">$\mathcal{O}(n\log n)$</td><td style="text-align:center">Graph Coloring</td><td style="text-align:center">$\mathcal{O}(2^n)$</td></tr><tr><td style="text-align:center">Matrix Manipulation</td><td style="text-align:center">$\mathcal{O}(n^3)$</td><td style="text-align:center">Hamilton Cycle</td><td style="text-align:center">$\mathcal{O}(2^n)$</td></tr></tbody></table></div><p>那还有一个问题就是，为什么要分为<code>多项式时间问题</code>和<code>指数时间问题</code>呢？其实是因为<strong>这两类问题本质上存在不同，多项时间的问题是简单问题/易问题，而指数时间是难问题</strong>。类比人类做数学题的样子，如果我们求解一个问题花的时间非常长，那么这个问题就非常难。如果花的时间短，那么这个问题就是一个简单问题。</p><p>例如，假设某个<code>问题A</code>的最优算法时间复杂度是$\mathcal{O}(n^{100})$，<code>问题B</code>的最优算法的时间复杂度是$\mathcal{O}(2^n)$，那么虽然一开始问题规模比较小的时候是<code>问题A</code>更难，但是当问题规模一定大了之后，即$n$一定大了之后，<code>问题B</code>更难。因此，最终/从根本上来说，<code>问题B</code>更难。</p><p>所以我们才说，<code>多项式时间问题</code>是简单问题，而<code>指数时间问题</code>是难问题。</p><h3 id="B-NP完全性理论的idea"><a href="#B-NP完全性理论的idea" class="headerlink" title="B. NP完全性理论的idea"></a>B. NP完全性理论的idea</h3><p>NP完全性理论起源于两个idea：</p><ul><li>能否为所有的Exponential的问题进行分类？更详细的说，目前有很多问题已知的最好的求解算法是Exponential Time的，那么对于这些问题，他们之间是否存在相似性？进一步，我们能否利用这种相似性来对所有的Exponential Time的问题进行划分，这样的话对于划分后的每一组问题，只需要解决组内的一个问题，然后稍加变形就可以解决这一组的所有问题。</li><li>如果不能为一个目前最好的算法是Exponential Time的问题写出Deterministic的Polynomial Solution，那么能否为其写出一个Non-Deterministic的Polynomial Solution？</li></ul><p>而整个NP完全性理论，就是从这两个idea中发展出来的。从这两个idea出发，就可以构建出整个NP完全性理论</p><h3 id="C-确定性算法（Deterministic）与非确定性算法（Non-Deterministic）"><a href="#C-确定性算法（Deterministic）与非确定性算法（Non-Deterministic）" class="headerlink" title="C. 确定性算法（Deterministic）与非确定性算法（Non-Deterministic）"></a>C. 确定性算法（Deterministic）与非确定性算法（Non-Deterministic）</h3><p>上面我们在说NP完全性理论的时候说到了确定性算法和非确定性算法，那么这两个术语的意思是什么呢？</p><h4 id="确定性算法"><a href="#确定性算法" class="headerlink" title="确定性算法"></a>确定性算法</h4><p>所谓<strong>确定性算法，指的就是由确定性的算法语句组成的算法</strong>。而所谓<strong>确定性语句，指的就是我们明白其内部流程（对于函数）的语句</strong>。</p><p>简单的理解确定性算法，就是我们知道这个算法的实现，写不住来只是因为单纯的码力问题。</p><p>举一个确定性算法的例子，下面这个算法是利用<code>OrbSLAM2</code>算法对周围环境建立三维地图的程序。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 需要opencv</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token comment" spellcheck="true">// ORB-SLAM的系统接口</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"System.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;chrono></span>   </span><span class="token comment" spellcheck="true">// for time stamp</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string parameterFile <span class="token operator">=</span> <span class="token string">"./myvideo.yaml"</span><span class="token punctuation">;</span>string vocFile <span class="token operator">=</span> <span class="token string">"./Vocabulary/ORBvoc.txt"</span><span class="token punctuation">;</span>string videoFile <span class="token operator">=</span> <span class="token string">"./myvideo.mp4"</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 声明 ORB-SLAM2 系统</span>    ORB_SLAM2<span class="token operator">::</span>System <span class="token function">SLAM</span><span class="token punctuation">(</span>vocFile<span class="token punctuation">,</span> parameterFile<span class="token punctuation">,</span> ORB_SLAM2<span class="token operator">::</span>System<span class="token operator">::</span>MONOCULAR<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取视频图像</span>    cv<span class="token operator">::</span>VideoCapture <span class="token function">cap</span><span class="token punctuation">(</span>videoFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// change to 1 if you want to use USB camera.</span>    <span class="token comment" spellcheck="true">// 记录系统时间</span>    <span class="token keyword">auto</span> start <span class="token operator">=</span> chrono<span class="token operator">::</span>system_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cv<span class="token operator">::</span>Mat frame<span class="token punctuation">;</span>        cap <span class="token operator">>></span> frame<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 读取相机数据</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> frame<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// rescale because image is too large</span>        cv<span class="token operator">::</span>Mat frame_resized<span class="token punctuation">;</span>        cv<span class="token operator">::</span><span class="token function">resize</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> frame_resized<span class="token punctuation">,</span> cv<span class="token operator">::</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> now <span class="token operator">=</span> chrono<span class="token operator">::</span>system_clock<span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> timestamp <span class="token operator">=</span> chrono<span class="token operator">::</span>duration_cast<span class="token operator">&lt;</span>chrono<span class="token operator">::</span>milliseconds<span class="token operator">></span><span class="token punctuation">(</span>now <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        SLAM<span class="token punctuation">.</span><span class="token function">TrackMonocular</span><span class="token punctuation">(</span>frame_resized<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cv<span class="token operator">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    SLAM<span class="token punctuation">.</span><span class="token function">Shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然<strong>我</strong>不知道<code>OrbSLAM2</code>算法的底层实现，即我们不知道诸如<code>SLAM.TrackMonocular()</code>、<code>chrono::system_clock::now()</code>等函数/方法的内部是怎么写的，<strong>但是OrbSLAM2算法的原理我们（人类）是知道的，只要我们花时间去学习，假以时日我们就能自己写出来</strong>。</p><h4 id="非确定性算法"><a href="#非确定性算法" class="headerlink" title="非确定性算法"></a>非确定性算法</h4><p>既然确定性算法是我们知道原理的算法，那么<strong>非确定算法就是我们不知道原理的算法</strong>，而不是我们没有学习原理的算法。<strong>我们没有学习原理的算法，他的原理已经被人发现了，就放在那里，是你不学</strong>。而非确定性算法，其原理还没有人发现过，目前还是未知。</p><p>所以，我们之前写的所有的程序、实现的所有算法，都是确定性算法。那么问题就来了，我们不知道确定性算法，那么到底该怎么写出来非确定性算法？</p><blockquote><p>很简单，把非确定性算法中我们不会写的、并且是Polynomial的地方留白，未来当我们知道这个地方怎么写了，我们再把留白的地方补上去。</p></blockquote><p>这样解释还是比较含糊不清，下面就举一个非确定性算法的例子。</p><blockquote><p>N-Search问题：给定一个随机数组A，和一个值key，要求值key是否存在于数组A中。</p><p>求解这个问题最简单的算法就是遍历数组A就行了，这样的话得到的算法时间复杂度是$\mathcal{O}(n)$。而我们能够写出这样的算法，因此，下面的<code>n-search1</code>算法就是确定性的算法</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> n<span class="token operator">-</span><span class="token function">search1</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>            retutrn <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，目前我们能够找到的N-Search问题最好的算法是$\mathcal{O}(n)$的，因此N-Search问题是$\mathcal{O}(n)$问题。</p><p>那么我们接下来就要问了，N-Search问题是否存在$\mathcal{O}(1)$的算法？你当然可能会想，肯定不存在这样的算法，因为要挨个比较每个元素，因为……诸如此类的原因其实都是我们人认为的。可是，<strong>在数学上，我们否定一个问题是需要给出严格的证明的</strong>。可是，对于”N-Search问题不存在$\mathcal{O}(1)$的算法“这个问题，我们在数学上没有办法给出严格的证明。</p><p>因此，我们其实没法否认”N-Search问题存在$\mathcal{O}(1)$的算法“这个命题，有可能在未来某一天，我们就真的找到了的算法。但至少在目前，我们是不知道这个算法的。为此，我们可以用下面的方式来表示</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> n<span class="token operator">-</span><span class="token function">search2</span><span class="token punctuation">(</span><span class="token keyword">int</span> A<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// choice函数是n-search的O(1)的解法</span>    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">choice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么这样，<code>n-search2</code>算法就是n-search问题的一个$\mathcal{O}(1)$的算法，只不过其中的操作我们并不知道原理，即<code>choice</code>语句到底是怎么样用$\mathcal{O}(1)$来找到一个idx的？</p><p>这就是为什么我们说<code>n-search2</code>算法是non-deterministic的。而对于<code>choice</code>语句来说：</p><p align="center"><i>When we don't know how it works, it's magic. Once we know it, it's technique.</i></p></blockquote><p>至此，我想上面的这个例子已经很清楚的解释了，什么是非确定性的算法。</p><p>而对于所有的非确定性算法，可能我们今天不知道非确定性算法是怎么工作的，但是可能我们明天就知道的了，那么明天这个非确定性算法就变成了确定性算法了。</p><h4 id="为什么要用非确定算法？"><a href="#为什么要用非确定算法？" class="headerlink" title="为什么要用非确定算法？"></a>为什么要用非确定算法？</h4><p>我们上面介绍了确定性算法和非确定性算法，那么我们就想要问，确定性算法我们可以写出来，因此确定性算法是有其实际意义的。可是，非确定性算法我们根本没法写出来，他到底有什么用呢？</p><p>哈哈，别忘了我在前面说过的，NP完全性理论的目的：研究问题之间的关系。非确定性算法恰恰就是用于帮助我们去研究问题之间关系的工具。</p><p>接下来，我们就要开始用确定性与非确定性算法来研究NP问题了。</p><h3 id="D-P类问题与NP类问题"><a href="#D-P类问题与NP类问题" class="headerlink" title="D. P类问题与NP类问题"></a>D. P类问题与NP类问题</h3><p>我们前面举了一个例子，例子中我们为<code>n-search</code>这个目前只有$\mathcal{O}(n)$的问题写出了$\mathcal{O}(1)$的非确定性算法。</p><p>那么以此类推，我们其实可以给所有的Exponential 问题写出来Polynomial的Non-Deterministic的解法。</p><p>因此，我们定义：</p><ul><li><strong>用P来表示所有具有Polynomial Time的Deterministic Solution的问题（Polynomial Problem）</strong>。</li><li><strong>用NP来表示所有具有Polynomial Time的Non-Deterministic Solution的问题（Non-deterministic Polynomial Problem）</strong>。</li></ul><p>即：</p><ul><li><strong>P类问题是目前我们已经能够为其写出确定性多项式时间算法的问题</strong></li><li><strong>NP类问题是目前我们只能够为其写出非确定性多项式时间算法的问题</strong></li></ul><p>注意，因为我们说不确定的算法可以变成确定的算法，因此NP问题如果我们找到了确定性的解法，那么这个NP问题就成为了P类问题。因此，P类问题和NP类问题有一个重要的性质，就是</p><script type="math/tex; mode=display">P\subset NP</script><p>到这里，我们其实已经完成了NP完全性理论的第二个问题，即我们为Polynomial Time的问题写出了Non-deterministic的Polynomial算法。</p><h2 id="3-NP-Hard与NP-Complete问题"><a href="#3-NP-Hard与NP-Complete问题" class="headerlink" title="3. NP-Hard与NP-Complete问题"></a>3. NP-Hard与NP-Complete问题</h2><p>在介绍完了NP完全性理论的基础之后，我们接下来要介绍的，就是NP-Hard问题与NP-Complete问题，即NP难问题与NP完全问题。</p><h3 id="A-问题的相似性"><a href="#A-问题的相似性" class="headerlink" title="A. 问题的相似性"></a>A. 问题的相似性</h3><p>在开始介绍NP-Hard和NP-Complete问题前，先通过一个例子，阐述问题的相似性。</p><h4 id="CNF-Satisfactory问题-合取范式问题"><a href="#CNF-Satisfactory问题-合取范式问题" class="headerlink" title="CNF-Satisfactory问题/合取范式问题"></a>CNF-Satisfactory问题/合取范式问题</h4><blockquote><p><strong>CNF-Satisfactory问题/合取范式问题</strong></p><p>写代码的时候，我们经常遇到一个很长的逻辑表达式，然后针对表达式中的各个变量，到底在取什么值的时候表达式的值为真？那么这个问题就是合取范式问题，即CNF-Satisfactory问题。</p><p>我们形式化的描述一下CNF-Satisfactory问题：给定0-1变量集合${x_1,x_2,…,x_n}$，给定范式（即逻辑表达式）$CNF=f(x_1,x_2,…,f_n)$，求$\vec x={x_1,x_2,…,x_n}$，使得<code>CNF</code>成立。</p></blockquote><p>举个CNF-SAT问题（CNF-Satisfactory简写为CNF-SAT）的例子：</p><blockquote><p>设$\vec x = {x_1,x_2,x_3}$，求$\vec x_0$，使得$CNF=(x_1\or\bar x_2 \or x_3) \and (\bar x_1 \or x_2 \or \bar x_3)$成立（为真）。</p></blockquote><p>求解这个问题，我们当然可以用遍历的方法去做，这样的话我们需要遍历八种可能。</p><div class="table-container"><table><thead><tr><th style="text-align:center">$x_1$</th><th style="text-align:center">$x_2$</th><th style="text-align:center">$x_3$</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table></div><p>但其实，我们可以把解空间组织成一个树的形式，而后利用分支限界或者回溯法来高效的遍历。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220728175648315.png" alt="CNF-SAT问题的解空间树"></p><h4 id="0-1背包问题"><a href="#0-1背包问题" class="headerlink" title="0/1背包问题"></a>0/1背包问题</h4><p>对于0/1背包问题的介绍，建议查阅知乎文章：<a href="https://zhuanlan.zhihu.com/p/30959069，这里就不再啰嗦了。">https://zhuanlan.zhihu.com/p/30959069，这里就不再啰嗦了。</a></p><h4 id="问题相似性"><a href="#问题相似性" class="headerlink" title="问题相似性"></a>问题相似性</h4><p>对于0/1背包问题，我们对于每一个物品，可以用一个布尔变量$x_i$来表示拿或者不拿这个物品。那么这样的话，我们其实也可以把0/1背包问题，用一个树来表示。</p><p><strong>那么，如果现在我们拿到了一个展开树/解空间树，我们其实是不知道这个树是01背包问题还是CNF-Satisfactory问题，这是因为，在本质上，01背包问题与CNF-Satisfactory问题是一类问题，都可以用解空间树来表示，而且，这两个利用解空间树进行求解的方法也是一样的</strong></p><p>由此可见，诸多的问题之间，其实是存在相似性的，我们可以利用这一相似性，对问题进行划分。那么问题的关键，就在于现在假设有两个问题A和B，我们要如何得知这两个问题是否是同一类问题呢？</p><h4 id="问题规约"><a href="#问题规约" class="headerlink" title="问题规约"></a>问题规约</h4><p>上面我们通过0/1背包问题和CNF-SAT问题的这个例子，说明了问题之间存在相似性。那么现在给定两个问题，如何判断这两个问题之间是否有相似性呢？</p><p>具体的判断方法，就是看两个问题能否规约到一起去。即问题A能否规约到问题B，或者问题B能否规约到问题A。而规约的含义，就是对一个问题进行一定的变换，例如我们上面对0/1背包问题进行了变换，变换到了解空间树上去。而这一变换，术语称为<strong>规约</strong>，问题$L_1$可以归约到问题$L_2$记为：$L_1\propto L_2$。</p><p>注意，规约要求进行问题变换的时候，花费的时间也必须是多项式时间的，并且进行变换的算法必须是已知的，因为我们必须知道这个变换的方式，否是没有办法把问题B变换到问题A上去的。其次如果不存在多项式时间的变换，那么这个变换也是没有意义的，因为变换所花费的时间不必直接求解问题B要多。</p><p>规约的一个好处就是，如果我们用变换$f$将问题A变换为了问题B，那么我们对B问题的解法进行逆变换$f^{-1}$，就可以得到问题A的解法。</p><p>因此规约带来的的好处就是我们可以通过研究同一类问题中的其他比较容易解决的问题，来解决不好解决的问题。例如上面用合取范式求解背包问题。</p><p>更进一步，对于同一类问题我们其实只需要求解其中的一个就行了，剩下的就是寻找待解决的问题和已经解决的问题之间的变换$f$，找到了之后利用逆变换就可以求出来待解决问题的解。而变换$f$其实很好求，通常都是只需要做到解空间对应即可。</p><h3 id="B-NP-Hard问题"><a href="#B-NP-Hard问题" class="headerlink" title="B. NP-Hard问题"></a>B. NP-Hard问题</h3><p>我们接下来定义一类特殊的问题，定义：CNF-SAT问题是一个NP-Hard问题。设问题$L$，若$L\propto CNF-SAT$，则$L\in NP-hard$，即所有可以归约到$CNF-SAT$的问题都是NP-hard问题。注意，我们并没有说不能规约到$CNF-SAT$的问题就不是NP-hard问题</p><p>首先我们需要明白，NP-hard问题和NP问题有什么关系。NP问题的定义就是能够写出Polynomial Time的Non-Deterministic解法的问题。但是NP-hard问题中只有一部分能否写出来Polynomial Time的Non-Deterministic解法，因此$NP-hard\subset NP$不成立，只能是$NP-hard\cap NP\neq \varnothing$。</p><p>NP-hard问题的定义可能一开始看会觉得很奇怪，感觉这样一个“问题+规约”的形式的定义有些怪怪的。</p><p>其实一点都不怪，还记得前面说过的NP完全性理论的目的么？NP完全性理论就是研究问题之间的相关性的，所以先定义一个问题作为”根问题“，而后用归约作为桥梁，来扩充NP-hard类问题的集合。</p><p>之所以要定义出来NP-hard类问题，是为了和接下来的NP-Complete问题比较。</p><h3 id="C-NP-Complete问题"><a href="#C-NP-Complete问题" class="headerlink" title="C. NP-Complete问题"></a>C. NP-Complete问题</h3><blockquote><p>定义：若一个问题存在Polynomial Time的Deterministic解，那么该问题就是NP-Complete问题</p></blockquote><p>同样的，NPC问题也可以通过规约来进行传递，即：设问题$L_1\in NP-Complete$，若问题$L_2\propto L_1$，则$L_2\in NP-Complete$。</p><p>我们再给出一个定理：$SAT\in NP-Complete$。这个定理的证明书上有7页，我就不放了。反正就是说明了SAT是一个NPC问题。</p><h2 id="4-P-NP？"><a href="#4-P-NP？" class="headerlink" title="4. P=NP？"></a>4. P=NP？</h2><p>前面说了一大堆，介绍了P类问题，NP类问题，NP-hard类问题，NP-Complete类问题，我们画个图来表示一下他们之间的关系：</p><ul><li>$P\subset NP$</li><li>$NP-hard\cap NP\neq \varnothing$</li><li>$SAT\in NPC$，且$SAT\in NP-hard$，故$SAT\in NPC$</li><li>$\forall L,\ if\ L\propto SAT,\ then\ L\in NP-hard\ and\ L\in NP-Complete\ and\ L \in NP$，故$NPC=NP-hard\cap NP$</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220728202119301.png" alt="P、NP、NP-Complete、NP-Hard问题之间的关系。"></p><p>那么最后，我们还有一个问题，就是随着我们发现越来越多的算法，P类问题变得越来越大，那么有一天，P类问题会不会变得和NP类问题一样大？即会不会有一天，我们为所有的NP问题找到了确定性的多项式时间算法呢？用数学语言表示，$P=NP$还是$P\neq NP$？这个问题就是著名的$P-NP$问题</p><p>如果$P=NP$，那么就说明当前所有指数时间的算法都是存在多项式时间的解法的，只不过我们还没有发现它。</p><p>$P=NP$会带来很大的影响。例如，目前绝大多数的加密算法经过精心的设计，使得破解加密的算法的时间复杂度是次数非常夸张的多项式时间，例如$\mathcal{O}(1000000^n)$，这样，我们加密后的密码是256位的，那么破解密码需要的计算时间为$\mathcal{O}(1000000^{256})$，这个让计算机一直计算完一个人的一生也算不到，因此就不可能破解出来我们的密码。</p><p>可是如果$P=NP$，那么就意味着其实存在多项式时间的算法来破解密码，只不过我们现在还没有找到。</p><p>所以说，如果$P=NP$，那么对于所有的算法来说，就有：</p><p align="center"><i>We are not inventing it, we are discovering it.</i></p><h2 id="5-后记"><a href="#5-后记" class="headerlink" title="5. 后记"></a>5. 后记</h2><h3 id="A-NP-Complete问题树"><a href="#A-NP-Complete问题树" class="headerlink" title="A. NP-Complete问题树"></a>A. NP-Complete问题树</h3><p>我们前面说，规约$\propto$可以传递问题的NPC、NPH等性质，所以基于$SAT$这个基问题，人们不断地将一些问题归约到了SAT问题上去，从而我们就为NP完全问题构建出来了一个NP完全问题树。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220728203736855.png" alt="NP-Complete Problems Tree"></p><h3 id="B-P-NP问题的研究进展"><a href="#B-P-NP问题的研究进展" class="headerlink" title="B. P-NP问题的研究进展"></a>B. P-NP问题的研究进展</h3><p>最后，目前关于$P=NP$问题的研究的进展，最大的一个就是著名的Cook定理，Cook定理说的是个什么事呢？</p><p>Cook定理是说：$P=NP\Leftrightarrow SAT\in P$</p><p>即如果我们能够为SAT问题找到一个多项式时间的解，那么$P=NP$。因此，基于Cook定理，现在大家在做的事情就是想办法证明$SAT\in P$</p><p>但是由于直接为$SAT$问题找到多项式时间的解实在是太难了，所以人们就利用上面的NPC问题树，只要解决了这个树中的任何一个问题$L$，那么由于规约的定义中规约时进行变换花费的时间也必须是多项式时间的，因此我们再花费多项式的时间将其解法归约到$SAT$问题山去，那么我们就完成了$N-NP$问题的证明。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NP </tag>
            
            <tag> NP Hard </tag>
            
            <tag> NP Complete </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paper阅读笔记 1: ImageNet Classification with Deep Convolutional Neural Networks</title>
      <link href="/2022/07/26/paper-yue-du-bi-ji-1-imagenet-classification-with-deep-convolutional-neural-networks/"/>
      <url>/2022/07/26/paper-yue-du-bi-ji-1-imagenet-classification-with-deep-convolutional-neural-networks/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220725205629608.png" alt="NIPS 2012: ImageNet Classification with Deep Convolutional Neural Networks"></p><p>看这篇文章的阅读笔记前，建议先去看一下这篇阅读笔记的前言：<a href="./Paper阅读笔记-1-ImageNet-Classification-with-Deep-Convolutional-Neural-Networks（前言）.md">前言</a></p><h2 id="0-评价"><a href="#0-评价" class="headerlink" title="0. 评价"></a>0. 评价</h2><p>我对这篇文章的评价如下：</p><ul><li><p><strong>这篇文章首先反应了当时的时代背景</strong></p><blockquote><p>现在看来，这个已经是上古时期的文章了。而在上古时期（2012-2016），网络如果泛化性能上不去，就会认为是模型overfit了小的训练集，因为模型学习能力太强，所以学到了小数据集的bias。然而其实在今天，我们知道模型的泛化能力差并不一定是overfit了小数据集，完全有可能是因为模型optimization做的不好，也就是进行了optimization，但又没有完全进行。更形象的说，你还没有达到一个比较好的Local Minima，就去和容易optimize的模型的好的Local Minima去比较。</p><p>那么，意识到泛化性能差可能不是由于overfit而是由于优化存在问题这件事是在<strong>2016年的ResNet中发现的</strong>，ResNet文章中提出了做了一个思想实验，<code>Identical Mapping</code>，从而说明深的模型的性能下界至少是浅的模型的性能（放心吧，ResNet未来一定会写笔记的）。因此在2012-2016年间，大家在做的事情的可以分成三个：</p><ul><li>就是寻找能够使得泛化性能更好的方法，包括引入正则（Batch Norm）、对梯度下降下手……</li><li>提出新的，准确率更佳的模型，例如：GoogLeNet、VGGNet等等；</li><li>把深度学习，或者说CNN当成工具去解决不同领域的问题，就类似于CNN是一个Hammer，在不同的领域去找钉子砸</li></ul><p>虽然说很多文章的模型得到的了比较好的效果，但是他们并没有意识到它们的方法其实是提升了优化的效果，还是认为他们减轻了overfit小数据集。</p></blockquote></li><li><p>其次，这篇文章开启了未来一段时间内的研究</p></li></ul><p>而具体的，这篇文章的贡献有：</p><ul><li><p><strong>使用了<code>ReLu</code>激活函数，大大加速了模型的训练</strong></p><blockquote><p>这篇文章发表前，有很多的模型性能也提不上去，大家就会说是模型的Overfitting问题很严重，但其实根本原因还是模型没有优化好，而先前的模型没有优化好的一个重要原因就是使用tanh、sigmoid这类激活函数激活函数太复杂了，优化太慢、太复杂</p></blockquote></li><li><p><strong>文章使用到的数据增强方法，成为后来数据增强的标准化方法</strong></p><blockquote><p>文章把原始输入图像截取出$224\times224$的Patch，这一尺寸和方法成为后来诸多方法沿用的尺寸</p></blockquote></li><li><p>文章在测试阶段使用的数据增强成为后来测试方法的标准。</p><blockquote><p>文章把一个测试图像，左上角、右上角、左下角、右下角和中心截取出来5个Patch进行Voting，这一方法成为后来方法测试的标注。</p></blockquote></li></ul><p>下面就让我们一起来解开这篇论文的庐山真面目。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220725210417633.png" alt="文章阅读记录"></p><h2 id="1-动机"><a href="#1-动机" class="headerlink" title="1. 动机"></a>1. 动机</h2><p>按照我的习惯，解析一篇论文时一定要弄清楚论文的动机是什么？弄清楚作者为什么要这么做，目的是什么，以及解决了一个什么样的问题？只有了解清楚了这一过程，才有助于引导自己形成类似的思维模式，从而顺着这一思路想出自己的改进点，而不仅仅只是说会实现这个网络了，能跑通代码就完事。技术只是外功，思想与理念才是内功。</p><h3 id="动机1：CNN容量更大、学习能力更强"><a href="#动机1：CNN容量更大、学习能力更强" class="headerlink" title="动机1：CNN容量更大、学习能力更强"></a>动机1：CNN容量更大、学习能力更强</h3><p>在论文的介绍部分作者提到，目前进行物体识别的方法在根本上都使用了机器学习的方法。而为了提高模型的性能，人们收集了大量的数据集，早期的数据集中标记的数据量只有上千、上万张图像，这个体量的数据集对于一些简单的任务来说已经足够了，例如MNIST手写数字识别问题。但是，<strong>现实中的物体却有非常大的多样性（Diversity），因此学习如何识别现实中的物体就需要更大的训练数据。</strong></p><p>所以就有了ImageNet这样大的数据集、在有了大的数据量之后，现在问题就是模型有没有能力去学习这么大的数据集。因此，一个真正实用的模型必须要有要拥有很多的容量来学习。而卷积神经网络(CNN)就是一类拥有强大学习能力的模型。CNN的容量能够通过其深度与广度进行控制。</p><h3 id="动机2：GPU的硬件支持"><a href="#动机2：GPU的硬件支持" class="headerlink" title="动机2：GPU的硬件支持"></a>动机2：GPU的硬件支持</h3><p>文章说了很多CNN的很多很多非常诱人的性质，包括但不限于学习容量大、性能高。但是训练一个神经网络并且把它们放到大规模数据集上进行验证的代价依旧是非常高昂的。因此，文章的第二个动机就是，在2011年前后，Nividia推出的GPU具有高算力，并且支持用户编程调用GPU去进行计算。而在2011年，已经能够在GPU上运行的、高度优化的2D卷积的实现，因此为训练大规模的CNN提供了动力。所以使得在ImageNet上去训练一个大型的CNN成为了可能。</p><p>总结一下，这两个动机，一个是说CNN这个东西好，另外一个是说CNN这个东西用GPU可以训练出来。所以自然而然，这篇文章要用CNN去进行物体识别。</p><h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h2><p>既然前面在动机上说了ImageNet有足够多的样本，支持我们学习出来强大的模型，而CNN又有足够的容量去从ImageNet中学习到表示（Representation），GPU又为CNN的训练提供了支持。因此，自然而然，<strong>这篇文章的思路就是用GPU在ImageNet上训练一个CNN</strong>。</p><p>所以，这篇文章的思路其实非常简单，精彩之处还要看后面方法部分的几个创新。</p><h2 id="3-技术手段（方法）"><a href="#3-技术手段（方法）" class="headerlink" title="3. 技术手段（方法）"></a>3. 技术手段（方法）</h2><p>相比于方法，其实我更愿意称文章的这一部分为技术手段，因为正如我在前面所说的：</p><blockquote><p>按照我的习惯，解析一篇论文时一定要弄清楚论文的动机是什么？弄清楚作者为什么要这么做，目的是什么，以及解决了一个什么样的问题？只有了解清楚了这一过程，才有助于引导自己形成类似的思维模式，从而顺着这一思路想出自己的改进点，而不仅仅只是说会实现这个网络了，能跑通代码就完事。技术只是外功，思想与理念才是内功。</p></blockquote><p>读一篇文章最重要的就是了解其思想，明白其思路，而技术技巧只不过是其思想的承载罢了。所以下面就讲解这篇文章的几个技术的要点。</p><h3 id="A-ReLU-Nonlinearity"><a href="#A-ReLU-Nonlinearity" class="headerlink" title="A. ReLU Nonlinearity"></a>A. ReLU Nonlinearity</h3><p>文章在技术上的第一个创新就是使用了<code>Rectified Linear Units (ReLUs)</code>来作为激活层的激活函数。因为之前的文章，往往都是使用<code>Sigmoid</code>、<code>tanh</code>这样的激活函数。而<code>Sigmoid</code>和<code>tanh</code>这样的激活函数会造成<code>梯度消失（Vanishing Gradient)</code>和<code>梯度爆炸（Gradient Explosion）</code>这样的问题。</p><blockquote><p><code>梯度消失（Vanishing Gradient)</code>：反向传播的时候，上一层的梯度不为0，但是经过这一层之后梯度就变成0了。这是因为这一层的参数绝大多数都为0，导致的局部导数为0。这个问题对于<code>Sigmoid</code>和<code>tanh</code>这样在边缘饱和的激活函数来说非常常见。</p><p><code>`梯度爆炸（Gradient Explosion）</code>：反向传播的时候，上一层的梯度是一个合理的数（一般模在1左右），但是经过这一层之后梯度就变成几百几千了，很快就会让模型里的参数变成NaN。</p></blockquote><p>这两个激活函数除了会对梯度造成影响外，还会大量的计算$e^x$这样的取指数操作，会消耗大量的计算资源。因此，传统的网络中大量的使用<code>Sigmoid</code>和<code>tanh</code>这样的函数，一个是梯度无法更新，造成难以优化，另一个是计算量太大，假设对梯度没有影响，优化花费时间也要很久。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220726143324026.png" alt="三种激活函数"></p><p>因此就换成了<code>ReLu</code>激活函数，<code>ReLu</code>的表达式如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/f8dd-kkmphps7572766.png" alt="ReLu激活函数的表达式"></p><p>其梯度要么为0，要么为1，计算只需要一个简单的比较运算即可。因此满足了计算量小、梯度维持在合理的区间内的这一个要求。</p><p>未来说明<code>ReLu</code>的高效性，作者把用了一个四层的网络，网络中的激活函数分别使用<code>Sigmoid</code>和<code>ReLu</code>进行了两次实验，得到的实验结果如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220726143831843.png" alt="ReLu性能的实验图"></p><blockquote><p>Figure 1: A four-layer convolutional neural network with ReLUs (solid line) reaches a 25% training error rate on CIFAR-10 six times faster than an equivalent network with tanh neurons(dashed line). The learning rates for each network were chosen independently to make training as fast as possible. No regularization of any kind was employed. The magnitude of the effect demonstrated here varies with network architecture, but networks with ReLUs consistently learn several times faster than equivalents with saturating neurons.</p></blockquote><p>即同样是达到25%的错误率，使用<code>ReLu</code>的模型比使用<code>Sigmoid</code>的模型速度快了6倍。而且不管怎么为<code>Sigmoid</code>的模型调学习率，总是使用<code>ReLu</code>的模型速度更快。</p><p>因此这就说明了使用ReLu可以大大简化模型的训练。</p><h3 id="B-Training-on-Multiple-GPUs"><a href="#B-Training-on-Multiple-GPUs" class="headerlink" title="B. Training on Multiple GPUs"></a>B. Training on Multiple GPUs</h3><p>这个手段其实没啥好说的，主要就是写代码实现以下，原文这段主要就是介绍了一下实现的细节：</p><blockquote><p>A single GTX 580 GPU has only 3GB of memory, which limits the maximum size of the networks that can be trained on it. It turns out that 1.2 million training examples are enough to train networks which are too big to fifit on one GPU. Therefore we spread the net across two GPUs. Current GPUs are particularly well-suited to cross-GPU parallelization, as they are able to read from and write to one another’s memory directly, without going through host machine memory. The parallelization scheme that we employ essentially puts half of the kernels (or neurons) on each GPU, with one additional trick: the GPUs communicate only in certain layers. This means that, for example, the kernels of layer 3 take input from all kernel maps in layer 2. However, kernels in layer 4 take input only from those kernel maps in layer 3 which reside on the same GPU. Choosing the pattern of connectivity is a problem for cross-validation, but this allows us to precisely tune the amount of communication until it is an acceptable fraction of the amount of computation.</p></blockquote><p>现在<code>Pytorch</code>中已经有多卡训练的框架，我们直接调用即可。</p><h3 id="C-Local-Response-Normalization"><a href="#C-Local-Response-Normalization" class="headerlink" title="C. Local Response Normalization"></a>C. Local Response Normalization</h3><p>这篇文章的第三个创新点就是提出了一个新的网络层，称为Local Response Normalization（LRN）。这个层的原理就是观察到人类的大脑皮层中有这样一个现象：一个活跃的神经元会抑制周围的几个神经元。那么对于神经网络来说，神经元之间的连接是依靠参数矩阵实现的，所以就是就是大的经过激活函数激活后的激活会抑制局部其他的值。</p><p>所以操作起来就是在每一个神经元局部，比如3*3的小范围内，根据这个神经元的激活值去调整这九个激活值。调整的公式如下：    </p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220726144948815.png" alt="Local Response Normalization（LRN）的计算公式"></p><blockquote><p>Denoting by $a^i<em>{x,y}$, the activity of a neuron computed by applying kernel $i$ at position $(x, y)$ and then applying the ReLU nonlinearity, the response-normalized activity $b^i</em>{x,y}$ is given by the expression, where the sum runs over $n$ “adjacent” kernel maps at the same spatial position, and $N$ is the total number of kernels in the layer.</p></blockquote><p>不过其实现在看，LRN这个东西其实没啥用，这篇文章的几个技术里用处最大的就是<code>ReLU</code>和模型结构。</p><h3 id="D-Overlapping-Pooling"><a href="#D-Overlapping-Pooling" class="headerlink" title="D. Overlapping Pooling"></a>D. Overlapping Pooling</h3><p>这段是说，CNN中的池化层可以帮助网络来总结（Summarize）同一个卷积核计算得到的<code>activation map</code>中相邻的几个激活值。传统上的池化，池化窗口之间是没有重叠的。更加准确的说，假设一个池化层是$z\times z$大小的，每次水平或者竖直移动$s$个像素。如果$s=z$的话那么就是传统的池化，但是如果$s&lt;z$的话就是这里说的重叠池化（Overlapping Pooling）。这篇文章里取$s=2,z=3$。</p><p>在今天来说，所谓Overlapping Pooling其实都是调API的时候指定一下<code>stride</code>就行。</p><h3 id="E-Overall-Architecture"><a href="#E-Overall-Architecture" class="headerlink" title="E. Overall Architecture"></a>E. Overall Architecture</h3><p>接下来就是模型整体的结构了。网络包含八个含有可训练参数的层，前五层是卷积层，后三个是全连接层。最后一个全连接层的输出是1000维的向量。这个向量而后被softmax吃进去，计算得到在1000个类别标签上的分布。最后预测输入图像属于哪个类就是取最后经过逻辑回归后得到的最大的那个值属于的类。</p><p>因为这篇文章的网络拆分到了两个GPU上，所以文章还对怎么拆分的进行了一下说明：</p><ul><li>第三四五层的卷积层都只连接到了相同GPU上的前一层的输出，而第三层卷积层除了接受自己这个GPU上的输出以外，还连接了另外一块GPU上的输出。</li><li>LRN只在第一和第二层后面接着，第三四五层中间没有池化或者LRN</li><li>池化层在所有层后都接着</li></ul><p>网络中间每一层具体的参数为：</p><ul><li>第一个卷积层对224*224*3的输入图像进行卷积,一共有96个11*11*3的卷积核，以4为步长进行滑动。他这里是把96个activation map放到两个GPU上去了，一个GPU上有48个激活层。</li><li>第二个卷积层输入第一个卷积层池化和LRN之后activation map，第二层一共有256个5*5*48大小的卷积核</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220726145711879.png" alt="网络结构"></p><blockquote><p>Figure 2: An illustration of the architecture of our CNN, explicitly showing the delineation of responsibilities between the two GPUs. One GPU runs the layer-parts at the top of the figure while the other runs the layer-parts at the bottom. The GPUs communicate only at certain layers. The network’s input is 150,528-dimensional, and the number of neurons in the network’s remaining layers is given by 253,440–186,624–64,896–64,896–43,264–4096–4096–1000.</p></blockquote><h2 id="4-训练细节"><a href="#4-训练细节" class="headerlink" title="4. 训练细节"></a>4. 训练细节</h2><p>其实从我自己训练模型的经验来说，想要训练出来一个有用的模型，训练的过程中是需要很多技巧的。所以作为深度学习开山鼻祖性质的第一篇文章,其中的训练细节还是需要讲讲的。</p><h3 id="A-数据增强"><a href="#A-数据增强" class="headerlink" title="A. 数据增强"></a>A. 数据增强</h3><p>数据增强已经被认为是非常有效的增强模型性能的方法，目前有不同的观点解释，一种观点认为我们对数据进行增强的时候人为引入了噪声，因此经过学习之后模型就可以分辨出噪声，因而提升了性能；另外一种观点认为数据增强了之后，图像会蕴含更多的模式，采样得到的图像的分布越接近真实的分布会模型能够学习到更多的特征，因此性能更加鲁棒。</p><p>但是，前面提到过本文提出的时代下，模型性能不好就认为是模型过于强大，过拟合了数据集，但我们现在其实知道是因为优化做的不好。所以本文的作者认为即便是ImageNet这么大的数据集，还是会被AlexNet给过拟合，所以需要进行数据增强。所以原文中才会把<code>数据增强</code>这一节放到<code>减缓过拟合</code>这一章下。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220727110938004.png" alt="数据增强被放到减缓过拟合下"></p><h4 id="平移和翻转（Translation-amp-Flipping）"><a href="#平移和翻转（Translation-amp-Flipping）" class="headerlink" title="平移和翻转（Translation &amp; Flipping）"></a>平移和翻转（Translation &amp; Flipping）</h4><p>AlexNet使用的第一种数据增强方式是对图像进行平移和水平翻转。</p><p>在训练阶段，首先把原始输入的$256\times256$的图像随机截取成$224\times224$大小的Patch。然后对截取到了Patch进行随机翻转。原文中说这样干能够让可用的数据扩充到2048倍，但我真没搞懂这个2048怎么算的。</p><blockquote><p>The first form of data augmentation consists of generating image translations and horizontal reflections. We do this by extracting random 224 × 224 patches (and their horizontal reflections) from the 256×256 images and training our network on these extracted patches. This increases the size of our training set by a factor of 2048, though the resulting training examples are, of course, highly interdependent</p></blockquote><p>而在测试阶段，也会进行数据增强，不过此时的意义可能更多的在于集成方法。测试时，一张图像会选取四个角落和中心的五个Patch，再进行水平翻转之后得到10张图像。最后这十张图像经过softmax得到十个概率向量，最终分类的结果是这是个概率向量平均之后取argmax的结果。</p><h4 id="颜色调整（Color-Jitting）"><a href="#颜色调整（Color-Jitting）" class="headerlink" title="颜色调整（Color Jitting）"></a>颜色调整（Color Jitting）</h4><p>第二种数据增强的方式就是调整训练图像的RGB三个通道的强度，具体来说就是先对ImageNet中的平均图像进行PCA，得到几个主成分$\lambda_i$和对应的向量$p_i$。接下来从高斯分布中抽样得到几个参数$\alpha_i$，按照下式组合起来之后，加到训练图像上去</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220727115241909.png" alt="颜色调整"></p><h3 id="B-Dropout"><a href="#B-Dropout" class="headerlink" title="B. Dropout"></a>B. Dropout</h3><p>文章中训练时候使用的第二个技术就是<code>Dropout</code>。<code>dropout</code>主要用在测试阶段，在前向传播的时候，会随机选择$p$的神经元（注意$p&lt;1$），让他们的值变成0。这样的话这些神经元不会参与到运算，并且也不会进行梯度的反向传播。</p><p>这样做的好处就是会打断神经元的联合适宜性，使得每一个神经元都会学习到独立的、更加强大的特征。不过也有的人解释<code>dropout</code>之后每次都是不同的网络，所有<code>dropout</code>其实是暗中进行了模型集成。</p><p>此外，作者认为在测试阶段，由于这个时候我们是使用了所有的神经元，所以每一层的输出都要乘以$0.5$，因为这样这样做是对所有可能的子网进行一个平均。</p><h3 id="C-超参数设置"><a href="#C-超参数设置" class="headerlink" title="C. 超参数设置"></a>C. 超参数设置</h3><p>文章用的<code>SGD优化器</code>，动量（momentum）取$0.9$，动量衰减（<code>weight_decay</code>）取$0.0005，5e-4$</p><p>所有层的学习率都是相同的，并且在训练的过程中会调整。如果模型在当前学习阶段停止了学习，即错误率不在下降，那么学习率就会除以$10$。初始学习率设为$0.01$。在停止训练前学习率会减少三次。文章中使用ImageNet训练，用120万张图像训练了大概90个<code>epoch</code>。</p><p>此外，网络的网络参数的初始化是从一个$0$为均值，$0.01$为方差的标准正态分布中采样得到的。</p><p>我自己的经验就是，对于大型的网络，学习率一开始一定要设置的大一些，不然优化速度慢不说，优化最终达到的性能还差，可能是陷在了local minima）。</p><h2 id="5-实验结果"><a href="#5-实验结果" class="headerlink" title="5. 实验结果"></a>5. 实验结果</h2><blockquote><p>是骡子是马，拉出来溜溜</p></blockquote><h3 id="A-主实验"><a href="#A-主实验" class="headerlink" title="A. 主实验"></a>A. 主实验</h3><p>主实验其实就是ImageNet 2012挑战赛，因此，主实验的报告就是AlexNet在ImageNet 2012挑战赛上的结果。</p><p>可以看到，AlexNet基本上把SIFT特征+Fisher Vectors、Spares coding这类传统方法按在地上摩擦。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220727224851785.png" alt="主实验报告"></p><h3 id="B-消融实验"><a href="#B-消融实验" class="headerlink" title="B. 消融实验"></a>B. 消融实验</h3><p>因为ILSVRC 2012的测试集不公开，因此文章除了主实验以外的性能，都是利用验证集合测试出来的。</p><p>文章的消融实验只有一个，就是研究了网络层数对性能的影响，如下表。带*的是<strong>使用</strong>了ImageNet 2011秋季的数据与训练得到的性能</p><p>最终得出的结论就是：</p><ul><li><strong>随着网络层数的增加，模型的性能会有所提升</strong></li><li><strong>预训练能够帮助模型得到更好的性能</strong></li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220728135023393.png" alt="消融实验：网络层数对性能的影响"></p><h3 id="C-定性分析"><a href="#C-定性分析" class="headerlink" title="C. 定性分析"></a>C. 定性分析</h3><p>最后，文章对模型进行了一些可视化，进行了定性分析。</p><h4 id="卷积核定性分析"><a href="#卷积核定性分析" class="headerlink" title="卷积核定性分析"></a>卷积核定性分析</h4><p>文章对两个GPU中第一层的$11\times11\times3$的卷积核进行了可视化，前三行是第一个GPU上的卷积核，后三行是第二个GPU上的性能。</p><p>可以看到，模型学习到了很多种不同频率（frequency）选择性、方向选择性（orientation-selective）的卷积核。方向选择性还能理解，但是文章为啥会说频率选择性，其实是因为卷积神经网络中的卷积核除了特征提取的理解以外，还有一种滤波器的理解。这个就涉及到图像的频域分析了。</p><p>需要注意的是，第一个GPU上的卷积核总是会学习到和颜色无关的方向信息，而第二个GPU 上的卷积核总是会学习到了和颜色相关的特征。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220728140420771.png" alt="两个卷积核提取的特征各不相同"></p><p>文章中还报告，这个现象是通用（general）的，即多次训练每次都能够观察到这个现象。</p><h4 id="推断结果定性分析"><a href="#推断结果定性分析" class="headerlink" title="推断结果定性分析"></a>推断结果定性分析</h4><p>文章接下来做的定性分析，就是选取了一些图片，让模型去推断，然后对模型的推断结果进行了定性分析。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220728141132276.png" alt="推断结果定性分析"></p><p>这个图分为左右两个部分，分别表示两种不同的分析。</p><ul><li>首先对于左边的图<ul><li>左边的图像选取自<code>ILSVRC 2010</code>的测试图像，因为这一年的测试集是公开了的。<code>Ground Truth</code>被写在了下面。如果模型的<code>Top5</code>预测中存在<code>Ground Truth</code>，那么就会用红色的柱子表示，否则用蓝色柱子表示</li><li>通过队对左侧的图像的分析，能够观察到：<ol><li><strong>模型对平移具有鲁棒性</strong>，即便是偏离图像中心的物体依然能够被网络识别出来</li><li><strong>绝大多数<code>top5</code>的预测<code>label</code>都是合理的</strong>，例如猎豹的前五个预测都是猫科动物</li><li><strong>一些推断错误的图像则是由于图像本身具有很大的模糊性</strong>，例如最后两张的狗和樱桃、马达加斯加狐猴</li></ol></li></ul></li><li>其次，对于右边的图<ul><li>右侧第一列图像也是从<code>ILSVRC 2010</code>测试集中获得的，因为模型对一张图像会推断得到一个概率向量。而经过softmax之前的、最后一个隐藏层输出的向量称为logits。因此文章用左侧第一列的图像的logit作为key，从<code>ILSVRC 2010</code>测试集中检索得到的。具体的检索方式就是，KNN选取和左侧第一列的图像的logit的欧式距离最接近的向量所对应的图片。</li><li>结果表明：<ol><li>模型的确从数据中学习到了有用的特征，可以把类似的图像映射为同一类上去</li></ol></li></ul></li></ul><h2 id="6-总结与讨论（Discussion）"><a href="#6-总结与讨论（Discussion）" class="headerlink" title="6. 总结与讨论（Discussion）"></a>6. 总结与讨论（Discussion）</h2><p>文章的最后一部分，自然就是总结了一下文章的贡献，然后挑选了一些不太重要的问题说了一下。</p><blockquote><p>Our results show that a large, deep convolutional neural network is capable of achieving record-breaking results on a highly challenging dataset using purely supervised learning. It is notable that our network’s performance degrades if a single convolutional layer is removed. For example,removing any of the middle layers results in a loss of about 2% for the top-1 performance of the network. So the depth really is important for achieving our results.</p><p>To simplify our experiments, we did not use any unsupervised pre-training even though we expect that it will help, especially if we obtain enough computational power to significantly increase the size of the network without obtaining a corresponding increase in the amount of labeled data. Thus far, our results have improved as we have made our network larger and trained it longer but we still have many orders of magnitude to go in order to match the infero-temporal pathway of the human visual system. Ultimately we would like to use very large and deep convolutional nets on video sequences where the temporal structure provides very helpful information that is missing or far less obvious in static images.</p></blockquote><p>主要意思就是说：</p><ul><li>没有使用任何无监督的预训练，尽管这样做绝对会提升我们的性能。尤其是现在有了更大的算力和数据集。甚至只要我们愿意等的更久一些，模型的性能都会继续有所提升</li><li>本文通过使用更大，更深的网络实现了很强的性能。但是如果继续引入人类视觉系统的中的时间信息的话，那么模型性能可能会有更强的提升。因此，作者最后提出来，接下来有希望的方向就是把更深的卷积网络运用到视频领域中去，因为对于视频来说，视频可以提供很多静态图像中无法提供的时间信息，未来的模型中需要对时间进行建模。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Paper阅读笔记 </category>
          
          <category> Image Classification </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AlexNet </tag>
            
            <tag> NIPS </tag>
            
            <tag> NIPS 2012 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paper阅读笔记-1-ImageNet-Classification-with-Deep-Convolutional-Neural-Networks（前言）</title>
      <link href="/2022/07/25/paper-yue-du-bi-ji-1-imagenet-classification-with-deep-convolutional-neural-networks-qian-yan/"/>
      <url>/2022/07/25/paper-yue-du-bi-ji-1-imagenet-classification-with-deep-convolutional-neural-networks-qian-yan/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220725205629608.png" alt="NIPS 2012: ImageNet Classification with Deep Convolutional Neural Networks"></p><h2 id="1-前言-Before-Reading"><a href="#1-前言-Before-Reading" class="headerlink" title="1. 前言 (Before Reading)"></a>1. 前言 (Before Reading)</h2><h3 id="1-社会影响"><a href="#1-社会影响" class="headerlink" title="1. 社会影响"></a>1. 社会影响</h3><p><strong>深度学习在国内大概是2016年开始广为人知的</strong>。因为在2016年3月，Google公司的<code>AlphaGo</code>和与代表人类的李世石在围棋上进行对决，并最终以 4:1 的成绩战胜了李世石。而在此之前，作为人类智力的巅峰、最高难度游戏的围棋一直是由人类棋手统治的，从未有过计算机程序能够获胜。</p><p>我清楚的记得那个时候我还在上初中，当时我手机上的腾讯新闻头版头条、实时报道两人的对局。在赛后央视新闻也在报道这一场比赛，足以见当时社会之轰动。<strong>其实不仅在国内，AlphaGo的获胜也在国外掀起了轩然大波</strong>。国内国外各种媒体开始报道人工智能、深度学习，一时间AI甚嚣尘上。各种寂静、风投蜂拥而来，不少研究院跑步入场，开启了此后AI研究的又一高潮。</p><p><strong>因此，深度学习在社会上广为人知是从2016年开始的，但事实上，深度学习在此之前早已经引爆了学术圈，而让深度学习引爆学术圈的，正是今天的这篇由深度学习三巨头之一的<code>Geoffrey E. Hinton</code>所领衔的、其博士生<code>Alex Krizhevsky</code>所做的：<code>ImageNet Classification with Deep Convolutional Neural Networks</code>。</strong></p><h3 id="2-学术影响"><a href="#2-学术影响" class="headerlink" title="2. 学术影响"></a>2. 学术影响</h3><blockquote><p>除了对社会的影响以外，这篇文章也对人工智能这个领域和深度学习这个子领域有非常深远的影响。</p></blockquote><p>人工智能的研究其实开始的非常早，1956年麦卡锡等人发起的<code>达特茅斯会议</code>的主要议题就是人工智能。这场会议持续了一个月，基本上以大范围的集思广益为主，大家一起讨论，寻求<code>什么是人工智能</code>这一问题的答案，或者说讨论到底<code>什么是（机器）学习</code>/<code>学习的本质是什么</code>（关于这一问题的答案，CMU的Tom Mitchell给出了一个形式化的定义，即用数学的符号语言来定义学习，不过这并不是这篇文章关注的主题，所以我就不展开了，以后写专门的博客再详细说）。总之，这场会议催生了后来人所共知的人工智能革命。</p><p>而后，人工智能又发展出了不同的流派（1960年代-2000年代），例如：<code>联结主义（Connectionism）</code>、<code>符号主义（symbolicism）</code>、<code>行为主义（actionism）</code>。其实这三种流派之间最核心的差异就是对于<code>智慧</code>/<code>智能</code>的定义/理解不同，而后每个流派又在各自的定义和理解上提出的一系列方法加在一起，最终构成了三种不同的流派。关于这段历史也不是这篇博客关注的重点，所以也就不详细展开了，不过关于这段历史，如果想要了解的话我强烈推荐孟德宇老师的机器学习课，我就是在这里学习到。</p><p>而作为人工智能中最后出现的流派，<code>联结主义（Connectionism）</code>在1980年代才开始出现（此时只是星星之火）。深度学习的三巨头之一的<code>Geoffrey E. Hinton</code>（没错，就是本文的通讯作者<code>Geoffrey E. Hinton</code>）在1980年提出了现在深度学习的基石：反向传播算法（Back Propagation，BP）。而后慢慢的，<strong>联结主义开始发展起来，直到1990年代，连接主义才成为机器学习/人工智能的主要流派</strong>。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/b812c8fcc3cec3fd93e3c70ad188d43f869427eb" alt="反向传播算法（Back Propagation，BP）"></p><p>那么问题来了，为什么我要花费这么大的笔墨说联结主义呢（到这里还没开始文章，但是已经写了1300多字了）？<strong>其实是因为我们现在所说的深度学习，其实就是连接主义。我们现在深度学习方法的框架、理论和一些基础技术都和联结主义的方法、框架、理论、基础技术一模一样。或者说，现代的深度学习就起源于联结主义，只不过是联结主义换了个名字。</strong></p><p>那这就有个问题了，为什么我们要给连接主义换个名字呢？继续叫连接主义不好么？其实是因为<code>深度学习（Deep Learning）</code>这个名字比<code>联结主义（Connectionism）</code>更Fancy啦 \^_\^。哈哈，开个玩笑，<strong>其实主要的原因还是因为机器学习研究，或者说联结主义的研究在2000年代初期遇冷</strong>。那个时候如果说自己是研究生物的、研究医药的，那么别人一听就会说哇，好专业，<code>21世纪是生物的世纪</code>。而如果说自己是研究联结主义的，那么别人就会觉得你是诈骗的，不学无术，出去找人资助你研究都找不到。而遇冷的原因有很多，一个比较大的原因就是因为2000年美国股市的互联网泡沫，大家都没钱了，都想着维持生计呢，就没人想着研究人工智能这种面向未来的东西。<strong>更重要的是，在2000年代初期，<code>SVM</code>这类人工智能的新方法火了，在一系列任务上超过了90年代联结主义方法的性能，因此，大部分研究者又开始去研究<code>SVM</code>了，而连接主义的研究就此遇冷。</strong></p><p>再后来，就到了2012年，也就是这一篇文章发表的时候。这一篇文章一经发表，就吊打了以<code>SVM</code>为代表的其他人工智能的方法：在2012年的<code>ImageNet Large-Sacle Vision Recognition Challenge</code>这个世界顶尖的挑战赛上，连接主义的方法（其实就是这篇文章的方法）狂虐第二名，性能远超第二名，错误率只有第二名的一半多。这一下就引爆了学术圈，很多研究者又重新开始研究联结主义。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220725225030441.png" alt="ImageNet Large-Sacle Vision Recognition Challenge（ImageNet/ILSVRC）的官网"></p><p>回到上面的问题，那就是为什么我们现在称联结主义为深度学习呢？其实是因为整个2000年代，连接主义基本都没大的发展，人们已经太久太久没有在联结主义上有大的突破。而在2009-2011年的时候，有一些坚持研究连接主义的文章开始用深度学习这个新的名词来称呼连接主义，而在2012年<code>ImageNet Classification with Deep Convolutional Neural Networks</code>这篇文章火了之后，新进入这一领域的研究员开始研究这个领域的时候，再看这个领域过去几年的文章的时候，看到称呼为深度学习，就也开始称呼深度学习，久而久之现在大家已经不说联结主义了，都是在说深度学习。<strong>但是我们知道，现在的深度学习就是当年的联结主义的一脉相传。</strong></p><p>话说回来，如果把深度学习的历史分成两半，<strong>一半是传统的深度学习（即联结主义）</strong>和<strong>另一半是现代的深度学习</strong>。那么这篇文章：<code>ImageNet Classification with Deep Convolutional Neural Networks</code>，就是其中的分界线。这篇文章承载了过去的旧历史，开启了现代的新历史，这篇文章的学术影响深渊、意义非凡。</p><p>这篇文章具有非常重大的意义，吹响了人工智能新时代的号角，因此我也希望把他作为我的Paper阅读笔记的第一篇文章加以记录。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220725210417633.png" alt="文章阅读记录"></p><h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2. 总结"></a>2. 总结</h2><p>现在是2022年，而深度学习领域的发展是日新月异的，2019年的文章在今天看来其实就已经是老文章了。因此，我们在一两年前的文章的时候，一定要把自己放在当时的研究背景之下，这样才能够体会到整个领域的发展。因此，今天我们重读这篇具有划时代意义的文章，一定要考虑当时的时代背景，在当时的时代背景下去思考这篇文章的意义。这也就是为什么我要花大量的笔墨去介绍旧时代的深度学习。</p>]]></content>
      
      
      <categories>
          
          <category> Paper阅读笔记 </category>
          
          <category> Image Classification </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AlexNet </tag>
            
            <tag> NIPS </tag>
            
            <tag> NIPS 2012 </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>心法</title>
      <link href="/2022/07/25/xin-fa/"/>
      <url>/2022/07/25/xin-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Money never lies.</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/背景.jpg" alt="资本永不眠"></p><h1 id="心法"><a href="#心法" class="headerlink" title="心法"></a>心法</h1><blockquote><p>实践是检验真理的唯一标准</p></blockquote><p>在我进行投资的时候，常常会有很多的感悟，但是往往都是在脑中一闪而过的。因此为了形成我自己的交易体系，我决定把我的这些感悟记录下来，并且付诸实践，以观后效。</p><h2 id="1-原理篇"><a href="#1-原理篇" class="headerlink" title="1. 原理篇"></a>1. 原理篇</h2><blockquote><p>原理篇顾名思义，记录了我对一些现象的理解。从现象中去感悟规律，而后将感悟到的规律付诸实践，以观其成效，正确规律的就加以保留，而错误的规律就加以改进。</p></blockquote><ol><li><strong>低于一百五十万的本金，不要做长线投资了，太慢太慢了，做短线。资金量大了，再去低位吸筹码，价值投资个几年。</strong>因为散户拿10万和大资金拿几百万做价值投资根本不是一回事。放三年翻三倍，散户的钱到了30万，而大资金的钱到了近千万。用样的时间，赚的钱差的太多太多了，根本不是公平的游戏。<strong>散户有散户的玩法，大资金有大资金的玩法，多大的胃吃多大的菜，什么样的体量玩什么样的玩法</strong>，看人下菜。</li><li><strong>小资金赚钱时候要看赚了多少钱，而不是赚了多少点</strong>。还是一个道理，对于散户和大资金来说，赚同样10个点，大资金完全盈利几十几百万，而散户盈利大多是几千，少数到几万，根本就不是一回事。<strong>快速翻倍才是散户的目的，保值的基础上稳定增值那是大资金的目的</strong>。</li><li><strong>散户跟着游资才能赚钱</strong>，大资金才是真正的价值投资，基金十有八九不是什么好东西，毕竟不是自己的钱，自己每个月领15万的高工资，拿别人的钱来投资，亏了也是别人的钱。烂的基金给别人接盘。</li><li><strong>人气所向，龙头所在，财富所往</strong>。</li><li><strong>连板容易出龙头</strong>，因为游资会接力。这就要求每天仔细观察每日的冲高涨停。</li><li><strong>游资也是人，所以要把自己当成游资，思考自己的成本、自救等等操作</strong></li><li><strong>涨幅已经比较高的股票，放量冲涨，第二天不是一字板就冲高跑路吧</strong>。因为会在涨幅很高的情况下，会买入的只有散户和游资（泛指大户、券商游资、私募），公募基金受限于会受限于基金的规矩不能买入。游资亏损的情况下要么冲高自救，要么割肉，很少或持币观望再拉第二波。<ul><li>2022年7月26日，南威软件观察。2022年7月27日回复，重大事项停牌</li><li>2022年7月26日，泉阳泉观察。2022年7月27日回复，泉阳泉高开后冲高跑路</li><li>2022年7月26日，双星新材观察（26日没有放量）。2022年7月27日回复，双星新材收大阳线，稍后需要观察一下今日早盘的活跃度</li><li>2022年7月26日，卓翼科技观察。2022年7月27日回复，跳空低开后走强涨停。稍后需要观察一下今日早盘的活跃度</li><li>2022年7月27日，双象股份观察。</li><li>2022年7月27日，怡球资源观察。明日准备冲高跑路</li></ul></li><li>T+1对每个人都是成立的，游资也不例外，所以游资买入当天亏损，第二天要么冲高自救，要么割肉，很少持币吸筹再拉第二波。而且再拉第二波的股票都是前期的龙头没有死，市场热点依旧时。</li><li>人气旺盛的股票，日内突然封板，可能是有游资打板，没有封住则会在短时间的内再次尝试封板，如果日内维持不跌，则在尾盘也可能冲高尝试封板。如果没有成功，则当日尾盘大概率回吐涨幅，次日转第七条处理。可能会<ul><li>在2022年7月26日、27日，海汽集团。</li></ul></li><li>拉萨家人被套，次日一般不会一字跌停，一般在早盘冲高出逃，割肉一般五六个点。</li><li>神奇两点半，交易量会突然放大，此时一些没封住板的会再次尝试封板，一些早市走强的股会冲高。</li><li>次新股、人气股和龙头股往往是游资之所在。<ul><li>2022年7月25日望变电器。</li></ul></li><li>高位股，连续阴跌几日，突然转强，跌转涨，乃至一度收复失地，则一日未来必涨，视后市而定第二日是否冲高跑路。<ul><li>2022年7月4日上海沿浦</li><li>2022年7月14日上海沿浦</li><li>2022年7月25日上海沿浦待观察，观察回复：并不精确成立，还有其他因素要看。7月28日回复：连涨三天</li></ul></li><li>高位股大跌破高位之后的连续阴跌，某短时间连续阴跌，某日大跌后次日大阳收复大跌失地，则开始转强势，未来涨势一定要配合筹码分布，利用阴跌阶段的量价分析，筹码若集中于阴跌处，则未来连阳。2022年7月18日皇庭国际。</li><li><strong>自己的决定，要坚决执行。看好的冲高跑路，一定要执行，不要再买入，即便后市走强，也不要再买入。因为后市走强往往是因为有新的资金进入，这是不可预料的。这个钱赚不到</strong></li><li><strong>如果早上9点十几分刚睡醒，坚决不要有操作，前一日有规划者坚决执行前一日的规划。</strong></li><li>看好一只股分两种，一种是炒作情绪的人气股，一种是有内在看涨逻辑的股票。<strong>对于有看涨逻辑的股票，设定预期目标后坚定持有</strong>。<ul><li>2022年7月25日买入信达地产，2022年7月26日卖飞</li></ul></li><li>资金就是子弹，T+1机制下，子弹打完了就要被动挨打了。散户的子弹少，打完了就要挨打了。而大资金的子弹几千万，两三层仓就可以随便打。所以不是非常看好散户交易时候</li><li>前期的龙头深跌一段时间后往往会有一段反抽，大概十几多点，前期会有两三天的信号，而后会有一波猛涨，如果遇到游资还可能会两、三连板。注意，交易量放大，没有封板，则次日冲高跑路。</li><li>前日有游资打板的，今天放量没涨停，则可能有游资接力，次日会拉涨停，注意确认次日早盘强势、活跃程度。早盘不强势直接冲高跑路，即便后市涨停也别买了因为你不知道什么会有游资进来打板<ul><li>2022年7月26日，泉峰汽车。7月28日回复：7月27日涨停，</li></ul></li><li><strong>前期放量涨停，突然缩量涨停，警惕警惕警惕</strong><ul><li>2022年7月26日，皇庭国际观察。2022年7月27日回复，今日皇庭国际涨停开，开市后开板，随后冲高跑路，午盘2点多再读走高。</li><li>2022年7月28日，秦川机床观察。</li></ul></li><li><strong>除了9号规则的次日冲高涨停外，早盘10点10分以前的确定强势和弱势股。</strong></li><li>主力吸货往往会大单买入，给散户造成抢筹的感觉。而主力出货则是通过大单拆小单的方式跑路，所以头一日大单净流入高涨，次日如果只有小单净流出，同时交易量放大或者相差不多，那么主力已经跑路了。如果小单净流出同时大单净流入，那么就是有游资在接力。</li><li>连班股某日巨量上影线，则为游资接力。之前没见过这个，需要在观察一下<ul><li>2022年7月27日，后市观察通润装备，赵老哥净买，但盘口上净超大单和净大单留出，净小单流入。</li></ul></li><li>天量买单封板，一定是多家配合封板<ul><li>2022年7月27日，杭萧钢构多家游资合力封板。</li></ul></li><li>早盘低开走高后市冲涨停的股，强势封板股绝大多数交易发生在涨停前，涨停后的交易只占全天交易的10%左右。因此，<strong>前期已经涨停的股早盘能否涨停的关键在于早盘能否承受住先前的游资抛盘的冲击</strong>。<strong>判断能否承受住的关键在于内盘外盘比，凡外盘始终大于内盘，则必为当日强势股</strong><ul><li>2022年7月27日，杭萧钢构早盘冲涨停。</li><li>2022年7月27日，恒大高新早盘冲涨停。</li><li>2022年7月27日，兰黛科技早盘冲涨停。</li></ul></li><li><strong>外盘持续大于内盘，则当日为强势股</strong>。日内外盘超过内盘，则日内弱转强。<strong>内盘外盘只能用于参考，不能用于下决定</strong><ul><li>2022年7月27日，科陆电子日内持续强势。</li><li>2022年7月27日，鑫铂股份日内持续强势。</li><li>2022年7月27日，禾盛新材日内持续强势。</li><li>2022年7月27日，乐惠国际日内持续强势。</li><li>2022年7月27日，鹿山新材日内弱转强。</li><li>2022年7月27日，卓翼科技日内弱转强。</li><li>2022年7月28日，君禾股份按照此指标买入，日内亏2个点</li><li>今天仔细反思了一下，应该是出现了幸存者偏差这样的东西，导致我今天早上买了君禾股份。也就是说我昨晚在复盘的时候，只看了涨的股票，而涨的股票必然是外盘大于内盘的。但是跌的股票也有外盘大于内盘的，所以<strong>外盘持续大于内盘只是强势股的必要条件，而非充分条件</strong></li></ul></li><li>封板期间，外盘正常情况下会慢慢增加，一秒十几手，但突然激增（一秒几千手以上），则表示有大资金在跑路，后市可能开板。若未开板，则<ul><li>2022年7月27日，嵘泰股份，两次开板前外盘持续增大，直到第三次封板。</li><li>2022年7月27日，钧达股份</li></ul></li><li>当日最终能否收大涨，以前一日的判断为主，若前一日判断冲涨，则当日的情况不纳入考虑，以前一日的判断为主。若前一日对次日是否涨停拿捏不定，则看当日的强势程度</li><li><strong>连板股存在溢出效应，即某只股连板几日，则会带动同板块内其他股涨，因为板块需要等待市场认可；一旦龙头开板，直接跑路。</strong>需要回测一下<ul><li>2022年7月28日，佛燃能源六连板块。2022年7月21日启动，至28日六连板。<ul><li>燃气板块2022年7月21日至2022年7月28日连涨，累计涨9。02个点</li><li>同板块南京公用2022年7月21日至7月26日连涨，累计涨6.92个点，7月27、28两日两连板。</li><li>同板块洪通燃气2022年7月21日至7月26日震荡，累计涨0.00个点，7月27涨停，28冲高跑路。</li><li>同板块成都燃气2022年7月21日至7月28日连涨，累计涨6.04个点。</li><li>同板块东方环宇2022年7月21日至7月26日震荡，累计跌1.21个点，7月27、28大涨。</li><li>同板块德龙汇能2022年7月21日到7月26日震荡，累计涨1.10个点，7月27涨停、28冲高跑路。</li><li>同板块胜利股份2022年7月21日到7月28日连涨，累计涨7.75个点。</li><li>同板块蓝天燃气2022年7月21日到7月26日震荡，累计涨0.54个点，7月27、28累计涨3.92个点。</li></ul></li><li>2022年7月28日，日上集团三连板，观察</li><li>2022年7月28日，风范股份三连板，观察<ul><li>特高压板块28日风范股份、积成电子、航天晨光涨停</li></ul></li><li>2022年7月28日，通润装备六连板，观察<ul><li>壳资源板块28日登云股份、东晶电子涨停</li></ul></li></ul></li><li><strong>前一日没有找到标的，第二日宁愿空仓也不要操作</strong></li><li>龙头和跟风品种之间存在套利机会：买入龙头不是因为胆子大，而是因为板块整体动能，龙头有相应溢价，但股价尚未反应时介入；买入跟风是因为龙头赚钱效应始祖，但是部分跟风品种处以低位，有时随龙头举发而具备上涨潜力</li><li><strong>掌握市场之心，胜利接踵而至，心被市场掌握，失败连绵不绝；买卖一刻淡定自如，亦是自身境界的提升</strong></li><li>控制回撤是避免系统性崩溃。绝大部分崩溃都有前兆，从赚钱和亏钱效应的演变就可以进行推断。</li><li>看看天气，如果感觉要下雨了，就早点回家，不要贪玩，天气好了再出来。</li><li>卖空涨停、卖空龙头不要可惜，赚自己改赚的钱即可。</li><li><strong>持筹或者持币时候，要让自己处于主动的一方</strong>。即如果持筹，在下跌过程中想想和自己一样的持筹者怎么想的，如果大家都想的再来一波反弹就走，那么最好走；如果想的解套后就走，那么最好尽早走。持币也是同理</li><li><p>从游资的角度思考问题，要考虑<strong>成交额</strong>对游资的影响。不活跃（不是成交量小）不利于出货，成交额太大不利于拉升。2亿多的成本，10-20多亿最好。相比于成交额太大的股，最好还是找成交额小的低价股。</p><ul><li>巨轮智能成交量太大了，第一波结束之后成交量30、40亿</li><li>浙江建投第二波的时候成交额只有10多亿，接近20亿</li></ul></li><li>游资打板会考虑题材的，如果和当下市场的题材比较接近的话，那么还是会很厉害的。</li><li>游资之间不存在谁救谁，谁帮谁接力，因为游资之间是相互搏杀的关系，你赚的钱可能就是别人亏的钱 </li><li>陈小群的观点，新规则出来后，市场不会再出现之前的A杀了，更流行的是反包再反包，因为现在太容易出现异动了，所以之前的龙头战法大部分都失效了。在之前看来像惠程科技这样天地板的股票，肯定是不好了，但是现在说不准。因为现在的异动太多，导致没有办法玩之前的A杀，之前的A杀龙头一个接一个。但是现在的异动，重点关注、停牌复核导致只能反包再反包。结果就是有的反包再反包进入一个平台之后，就会像上走，有的则是反包再反包之后就没了，比如恒大。</li><li><p>注意冰点，余哥：连续三天冰点，基本稳赚。</p><blockquote><p>所谓股票的冰点是一个口头语，就是股票交易很冷清的意思。判断的股票冰点的方法可以观察成交量，一般成交量低或连续处于低位，这说明市场很冷清没有人交易，也就是所谓的冰点。</p></blockquote></li><li><strong>赚大题材的钱更简单。如何把握主流：看盘面异动+自己判断，盘面说了算</strong>。比如机器人，一看就是小题材，<strong>大题材要看大的成交量和主流资金在哪，比如近期新能源那么好，像机器人肯定就是分支</strong>。<strong>分支只是做挖掘的赚钱方式，接力很难赚钱，除非第一天上车</strong>。</li><li>一般的股，出3000就会被砸，但是如果非常大的出货还承接住了，就表示有大资金有意愿要做下去。</li><li>不要和监管对着干，重点监控的就别做了。</li><li>有故事，而且好懂的题材走起来会很流畅，因为难懂的题材是需要知识储备的，例如最近的光伏，上游硅料，中游组件等等都是需要知识的，但是像汽车，一体化压铸这些就很好懂。</li><li>题材本质上都是资金推动，有资金看中了，那就是会不一样的。例如巨轮智能的陈小群。只要一起来，就会有跟风，只要股本身的故事能够吸引到人，比如100个人只要能够吸引到10个人，那么就可以起来。这这个就是分支起来的原因。所以要看准大资金在哪，而小分支速度快。</li><li>小作文的判断，如果不看小作文的话，还可以自己去发掘一下，但是看了小作文就知道谁进去了，就不知道该怎么操作。余哥一般是正好看到了小作文，就会稍微看几眼，但是不是特别仔细地看，如果走的特别好，就会去稍微锦上添花一下，但是如果一旦走的不行了，那就及时跑路。小作文最好的方式是跟随，而且还要看小作文是谁发的，有些人的小作文的成功率很高，比如轮回666</li><li>市场是在不断变化的，要根据市场的变化不断改变自己的模式。找到短时间内的模式和规律，没有无敌的方法，任何的方法都是需要不断修正的。</li><li>市场是存在短期风格的，例如最近都是低价股连板，或者最近都是高位股连创新高。类似于抖音上某段时间内某些舞蹈很火，那么就会有很多跟风的发布同样的舞蹈的。<strong>市场短期的风格也是一样的，所以要识别市场的短期风格</strong>。识别出来了，就要去做，识别不出来了，就尽量保本，度过当下的时间。例如2022年7月最近的风格就是高位股下跌一段时间后继续打板，以及反包在反包。</li><li><strong>游资买单只股一般都在4000万左右，所以如果看到涨停板几千万跑路，那么出掉就对了</strong></li><li>如同发工资一样，如果一家公司十个月发不出来工资了，那么你最好离远一点，而有一些股、一些板块也是这个道理。你知道某家公司、某些板块不行，那么你最好还是离远点，因为<strong>船大难掉头</strong>。某个板块，某家公司的转好，都不是一朝一夕的事情，从底部走出来，是需要一定时间的。因此，对于业绩不好，前景不好的股票，早早远离，不要想着你拿着它，他就会转好。</li></ol><h2 id="2-技法篇"><a href="#2-技法篇" class="headerlink" title="2. 技法篇"></a>2. 技法篇</h2><p>技法篇顾名思义，记录了我买卖时候的技法。</p><ul><li>使用分时图的区间统计来计算短时间内买卖量，以判断交易是否活跃</li></ul><h2 id="3-大盘篇"><a href="#3-大盘篇" class="headerlink" title="3. 大盘篇"></a>3. 大盘篇</h2><ol><li>午盘之后的消息对股市的影响，将会体现在<strong>富时A50指数</strong>上，因为<strong>富时A50指数</strong>在下午收盘了之后也可以交易，所以会有直接体现。例如：2022年7月29日下午的全面注册制，</li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
          <category> 个人情况 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paper阅读笔记 0: 初心</title>
      <link href="/2022/07/24/paper-yue-du-bi-ji-0-chu-xin/"/>
      <url>/2022/07/24/paper-yue-du-bi-ji-0-chu-xin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>读了这么多文章，总得写点什么。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220725151308937.png" alt="磕盐人的梦想"></p><h1 id="Paper阅读笔记-0-初心"><a href="#Paper阅读笔记-0-初心" class="headerlink" title="Paper阅读笔记 0: 初心"></a>Paper阅读笔记 0: 初心</h1><blockquote><p>既然选择了，那便要一直走下去。</p></blockquote><h2 id="1-我的科研之路"><a href="#1-我的科研之路" class="headerlink" title="1. 我的科研之路"></a>1. 我的科研之路</h2><p>我开始科研，是从20年的秋天开始的，至今已经快两年了。</p><p>非常幸运，在我刚开始科研的时候，就遇到了大牛胡老师。胡老师的工作非常精彩，而读他的文章极大的激发了我的兴趣，想要试试看看自己能不能复现胡老师的效果。也正是因为胡老师，我才坚定了未来我要研究的方向。然而非常惋惜的是，那个时候的我并不会科研，起初只是抱着了解、玩玩的心态才开始的科研。因此，我想恐怕胡老师没有认为过我是他的学生，但是<strong>启发之恩</strong>一直铭记在心。</p><p>后来，遇到了许学长，相比师兄，我刚想称呼他为学长。彼时的我，刚刚入门了科研，想要科研，但却迷失在科研下，不知道科研该怎么做。而对我想做的某一个方向，我也是刚刚入门，正在慢慢读着文章，却苦恼无法深入。幸运的是，命运的巨轮缓缓驶过，我机缘巧合下认识了许学长。彼时许学长也刚从过往的泥潭中走出，走在科研的正路上。可能是因为我们年龄相差较小，没有很多代沟，抑或是当时的我是曾经的他，迷茫而又徘徊，许学长带领我亲自科研。从寒冬到酷暑再到瑟瑟秋风，我风雨无阻。直到现在，我还记得每次5元的地铁，也记得每次走到涵英楼下总会拍一张照。许学长带领着我，从idea，到文献调研，到复现别人的方法，到提出方法，到实验，再到最后写文章，完成了一整个科研的过程。最后，运气不错，得到了不错的成果。也正是这段经历，让我彻底明白了科研该怎么做。许学长于我亦师亦友，<strong>教导之恩</strong>，没齿难忘。每每想起，感激涕零。每每想起午后的“开黑”，丝丝笑意萦绕于心头。人生遇贵人不过几人，而许学长是我重要的贵人。</p><p>而到了现在，我正在一段新的旅程中。这次有<strong>知遇之恩</strong>，而我想证明自己，不负这份知遇与期待。</p><h2 id="2-为什么要写Paper阅读笔记"><a href="#2-为什么要写Paper阅读笔记" class="headerlink" title="2. 为什么要写Paper阅读笔记"></a>2. 为什么要写Paper阅读笔记</h2><blockquote><p>不积跬步，无以至千里</p></blockquote><p>我开始科研到现在的这两年，可以分为三个阶段：</p><ul><li>懵懂时期：这个时候我只知道要读要求我读的文章。</li><li>成长时期：这个时候我除了读要求我读的文章外，开始自己找文章读。</li><li>成熟时期：这个时候我慢慢开始读我心里想读的文章。</li></ul><p>也对应着三种心态：</p><ul><li>完成要求的任务</li><li>完成给我的idea</li><li>完成自己的idea</li></ul><p>我目前是本科生，除了上课以外的所有时间都贡献给科研了。我不打游戏，业余时间除了刷刷B站，剩余时间就在读文章或者写代码。不知不觉、恍惚之间，读的文章已经上百篇了，涵盖了不少主题。有不少方向都是未来我想继续做下去的。</p><p>我习惯读文章的时候在PDF上做标记，记录下自己的想法和对文章的评价。组会的时候整理一下就是一次Paper Reading的分享。可是中间几次大的变故，导致我丢失了带有标注的PDF。文章可以再读，但是当时的体会与感悟却是再难追回。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220725155116966.png" alt="我习惯在文章中做记录"></p><p>因此，正是感觉到阅读的文章之多、文章的标记之难管理，我决定把我阅读文章时候这些记录整理成笔记，发在我的博客上，记录的同时分享我的思考与感悟。以期在未来记忆模糊的时候能够阅读一下自己的笔记就能够快速的回忆起来，并且希望我的思考与感悟能够启发后来者。</p><h2 id="3-这一专栏文章的组织形式"><a href="#3-这一专栏文章的组织形式" class="headerlink" title="3. 这一专栏文章的组织形式"></a>3. 这一专栏文章的组织形式</h2><h3 id="1-文章的组织形式"><a href="#1-文章的组织形式" class="headerlink" title="1. 文章的组织形式"></a>1. 文章的组织形式</h3><p><strong>既然是作为文章的阅读笔记，那么自然就不能是对文字的搬运，或者原文的逐字句翻译</strong>。我将只记录文章中一些重要的部分，具体会包括（可能并不是每一篇文章都会遵守）：</p><ul><li>idea，毕竟编故事的能力还是重要的</li><li>method，毕竟一篇文章最重要的就是他的方法，所以用大白话讲出来出来他的方法是必须要有的。</li><li>main experiment，还得看看他的方法效果怎么样，毕竟还是得看看结果和他claim的一样不。</li><li>related works，如果是我比较熟悉的方向，那我就不写了，相反，如果是我不太熟悉的方向，或者文章参考了某一个我不熟悉的领域，那还是需要记录一下的。</li></ul><h3 id="2-未来的打算"><a href="#2-未来的打算" class="headerlink" title="2. 未来的打算"></a>2. 未来的打算</h3><p>目前读了大概一百二三十篇文章了，相比于每年四五千的发文量自然是萤火与皓月。所以未来我的打算就是一边写最近读的文章的笔记的同时，把之前的读的文章的笔记补上来，估计要花一年左右才能全部补上来。</p><p>不过作为不打游戏的本科生，我觉得我时间还是挺多的，应该能补上来。</p><p>未来慢慢加油吧~</p>]]></content>
      
      
      <categories>
          
          <category> Paper阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JackOS开发日记 2：最近的进度以及操作系统启动流程</title>
      <link href="/2022/07/23/jackos-kai-fa-ri-ji-2/"/>
      <url>/2022/07/23/jackos-kai-fa-ri-ji-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是JackOS开发日记的第2篇，记录了最近几日的开发情况，并且介绍了操作系统的启动流程</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/JackOSALL.png" alt="JackOS开发日记的第2篇"></p><h1 id="JackOS开发日记-2：最近的进度以及操作系统启动流程"><a href="#JackOS开发日记-2：最近的进度以及操作系统启动流程" class="headerlink" title="JackOS开发日记 2：最近的进度以及操作系统启动流程"></a>JackOS开发日记 2：最近的进度以及操作系统启动流程</h1><blockquote><p>分页是真的绕呀</p></blockquote><h2 id="1-最近的进度"><a href="#1-最近的进度" class="headerlink" title="1. 最近的进度"></a>1. 最近的进度</h2><p>从广州回来之后，在学校的隔离酒店隔离了三天，总算是出来了。上一次写出来了MBR的程序，算是达到了一个小的milestone。接下来要写的，就是BootLoader了。BootLoader说白了，其实就是放在磁盘的一段程序，和我们写的HelloWord没啥区别。只不过相比于HelloWord被操作系统加载内存中，<code>BootLoader</code>这个程序由MBR中的程序加载到内存中。BootLoader运行结束之后，就是操作系统开始运行，所以BootLoader的主要任务就是为操作系统准备环境。因此，BootLoader中要完成一系列任务。</p><p>所以启动的流程其实就是一个接力的过程，CPU上电初始化之后，CS:IP被强制初始化去运行BIOS，BIOS运行结束后会运行MBR中的程序，而MBR中的程序由于只能放在第一个MBR扇区中，所以MBR中的程序的大小是有限制的，没法完成所有的操作系统运行前的准备。所以MBR的主要任务就是读取磁盘中的操作系统到内存，并且为操作系统准备运行环境，这个程序一般称为BootLoader。</p><p>因为我最终的目标就是具有分段、分页机制的、运行在32位保护模式下的操作系统，所以BootLoader中要干的事就包括：16位实模式切换到32位保护模式、准备GDT、开启分段机制、准备页表、开启分页、加载操作系统内核到内存，最后再跳转到操作系统内核。</p><p>所以BootLoader其实挺复杂，主要原因就是因为操作系统本身是运行在32位保护模式下的，操作系统本身没有办法实现诸如模式切换这类需要汇编才能实现的功能。</p><p>所以这几天的主要就是把第一版的BootLoader写出来了。主要是分页的代码部分的代码实在是太绕了，因为是二级页表，所以真的难写。关于内存分页和分段的机制，未来一定要写博客记录一下，因为真心挺绕的，尤其是二级页表下的分页。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220724010049647.png" alt="BootLoader中开启内存分段的部分"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220724010233323.png" alt="BootLoader中开启内存分页的部分"></p><h2 id="2-操作系统启动流程"><a href="#2-操作系统启动流程" class="headerlink" title="2. 操作系统启动流程"></a>2. 操作系统启动流程</h2><p>操作系统的启动目前有两种方式，第一种传统的MBR启动，第二种是UEFI启动。</p><h3 id="1-MBR启动"><a href="#1-MBR启动" class="headerlink" title="1. MBR启动"></a>1. MBR启动</h3><p>上面其实已经大概说过了MBR启动。MBR启动操作系统的流程是一个接力的过程，流程如下：</p><ul><li>CPU上电初始化之后，CS:IP被强制初始化到1M内存的最后16字节处。最后16字节其实是一个绝对跳转指令<code>jmp far</code>，跳转的目的地是<strong>主板BIOS</strong>的起始地址。这一流程由硬件完成</li><li><code>jmp far</code>跳转到主板BIOS，此后CPU开始执行主板BIOS程序。<ul><li><strong>BIOS程序首先会检查计算机的硬件系统</strong>。如果缺少内存这样至关重要的硬件，那么计算机无法启动，计算机就会结束运行。</li><li><strong>在检查完硬件之后，主板BIOS程序会扫描主板上其他硬件的BIOS</strong>。注意，BIOS程序并不是只有主板有，每个硬件上都会有一个ROM芯片，而硬件的ROM芯片上就存放着硬件的BIOS程序。硬件的BIOS程序和硬件电路紧密结合，提供了基础硬件的访问功能。因此，主板BIOS会扫描硬件的BIOS程序，而后把硬件的BIOS程序的地址加载到中断向量表IVT中，从而为后续的程序提供了硬件访问能力。</li><li>最后，主板BIOS会以此检查磁盘，并读取磁盘的第一个扇区，即以此检查每个磁盘的MBR扇区，以检查其中是否有可以运行的程序。如果在某个磁盘上找到了可以运行的程序，那么BIOS就会把该磁盘的第一个扇区（MBR扇区）完全读取到内存中来，而后使用<code>jmp far</code>跳转到MBR程序运行。</li></ul></li><li>MBR程序的主要任务是读取磁盘中的操作系统到内存中，并且为操作系统准备运行环境。<ul><li>操作系统启动的英文单词是boot，起源于bootstrap这个单词。bootstrap的本意是鞋带。bootstrap这个单词有一句谚语：<code>pull oneself up by one's bootstraps</code>。字面意思是<code>拽着鞋带把自己拉起来</code>，这当然是不可能的事情。最早的时候，工程师们用它来比喻，因为计算机启动是一个很矛盾的过程：必须先运行程序（为操作系统准备环境），然后计算机才能启动，但是计算机不启动就无法运行程序！早期真的是这样，因此工程师想出了一个办法，就是把一小段程序装进内存用来引导操作系统（即为操作系统准备运行环境），然后计算机才能正常运行。所以，工程师们把这个过程叫做”拉鞋带”，久而久之就简称为boot了。因此，开机的过程</li><li>MBR的主要工作就是为操作系统运行准备环境，而我们的操作系统运行在32位保护模式下，以段页式方式管理内存。因此我们的MBR具体需要完成以下的任务：<ul><li>16位实模式切换到32位保护模式</li><li>准备GDT、开启分段机制</li><li>准备页表、开启分页、</li><li>加载操作系统内核到内存</li><li>跳转到操作系统内核</li></ul></li></ul></li><li>最后，接下来的事，就完全是操作系统的事了。包括线程的创建、管理，内存的管理，所以此后，我们就正式开启了操作系统的开发。</li></ul><h3 id="2-UEFI启动"><a href="#2-UEFI启动" class="headerlink" title="2. UEFI启动"></a>2. UEFI启动</h3><p>传统的MBR启动的缺点就是MBR分区中只能放446字节的启动代码来加载BootLoader，这个在硬件越来越复杂的当下显然是没法很好的满足我们的需求。于是几个大厂（Google，微软……）联合在一起，就提出了操作系统新的启动流程，即UEFI启动。</p><p>以MBR方式启动知道加载操作系统内核前都需要写汇编代码，这个难度就很高了，非常不方便修改。一直到操作系统内核才开始用C语言开发。因此为了尽早使用C语言进行开发，UEFI在CPU的L1、L2、L3缓存上为C语言运行准备运行环境，而后使用C语言开发。</p><p>我对UEFI其实并不是很了解，只能说这么多。不过和MBR简单直接相比，UEFI来完成操作系统开机的开发可就难了不少，因此我这次初次开发操作系统，还是怎么简单怎么来，直接利用MBR来完成操作系统启动。</p><p>终于，现在距离开发操作系统只有一步之遥~</p>]]></content>
      
      
      <categories>
          
          <category> JackOS开发日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Operating System </tag>
            
            <tag> JackOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JackOS开发日记 1：最近的进度以及开发工具链和目标成果</title>
      <link href="/2022/07/19/jackos-kai-fa-ri-ji-1/"/>
      <url>/2022/07/19/jackos-kai-fa-ri-ji-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是JackOS开发日记的第1篇，记录了最近几日的开发情况，并且介绍了开发工具链，以及JackOS预期达到的目标</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/JackOSALL.png" alt="JackOS开发日记的第1篇"></p><h1 id="JackOS开发日记-1：最近的进度以及开发工具链和目标成果"><a href="#JackOS开发日记-1：最近的进度以及开发工具链和目标成果" class="headerlink" title="JackOS开发日记 1：最近的进度以及开发工具链和目标成果"></a>JackOS开发日记 1：最近的进度以及开发工具链和目标成果</h1><blockquote><p>暑假的前一段时间因为要去申请一下签证，所以去了广州一趟,不过开发并没有落下。</p></blockquote><h2 id="1-最近的进度"><a href="#1-最近的进度" class="headerlink" title="1.最近的进度"></a>1.最近的进度</h2><p>最近学习了硬盘的物理结构，虽然磁盘的物理结构其实在学校讲的操作系统这门课上讲到外存管理的时候老师上课讲过了，但是我觉得当时的学习更多的是机械式的记忆，即记住了磁盘的物理结构，<strong>并没有理解磁盘的物理结构</strong>。</p><p>但是这一次，在了解了磁盘结构（传统的柱面/磁道/扇区）的基础上，我又学习了放在第0柱面、第0磁道、第1扇区的主引导记录（Master Boot Record，MBR），主引导记录负责计算机的启动。磁盘在计算机看来其实就是二进制的序列，我们可以把我们的数据和程序写入其中，因为数据和程序本质上来说都是二进制序列。所以对于MBR这个第一个分区来说，我们既可以把数据写入其中，也可以把程序写入其中。但是更一般的，我们会把程序写入第一个分区，即MBR分区中，具体原因就是因为MBR负责计算机的启动。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220724001756403.png" alt="计算机视角下的磁盘，以及MBR分区"></p><p>具体来说，主板上的BIOS程序放在ROM芯片上，开机之后就会运行ROM里的BIOS程序（CPU初始化后CS:IP被强制加载到1M内存的最后16个字节，后16个字节其实是一个绝对跳转指令<code>jmp far</code>，跳转的目的地址是BIOS程序）；而BIOS程序在完成了开机硬件自检、中断向量表IVT的设置之后，就会去读取每个磁盘的第0柱面、第0磁道、第1扇区，如果找到了程序，那么就会运行其中的程序。因此我们就需要MBR分区中写入可以运行的程序，MBR中的程序会从磁盘中读取新的程序运行，就这样运行起来了操作系统。</p><p>虽然说启动扇区是CHS模式下的概念，目前都是固态硬盘了，基本用的都是LBA，但是第一个扇区的这个概念依旧存在。因此MBR这种传统的启动方式还是OK的。现代都是UEFI了，那就是以后在学的东西了。</p><p>目前，我已经写出了自己的MBR程序，这个MBR程序会去读取磁盘中的程序（BootLoader），然后去运行该程序（BootLoader）。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220724002836420.png" alt="自己的BIOS程序"></p><blockquote><p>工欲善其事，必先利其器</p></blockquote><h2 id="2-开发工具链"><a href="#2-开发工具链" class="headerlink" title="2. 开发工具链"></a>2. 开发工具链</h2><p>开发操作系统时，当然需要掌握开发用到的各种工具，形成自己的开发工具链。然后再介绍一下JackOS的预期目标，这样就可以正式的开始开发了。</p><p>开发操作系统中会用到很多的工具，主要分成下面几大类：</p><ul><li><p><strong>虚拟机</strong></p><ul><li><code>VirtualBox</code>：实体机仿真</li><li><code>bochs</code>：调试代码用</li></ul></li><li><p><strong>二进制文件查看以及读写</strong>：</p><ul><li><code>xxd</code>：主要用于查看小段硬盘镜像</li><li><code>dd</code>：主要用于写入启动扇区</li><li><p><code>wxhexeditor</code>：WinHex的Linux版本，集查看、修改于一体</p></li><li><p><code>bximage</code>：硬盘镜像操作工具</p></li></ul></li><li><p>编译器：</p><ul><li><code>nasm</code>：汇编语言编译器</li><li><code>gcc</code>：C语言编译器</li></ul></li></ul><p>而在开发的时候，工作流程是这样的：</p><ul><li><p>首先通过VsCode写好<code>.asm</code>和<code>.c</code>的汇编和C语言源代码</p></li><li><p>接下来通过<code>nasm</code>和<code>gcc</code>分别对汇编和C语言源代码进行编译</p><ul><li><p>对于汇编来说，开发操作系统时候，编译的<code>asm</code>文件有两种去路：</p><ol><li>要么通过<code>nasm</code>编译得到<code>bin</code>格式的裸二进制指令文件。<strong>裸二进制指令文件里直接就是二进制的CPU指令，CPU可以直接运行，不需要操作系统环境</strong>。所以裸二进制的bin文件，主要就是在计算机开机时候直接执行，用于拉起来操作系统</li><li>要么通过<code>nasm</code>编译得到<code>obj</code>格式的共享文件，用于与C语言进行混合编程。<strong>更加形象的说，就是用汇编为C开发最基础的库函数</strong>。<strong>因为只有汇编才可以和硬件进行直接的沟通，而完成如读取硬盘、显示文字等功能其实就是和硬件进行沟通，所以必须是用汇编来实现这些功能</strong>。而后C语言调用汇编来完成这些功能。具体来说C和汇编的混合编程有两种，一种是C的内联汇编，另外一种就是汇编和C分别编译成obj文件后链接在一起。</li></ol></li><li><p>对于C来说，开发操作系统的时候，最基本的一些功能必须要用汇编来实现，但是在用汇编完成了这些工作之后，就用C语言调用汇编来执行这些功能，因此在此之后，就利用C来完成系统内核的开发。</p></li><li><p>最终编译的结果有两种：</p><ul><li><strong>一种是裸二进制bin格式程序</strong>：上面说了，这种程序/文件里面直接就是CPU指令，CPU可以直接执行，所以主要是在开机启动阶段运行</li><li><strong>一种是正常的可执行程序</strong>：未来编译出来的内核其实就是一个可执行程序。可执行程序在裸二进制程序的基础上，添加了描述程序的信息，加在裸二进制代码前。这样做的好处就是由于我们有了程序的其他信息，方便了我们去运行程序。关于这个未来会详细解释。</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220720141936671.png" alt="左侧的裸二进制文件直接就是可执行的机器指令，右侧的可执行程序多了很多的程序头"></p></li></ul></li><li><p>在编译后得到了可执行程序，我们把可执行程序（即操作系统）写入到磁盘映像文件。<strong>磁盘映像文件其实就相当于磁盘</strong>。我们真实的计算机开机之后，操作系统从磁盘中启动，而我们用虚拟机来调试的话，因为磁盘映像文件相当于磁盘，所以虚拟机中的操作系统就从磁盘映像文件中启动。关于磁盘映像文件，未来会进行详细的解释。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220720142441163.png" alt="用xxd查看JackOS.img磁盘映像文件的头512个字节内容"></p></li><li><p>最后，我们在虚拟机中启动我们的系统，利用bochs进行单步调试，VirtualBox进行实体机仿真</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220720141529000.png" alt="使用Bochs虚拟机对系统进行单步调试"></p></li></ul><p>上面就是我们正常的开发操作系统内核时候的工作流程。其实最后还有一步，就是把我们写好的系统烧录到U盘上，从U盘上启动我们的操作系统。不过关于这一步，我目前还只是设想，因为当前的计算机启动用的基本都是UEFI，而为了关注于开发操作系统，我像用传统的BIOS开发来引导操作系统，所以其实我们最后的系统能否从U盘启动还是有些问题的。不过关于这个问题，后面开发到了再说吧。</p><p>而关于具体怎么使用这些工具，我想未来我会专门写一系列博客来介绍，毕竟在这篇文章中介绍这些工具的话，一个是介绍不完，另一个是会导致这篇文章偏离方向。</p><h2 id="3-目标成果"><a href="#3-目标成果" class="headerlink" title="3. 目标成果"></a>3. 目标成果</h2><p>介绍完了开发工具链之后，接下来就要对JackOS进行一下规划了。目前我对JackOS的规划是这样的（当然，不排除未来随着开发的逐渐深入/对内核开发逐渐深入会改变规划）：</p><ul><li>运行在32位保护模式下，16位实模式的话难以做到虚拟内存，而64位又有些复杂，所以折中考虑，还是写一个32位保护模式的系统</li><li>运行在字符模式下，主要是为了避免图形模式需要对字符进行渲染，增加复杂度。因为我本身对计算机图形学没有很多的了解，未来给写好的系统做窗口模块的话可能会考虑。</li><li>类Unix的非实时操作系统，因为我参考的几本书都是类Unix的书：赵炯老师的《Linux内核完全剖析》、郑刚老师的《操作系统真相还原》，还有荷兰神仙Tanenbaum教授的《操作系统：设计与实现》的MINIX系统和《现代操作系统》</li><li><p>具有操作系统最基本的功能：</p><ul><li>进程与线程实现：进程与线程实现、CPU调度、同步与互斥、死锁检测与解除</li><li>内存管理：基本段/页式内存管理、虚拟内存实现</li><li>文件系统：FAT文件系统、EXT2文件系统，NTFS文件系统、虚拟文件系统</li><li>I/O管理：可以连接一些外部设备</li></ul></li><li>未来可能考虑转UEFI开发，这样就可以把真实的在实体机上跑我的操作系统。</li></ul><p>当然，我知道这个目标很大，但是万事开头难，坚持下去一定会有成果。目标有点大，我忍一下~</p>]]></content>
      
      
      <categories>
          
          <category> JackOS开发日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Operating System </tag>
            
            <tag> JackOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JackOS开发日记 0：为什么要写一个操作系统</title>
      <link href="/2022/07/19/jackos-kai-fa-ri-ji-0/"/>
      <url>/2022/07/19/jackos-kai-fa-ri-ji-0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是JackOS开发日记的第0篇，主要记录了为什么我想开发一个自己的操作系统出来</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/JackOSALL.png" alt="JackOS开发日记的第0篇"></p><h1 id="JackOS开发日记-0：为什么要写一个操作系统"><a href="#JackOS开发日记-0：为什么要写一个操作系统" class="headerlink" title="JackOS开发日记 0：为什么要写一个操作系统"></a>JackOS开发日记 0：为什么要写一个操作系统</h1><blockquote><p>程序员的梦想不就是开发一个属于自己的操作系统么？</p></blockquote><h2 id="1-为什么要写一个操作系统（内核）"><a href="#1-为什么要写一个操作系统（内核）" class="headerlink" title="1. 为什么要写一个操作系统（内核）"></a>1. 为什么要写一个操作系统（内核）</h2><p>写一个操作系统的原因有很多，功利点说，写操作系统内核的原因包括但不限于：</p><ul><li>写一个操作系统内核会极大地帮助到未来找工作</li><li>写一个操作系统内核会极大地加深我们对计算机的理解</li><li>……</li></ul><p>但我觉得，对于我来说，更重要的不在于功利，而在于求知。在学操作系统这门课的时候，学着诸如线程、进程、虚拟内存等概念，以及进程调度、银行家算法、内存置换算法等等，因为学习的都是抽象的概念和算法，自己对于操作系统到底是如何实现一个操作系统、操作系统是怎么运行程序的、这些算法到底有什么用？等等问题完全不理解，或者说<strong>因为缺少实际写代码的经验，总觉得操作系统离我很远很远</strong>。因此为了解决这份疏远感，获得对操作系统切身的体会，感到亲切，我决定自己动手开始写一个操作系统。</p><p>除了想要消除对操作系统的陌生感以外，写一个操作系统也是我的一个理想，写一个操作系统内核出来，这件事本身就很酷，很有趣，也很好玩。</p><p>因此，综合万千思绪，我想要写一个操作系统内核出来。</p><h2 id="2-为什么要写这个专栏文章"><a href="#2-为什么要写这个专栏文章" class="headerlink" title="2. 为什么要写这个专栏文章"></a>2. 为什么要写这个专栏文章</h2><p>事实上，在写这篇文章前，我已经开始写操作系统有一段时间了，已经成功的写出了BootLoader。启动扇区的代码成功拉取了BootLoader，然后BootLoader可以加载内核代码了。</p><p>但是在开发的过程中，我会学习到很多的新知识，慢慢地我发现如果不把这些知识记录下来，我就会忘记这些知识，所以一方面为了记录这些新的知识，我需要写一些文章把这些知识记录下来。</p><p>此外，也是为了作为开发过程中的记录，毕竟写一个内核是一个长期的工程，写一些文章记录开发过程中的点点滴滴我觉得是很有必要的，因此我需要写一些文章记录开发过程。</p><h2 id="3-关于专栏文章"><a href="#3-关于专栏文章" class="headerlink" title="3. 关于专栏文章"></a>3. 关于专栏文章</h2><p>内核开发日记这个专栏的文章不会是每天都会更新的文章，相比，我更希望是我觉得有必要写一篇日记记录的时候，我才会写一篇文章记录下来。</p><p>此外，相比于我写的其他一些教程性质的博客，这一系列的文章相比于教会人如何写操作系统的教程，我更希望是日记形式的开发记录。因此这一专栏文章中的知识可能并不会连贯。在未来当我写完操作系统之后我会专门写一个教程性质的专栏，专门讲解如何开发操作系统，并且在专栏中会对必要的知识进行讲解。</p>]]></content>
      
      
      <categories>
          
          <category> JackOS开发日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Operating System </tag>
            
            <tag> JackOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近的一些情况-2.md</title>
      <link href="/2022/07/19/zui-jin-de-yi-xie-qing-kuang-2/"/>
      <url>/2022/07/19/zui-jin-de-yi-xie-qing-kuang-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文记录了我的一些最近的情况</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719220756291.png" alt="UW-Madison的录取信"></p><h1 id="最近的一些情况-2"><a href="#最近的一些情况-2" class="headerlink" title="最近的一些情况-2"></a>最近的一些情况-2</h1><p>说来惭愧，上次更新最近的情况已经是三四个月前的事了。转眼这个学期就过去了，到了暑假。又恰逢新的时期的开始，所以想写一篇文章记录一下最近的情况。</p><h2 id="1-过去一段时间的事情"><a href="#1-过去一段时间的事情" class="headerlink" title="1. 过去一段时间的事情"></a>1. 过去一段时间的事情</h2><p>上次写最近的的情况大概是在3月份的时候，那个时候想的新的学期要坚持写博客。可惜，上个学期的课业实在是太多了，因为转专业要补修课程、辅修专业考试，零零散散加起来一个学期竟然要修40多个学分。再加上去年十二月份因为疫情导致去年秋季学期的期末考试没有考，延到了春季学期。最后竟然一个学期16个周，要考13场考试，基本上要一周一考。再加上课题组还有例行的组会，一个学期都在疲于复习、考试、赶ddl。所以最后可惜，没有完成新学期坚持写作的初心。</p><p>上个学期主要就是忙于复习、考试和ddl。学习了不少有意思的课。我觉得震撼我、启发我的课是孟德宇老师讲的机器学习课程，真的是为我打开了机器学习新的大门，带领我从达特茅斯一路走到今天。此外还有苏远岐老师讲的计算机视觉课程，虽然很难，但是让我对传统的CV有了深入的理解，未来可以继续深入下去。非常荣幸的是，之前的积累让我成功进入了孟老师的课题组。深感荣幸的同时看到课题组里的硕博师兄师姐，深感自己的不足，真是人外有人、天外有天。未来还需继续努力。</p><p>幸运的是上个学期申请UW-Madison的秋季交流成功通过了。下个学期，也就是2022的秋季学期可以去UW-Madison交流一个学期。虽然准备去交流一个学期，但是课题组这里的工作还是要继续，毕竟正是我喜欢、热爱的工作，所以只按照最低要求学了12个学分。按照已经选课的课表，下个学期还是比较闲的，并且特地把周内组会的时间空下来了，这样就可以远程参加组会了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719220756291.png" alt="UW-Madison的录取信"></p><p>并且由于课比较少的原因，下课学期就有了大把的时间来写博客，所以希望下个学期一定要实现坚持写作的初心。坚持每两天读一篇文章，坚持写代码的初心。</p><p>最后，在临近学期结束的时候，在复现点云的RandLA-Net的时候，因为网络中有一个操作需要对百万个点的电云进行网格降采样。虽然我自己用Python写出来了，但是发现处理一个点云就需要半小时，更不用说像KITTI这样的数据集有上千个点云。而我看了原作者（顺带一提，原作是胡博士，是我非常敬仰的博士，在我心中种下科研的种子）仓库的代码，发现原作者用的C++写的电云降采样，处理一个点云只需要不到一秒。这时候我才突然醒悟自己一直以来都是依赖于Python，不管什么场景下的什么需求都用Python来解决。可其实在一些高性能场景下，还是需要C++这类更快的语言的。更何况我作为计算机系的学生，C++是我的根本。</p><p>因此，在上个学习即将结束的时候，下定决心要好好学习一下C++，于是过了一遍<code>C++ Primer Plus</code>，把书里的代码全部敲了一遍，代码放在GitHub上了。</p><h2 id="2-未来的一些规划"><a href="#2-未来的一些规划" class="headerlink" title="2. 未来的一些规划"></a>2. 未来的一些规划</h2><p>关于未来的一些规划，首先就是课题组这里的事情要处理好。其次，点云的C++的经历让我真实的体验到，作为计算机系的学生，计算机的基础真的很重要，所以接下来的一段时间，我们准备开始写一个自己的操作系统内核出来。</p><p>目标操作内核要求不需要很高，只需要运行在32位保护模式下，在字符模式下进行显示，不设计图形学的相关内容，具备操作系统最基本的几个功能：内存管理（段/页式内存管理、虚拟内存）、进程管理（进程创建、进程间通信、CPU调度、同步与互斥实现、锁检测预防和解除）、文件系统（FAT、EXT和NTFS）。目标很大，我忍一下，哈哈。目前的进度已经写完了BootLoader，正在用用汇编为C语言运行准备环境，然后就可以顺理成章的用C来开发内核，进入到内核初始化阶段。</p><p>与此配套的，在开发操作系统内核的时候，会写开发日记发到网站上来，在内核开发已经接近后期或者基本没有大的问题之后，我想我也会写一个系列的文章来教如何写一个操作系统。开发的操作系统的名字已经想好了，就称为JackOS吧，那么专栏的名字就对应为JackOS开发日记和JackOS开发教程吧。目前图标已经做好了，如下图，后面将会用在这一系列专栏上。</p><p>值得一提的是，背景的代码就是大名鼎鼎的Linux 0.12版本的<code>init.c</code>，即内核初始化的代码。感谢赵炯老师，没有他的书，恐怕我真的没法完成这个雄心壮志。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/JackOSALL.png" alt="JackOS的图标"></p><p>此外，之前说的发一些文章的阅读笔记，这个当然会发，并且是接下来的重点内容。毕竟这是我的老本行。</p><p>还有就是关于语言熟练度的问题，因为我对C和C++并不像Python这样熟练，所以未来准备每天写一道LeetCode的题来熟练语法。</p><p>最后是关于本来上个学期应该写的一些课程的笔记，因为有一些课程，例如操作系统、汇编和CV，我觉得是真心有用。真的想把笔记写成博客发出来，奈何时间真的不够，只能期待于未来有了足够的时间再去补上。</p><p>接下来的日子继续努力，希望能够有好的未来。</p><p>Jack Wang于2022年7月19日23:05，西安交通大学。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
          <category> 个人情况 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo的个人技术博客搭建 —— 基于GitHub的多设备Hexo博客编写</title>
      <link href="/2022/07/19/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-6-ji-yu-git-de-duo-she-bei-bo-ke-guan-li-md/"/>
      <url>/2022/07/19/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-6-ji-yu-git-de-duo-she-bei-bo-ke-guan-li-md/</url>
      
        <content type="html"><![CDATA[<p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719161615280.png" alt="基于GitHub的多设备Hexo博客管理"></p><h1 id="基于hexo的个人技术博客搭建-——-基于GitHub的多设备Hexo博编写"><a href="#基于hexo的个人技术博客搭建-——-基于GitHub的多设备Hexo博编写" class="headerlink" title="基于hexo的个人技术博客搭建 —— 基于GitHub的多设备Hexo博编写"></a>基于hexo的个人技术博客搭建 —— 基于GitHub的多设备Hexo博编写</h1><p>终于，经过了千辛万苦，我们成功的搭建起来了我们博客网站的远程仓库、本地编写环境。我们可以愉快的开始写作的任务了。</p><p>然而目前依旧存在一个重要的问题，这个问题严重的影响了我们的写作，具体来说就是多设备上的Hexo博客管理。而之所以会出现这个问题，其实是和Hexo网站的运行原理是息息相关的，因此本文就将介绍如何在多设备上进行Hexo博客网站的管理。</p><h2 id="1-Hexo博客网站的运行原理"><a href="#1-Hexo博客网站的运行原理" class="headerlink" title="1. Hexo博客网站的运行原理"></a>1. Hexo博客网站的运行原理</h2><p>在前面介绍过，hexo博客网站其实就是一个文件夹，这个文件夹下包含我们写的文章的MarkDown源文件、网站的配置文件、根据MarkDown生成HTML网页的库、生成的静态网页……</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719162717537.png" alt="Hexo博客的文件夹"></p><p>而Hexo的运行原理，或者说工作流程是这样的：</p><h3 id="1-编写MarkDown源文件"><a href="#1-编写MarkDown源文件" class="headerlink" title="1. 编写MarkDown源文件"></a>1. 编写MarkDown源文件</h3><ol><li><p><strong>首先我们编写博客文章的MarkDown源文件</strong>，所有的MarkDown源文件会放在<code>source</code>文件夹下。更详细的解释如下：</p><ul><li><p>根据<strong>博客文章</strong>具体的类型不同（草稿Draft还是正式发布的文章Post），将会放在<code>source</code>文件夹下不同的位置（对应<code>source/_drafts</code>和<code>source/_posts</code>）。</p></li><li><p>此外，博客网站除了博客文章的页面以外，还会存在一些非博客文章页面，例如我的博客的<code>关于</code>页面。针对这些非博客文章的页面，Hexo也是利用MarkDown来管理的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719163752702.png" alt="非博客文章页面：我的博客的关于页面"></p></li><li><p>因此，最终在<code>source</code>文件夹下存在博客文章MarkDown，而我们的博客文章MarkDown就会放在<code>source/_drafts</code>和<code>source/_posts</code>两个文件夹下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719164152852.png" alt="source文件夹最终的结构"></p></li></ul></li></ol><h3 id="2-生成静态网页"><a href="#2-生成静态网页" class="headerlink" title="2. 生成静态网页"></a>2. 生成静态网页</h3><ol><li><p><strong>在我们写好了文章的MarkDown源文件之后，利用hexo gen生成网站的静态网页</strong>，生成的静态网页就会放在<code>public</code>文件夹下。具体来说：</p><ul><li><p>Hexo首先会利用MarkDown引擎来解析我们在<code>source</code>文件夹下的所有的MarkDown源文件</p></li><li><p>然后Hexo会利用主题的HTML模板来生成对应的网页，例如我用的是<code>matery</code>主题，那么Hexo就会利用<code>matery</code>主题中的HTML模板来生成博客文章页面。</p></li><li><p>生成完所有的页面后，Hexo会把所有的网页放在<code>public</code>文件夹下。而<code>public</code>文件夹下的所有网页就是我们看到的博客网站。例如我们利用浏览器打开<code>public/index.html</code>就可以看到网站的首页。只不过由于路径的问题，一些<code>JavaSacript</code>插件没有加载，所以看起来不太对劲。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719165317092.png" alt="public/index.html就是我们的博客网站的首页"></p></li></ul></li></ol><h3 id="3-运行-部署-托管网站"><a href="#3-运行-部署-托管网站" class="headerlink" title="3. 运行/部署/托管网站"></a>3. 运行/部署/托管网站</h3><ol><li><p>生成完所有的网页之后，通过hexo server运行网站或者通过hexo deploy部署网站。这两种方式对应着两种不同的网站的运行方式</p><ul><li><p>hexo server运行网站其实就是在本地解析、渲染<code>public</code>文件夹中的网页，然后暴露到本机的4000端口上去。这样的话我们如果在具有公网IP的服务器上运行Hexo，别人就可以通过<code>公网IP:4000</code>端口访问到我们的网站。在此基础上，我们如果购买了域名<code>xxx.xxx.xxx</code>并且进行了域名解析，别人就可以以<code>xxx.xxx.xxx:4000</code>的形式访问我们的网站。</p></li><li><p>hexo deploy则将会把<code>public</code>文件夹上传到GitHub的<code>用户名.github.io</code>仓库中。GitHub的Pages功能允许每一个用户创建一个名为<code>用户名.github.io</code>的仓库。用户在这个仓库上传静态的HTML网页，GitHub在<code>用户名.github.io</code>仓库中如果发现了<code>index.html</code>的文件，那么别人如果访问<code>http://用户名.github.com</code>，GitHub就会将<code>index.html</code>作为网站的首页显示出去，别人在<code>index.html</code>中点击按钮跳转，GitHub同样就会把对应的网页显示出去。</p></li></ul></li></ol><p>对于我们个人来说，低成本的网站搭建方案当然就是把博客部署到GitHub上去。因为把网站托管到GitHub上，用户访问网站看到的网页都是GitHub帮我们展示的。自然而然，GitHub就会帮助我们防御诸如DDos之类的网站攻击。</p><p>如果要使用第一种方式，在有公网IP的服务器上部署博客网站的话，首先购买有公网IP的服务器就不便宜，其次还需要自己设置防火墙、进行网站攻击的防御等等。</p><p><strong>因为我们是为了建立个人博客网站，所以自然而然就会选择把网站部署到GitHub上去，省时省力省钱</strong>。关于如何把Hexo网站部署到GitHub上去，这样的文章一查一大把，我这里就不展开了，因为本文的目的不是介绍如何把Hexo博客网站托管到GitHub上去，自行查阅即可（当然不排除以后会写一篇文章来专门讲解，这里先挖个坑吧）。</p><h2 id="2-基于GitHub的多设备Hexo博客书写"><a href="#2-基于GitHub的多设备Hexo博客书写" class="headerlink" title="2. 基于GitHub的多设备Hexo博客书写"></a>2. 基于GitHub的多设备Hexo博客书写</h2><blockquote><p>前面铺垫了这么多，终于开始进入本文的主题了~</p></blockquote><p>经过前面的介绍，你应该已经明白了Hexo博客的运行原理了。下面我们就来介绍多设备Hexo博客网站管理的原理以及方法。</p><p>因为我们经常会遇到的一个场景就是：<strong>我们想在不同的设备上写博客</strong>，所以我们就需要对Hexo博客网站进行多设备管理，即在不同的设备上进行博客的管理。而前面介绍了，<strong>Hexo博客网站的本质，其实就是一个包含了网站静态网页、博客源代码和必要博客框架在内的文件夹（或者说项目文件夹，其实都没啥问题）</strong>。因此我们Hexo博客网站进行多设备管理，其实就是要对这个文件夹进行管理。</p><p>我们如果想要在多个设备上编写博客、发布博客，就意味着我们需要在多个不同的设备上同步我们的博客项目。因此，我们首先需要了解一下Hexo博客文件夹的组成。</p><h3 id="1-Hexo博客文件夹的组成"><a href="#1-Hexo博客文件夹的组成" class="headerlink" title="1. Hexo博客文件夹的组成"></a>1. Hexo博客文件夹的组成</h3><p>对于我们进行Hexo博客管理来说，我们只关注几个重要的、对我们有意义的文件/文件夹即可。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719162717537.png" alt="Hexo博客的文件夹"></p><p>具体来说，一些需要注意的文件如下：</p><ol><li><p>public和souce文件夹：前面介绍过，这两个文件夹主要装的就是网站博客的源代码和生成的网站的静态网页</p></li><li><p>ssl文件：ssl文件夹主要存放了网站的ssl证书，这样对读者来说就可以以<code>https://xxx.xxx.xxx</code>的形式访问网站</p></li><li><p>scaffolds和layout文件夹：这两个文件夹是Hexo博客默认主题的配置文件，不用管</p></li><li><p>node_module文件夹：因为我们的网站利用了不同的node.js的包来完成网页的渲染，所以这个文件夹下就放了网站依赖的node.js的包</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719183141808.png" alt="node_module存放了网站依赖的node.js包"></p></li><li><p>theme文件夹：这个文件夹中存放了我们下载的所有主题。例如我只下载了<code>matery</code>主题，所以这个文件夹下只有一个<code>hexo-theme-matery</code>文件夹</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719181554556.png" alt="theme文件夹下存放了网站的主题"></p></li><li><p>package.json和package-lock.json：因为我们的网站利用了不同的node.js的包来完成网页的渲染，因此这两个文件就记录了我们的网站依赖的node.js的包<img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719181852212.png" alt="package.json和package-lock.json保存网站以来的node.js包"></p></li><li><p>db.json：这个文件主要记录了我们的网站的文件，例如有哪些css资源、那些文章等等。<img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719182349751.png" alt="db.json的内容"></p></li><li><p>_config.yml：这个文件记录了我们的hexo博客的配置，注意hexo博客的配置和主题的配置是不一样的，主题的配置会放在<code>theme/主题/config.yml</code>下。当然有的主题也会放在根目录下，比如我这里的<code>_config.landscape.yml</code>保存的就是默认的landscape主题的配置文件。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719182616508.png" alt="_config.yml的一些内容"></p></li></ol><h3 id="2-管理原理"><a href="#2-管理原理" class="headerlink" title="2. 管理原理"></a>2. 管理原理</h3><p>我们如果想要在多个设备上编写博客、发布博客，就意味着我们需要在多个设备上具有相同的Hexo博客的环境，因此，我们其实只需要把一些关键的文件在不同的设备上同步，就可以在多个不同的设备上搭建出相同的Hexo博客网站。接着我们就可以愉快的开始写博客了。</p><p>经过上面的介绍，其实我们也明白了那些文件是需要同步的，具体来说我们要同步的文件一定有：</p><ul><li>说明网站以来的node.js包的package相关文件</li><li>博客的MarkDown源代码在source文件夹</li></ul><p>而我们不需要的同步的文件夹有：</p><ul><li>node.js的包，即<code>node_modules</code>，新设备上重新下载即可</li><li>网站的静态网页文件，即<code>public</code>，新设备上重新生成即可</li><li>部署到github上的中间文件，即<code>.deploy_xxx</code></li></ul><p>而说到多个设备上同步不同的文件，最好用的工具自然而然就是<code>git</code>了，所以同样，我们利用<code>git</code>和GitHub来管理博客网站，并且在多个设备上进行同步。</p><h2 id="3-多设备管理Hexo博客"><a href="#3-多设备管理Hexo博客" class="headerlink" title="3. 多设备管理Hexo博客"></a>3. 多设备管理Hexo博客</h2><p>下面就介绍具体的步骤</p><h3 id="1-创建新的分支"><a href="#1-创建新的分支" class="headerlink" title="1. 创建新的分支"></a>1. 创建新的分支</h3><p>hexo博客网站的静态网页是放在<code>用户名.github.io</code>仓库的<code>master</code>分支下的，因此我们这里创建一个新的分支，不新建仓库，而后将博客所有需要同步的文件放在新的分支中。</p><p>但要注意，如果源代码中有私密信息，就不适合这样管理了，因为发布到<code>用户名.github.io</code>仓库要求是<code>public</code>的，这样别人才能看到你的网页，因此<code>用户名.github.io</code>仓库中的信息是可以完全公开访问，如果有诸如密码之类的信息就还是不要这样管理了，新开一个private的仓库存放就行。</p><p>这里使用创建新分支的方式来管理，所以首先在Github网页的仓库上创建新的分支，如下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719185524908.png" alt="创建新分支-1"></p><p>然后新建一个名为<code>hexo</code>的分支，我这里是已经创建之后的样子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719185615064.png" alt="创建新分支-2"></p><h3 id="2-设置新分支为默认分支"><a href="#2-设置新分支为默认分支" class="headerlink" title="2. 设置新分支为默认分支"></a>2. 设置新分支为默认分支</h3><p>设置为默认分支主要是为了在其他设备上clone方便，其实设置不设置问题不大</p><p>要设置的话先点击setting</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719185825024.png" alt="设置新分支为默认分支-1"></p><p>然后在branch下选择新的分支</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220719190051619.png" alt="设置新分支为默认分支-2"></p><h3 id="3-拉取分支到本地并添加所有需要保存的文件"><a href="#3-拉取分支到本地并添加所有需要保存的文件" class="headerlink" title="3. 拉取分支到本地并添加所有需要保存的文件"></a>3. 拉取分支到本地并添加所有需要保存的文件</h3><p>在本地Hexo项目文件夹下运行</p><pre class="line-numbers language-shell"><code class="language-shell">git remote add github https://github.com/JackWang0107/JackWang0107.github.io.gitgit pull github hexogit checkout hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就把hexo分支拉取过来了并且切换到这个分支了</p><p>我们接下来新建一个<code>.gitignore</code>文件忽略所有不需要同步的文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim .gitignore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下</p><pre class="line-numbers language-txt"><code class="language-txt">.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-删除静态网页文件并添加所有需要保存的文件"><a href="#4-删除静态网页文件并添加所有需要保存的文件" class="headerlink" title="4. 删除静态网页文件并添加所有需要保存的文件"></a>4. 删除静态网页文件并添加所有需要保存的文件</h3><p>因为我们的hexo分支是从master分支中创建出来的，而master分支中保存了网站的静态网页，这些文件我们显然是不需要的，因此先删除这些文件。</p><pre class="line-numbers language-shell"><code class="language-shell">git rm -r 2021 2022 about archives categories contact css friends js libs medias page tags test 404.html CNAME favicon.png favicon.svg favicon1.png index.html search.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后添加博客网站的所有需要同步的文件</p><pre class="line-numbers language-shell"><code class="language-shell">git add .git commit -a --message="sync the website"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-推送到GitHub"><a href="#5-推送到GitHub" class="headerlink" title="5. 推送到GitHub"></a>5. 推送到GitHub</h3><p>接下来，我们把新的分支推送到Github上即可，不过需要注意的是，由于hexo分支是在github上新建的，因此拉取到本地的时候这个分支和远程分支之间没有历史关系，推送的时候需要加上允许无历史关系的推送这个参数</p><pre class="line-numbers language-shell"><code class="language-shell">git push github hexo --allow-unrelated-histories<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-新设备上同步博客"><a href="#6-新设备上同步博客" class="headerlink" title="6. 新设备上同步博客"></a>6. 新设备上同步博客</h3><p>接下来我们在新的设备上同步博客</p><p>在新的设备上，首先克隆项目</p><pre class="line-numbers language-shell"><code class="language-shell">git clone 项目链接git checkout hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后安装hexo以及依赖的其他node.js包</p><pre class="line-numbers language-shell"><code class="language-shell">npm install hexo-cli -gnpm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后就在新的设备上愉快的开始编写博客了。</p><p>最后，需要注意的就是有一些博客的主题是需要配置的，这样的话就需要额外把该主题的配置文件添加进来，具体的步骤和前面一样，这里就不赘述了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XJTU计算机视觉2022-Spring-3: 成像原理与相机模型</title>
      <link href="/2022/03/07/xjtu-ji-suan-ji-shi-jue-2022-spring-3-cheng-xiang-yuan-li/"/>
      <url>/2022/03/07/xjtu-ji-suan-ji-shi-jue-2022-spring-3-cheng-xiang-yuan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是XJTU计算机视觉2022 Spring 第三节课的笔记，本节课主要讲解了人的视觉系统、摄像机的结构以及摄像机的模型。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220306215122381.png" alt="计算机视觉与模式识别"></p><h1 id="XJTU计算机视觉2022-Spring-3-成像原理与相机模型"><a href="#XJTU计算机视觉2022-Spring-3-成像原理与相机模型" class="headerlink" title="XJTU计算机视觉2022-Spring-3: 成像原理与相机模型"></a>XJTU计算机视觉2022-Spring-3: 成像原理与相机模型</h1><p>我们上节课讲解了数字图像的基础知识，包括图像这种数据在计算机中的表示、数字图像的基本属性……本节课将讲解获得图像的设备/器官，即人眼之于人体，摄像机之于计算机。</p><p>抽象的来说，他们都是收集光的机器。因此本节课就将具体的讲解他们。</p><p>具体来说，本节课包含以下内容</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307134450869.png" alt="第三节课：成像原理与相机模型"></p><p>不过由于我所写的是笔记，而非课程的PPT的复制粘贴，因此我将有选择性的介绍一些内容。</p><h2 id="1-人的视觉系统"><a href="#1-人的视觉系统" class="headerlink" title="1. 人的视觉系统"></a>1. 人的视觉系统</h2><p>对于人来说，人有五种感觉。这五种感觉其实是人对真实世界中五种物理量的表示。</p><p>为了要获得这五种感觉，人就需要分别有五个感知系统来分别感知这些物理量。视觉（光信号）信息就是由人的视觉系统收集的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307134811700.png" alt="人的五大感知系统"></p><p>下面将详细的对人的视觉系统进行介绍。</p><h3 id="1-1-人眼的结构"><a href="#1-1-人眼的结构" class="headerlink" title="1.1 人眼的结构"></a>1.1 人眼的结构</h3><p>人眼的结构如下所示：</p><ul><li>首先当物体发出的、折射的光会经过晶状体和角膜，从而被折射。然后通过小孔完成小孔成像的这一个过程。</li><li>人的视网膜上存在很多可以感知不同种颜色的光的神经细胞，因此最终当外界的物体的光经过人眼的结构最终打在视网膜上之后，我们就会感受到这些光。</li><li>我们的大脑进一步会对这些光进行处理，最终组合、形成我们看到的物体。</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307135106308.png" alt="人眼的结构"></p><h3 id="1-2-人眼各结构的功能"><a href="#1-2-人眼各结构的功能" class="headerlink" title="1.2 人眼各结构的功能"></a>1.2 人眼各结构的功能</h3><p>总结来说，人眼各个结构的功能如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307135545468.png" alt="人眼各个结构的功能"></p><h3 id="1-3-人眼感知的光的范围"><a href="#1-3-人眼感知的光的范围" class="headerlink" title="1.3 人眼感知的光的范围"></a>1.3 人眼感知的光的范围</h3><p>光本身是波，而人眼所能够感受到的光也是有范围的。一般是从380到760纳米</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307135703044.png" alt="人眼可感知的光的范围"></p><h3 id="1-4-人眼感知光的原理"><a href="#1-4-人眼感知光的原理" class="headerlink" title="1.4 人眼感知光的原理"></a>1.4 人眼感知光的原理</h3><p>上面说到，人眼最终感知光是依靠视网膜的，那么具体来说视网膜是如何感知光的呢？因为光只是光信号，而大脑能够处理的是电信号。所以人眼中就一定存在这把光信号转换为电信号的结构。</p><p>其实完成转换的这个结构就是视网膜，更具体的来说，是视网膜上的两种四类细胞。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307140448700.png" alt="视网膜完成光信号到电信号的转换"></p><p>视网膜上这些细胞分别是：</p><ul><li>视杆细胞（Rod Cell）</li><li>视锥细胞（Cone cell）<ul><li>S-Cone</li><li>M-Cone</li><li>L-Cone</li></ul></li></ul><p>不同的细胞负责对不同的光信号产生反应。视杆细胞主要对光的明暗变化（总光强）有反应，而视锥细胞则是对不同种光的明暗变化（某种颜色光的光强）有反应。</p><p>视锥细胞可以分成三类，分别是S、M、L，这三类细胞分别对蓝色、绿色、红色的光有反应</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307141006983.png" alt="两种四类细胞"></p><p>因此，视网膜的详细结构如下：在诸多的视杆细胞中夹杂着视锥细胞</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307141044129.png" alt="视网膜的结构如下"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307141143045.png" alt="锥细胞和杆细胞-1"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307141221781.png" alt="锥细胞和杆细胞-2"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307141241668.png" alt="锥细胞和杆细胞-3"></p><h3 id="1-5-视觉的时间域响应特性"><a href="#1-5-视觉的时间域响应特性" class="headerlink" title="1.5 视觉的时间域响应特性"></a>1.5 视觉的时间域响应特性</h3><p>最后，人眼其实是有一个时间响应特性的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307141523561.png" alt="视觉暂留"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307141544054.png" alt="闪烁频率与临界闪烁频率"></p><p>最后，总的来说，人眼是一个收集光的机器</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307141756801.png" alt="人的视觉系统的总结"></p><h2 id="2-相机的结构"><a href="#2-相机的结构" class="headerlink" title="2. 相机的结构"></a>2. 相机的结构</h2><p>我们上面介绍了人的视觉系统，其中很多的笔墨花在了介绍人眼的结构上。我们现在想要让机器去收集光、形成图像，那么我们就需要让机器去模拟人的眼睛。</p><p>因此下面就将详细介绍一下相机的结构</p><h3 id="2-1-小孔成像"><a href="#2-1-小孔成像" class="headerlink" title="2.1 小孔成像"></a>2.1 小孔成像</h3><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307141934251.png" alt="为什么需要小孔成像-1"></p><p>现在我们如果直接在需要拍摄的物体前放置一个相机的话，那么最终其实是没有办法获得这个物体的图像的。</p><p>因为对于胶片上的某一点来说，它感受到的光是包含了来自于这个物体各个地方的光，所以rather than巴黎铁塔的像，胶片上的图像是铁塔的average的图像。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307142225800.png" alt="为什么需要小孔成像-2"></p><p>为此，我们其实就需要使用小孔成像，换而言之只让一部分光通过</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307142405076.png" alt="小孔成像得到最终的图像"></p><h3 id="2-2-小孔相机模型"><a href="#2-2-小孔相机模型" class="headerlink" title="2.2 小孔相机模型"></a>2.2 小孔相机模型</h3><p>上面说道，我们的相机为了最后能够形成一个像，就需要使用小孔成像原理。那么对应的，这种相机模型就就称为小孔相机模型。对应的，有一些小孔相机模型的术语</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307142836828.png" alt="小孔相机模型的术语"></p><h3 id="2-3-光电转换"><a href="#2-3-光电转换" class="headerlink" title="2.3 光电转换"></a>2.3 光电转换</h3><p>在成功的捕获到了现实世界中物体的光之后，类比于人类的眼睛，接下来的一步就是完成从光到电信号的转换。</p><p>为了完成这个转换，我们可以使用半导体元件CMOS。我们这里不去深究CMOS元件具体是如何完成光电转换的，我们这里只需要知道半导体元件可以完成光电转换即可。</p><p>所以，数码相机就是在成像平面上放置一个CMOS的阵列。这个阵列就可以完成从光到电信号的转换。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307143244938.png" alt="CMOS阵列完成光电转换"></p><p>不同的CMOS元件可以捕获不同的类型的光，即可以把不同颜色的光转换为电信号。所以，我们可以类似于人的视网膜一样，在成像平面上放置捕获三种光的CMOS，从而实现捕获彩色图像</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307143529788.png" alt="捕获彩色图像"></p><h2 id="3-相机模型"><a href="#3-相机模型" class="headerlink" title="3. 相机模型"></a>3. 相机模型</h2><p>上面我们介绍了相机的结构和成像原理，下面我们将介绍相机模型。所谓的相机模型，其市指的就是在建立空间坐标系之后，空间中一点到相机图像上一点的变换</p><h3 id="3-1-从三维空间到成像平面的变换"><a href="#3-1-从三维空间到成像平面的变换" class="headerlink" title="3.1 从三维空间到成像平面的变换"></a>3.1 从三维空间到成像平面的变换</h3><p>我们下面先完成三维空间中一个点到相机成像平面的变换。</p><p>我们把三维空间中的一个点的坐标记为：$(X,Y,Z)$，记该点在成像平面上对应的点的坐标为：$(-u<em>{ccd},-v</em>{ccd})$</p><p>那么根据相似三角形，就有</p><script type="math/tex; mode=display">(X,Y,Z)\rightarrow (u_{ccd}, v_{ccd})=(f_m\frac X Z, f_m\frac Y Z)</script><p>上式中，$X,Y,Z$、$u<em>{ccd},v</em>{ccd}$和$f_m$都是以米为单位的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307144242001.png" alt="三维点的投影-1"></p><p>为了方便后面的推导，我们把左边的CMOS平面对称到右边来，如下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307145025054.png" alt="三维点的投影-2"></p><h3 id="3-2-从成像平面到像素坐标"><a href="#3-2-从成像平面到像素坐标" class="headerlink" title="3.2 从成像平面到像素坐标"></a>3.2 从成像平面到像素坐标</h3><p>我们接下来需要完成的，就是从CMOS阵列上的物理坐标转换到图像的像素坐标上去。</p><p>对于成像平面，一般以中心点为原点，建立直角坐标系。而对于像素坐标，一般以左上角为原点，建立直角坐标系。</p><p>成像平面的坐标系中左上角为正，像素坐标中右下为正。</p><p>同样，我们由相似三角形可以知道，虽然像素坐标和成像平面坐标的单位不同，但是自己除以自己就把单位化掉了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307145210878.png" alt="成像平面到像素坐标的变换"></p><h3 id="3-3-三维空间到像素平面"><a href="#3-3-三维空间到像素平面" class="headerlink" title="3.3 三维空间到像素平面"></a>3.3 三维空间到像素平面</h3><p>接下来，我们结合上面两步，完成从三维空间到像素平面的投影。我们直接把$u<em>{ccd}$和$v</em>{cdd}$的计算式直接带入即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307150331412.png" alt="三维空间到像素平面-1"></p><p>因为$f<em>m$、$w</em>{img}$、$w<em>{ccd}$、$h</em>{img}$、$h_{ccd}$等值其实都是固定的值，在相机出厂的时候就已经确定了（虽然现在有变焦相机，但是变焦相机的焦距使我们手动调整的，所以我们其实是知道这个焦距的，而CMOS的长、宽，拍摄图像的分辨率都是固定的）。因此我们其实可以吧上面两个绿框内的值用一个固定的值来表示。</p><p>下式中，$f_X$和$f_Y$分别表示以像素计量的焦距。即焦距等于多少个像素，像素的物理宽度米则是由相机本身决定。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307150959602.png" alt="三维空间到像素平面-2"></p><h3 id="3-4-三维透视变换"><a href="#3-4-三维透视变换" class="headerlink" title="3.4 三维透视变换"></a>3.4 三维透视变换</h3><p>我们接下来把上面的式子进行进一步的变换</p><script type="math/tex; mode=display">\begin{align}u_{img} &= f_X\frac X Z  + p_x\\v_{img} &= f_Y\frac Y Z  + p_y\end{align}</script><script type="math/tex; mode=display">\Rightarrow \begin{align}Z\cdot u_{img} &= f_X\cdot X   + p_x \cdot Z\\Z\cdot v_{img} &= f_Y\cdot Y   + p_y \cdot Z\end{align}</script><p>然后把上面的式子向量化之后，就得到了</p><script type="math/tex; mode=display">\lambda\begin{bmatrix}u_{img}\\v_{img}\\1\end{bmatrix} = \begin{bmatrix}f_x & & p_x \\ & f_y & p_y \\  & & 1\end{bmatrix}\cdot\begin{bmatrix}X\\Y\\Z\end{bmatrix}</script><p>其中，$\lambda$就是某一个的深度信息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307151906579.png" alt="三维透视投影变换"></p><h3 id="3-5-相机的内部参数"><a href="#3-5-相机的内部参数" class="headerlink" title="3.5 相机的内部参数"></a>3.5 相机的内部参数</h3><p>因为上面的矩阵是相机内部的结构决定的，在相机出场的时候就定下来了，因此这些参数又成为内部参数。内部参数完成了从测度空间到像素空间的转换矩阵</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307152005131.png" alt="相机的内部参数"></p><h3 id="3-6-逆变换"><a href="#3-6-逆变换" class="headerlink" title="3.6 逆变换"></a>3.6 逆变换</h3><p>我们扇面完成了从三维平面到像素平面的变换。可是有一个问题就是我们能不能从像素平面还原得到一个点的三维坐标呢？</p><p>这个其实是不行的，因为上面在投影的过程中，我们在投影阶段是知道Z/$\lambda$的，但是现在是已经获得了图像，要转换到三维空间中去，这个时候我们是不知道Z的，因此是没有办法进行逆变换得到原始点的。因此我们说投影的过程中损失了深度信息。</p><p>我们进行逆变换，只会得到一条射线</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307152318551.png" alt="逆变换只能得到一条射线"></p><h2 id="4-Dolly-Zoom-Effect"><a href="#4-Dolly-Zoom-Effect" class="headerlink" title="4. Dolly Zoom Effect"></a>4. Dolly Zoom Effect</h2><p>物体在图像上的大小是由图像上物体的宽度和高度共同决定的，即$+u<em>{img}-u</em>{img}$、$+v<em>{img}-v</em>{img}$两个共同决定</p><p>而对于某一个点的$u<em>{img},v</em>{img}$是由下式决定的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307152743724.png" alt="决定像素坐标的式子"></p><p>那么现在如果$f_m$变大，那么图像就会变大，反之$f_m$变小，图像就会变小。</p><p>如果一个人在走向镜头，即$X,Y$变大，我们其实就可以调节$f_m$来保证这个人在图像上的大小不变。但是对应的，除了这个人以外的其他所有物体的大小都将会变小，因为$f_m$变小了。</p><p>这种效果在电影界称为Dolly Zoom效应。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307153204884.png" alt="Dolly Zoom效应"></p>]]></content>
      
      
      <categories>
          
          <category> XJTU计算机视觉2022-Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 模式识别 </tag>
            
            <tag> Computer Vision </tag>
            
            <tag> Pattern Recognition </tag>
            
            <tag> Imaging Principle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XJTU计算机视觉2022-Spring-2: 数字图像基础</title>
      <link href="/2022/03/06/xjtu-ji-suan-ji-shi-jue-2022-spring-2-shu-zi-tu-xiang-ji-chu/"/>
      <url>/2022/03/06/xjtu-ji-suan-ji-shi-jue-2022-spring-2-shu-zi-tu-xiang-ji-chu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是XJTU计算机视觉2022 Spring 第二节课的笔记，对数字图像的定义、常见的图像的数据类型、图像的基本属性等内容进行了讲解。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220306215122381.png" alt="计算机视觉与模式识别"></p><h1 id="XJTU计算机视觉2022-Spring-2-数字图像基础"><a href="#XJTU计算机视觉2022-Spring-2-数字图像基础" class="headerlink" title="XJTU计算机视觉2022-Spring-2: 数字图像基础"></a>XJTU计算机视觉2022-Spring-2: 数字图像基础</h1><p>上节课我们说道，本课程的全称计算机视觉与模式识别其实包含了两个部分：计算机视觉与模式识别。其中计算机视觉是我们研究的对象，而模式识别是我们用于研究计算机视觉的工具。</p><p>而对于计算机视觉来说，研究其的第一步就是研究如何在计算机中表示视觉。视觉信息最重要的一种表示（representation）就是图像，因此本节课就将讲解图像在图像在计算机中的表示，即数字图像</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307082751990.png" alt="第二节课数字图像基础的内容"></p><p>不过由于我所写的是笔记，而非课程的PPT的复制粘贴，因此我将有选择性的介绍一些内容。</p><h2 id="1-数字图像的定义"><a href="#1-数字图像的定义" class="headerlink" title="1. 数字图像的定义"></a>1. 数字图像的定义</h2><p>我们首先看一个图像的例子。当我们把一个图像方法很多倍之后，就会看到一个个灰色的小方块</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307083326212.png" alt="一个图像的例子"></p><p>其实图像在计算机中就是由一个又一个的像素块所组成的，这些像素块以栅格的形式组织。</p><p>因此，数字图像的定义如下：</p><ul><li><strong>数字图像是二维图像用有限数字数值像素的表示</strong></li><li>或者说，<strong>数字图像是定义在正则化网格点上的离散函数</strong>。其中函数以网格坐标$(i,j)$为输入，函数值$I(i,j)$为网格中该位置的像素值。根据图像的色彩系统的不同，函数值为一个标量（灰色图像的灰度色彩系统），或者为一个向量（彩色图像的RGB、HSV等色彩系统）。</li></ul><p>此外，<strong>数字图像简称为图像</strong>，后面我们将混用数字图像和图像。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307084035453.png" alt="数字图像的定义"></p><p>维基百科上对数字图像（Digital Image）的介绍如下</p><blockquote><p>数字图像，是二维图像用有限数字数值像素的表示。</p><p>通常，<strong>像素在计算机中保存为二维整数数组的光栅图像，这些值经常用压缩格式进行传输和储存</strong>。</p><p>数字图像可以许多不同的输入设备和技术生成，例如数字相机、扫描仪、坐标测量机、seismographic profiling、airborne radar等等，也可以从任意的非图像数据合成得到，例如数学函数或者三维几何模型，三维几何模型是计算机图形学的一个主要分支。数字图像处理领域就是研究它们的变换算法。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307085152257.png" alt="维基百科上对数字图像的介绍"></p></blockquote><p>通俗的来说：</p><ul><li>计算机视觉是一门研究如何使机器“看”的科学</li><li>更进一步的说，就是是指<strong>用摄影机和电脑代替人眼</strong>，完成<ul><li><strong>对目标进行识别、跟踪和测量</strong></li><li><strong>并进一步做图形处理</strong></li><li><strong>使电脑处理成为更适合人眼观察或传送给仪器检测的图像</strong></li></ul></li></ul><h2 id="2-常见图像数据类型"><a href="#2-常见图像数据类型" class="headerlink" title="2. 常见图像数据类型"></a>2. 常见图像数据类型</h2><p>上面我们说图像是定义在正则化网格点上的离散函数。那么根据函数的输入输出不同（其实输入都是一样的，即网格点的坐标$(i,j)$，主要是输出不同），图像有不同的类型。</p><p>下面就将介绍下常见的图像（这种数据）的种类。</p><h3 id="2-1-一位图像：黑白图"><a href="#2-1-一位图像：黑白图" class="headerlink" title="2.1 一位图像：黑白图"></a>2.1 一位图像：黑白图</h3><p>一位图像即指图像的每个像素用一个比特数值来表示，那么一位图像只能表示两种颜色</p><ul><li>1 表示白</li><li>0 表示黑</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307090048180.png" alt="一位黑白图像"></p><h3 id="2-2-八位图像：灰度图"><a href="#2-2-八位图像：灰度图" class="headerlink" title="2.2 八位图像：灰度图"></a>2.2 八位图像：灰度图</h3><p>八位图像中每一个像素的值都是用一个八位的二进制数字来表示，因此能够表示从0-255种色彩。<strong>在实践中一般用这8位二进制数字来表示光强</strong>，0为最暗，255为最亮。中间的值表示从黑色到百色的过度，因此就是灰色，所以八位图像称为灰度图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307090427688.png" alt="八位灰度图像"></p><h3 id="2-3-二十四位图像：（真）彩色图"><a href="#2-3-二十四位图像：（真）彩色图" class="headerlink" title="2.3 二十四位图像：（真）彩色图"></a>2.3 二十四位图像：（真）彩色图</h3><p>二十四位图像中每一个像素的值都是用一个二十四位的二进制数字来表示。这个二十四位数字由三个八位二进制数字组成，分别表示红绿蓝三种颜色的光的强度。</p><p>而红绿蓝三种颜色的光按照不同的强度混合，在人眼看来就是不同的颜色的光。此外由于二十四位的二进制数字分别表示三种颜色，因此一个位置上的像素值其实也可以表示成一个向量，即$(V<em>{red},V</em>{green},V_{blue})$</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307091216362.png" alt="二十四位彩色图像"></p><h3 id="2-4-伪彩色：彩色索引图像"><a href="#2-4-伪彩色：彩色索引图像" class="headerlink" title="2.4 伪彩色：彩色索引图像"></a>2.4 伪彩色：彩色索引图像</h3><p>我们上面说到，真彩色图能够表示$2^{24}$，大概是百万以上种颜色。虽然能够表示的颜色非常多，但是人眼不一定能够分辨出来这些颜色。此外，每个像素用24位，即3个字节表示的话，那么一张图像512高，512宽的图像，就非常占用存储空间了（不考虑现有的一些图像压缩方法）。</p><p>为了节省空间，有另外一种彩色的表示方式，就是提前设定好一个lookup table，这个表中提前设定好了一些颜色，而在图像中的像素值只需要表示色彩查询表中的位置即可。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307092022707.png" alt="彩色索引图像"></p><p>而在很多的软件中，都会有伪彩色的色彩盘/查色表的概念</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307104859304.png" alt="其他软件中的色彩盘"></p><h2 id="3-图像的基本属性"><a href="#3-图像的基本属性" class="headerlink" title="3. 图像的基本属性"></a>3. 图像的基本属性</h2><p>上面我们介绍了常见的图像数据类型，接下来将讲解图像的基本属性</p><h3 id="3-1-图像的三个基本属性"><a href="#3-1-图像的三个基本属性" class="headerlink" title="3.1 图像的三个基本属性"></a>3.1 图像的三个基本属性</h3><p>所谓<strong>属性，指的是事物共同的性质和特点</strong>。例如，一个对象的颜色和形式，人的能力，身份，以及社会的基础关系等等。属性是用在许多领域的术语。（来自维基百科）</p><p>因此，图像作为一种真实存在的事物，也是具有特定的属性的。图像的一些基本属性如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307092901697.png" alt="图像的基本属性"></p><p>此外，图像虽然具有分辨率这个属性，但是我们在说到图像分辨率的时候因为图像的分辨率与显示器的显示分辨率和人眼分辨率是息息相关的，因此我们不能仅仅只介绍图像分辨率。所以下面在讲解</p><p>下面就将详细的介绍图像的这些属性</p><h3 id="3-2-分辨率"><a href="#3-2-分辨率" class="headerlink" title="3.2 分辨率"></a>3.2 分辨率</h3><p>上面说到，分辨率包括：</p><ul><li>图像分辨率</li><li>显示分辨率</li><li>人眼分辨率</li></ul><h4 id="1-图像分辨率"><a href="#1-图像分辨率" class="headerlink" title="1. 图像分辨率"></a>1. 图像分辨率</h4><p>图像分辨率指的是一个图像的正则化网格点的数量。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307094011377.png" alt="图像分辨率"></p><p>通常有两种方式衡量图像的分辨率：</p><ul><li><p>用表示一张图像的像素矩阵长宽来衡量，一般说的$512\times512$、$64\times64$就是这个意思</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307094514794.png" alt="两种不同分辨率的Lena"></p></li><li><p>另外一种方法就是根据每英寸图像内有多少个像素点，则此时图像分辨率的单位为PPI(Pixels Per Inch)，通常叫做像素每英寸。</p></li></ul><p>需要注意的是，对于计算机中的数字图像来说，一般选用第一种方式来表示图像分辨率，对于印刷工业、工业设计来说选用第二种方式表示图像分辨率，原因如下：</p><blockquote><p>在平面设计中，图像的分辨率以PPI来度量，它和图像的宽、高尺寸一起决定了图像文件的大小及图像质量。比如，一幅图像宽8英寸、高6英寸，分辨率为100PPI，如果保持图像文件的大小不变，也就是总的像素数不变，将分辨率降为50PPI，在宽高比不变的情况下，图像的宽将变为16英寸、高将变为12英寸。<strong>打印输出</strong>变化前后的这两幅图，我们会发现后者的幅面是前者的4倍，而且图像质量下降了许多。</p><p>那么，把这两幅变化前后的图送入计算机显示器会出现什么现象呢？比如，将它们送入显示模式为800×600的显示器显示，我们会发现这两幅图的画面尺寸一样，画面质量也没有区别。其实对于计算机的显示系统来说，一幅图像的PPI值是没有意义的，起作用的是这幅图像所包含的总的像素数，即：水平方向的像素数×垂直方向的的像素数。<strong>这是因为计算机的显示器的工作方式也是将屏幕划分为了网格</strong>。而第二种分辨率表示方法同时也表示了图像显示时的宽高尺寸。前面所讲的PPI值变化前后的两幅图，它们总的像素数都是800×600，因此在显示时是分辨率相同、幅面相同的两幅图像。读者不妨尝试一下这个例子。</p></blockquote><h4 id="2-显示分辨率、点距"><a href="#2-显示分辨率、点距" class="headerlink" title="2. 显示分辨率、点距"></a>2. 显示分辨率、点距</h4><p>显示分辨率指的其实就是显示屏上能够显示出的像素数目</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307104953428.png" alt="显示分辨率"></p><p>然而对于显示器来说，虽然其显示图像的原理就是以网格的形式来表示一个个像素，但是显示器的每一个像素都是具有物理尺寸的点，因此就有了点距这个概念</p><p>所谓点距指的其实是相邻的两个像素之间的距离。点距的单位常用毫米mm</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307105255604.png" alt="点距的概念"></p><p>由于屏幕中的点是具有实际尺寸的，因此就可以用上面讲的第二种方式PPI来衡量显示器的分辨率</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307105524431.png" alt="PPI衡量的显示分辨率"></p><p>​    </p><h4 id="3-人眼分辨率"><a href="#3-人眼分辨率" class="headerlink" title="3. 人眼分辨率"></a>3. 人眼分辨率</h4><p>第三分辨率就是人眼的分辨率。人眼的分辨率指的是人眼分辨细节的能力。用人能看到的位于$y$处的长度为$x$的最小值来表示。例如在100米处时候，人眼能够分辨出来最小的物体是15米的话，那么人演的分辨率就是$15/100$</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307105830009.png" alt="人眼分辨力的计算"></p><p>一般来说，在测人眼分辨力的时候是把一个<code>山</code>放到距离人2-5米左右的地方来看。</p><p>由于相比于距离，这个物体非常小，因此就直接用角度来衡量了，即分辨角</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307110205501.png" alt="分辨角"></p><p>人眼分辨力的一些特点如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307110238552.png" alt="人眼分辨力的特点"></p><p>一些广泛测试得到的人眼的分辨率如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307110320129.png" alt="人眼分辨力的一些数据"></p><h3 id="3-3-像素深度、图像量化"><a href="#3-3-像素深度、图像量化" class="headerlink" title="3.3 像素深度、图像量化"></a>3.3 像素深度、图像量化</h3><p>像素深度指存储每个像素所用的位数，像素深度又称为图像深度。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307110648479.png" alt="像素深度"></p><p>而在获得图像的时候，我们需要把连续的光强离散化为整数，这一步称为量化。量化的时候就使用的量化等级决定了我们图像的像素深度</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307110817974.png" alt="图像量化"></p><p>一般来说，量化等级越少图像的细节信息就越少，例如</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307111013000.png" alt="减少量化等级-1"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307111029722.png" alt="减少量化等级-2"></p><p>此外，量化的时候每一个点的采样数也决定了图像的色彩，每个点只有一个采样值的话那么就是灰度图像，三个值的话就是彩色图像。四个值还包括了灰色信息。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307111150847.png" alt="量化决定色彩"></p><h3 id="3-4-色彩"><a href="#3-4-色彩" class="headerlink" title="3.4 色彩"></a>3.4 色彩</h3><p>图像的最后一个基本属性就是其色彩。根据图像表示色彩的方式不同，可以分为</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307111408408.png" alt="图像表示彩色的方式"></p><p>而表示每个颜色用的位数决定了能够表示的颜色的数量</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307111533488.png" alt="位数决定能表示的颜色数量"></p><h2 id="4-图像的存储"><a href="#4-图像的存储" class="headerlink" title="4. 图像的存储"></a>4. 图像的存储</h2><p>根据我们表示不同种类的图像的不同，我们存储图像的方法也是不同的。</p><h3 id="4-1-黑白图像的存储"><a href="#4-1-黑白图像的存储" class="headerlink" title="4.1 黑白图像的存储"></a>4.1 黑白图像的存储</h3><p>存储黑白图像只用一位01表示即可，所以像素数量除以8就是需要的字节数</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307111720974.png" alt="黑白图像的存储"></p><h3 id="4-2-灰度图像的存储"><a href="#4-2-灰度图像的存储" class="headerlink" title="4.2 灰度图像的存储"></a>4.2 灰度图像的存储</h3><p>灰度图像中每一个像素值由一个字节（8个比特）来表示，所以像素的数量就是需要用的字节数量。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307112012181.png" alt="灰度图像的存储"></p><h3 id="4-3-真彩色图像的存储"><a href="#4-3-真彩色图像的存储" class="headerlink" title="4.3 真彩色图像的存储"></a>4.3 真彩色图像的存储</h3><p>真彩色图像每一位需要保存三种颜色的光强，因此计算得到的比特数还需要乘三，计算得到的才是需要的字节数量</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307112305371.png" alt="真彩色图像的存储"></p><h3 id="4-4-计算图像占用的存储空间"><a href="#4-4-计算图像占用的存储空间" class="headerlink" title="4.4 计算图像占用的存储空间"></a>4.4 计算图像占用的存储空间</h3><p>计算图像占用的存储空间其实还是比较简单的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307112430858.png" alt="计算图像占用的存储空间-1"></p><p>例如下面的例子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307112503839.png" alt="计算示例"></p><h2 id="5-图像的分类"><a href="#5-图像的分类" class="headerlink" title="5. 图像的分类"></a>5. 图像的分类</h2><p>最后介绍一下图像的分类。其实从不同的角度进行划分，有多种分类方式。例如：按照有无颜色可以分为灰度图和彩色图。</p><p>但是下面我们要介绍的是在计算机中图像的分类，即矢量图和点阵图。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307112644494.png" alt="图像的分类"></p><h3 id="5-1-矢量图和点位图"><a href="#5-1-矢量图和点位图" class="headerlink" title="5.1 矢量图和点位图"></a>5.1 矢量图和点位图</h3><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307112716850.png" alt="矢量图和点位图-1"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307112818366.png" alt="矢量图和点位图-2"></p><h3 id="5-2-矢量图"><a href="#5-2-矢量图" class="headerlink" title="5.2 矢量图"></a>5.2 矢量图</h3><p>矢量图指的就是采用一系列计算机指令描绘的图，以点、线、面、曲线、圆、矩形等这些基本的几何单元来描述图像。</p><p>因此矢量图不管怎样放缩小都能够保证其边缘不模糊。其本质是对图像的描述，或者说图像的一种高级表示</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307112842906.png" alt="矢量图"></p><h3 id="5-3-点位图"><a href="#5-3-点位图" class="headerlink" title="5.3 点位图"></a>5.3 点位图</h3><p>点位图其实就是用像素表示的图像，是图像的低级表示</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307113029856.png" alt="点位图"></p><h3 id="5-4-图形学"><a href="#5-4-图形学" class="headerlink" title="5.4 图形学"></a>5.4 图形学</h3><p>图形学其实就是研究根据给定的描述，用计算机生成相应的图形、图像的领域。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307113055596.png" alt="计算机图形学"></p><h3 id="5-5-涉及图形图像的研究"><a href="#5-5-涉及图形图像的研究" class="headerlink" title="5.5 涉及图形图像的研究"></a>5.5 涉及图形图像的研究</h3><p>因为图形学、计算机视觉、图像处理都涉及到了图像，因此下面根据输入输出给出来了一张表来表示计算机视觉、图像处理和计算机图形学之间的关系。</p><p>狭义的计算机视觉是输入图像，输出图像的高级表示，例如图像中的物体、类别等等，而图像处理则是输入图像，输出图像。图形学则是输入图像的描述，输出图像</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220307113133326.png" alt="image-20220307113133326"></p>]]></content>
      
      
      <categories>
          
          <category> XJTU计算机视觉2022-Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 模式识别 </tag>
            
            <tag> Computer Vision </tag>
            
            <tag> Pattern Recognition </tag>
            
            <tag> Fundamentals of digital image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近的一些情况</title>
      <link href="/2022/03/06/zui-jin-de-yi-xie-qing-kuang-1/"/>
      <url>/2022/03/06/zui-jin-de-yi-xie-qing-kuang-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文记录了我的一些最近的情况</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220306220558702.png" alt="ICRA2022的Submission Acknowledgement"></p><h1 id="最近的一些情况-1"><a href="#最近的一些情况-1" class="headerlink" title="最近的一些情况-1"></a>最近的一些情况-1</h1><p>上次更新文章仿佛已经是一个月前的事情了，到今天，也就是3月6日已经快一个月了。所以写篇文章记录下最近的情况，证明没有摸鱼O(∩_∩)O。同时也准备规划一下未来的一些博客的计划</p><h2 id="1-过去一段时间的事情"><a href="#1-过去一段时间的事情" class="headerlink" title="1. 过去一段时间的事情"></a>1. 过去一段时间的事情</h2><p>一个月前大概是2月7号，我还在老家过寒假，因此有足够的时间写博客，所以这段时间写了比较多的文章。</p><p>可是2月7号之后，事情一件接着一件导致我没有时间来写作，首先是2月7号以后进行了一场非常重要的面试，也是我非常想去的学校（可以说是我的梦校）的面试。所以为了这个这面我专心准备了几天，结果的话官网说是4月中旬发邮件通知我，面试的老师倒是说一到两个周后发邮件通知我。所以现在我也不知道具体情况怎么样，贼怕自己凉凉了。</p><p>除了面试以外，先前的Cambridge这边的项目需要听一下课、写一些东西，所以花了一段时间把课听完了，准备完成要求的submission。一直到了2月15号我准备开学返校。因为我的学校2月19号开学，但是数模美赛2月18号就开始了，因此不得不提前几天回去。刚好因为寒假从学校走的时候西安处于疫情末尾，因此走的比较仓促，所以提前几天回来收拾了一下宿舍。</p><p>美赛从2月18号到2月22号做了四天，期间感觉挺不错的，选择的C题，给模型引入了Uncertainty作为判据，虽然结果好像也要等一两个月，不过至少从排版上来说还是蛮不错的。</p><p>然后离谱的事情就来了，新学期教务处在网站上发了一个公告。因为上个学期末西安的疫情，学校最终取消了期末考试周。而这个公告的内容就是说2月19号开学第一个周完成上个学期的期末考试。结果就是我有两门期末考试和数模美赛完美撞车了，因此不得不缓考。除了缓考的几门以外，还有几个考试需要完成。所以第一个周就忙于复习和考试了。</p><p>大概是2月28号左右开始了开学的第二个周，这个周就开始了正常的上课。这个学期我的课比较多，有31个学分要修，所以本身时间就比较少。一开始我也是打算抽时间来写博客。但是2月1号的时候去年投的ICRA2022中了。审稿一件一个比较支持，一个偏负面，最后领域主席AC救了一命。偏负面的审稿人主要diss了文章的experiments部分，说这一节之前写的非常好，这一节之后仿佛就成了另外一个人写的一样，非常的晦涩难懂。其实这个的确有一部分是我们的原因，去年投稿的时候比较赶，最后是赶着ddl提交的，所以experiment部分就完成的比较匆忙。最后文章要改的就比较多，experiments部分整个重写，然后补充几个实验。这个时候坑爹的地方就来了，ICRA2022 final submission的时间是2022年3月1日晚上12点 PST，换算到北京时间就是3月2日下午3点半。所以从2月28号开始到3月2号下午这两天半的时间需要狂改文章。最后熬了一个大半夜外加翘了一整天的课狂写，总算是在ddl前完成了终稿并且提交了。下面就是提交终稿之后收到的acknowledgement letter。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220306220558702.png" alt="ICRA2022的Submission Acknowledgement"></p><p>本来觉得事情总算告一段落了，可是开始继续写文章了，结果这个时候学校2023的申请项目出来了。最早觉得直接申请就OK了，没有想到我的托福过了有效期，有需要重新考一个。所以又得画上两三天时间捡起来，然后后面一两个周练习就行。所以上个周，即从2月28号开始到3月5号就这样过去了。</p><p>虽然目前课程比较多，作业压力也比较大，不过总的来说还是ok的，还是能够抽出来事件写博客的。所以非常惭愧，直到一个月后的今天才有时间重新提笔。</p><h2 id="2-未来的一些规划"><a href="#2-未来的一些规划" class="headerlink" title="2. 未来的一些规划"></a>2. 未来的一些规划</h2><p>因为这个学期是我在CS的第二个学习，选了一些比较有意思的课程，比如Assembly、Computer Vision、Machine Learning这些我挺感兴趣的课程，所以未来准备写一些课程的notes，一方面是note，一方面其中的知识又可以作为博客的内容。所以准备写一些这些内容。</p><p>除了课程的notes以外，上一个工作可以说已经到了结尾，除了5月下旬还需要去开会和给一个presentation（其实想推给我的学长去做<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>），发表到ICRA2022 Conference Proceedings上去其实就标志着一个工作已经结束了。</p><p>新的工作准备面向Point Cloud、Video Understanding等方向来做。因为是新的工作，所以前期的文献调研、设计方法，到后期的设计方法、写文章等等过程其实都可以记录下来。所以我也准备把做新的工作时候的一些内容写成博客。具体内容会包括前期阅读的文章的一个Summary，中期的科研进展、研究心得、研究日记等内容，当然如果运气好的话最后发表出来之后会写几个（主要是中文、英文以及面向0 beginner、面向这个领域的研究者）博客出来详细的讲解我们的方法。当然，一些内容，包括研究的进展这些内容是最后研究结束了之后才会发出来。</p><h2 id="3-这段时间学习的Skills"><a href="#3-这段时间学习的Skills" class="headerlink" title="3. 这段时间学习的Skills"></a>3. 这段时间学习的Skills</h2><p>这段时间当然不止是处理一些杂事了。其实我抽时间学了一手MS Project。因为有上一段科研的经历，明白拖延症是多烦，所以想要严格的stick to the project还是需要有一个严格的计划的。其实从某个角度来讲科研也可以视为一个project，所以也可以用项目管理的角度来管理科研。所以特地学了一下Project，给下一段科研做了一个项目规划。期待后面能够帮助到新的科研。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/Snipaste_2022-03-08_02-06-57.png" alt="Project的使用图"></p><p>以上就是最近的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
          <category> 个人情况 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XJTU计算机视觉2022-Spring-1: 绪论</title>
      <link href="/2022/03/06/xjtu-ji-suan-ji-shi-jue-2022-spring-1-xu-lun/"/>
      <url>/2022/03/06/xjtu-ji-suan-ji-shi-jue-2022-spring-1-xu-lun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是XJTU计算机视觉2022 Spring 第一节课Introduction的笔记，对计算机视觉、模式识别等内容进行了介绍，同时说明了课程相关的要求</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220306215122381.png" alt="计算机视觉与模式识别"></p><h1 id="XJTU计算机视觉2022-Spring-1-绪论"><a href="#XJTU计算机视觉2022-Spring-1-绪论" class="headerlink" title="XJTU计算机视觉2022-Spring-1: 绪论"></a>XJTU计算机视觉2022-Spring-1: 绪论</h1><p><strong>计算机视觉是一门研究如何使机器“看”的科学</strong>，更进一步的说，就是是指用摄影机和电脑代替人眼对目标进行识别、跟踪和测量等任务，从而实现机器视觉，并进一步做图形处理，使电脑处理成为更适合人眼观察或传送给仪器检测的图像。</p><p>第一节课绪论的所有内容如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220306232754930.png" alt="第一节课绪论的内容"></p><p>不过由于我所写的是笔记，而非课程的PPT的复制粘贴，因此我将有选择性的介绍一些内容。</p><h2 id="1-计算机视觉的定义"><a href="#1-计算机视觉的定义" class="headerlink" title="1. 计算机视觉的定义"></a>1. 计算机视觉的定义</h2><p>维基百科上对计算机视觉（Computer Vision）的介绍如下</p><blockquote><p>Computer vision is an interdisciplinary scientific field that deals with how computers can gain high-level understanding from digital images or videos. From the perspective of engineering, it seeks to understand and automate tasks that the human visual system can do.</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220306233115131.png" alt="维基百科上对计算机视觉的介绍"></p></blockquote><p>通俗的来说：</p><ul><li>计算机视觉是一门研究如何使机器“看”的科学</li><li>更进一步的说，就是是指<strong>用摄影机和电脑代替人眼</strong>，完成<ul><li><strong>对目标进行识别、跟踪和测量</strong></li><li><strong>并进一步做图形处理</strong></li><li><strong>使电脑处理成为更适合人眼观察或传送给仪器检测的图像</strong></li></ul></li></ul><h2 id="2-模式识别的定义"><a href="#2-模式识别的定义" class="headerlink" title="2. 模式识别的定义"></a>2. 模式识别的定义</h2><p>这门课程的名称是<code>计算机视觉与模式识别</code>，其中包含了Computer Vision和Pattern Recognition两个部分。因此下面就将介绍一下模式识别的定义。</p><p>想要明白什么是模式识别，就需要先明白什么是模式识别。在前面的某一个博客中我其实以及介绍过了模式（Pattern），这里再介绍一下</p><p>Pattern虽然直译为模式，但其含义其实是规律，即万事万物中存在的规律。用维基百科的话来说如下</p><blockquote><p>模式（英语：Pattern）是存在于人们感知到的世界、人造设计或抽象思想中的规律。因此，模式的元素以可预测的方式重复。几何图案是一种由几何形状形成的图案，通常像壁纸设计一样重复。</p><p>任何感官都可以直接观察模式。相反，科学、数学或语言中的抽象模式可能只有透过分析才能观察到。实践中的直接观察，意味著看到在自然界和艺术中普遍存在的视觉模式。自然界中的视觉模式通常是混乱的，很少完全重复，并且经常涉及分形。自然图案包括螺旋、曲折、波浪、泡沫、瓷砖、裂缝，以及由旋转和反射的对称性产生的图案。模式有一个潜在的数学结构[1]；事实上，数学可以被看作是对规律的探索，任何函数的输出都是一个数学模式。同样在科学中，理论解释和预测世界的规律。</p><p>在艺术和建筑中，装饰或视觉图案可以组合和重复以形成设计用于对观看者产生选定效果的图案。在计算机科学中，软体设计模式是对一类编程问题的已知解决方案。在时尚界，图案是用于创建任意数量的类似服装的模板。</p><p>在模式之中，某些固定的元素不断以可预测的方式周期性重现。最基本而常见的模式，称为密铺，具备重复性以及周期性两大特征。找寻出固定模式是人类基本的认知功能之一。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220306234310705.png" alt="模式（Pattern）的含义"></p></blockquote><p>所以模式识别的意思其实指的就是识别存在于事物中的规律。然后利用这种规律来帮助我们完成任务。</p><h2 id="3-模式识别和计算机视觉的关系"><a href="#3-模式识别和计算机视觉的关系" class="headerlink" title="3. 模式识别和计算机视觉的关系"></a>3. 模式识别和计算机视觉的关系</h2><p>我们上面说道，计算机视觉其实指的就是用机器来完成诸如追踪、目标识别和测量等视觉任务。因此，计算机视觉和模式识别的关系其实就是：<strong>模式识别为计算机视觉解决机器视觉任务提供了工具</strong></p><p>换而言之，本课程的关注的对象就是计算机视觉，而模式识别是帮助计算机视觉完成任务的有力工具。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220306235133384.png" alt="计算机视觉和模式识别的关系"></p><p>所以我们后面要讲的内容就包括：</p><ul><li>计算机表示视觉的方式（图像的表示）</li><li>计算机（摄像机）成像的原理</li><li>对图像的变换（几何变换、灰度变换、空间滤波、频域变换等等）</li><li>等等</li></ul><p>这些内容都是经典的计算机视觉的内容，并且将会为接下来的学习做好准备</p>]]></content>
      
      
      <categories>
          
          <category> XJTU计算机视觉2022-Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机视觉 </tag>
            
            <tag> 模式识别 </tag>
            
            <tag> Computer Vision </tag>
            
            <tag> Pattern Recognition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-10: Generative Adversarial Network (GAN)</title>
      <link href="/2022/02/07/li-hong-yi-ml2021-spring-10-gan/"/>
      <url>/2022/02/07/li-hong-yi-ml2021-spring-10-gan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是Machine Learning 2021 Spring 第十节课的笔记，本节课主要讲解了Generative Adversarial Network (GAN)。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207200038612.png" alt="第十节课：Generative Adversarial Network (GAN)"></p><h1 id="李宏毅ML2021-Spring-10-Generative-Adversarial-Network-GAN"><a href="#李宏毅ML2021-Spring-10-Generative-Adversarial-Network-GAN" class="headerlink" title="李宏毅ML2021-Spring-10: Generative Adversarial Network (GAN)"></a>李宏毅ML2021-Spring-10: Generative Adversarial Network (GAN)</h1><p>我们前面讲了Regression、Classification这两类任务，我们接下来要进入一个新的主题，新的主题中我们关注的任务是Generation这个任务。</p><h2 id="1-Network-as-Generator"><a href="#1-Network-as-Generator" class="headerlink" title="1. Network as Generator"></a>1. Network as Generator</h2><p>在前面的课程中，我们讲的网络（模型），他们接受一个输入，然后输出一个输出。我们前面的讲解各种模型，我们的输入可以是一个包含不同feature的input（Regression任务不同的Feature），一张图片（CNN），一个向量组（Seq2Seq），而输出则可以是一个scalar（Regression），一个向量（Classification），或者是一个向量组（Seq2Seq）。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207202907473.png" alt="前面讲过的模型的输入和输出" style="zoom:67%;"></p><p>现在我们要讲Generation这件事，而Generation这件事和前面讲的网络不同，它的输入除了x以外，还会有一个random variable。</p><p>这个random variable是从某个的Distribution sample得到的，所以现在Network（Generator）是在看了$x$和$z$之后才会输出$y$。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207203757118.png" alt="Generator的输入是一个x和服从某个分布的随机变量z" style="zoom:67%;"></p><p>那么我们现在就会问，模型到底要怎么样才能够同时看两个输入$x$和$z$呢？这个其实是取决于我们的网络如何设计的，例如：</p><ul><li>$x$和$z$是两个不同长度的向量，然后用hstack连接起来作为最终的输入</li><li>$x$和$z$是两个长度相同的向量，然后把他们两个加起来作为最终的输入</li></ul><p>这两种都是可以的。其实还有更多的设计的方法，都是可以。</p><p>此外，我们还有一个限制就是这个分布必须要足够的简单，简单到我们知道这个分布的解析式。例如$z$这个随机变量可以服从一个高斯分布，也可以服从一个均匀分布，乃至于是Zeta分布等等都可以。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207210050594.png" alt="我们必须要知道参数z服从的分布" style="zoom:67%;"></p><p>所以，现在有一个新的$x$进来，我们从这个分布中sample得到一个$z$，然后得到一个输出$y$</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207210659724.png" alt="从Distribution中sample得到一个z，然后得到一个输出" style="zoom:67%;"></p><p>所以，我们现在有很多不同的输入，我们就会进行很多次sample，然后会得到很多不同的输出</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207211657890.png" alt="每次都会进行sample，得到不同的输出" style="zoom:67%;"></p><p>因此，我们网络的输出就已经不再是一个单一的数值了，而是一个分布。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207212530138.png" alt="网络的输出是一个分布" style="zoom:67%;"></p><p>而<strong>这种输出是一个Distribution的Network称为一个Generator</strong>。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207212720228.png" alt="输出是Distribution的Network称为一个Generator" style="zoom:67%;"></p><h2 id="2-Why-do-we-need-distributions-as-output"><a href="#2-Why-do-we-need-distributions-as-output" class="headerlink" title="2. Why do we need distributions as output"></a>2. Why do we need distributions as output</h2><p>我们上面说道，输出是分布的网络称为Generator。那么我们就想问为什么我们需要一个网络的输出是分布呢？或者说为什么我们需要Generator？</p><h3 id="1-Video-Prediction"><a href="#1-Video-Prediction" class="headerlink" title="1. Video Prediction"></a>1. Video Prediction</h3><p>我们首先以Video Prediction任务为例进行讲解。Video Prediction指的是让机器看一段视频，然后让机器预测接下来会发生什么事情。</p><p>我们这里的视频用的小精灵这个游戏的视频。小精灵这个游戏就是让玩家控制的精灵尽量避免恶魔明确吃到所有的奖励，如下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/深度录屏_选择区域_20220207215037.gif" alt="小精灵的游戏画面"></p><p>所以，我们网络的输入是过去一段时间（过去几个frame）图片，然后让网络输出未来的几个frame的图片</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207220138793.png" alt="网络的输入和输出" style="zoom:67%;"></p><p>有人可能会问，输入图片用CNN就行了，可是该怎么样输出一个图片呢？那么我们其实可以直接让网络输出一个向量，然后把这个向量reshape得到一张图片即可。不过原始<a href="https://github.com/dyelax/Adversarial_Video_Generation">论文</a>中的输入是分块进行的，而不是一次输入一张图片</p><p>如果我们用Supervised Learning的方法，最终得到的结果是下面这样的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/深度录屏_选择区域_20220207221229.gif" alt="模型的预测"></p><p>我们仔细看右上角的小精灵的话，就会发现，一开始小精灵还是黄色的，可是走着走着就成了黄色的。这个还不是最大的问题，最大的问题就是走着走着小精灵就分裂了。</p><p>那么为什么会发生这样的现象呢？这是因为现在在我们的训练的输入中，同样的小精灵，在同样的转角，有的向右走，也有的向左走。这两种训练的数据同时存在于我们的训练数据中，并且这两个事情都是真实世界中可能发生的。</p><p>而我们的网络在遇到这个转角的时候，如果输出向左的话，那么向右的Example的Loss就会很大，反过来也是一样的。因此，网络最终是在进行两面讨好，即输出同时向左向右。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207222547487.png" alt="网络的输出同时向左也向右" style="zoom:67%;"></p><p>可是有一个问题就是，单独输出向左转是对的，或者说是合理的，单独输出向右转也是合理的。输出同时向左也向右转却是绝对错误的。</p><p>那么这种情况下该怎么样来处理呢？我们其实让模型不要输出一个单一的值，让模型输出一个概率的分布就行了，即让模型输出小精灵未来某一帧在某个位置的概率。</p><p>因此，我们现在其实就需要让模型输出一个分布，因此我们其实就需要一个Generator来完成这个任务。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207223245461.png" alt="我们需要用一个Generator来完成小精灵预测这个任务" style="zoom:67%;"></p><p>举例来说，我们现在让$z$服从一个Binary Distribution之后，针对同一个input，如果$z$ Sample得到1之后那么输出就是模型向左转，sample得到0就输出向右转。这样我们就解决了相同的过去有不同的未来这个问题。</p><h3 id="2-Creativity"><a href="#2-Creativity" class="headerlink" title="2. Creativity"></a>2. Creativity</h3><p>在什么样的任务下我们需要使用Generator来作为我们的模型呢？其实就是在我们的模型需要一些创造力的时候。<strong>什么是创造力呢？其实就是相同的输入有不同的输出</strong></p><p>例如对于绘画任务来说，我们现在说要让网络画出来一个红眼镜的任务，那么不同人画出来的角色是不同的。有的人可能画出来酷拉皮卡，有的人可能画出来辉夜大小姐</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207224414893.png" alt="绘画任务需要创造力" style="zoom:67%;"></p><p>除了绘画以外，聊天机器人也是需要一些创造力的，例如我们问辉夜是谁，那么有的人可能会说辉夜大小姐，有的人会说是大同木辉夜</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207224531449.png" alt="聊天机器人也是需要创造力的" style="zoom: 80%;"></p><p>因此，上面的任务都会存在相同的输入有不同的输出，因此我们的模型就需要使用Generative的Model。</p><p>此外，我们还需要理解一个问题，就是我们这里说的Creativity，指的其实就是difference。具体来说就是相同输入有不同的输出。</p><h2 id="3-Generative-Adversarial-Network-GAN"><a href="#3-Generative-Adversarial-Network-GAN" class="headerlink" title="3. Generative Adversarial Network (GAN)"></a>3. Generative Adversarial Network (GAN)</h2><p>在所有的Generative的Model中，GAN就是最有名的一个。我们接下来就来讲解GAN这个模型</p><h3 id="1-Introduction-of-GAN"><a href="#1-Introduction-of-GAN" class="headerlink" title="1. Introduction of GAN"></a>1. Introduction of GAN</h3><h4 id="1-How-to-pronounce-GAN"><a href="#1-How-to-pronounce-GAN" class="headerlink" title="1. How to pronounce GAN?"></a>1. How to pronounce GAN?</h4><p>在正式开始讲之前，有一个问题就是GAN怎么读，Google给出的发音是<code>干</code><span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207225552467.png" alt="Google教我们发音" style="zoom:67%;"></p><h4 id="2-GAN-ZOO"><a href="#2-GAN-ZOO" class="headerlink" title="2. GAN ZOO"></a>2. GAN ZOO</h4><p>我们首先需要说的就是GAN其实是有很多的变体的，GIthub上有一个仓库，里面收集了各种各样的GAN，因此这个仓库称为<a href="https://github.com/hindupuravinash/the-gan-zoo">GAN ZOO</a>，里面收集了超过500种GAN。而当有人提出了新的GAN之后，就会给GAN前面加上一个字母，所以所有的英文字母很快就用完了。</p><p>例如S这个单词，即SGAN就有六个，以至于有的文章剔除来的GAN中用了Variational Auto-Encoder GAN，所以缩写应该是AEGAN。可是因为AEGAN已经被别人用了，而且别的字母也都被用了，所以就叫做$\alpha$-GAN</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207230752349.png" alt="GAN有很多的变形" style="zoom:67%;"></p><h3 id="2-Context-of-Lecture"><a href="#2-Context-of-Lecture" class="headerlink" title="2. Context of Lecture"></a>2. Context of Lecture</h3><p>我们接下来，结合Anime Face Generation的任务来讲Unconditional的GAN</p><h4 id="1-Unconditional-GAN"><a href="#1-Unconditional-GAN" class="headerlink" title="1. Unconditional GAN"></a>1. Unconditional GAN</h4><p>所谓的Unconditional GAN就是没有input的$x$，只有random variable $z$的GAN</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207232128780.png" alt="Unconditional GAN只有x作为输入" style="zoom:67%;"></p><p>我们下面假设$z$是从一个Normal Distribution中Sample得到的，而且Sample得到的$z$是一个Low Dimensional的向量，维度只有50、100（具体的维度由我们自己决定）。</p><h4 id="2-Anime-Face-Generation"><a href="#2-Anime-Face-Generation" class="headerlink" title="2. Anime Face Generation"></a>2. Anime Face Generation</h4><p>而输出的分布中的每一个数据点都是一张图片。那么我们就会问，该如何让模型输出一张图片呢？这个其实很简单，我们让模型输出一个高维向量即可。例如我们图片的分辨率是64*64，那么我们让模型输出一个长度3600左右的向量即可。然后我们把这个向量reshape一下，就得到了一张图片。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207234814817.png" alt="模型输出的向量就是图片" style="zoom:67%;"></p><p>对于Unconditional GAN来说，我们从$z$中Sample的到不同的向量就可能会生成得到不同的动漫人物的脸</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207235606300.png" alt="Sample得到不同的向量得到不同的动漫任务的脸" style="zoom:67%;"></p><h4 id="3-Why-Normal-Distribution"><a href="#3-Why-Normal-Distribution" class="headerlink" title="3. Why Normal Distribution"></a>3. Why Normal Distribution</h4><p>我们可能会问为什么我们要使用Normal Distribution呢？能不能用别的Distribution？答案是其实Distribution完全可以是别的Distribution，我们甚至也可以是Uniform Distribution。</p><p>因为我们的模型会想办法把一个简单的Distribution转换到一个Complex的Distribution。</p><p>虽然老师自己训练下来的体验就是不同的Distribution并没有很大的差别，不过的确是有文章在研究这个$z$服从的Distribution。</p><h3 id="3-Discriminator"><a href="#3-Discriminator" class="headerlink" title="3. Discriminator"></a>3. Discriminator</h3><p>GAN中，除了Generator以外，还需要训练的一个东西就是Discriminator。</p><p>Discriminator其实说白了就是一个神经网络，或者说函数。他的作用就是输入一张图片，输出这张图片是真实的二次元头像的概率。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208002323290.png" alt="Discriminator的作用" style="zoom:67%;"></p><p>例如下面，第一行的两个头像是真实的动漫头像，所以得分会很高，而下面的两个头像比较不像是一个动漫头像，因此得分比较低。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208002444356.png" alt="Discriminator的作用：分辨真实的图像" style="zoom: 80%;"></p><p>而Discriminator这个网络的结构完全是又我们的自己决定的。我们只需要满足该网络能够分辨输入是否是真实的图像即可。而对于我们的这个任务来说，输入是一个图像，所以我们理所当然的就会想用CNN来作为我们的Discriminator。</p><h3 id="4-Basic-idea-of-GAN"><a href="#4-Basic-idea-of-GAN" class="headerlink" title="4. Basic idea of GAN"></a>4. Basic idea of GAN</h3><h4 id="1-Story-of-Butterfly"><a href="#1-Story-of-Butterfly" class="headerlink" title="1. Story of Butterfly"></a>1. Story of Butterfly</h4><p>在将GAN的设计思想的时候，我们先讲一个故事。</p><p>下面这这张图片并不是一个树叶，而是一个枯叶蝶</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208003121283.png" alt="枯叶蝶的照片" style="zoom: 80%;"></p><p>可是我们就会想，枯叶蝶最早可能并不是像枯叶的，枯叶蝶最早也是五彩斑斓的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208015418854.png" alt="枯叶蝶的祖先最早是彩色的" style="zoom:80%;"></p><p>那为什么枯叶蝶会变成枯叶呢？其实是因为有物竞天择的压力。例如说现在神奇宝贝里的波波是专门吃彩色的蝴蝶的。那么有了波波的压力，枯叶蝶祖先中彩色的都被吃掉了，之后棕色的留下来了。</p><p>所以在波波的压力下，枯叶蝶的祖先就进化了，成为了棕色的蝴蝶</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208020551566.png" alt="枯叶蝶在生成压力下进化了" style="zoom:67%;"></p><p>然后棕色的蝴蝶又给了波波生存压力，只有吃到蝴蝶的波波才可以生存，于是渐渐地，波波慢慢就具有了分辨棕色的蝴蝶和树叶之间区别的能力。从而逼着棕色的蝴蝶进化成了枯叶蝶</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208020953637.png" alt="波波在枯叶蝶的生存压力下得到了进化" style="zoom:67%;"></p><p>那么同样的事情再发生一次，最终比比就进化成了大比鸟</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208021505633.png" alt="波波进化成了大比鸟" style="zoom:67%;"></p><p>所以这个事情其实就是双方在进行对抗（Adversarial）的过程。</p><p>所以类似的事情发生在GAN中，枯叶蝶就是Generator，而大比鸟就是Discriminator</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208022025243.png" alt="GAN中的Generator和Discriminator对应为枯叶蝶和大比鸟" style="zoom: 80%;"></p><h4 id="2-GAN"><a href="#2-GAN" class="headerlink" title="2. GAN"></a>2. GAN</h4><p>上面的枯叶蝶进化的故事发生在GAN的Generator和Discriminator就是下面这样的。</p><p>第一代的Generator可能产生的图片只是杂讯，而在学习了二次元头像的Discriminator给予的压力下，Generator就得到了进化，它进化的目标就是要骗过Discriminator</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208022734952.png" alt="初代的Generator生成的图片很容易就被分辨出来" style="zoom:67%;"></p><p>而第二代的Generator的输出可能会更加真实，相比第一代是有了很大的提升</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208023010127.png" alt="第二代Generator效果要好很多" style="zoom: 67%;"></p><p>同理，因为无法分辨出来第二代Generator输出，第一代的Discriminator在压力（loss）下也得到了提升，从而能够分辨出第二代Discriminator的输出。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208023219561.png" alt="第一代Discriminator得到了提升" style="zoom:67%;"></p><p>同样的过程就会继续发生，直到Generator的输出已经非常好看了，这个过程中，Generator和Discriminator是作为对手相互对抗的，因此就有了Adverarial这个词。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208023352338.png" alt="GAN的过程" style="zoom:80%;"></p><p>因此，Generator和Discriminator的关系就是：写作敌人，念作朋友</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208023640431.png" alt="Generator和Discriminator的关系" style="zoom:67%;"></p><h3 id="5-Algorithm-of-GAN"><a href="#5-Algorithm-of-GAN" class="headerlink" title="5. Algorithm of GAN"></a>5. Algorithm of GAN</h3><p>我们接下来再讲讲训练过程中GAN的算法</p><h4 id="1-initialize"><a href="#1-initialize" class="headerlink" title="1. initialize"></a>1. initialize</h4><p>算法的第一步就是初始化Generator和Discriminator，这里直接随机初始化即可，也可以用Kaiming初始化。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208102621533.png" alt="初始化Discriminator和Generator" style="zoom:67%;"></p><h4 id="2-Train-Discriminator"><a href="#2-Train-Discriminator" class="headerlink" title="2. Train Discriminator"></a>2. Train Discriminator</h4><p>接下来，算法的第一步就是固定Generator然后训练Discriminator。这个时候因为Generator是随机的，所以我们从Gaussian Distribution random sample一堆vector然后丢到Generator里面去之后生成得到的图片是完全混乱的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208103316214.png" alt="随机初始化的Generator得到的图片都是杂乱的无章的" style="zoom: 80%;"></p><p>不过这里的人脸其实已经是train了几个epoch之后的结果，还是看得出来有一些人脸的样子了，已经有了两个黑黑的眼睛。一开始Update得到的结果是很混乱的，和电视没有信号得到的雪花图是一样的。</p><p>然后我们从数据集（这里因为是动漫人物人脸生成的任务，所以自然是动漫人物头像的图片作为数据集）中sample得到一些数据，然后结合Generator生成的输入交给Discriminator，让Discriminator来分辨哪些是真实的图片，哪些是Generator生成得到的图片，因此对于Discriminator来说，这个就类似与一个二分类的任务</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208104958786.png" alt="训练Discriminator相当于Classification任务" style="zoom:67%;"></p><h4 id="3-Train-Generator"><a href="#3-Train-Generator" class="headerlink" title="3. Train Generator"></a>3. Train Generator</h4><p>在第二步，我们训练Generator，这个时候要固定Discriminator。这个步骤比较拟人化的想法就是方Generator学着骗过Discriminator。</p><p>那么欺骗这件事是什么意思呢？因为我们上面二分类是真实的图片的label是1，Generator生成的图片label是0。因此，在训练Generator的时候，我们的目标就是让Generator生成的图片经过Discriminator之后得分越高越好</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208110553516.png" alt="Generator欺骗Discriminator就是让Discriminator的打分越高越好" style="zoom:67%;"></p><p>而在实际的操作中，我们是把Generator和Discriminator接起来当做一个大的网络。假如说Generator是一个5层的网络。Discriminator是一个5层的网络，那么这个大的网络就是有10层。这个大网络中中间某层的输出是非常宽的，和图片的像素的数量是相同的。</p><p>所以我们Update这个大网络的时候，Discriminator的参数是要freeze起来的，而update Generator的方法就是Gradient Descent</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208112319895.png" alt="把Discriminator和Generator接起来视为大网络进行Gradient Descent" style="zoom:80%;"></p><h4 id="4-One-Iteration"><a href="#4-One-Iteration" class="headerlink" title="4. One Iteration"></a>4. One Iteration</h4><p>最后在我们不断重复上面的步骤，训练一段时间的Discriminator，然后再训练一段时间的Generator，最终期待两者在对抗的过程中都变得越来越好</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208112826571.png" alt="不断重复一个Iteration，期待Discriminator和Generator都会变得更好" style="zoom:67%;"></p><h3 id="6-Anime-Face-Generation"><a href="#6-Anime-Face-Generation" class="headerlink" title="6. Anime Face Generation"></a>6. Anime Face Generation</h3><p>我们的任务是Anime Face Generation的任务，所以我们来看看GAN最后达到的效果</p><p>2017年李宏毅老师自己Train下来的结果如下：</p><p>首先是update 100次的结果，注意update 1次是指Generator和Discriminator都各自训练一遍，即一个Iteration。得到的结果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208122517746.png" alt="李宏毅老师自己训练update 100次之后的结果" style="zoom:80%;"></p><p>会发现机器逐渐开始学习到了动漫头像有人脸和头发的区别了，所以在图象周围会有一圈的深色区域和中间的白色区域。</p><p>然后是update 1000次之后的结果，会发现机器已经学习到了动漫头像会有两个人眼</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208122924728.png" alt="李宏毅老师自己训练update 1000次之后的结果" style="zoom: 80%;"></p><p>Update 2000次以后，会发现人脸逐渐清晰起来，也开始有了眼镜、鼻子和嘴等特征</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208123150675.png" alt="李宏毅老师自己训练update 2000次之后的结果" style="zoom: 80%;"></p><p>然后在5000个update之后，我们会发现模型给出的眼镜、鼻子和嘴越来越清晰，而且也已经知道动漫角色需要有一双水汪汪的大眼睛。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208131850572.png" alt="李宏毅老师自己训练update 5000次之后的结果" style="zoom:80%;"></p><p>最后在10000次update之后，生成的头像已经非常清晰了，虽然经常会有一些崩坏</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208132034555.png" alt="李宏毅老师自己训练update 10000次之后的结果" style="zoom:80%;"></p><p>最后在Update到20000次之后，不少的头像在人看来都已经很不错了，只是有有一些会崩坏掉</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208133123459.png" alt="李宏毅老师自己训练update 20000次之后的结果" style="zoom:80%;"></p><p>最后李宏毅老师在50000个Update之后就停下来了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208133243598.png" alt="李宏毅老师自己训练update 50000次之后的结果" style="zoom:80%;"></p><p>当然，在GAN的作业里我们当然可以做的比老师做的更好</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208133425194.png" alt="助教是学生时做的更好的结果" style="zoom:80%;"></p><p>因为我们的Discriminator是根据Generator的输出和数据集来进行判断的，因此如果我们的如果有更好的数据，并且模型更加强大的话，我们其实是完全有可能训练得到更好的结果的，例如StyleGan。</p><p>我们仔细观察的话，其实还会发现有的时候生成的动漫头像是有异色瞳的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/2019-02-11-stylegan-danbooru2017faces-interpolation.gif" alt="StyleGan的效果非常惊人"></p><h3 id="7-Face-Generation"><a href="#7-Face-Generation" class="headerlink" title="7. Face Generation"></a>7. Face Generation</h3><p>当然，除了动漫头像以外，GAN当然可以用于生成人脸，例如：<a href="https://arxiv.org/abs/1710.10196">Progressive GAN</a>：<a href="https://arxiv.org/abs/1710.10196">https://arxiv.org/abs/1710.10196</a></p><p>例如下面的两排人脸，哪一个排是Progressive GAN生成的？哪一排是真实的？答案是其实上下两排都是GAN生成的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208170806781.png" alt="Progressive GAN可以生成非常逼真的人脸" style="zoom:80%;"></p><p>除了生成单独的人脸以外，GAN还有一个比较神奇的地方，就是可以做到人脸的转变。</p><p>我们现在知道，从Distribution中sample得到两个向量，可以通过这两个向量就可以让Generator生成得到一个人脸。</p><p>例如我们现在输入两个向量，就得到了两个人脸。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208195111658.png" alt="输入向量生成人脸" style="zoom:67%;"></p><p>然后我们对这两个向量进行内插，得到一系列的向量，然后我们把这些向量输入到Generator之后生成一系列新的人脸，最终我们会发现，这些人脸连在一起完成了人脸的变换</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208195935813.png" alt="内插向量得到了人脸的过渡" style="zoom:67%;"></p><p>除了完成从男到女以外，还可以完成向左看到向右看的过度</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208201433509.png" alt="GAN可以完成人脸的过渡" style="zoom:67%;"></p><h3 id="8-The-first-GAN"><a href="#8-The-first-GAN" class="headerlink" title="8. The first GAN"></a>8. The first GAN</h3><p>现在在网络上流传着一个故事，就是说GAN的发明者，Ian Goodfellow有一次在酒吧喝酒，看到两个人在吵架，然后就产生了灵感，于是回去Train了一发，一次就成功了，得到了这篇Paper。</p><p>但是那个时候所谓的成功，其实是下面这样的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208202946690.png" alt="image-20220208202946690"></p><p>但是在14年的时候，这个已经是非常震惊的效果了，李宏毅老师第一次看到就是：WOW，竟然真的可以产生图片。</p><p>但是在今天我们在看这个效果，就不会感觉非常惊艳，因为现在BigGAN、StyleGAN等很多GAN已经实现了非常惊艳的消息。</p><h3 id="9-BigGAN"><a href="#9-BigGAN" class="headerlink" title="9. BigGAN"></a>9. BigGAN</h3><p>BigGAN合成的图片的效果其实已经非常惊艳了，完全能够达到以假乱真的程度。其实我们仔细看，还是可以看出来破绽的，例如左上角的狐狸是有五条腿的，而右上角的茶杯也是歪歪扭扭的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208204557230.png" alt="BigGAN合成的图片" style="zoom: 50%;"></p><p>可是，机器有的时候也会生成幻想中的生物，例如网球狗</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208205955490.png" alt="生成的网球狗" style="zoom:67%;"></p><h2 id="4-Theory-behind-GAN"><a href="#4-Theory-behind-GAN" class="headerlink" title="4. Theory behind GAN"></a>4. Theory behind GAN</h2><p>我们上面用了一堆比喻，给大家讲了GAN是如何运用的，此外我们还讲解了GAN是如何运行的。我们接下来来讲讲一些理论的部分，即GAN背后的原理。告诉大家为什么Generator和Discriminator这样的互动就可以产生人脸这样的图片。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208211537878.png" alt="GAN背后的Theory" style="zoom:67%;"></p><h3 id="1-Define-Objective"><a href="#1-Define-Objective" class="headerlink" title="1. Define Objective"></a>1. Define Objective</h3><p>要讲清楚GAN的原理，我们第一步先搞清楚我们的目标。</p><p>我们前面在最前面说过，Generative的Model的输入是Sample来自与一个Distribution的Variable以及一个input，其output是一个分布。我们现在讲的是Unconditional的GAN，因此输入只有Sample来自于一个Distribution（假设是Gaussian Distribution）的random variable。</p><p>而我们把真实的图片当做是高维空间中的一个点的话，真实的图片必然服从一个分布，只不过这个分布可能我们并不知道，而且无法写出来解析式，我们不妨称这个潜在的、数据真实服从的分布为$P_{data}$</p><p>而现在我们又直到模型的输出是一个分布，记为$P_G$，因此我们要做的事情其实就是让模型输出的分布和真实的数据的分布越相近越好。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208213029092.png" alt="我们的目标就是让模型输出的分布和真实的分布越相似越好" style="zoom:67%;"></p><p>我们以一维的情况来进行理解。所谓分布其实指的就是在随机变量在取某个值的概率。或者说就是变量出现在数轴上某个位置的概率。而概率则可以以频率来进行估计。所以从这个角度来理解，分布其实指的就是对于数轴上的每一个可能的取值，所有的example中，有多少个example是这个值。</p><p>所以用一维的情况来理解的话，那么就是Generator的输入是一个simple的Gaussian Distribution，经过Generator进行变换之后，每个example的位置都发生了变化，因此数轴上每个位置出现的example的数量就发生了改变，因此数据的Distribution其实就发生了改变。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208220214956.png" alt="输入的Gaussian Distribution经过变换之后成为了复杂的Distribution" style="zoom:67%;"></p><p>所以，我们现在的目标就是让输出的分布和真实的分布相似。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208220511348.png" alt="让输出的分布和真实的分布越相近越好" style="zoom:67%;"></p><p>而我们描述两个分布的相似程度，使用的工具就是散度（Divergence）。而信息论中的Divergence，描述的其实是两个分布之间的距离，距离越近（Divergence越小）的分布就越相似。而当两个分布之间的距离是0的时候，就表示两个分布是equivalent的。</p><p>因此我们的目标其实就是要minimize $P<em>G$和$P</em>{data}$的Divergence，即找到一个Generator，这个Generator可以使得Divergence最小，故：</p><script type="math/tex; mode=display">G^*=arg\min_G Div(P_G,P_{data})</script><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208222254885.png" alt="Generator优化的目标"></p><p>因此，我们现在的问题就是，Loss Function我们定义成描述距离的MSE和最大化似然Cross-Entropy我们都是有式子可以计算的，对于散度来来说，如果我们有了$P<em>G$和$P</em>{data}$的解析式的话，那么我们其实也是可以计算出来Divergence的，因为信息论里面给出来了计算Divergence的式子。</p><p>可是现在问题的关键就在于我们并不知道$P<em>G$和$P</em>{data}$的分布，因此如何计算$P<em>G$和$P</em>{data}$的Divergence就成了问题。</p><p>此外，类似于MSE和RMSE，Divergence也是有不同，例如KL-Divergence和JS-Divergence，但是不管计算哪种Divergence，我们都需要得知数据分布的解析式。</p><p>而GAN神奇的地方就在于：<strong>GAN突破了我们需要知道分布的解析式这个限制，我们只需要通过sample就可以计算这个Divergence</strong>。</p><h3 id="2-Sampling-for-Distribution"><a href="#2-Sampling-for-Distribution" class="headerlink" title="2. Sampling for Distribution"></a>2. Sampling for Distribution</h3><p>我们前面说到，我们要训练GAN的话，就需要计算模型输出的分布和真实数据分布之间的散度，而散度的计算则需要我们知道数据的解析式。不论是模型输出的分布还是真实数据的分布，这个解析式我们其实都是不知道的，因此训练GAN的难点就在于这里。</p><p>而GAN告诉我们的就是，只要我们知道如何从$P<em>G$和$P</em>{data}$中sample得到东西出来，我们就可以计算这两个分布的Divergence。我们不需要知道这两个分布的formulation，我们只需要知道如何从这两个Distribution中进行Sample就可以计算Divergence。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208225342786.png" alt="GAN告诉我们只要可以从Distribution中sample就可以计算Divergence" style="zoom:80%;"></p><p>所以，我们首先讲讲如何从$P<em>G$和$P</em>{data}$中进行sample。</p><p>而从$P<em>{data}$中进行Sample这件事非常简单，因为$P</em>{data}$表示真实的的动漫头像服从的分布，因此我们从网络上获得动漫头像其实就是从$P<em>{data}$这个Distribution中Sample得到example。考虑到我们现在拥有数据集，因此，我们从$P</em>{data}$ Sample得到example其实就是从database中抽取动漫人物的头像。</p><p>而从$P_G$指的是Generator输出的图像服从的分布，因此从$P_G$中sample得到example其实就是让Generator生成一张头像，即从Gaussian Distribution中Sample得到一个Vector，然后让Generator生成一张图片。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220208230155694.png" alt="如何从P_G和P_{data}进行Sample" style="zoom:80%;"></p><h3 id="3-Discriminator-for-Divergence"><a href="#3-Discriminator-for-Divergence" class="headerlink" title="3. Discriminator for Divergence"></a>3. Discriminator for Divergence</h3><p>上面我们已经介绍了如何从$P<em>G$和$P</em>{data}$中sample得到example。接下来GAN中剩下的任务就是告诉你如何在只有做Sample的情况下、我们完全不知道$P<em>G$和$P</em>{data}$的formulation的情况下，计算$P<em>G$和$P</em>{data}$的Divergence（或者说approximate Divergence）。而通过Sample来approximate Divergence就是靠Discriminator来实现的。</p><p><strong>具体来说怎么样让Discriminator来实现approximate Divergence呢？我们现在告诉大家，我们按照前面的设置进行二分类的训练之后，Discriminator就可以用于approximate Divergence</strong>。下面给出来证明</p><p>以下部分参考原论文和李宏毅老师的课程</p><hr><p>我们前面说过，来训练网络的过程其实就是解含参函数的最优化问题，我们现在用$D$来表示Discriminator的参数，则$D$为决策变量。设我们的优化目标（目标函数）为$V=V(D)$。因为优化目标在计算是需要Generator的输出的，而Generator的输出又和Generator的参数有关，因此我们不妨设Generator的参数为$G$，那么优化Discriminator的时候，我们的优化目标为$V=V(D,G)$。</p><p>需要注意的是，我们在上面讲的GAN的训练过程中是先训练一下Discriminator，然后再训练一个Generator。因此在训练Discriminator的时候，Generator的参数是固定不动的，所以$V(D,G)$中$G$是一个常数，因此我们是一个单变量优化问题。</p><p>我们现在给出如下的目标函数，则对该目标函数优化之后得到的网络（一套参数值对应一个网络，因此即指优化之后得到的网络）就可以衡量Generator输出的分布和真实数据的分布之间的JS Divergence。为了简单起见，下式中我们把Discriminator记为$D(\cdot)$，则目标函数如下：</p><script type="math/tex; mode=display">V(D,G)=E_{y\sim P_{data}}[\log D(y)] + E_{y\sim P_G}[\log (1-D(y))]</script><p>经过优化（训练后）后Discriminator的参数记为</p><script type="math/tex; mode=display">D^* = arg\max_D V(D,G)</script><p>看到这里，我们可能就会晕了，为什么最大化$V(D,G)$之后得到对应的参数$D^*$之后，Discriminator就可以来衡量两个分布的Distribution呢？</p><p>我们下面就给出数学上的证明，注意上面用的是$y$表示输入是Generator的输出，这里换成$x$强调是Discriminator的输入。</p><p>首先是写出来$V(D,G)$的表达式</p><script type="math/tex; mode=display">\begin {aligned}V(D,G) & = E_{y\sim P_{data}}[\log D(x)] + E_{y\sim P_G}[\log (1-D(y))]\\    & = \int_x P_{data}(x)\log D(x)dx + \int_x P_G(x)(1-D(x))dx\\    & = \int_x [P_{data}(x)\log D(x)+P_G(x)(1-D(x))]dx\end {aligned}</script><p>然后我们要maximize $V(D,G)$，实际上就是要最大化</p><script type="math/tex; mode=display">P_{data}(x)\log D(x)+P_G(x)(1-D(x))</script><p>而我们上面说过了，$P_{data}(x)$和$P_G(x)$的表达式我们写不出来，但是我们可以通过对抽样得到的样本来估计这两个概率，而抽样等价于sample得到数据集合和让Generator生成图片，所以这两个值其实是常数，因此就有</p><script type="math/tex; mode=display">f(D)=a\log(D)+b\log(1-D)</script><p>进而对$f(D)$求导，得到</p><script type="math/tex; mode=display">\frac{df(D)}{dD} = a\times \frac 1 D + b \times \frac 1 {1-D} \times (-1)=0</script><p>从而解得</p><script type="math/tex; mode=display">D^*(x)=\frac{P_{data}(x)}{P_{data}(x)+P_{G}(x)}</script><p>把在maximize了$V(D,G)$之后得到的$D^*$带入$V(D,G)$有</p><script type="math/tex; mode=display">\begin{aligned}V(D^*,G) &=E_{y\sim P_{data}}[\log \frac{P_{data}(x)}{P_{data}(x+P_{G}(x)}] + E_{y\sim P_G}[\log \frac{P_{G}(x)}{P_{data}(x+P_{G}(x)}]\\&=\int_x P_{data}(x)\log \frac{\frac 1 2P_{data}(x)}{\frac {P_{data}(x+P_{G}(x)} 2}dx + \int_x P_{G}(x)\log \frac{\frac 1 2P_{G}(x)}{\frac {P_{data}(x+P_{G}(x)} 2}dx\\&=-2\log 2 + KL(P_{data}||\frac{P_{data}(x)+P_G(x)}{2}) + KL(P_{G}||\frac{P_{data}(x)+P_G(x)}{2})\end{aligned}</script><p>其中，KL-Divergence的表达式如下</p><script type="math/tex; mode=display">KL(P||Q)=\int_{-\infin}^{+\infin}p(x)\log\frac {p(x)}{q(x)}dx</script><p>而Jensen–Shannon divergence（JS Divergence）的表达式如下</p><script type="math/tex; mode=display">JSD(P||Q)=\frac 1 2 KL(P||M) + \frac 1 2 KL(Q||M)</script><p>其中</p><script type="math/tex; mode=display">M=\frac 1 2(P+Q)</script><p>因此</p><script type="math/tex; mode=display">V(D^*,G)=-2\log 2+2 JSD(P_{data}||P_G)</script><p>所以，我们现在对Discriminator进行优化之后，得到的网络$f_{D^*}(x)$就可以用于衡量Generator的输出的分布和真实的分布之间的差距。</p><p>此时我们把从$P<em>G$和$P</em>{data}$中的所有图像让Discriminator计算之后得到输出的值，然后加起来求平均得到的就是JS Divergence。</p><p>而优化Discriminator则就是用我们从$P_{data}$和$P_G$中sample得到的example进行Gradient Descent即可。所以我们说，GAN通过Discriminator提供了一种不需要知道Distribution长什么样子，只需要直到如何Sample就可以来估计两个分布之间的Divergence的方法。</p><p>之所以说是approximate，是因为我们在实际中得到的example都只是有限个离散的值，而上面在推倒的时候第一步是求期望。因为我们的图像是一个高维的数据，每一个维度都可以是连续的值，因此我们example得到的只是有限的值，所以我们计算得到的Divergence只是approximate的结果。</p><p>总之在训练好了Discriminator之后，我们其实就得到一种可以approximate JS-Divergence的手段。此时，我们只需要让Generator实现minimize JS-Divergence即可（这点下面会详细讲），即</p><script type="math/tex; mode=display">G^*=arg\min_G \max_DV(D,G)</script><p>以上其实就是在Ian Goodfellow原始的GAN中的论文给出的推导。</p><h3 id="4-Rethinking-V-D-G"><a href="#4-Rethinking-V-D-G" class="headerlink" title="4. Rethinking V(D,G)"></a>4. Rethinking V(D,G)</h3><p>我们接下来从另外另外一个角度来理解Discriminator的optimization object $V(D,G)$</p><p>原始的式子为</p><script type="math/tex; mode=display">V(D,G)=E_{y\sim P_{data}}[\log D(y)] + E_{y\sim P_G}[\log (1-D(y))]</script><p>而期望在连续的时候就是上面的积分，而不连续的时候就是下面的式子</p><script type="math/tex; mode=display">\begin{aligned}V(D,G)     &= \frac 1 n \sum \log D(y) + \frac 1 n \sum \log (1-D(y))\\    &= \frac 1 n \sum [y\log D(y) + (1-y)\log (1-D(y))]\end{aligned}</script><p>这个式子就是Cross-Entropy的式子，因此我们惊奇的发现，让输入和输出的分相近，其实就等价于让Discriminator进行Binary的Classification。</p><p>李宏毅老师上课的时候自己也说，它猜想Discriminator的这个Loss Function一开始可能真的就是从Binary的Classification来的，只不过在推导的过程中发现让binary Classification的objective function最大的值和JS Divergence是有数值关系的，从而完成了从分布到分类的这一重要的过度。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220209123013614.png" alt="以Binary Classification训练的Discriminator可以用于计算JS Divergence" style="zoom:80%;"></p><p>因此，我们前面说不知道怎么计算Generator output的Distribution和real Distribution之间的Divergence，没关系，train Discriminator，训练完了之后看一下他的objective Function的值有多大，这个值就和Divergence有关。</p><h3 id="5-Direct-Understanding-between-Divergence-and-Classification"><a href="#5-Direct-Understanding-between-Divergence-and-Classification" class="headerlink" title="5. Direct Understanding between Divergence and Classification"></a>5. Direct Understanding between Divergence and Classification</h3><p>我们接下来来直观的理解一下，Divergence和Classification之间的关系。</p><p>如果是$P<em>G$和$P</em>{data}$很像，那么其实我们现在从这两个Distribution中sample得到的example就会混在一起。这个时候，对于作为Binary Classifier的Discriminator来说，这两种数据是混合在一起的，因此就很难把他们分开，所以cross-entropy的结果就会比较大，而$\max_D V(D,G)$是负cross-entropy，因此$\max_D V(D,G)$就很小。</p><p>反之，如果两个很不像，那么Divergence就很大，进而$\max_D V(D,G)$就会很大</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220209125312275.png" alt="直观的理解散度与分类" style="zoom:67%;"></p><h3 id="6-Replace-Divergence"><a href="#6-Replace-Divergence" class="headerlink" title="6. Replace Divergence"></a>6. Replace Divergence</h3><p>所以说，我们原本的目标是找一个Generator，他可以minimize $P<em>G$和$P</em>{data}$之间的Divergence</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220209125946181.png" alt="我们原先的目标"></p><p>可是我们现在卡在了不知道怎么样算这个Divergence。</p><p>我们接下来又发现，我们可以训练一个Discriminator，训练完以后，这个Objective Function的最大值就是和Divergence有关的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220209130202280.png" alt="Objective Function的最大值和Divergence有关" style="zoom:67%;"></p><p>因此，我们其实就可以把Divergence替换成Discriminator的Objective Function。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220209130352407.png" alt="Discriminator的Objective Function替换Divergence" style="zoom:80%;"></p><p>我们乍看之下就会觉得</p><script type="math/tex; mode=display">G^*=arg\min_G\max_D V(G,D)</script><p>这个式子有些复杂，他有一个Maximum，又有一个Minimum。</p><p>其实对于Generator来说，我们现在就是要找一个Generator来Minimize后面红框里的东西。而红框里的东西又是另外一个Optimization Problem，它是在给定Generator的情况下去找一个Discriminator，它可以让$V$这个Objective Function越大越好。</p><p>因此，我们上面讲的两个的互动，其实就是在求解</p><script type="math/tex; mode=display">G^*=arg\min_G\max_D V(G,D)</script><p>而为什么两者的互动就是在求解上面的Optimization Problem，参考GAN的原始论文</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220209130925443.png" alt="Discriminator和Generator的互动就是在进行优化" style="zoom:80%;"></p><h3 id="7-Why-not-other-Divergence？"><a href="#7-Why-not-other-Divergence？" class="headerlink" title="7. Why not other Divergence？"></a>7. Why not other Divergence？</h3><p>我们前面说过，对于Discriminator训练的时候使用Cross-Entropy进行二分类之后得到的Discriminator可以来approximate JS Divergence。其实我们在训练Discriminator的时候使用不同的目标函数得到就是不同的Divergence。</p><p>那我们就会问为什么一定要用JS Divergence？能不能用别的Divergence，例如KL Divergence、Reverse KL Divergence？能不能直接用JS Divergence而不用含JS Divergence的式子呢？</p><p>答案其实是可以的，我们只需要对Discriminator的Objective Function进行修改就可以实现approximate各种Divergence。</p><p>而具体如何进行修改，在一篇<a href="https://arxiv.org/abs/1606.00709">f-GAN</a>的paper里给出了详细的证明。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220209145858459.png" alt="GAN中修改Objective Function就可以说使用别的Divergence" style="zoom:80%;"></p><p>在这之前，还有人说GAN之所以非常的难Train，就是因为原始论文里用的不是JS Divergence，而是JS Divergence相关的Discriminator，因此难Train。</p><p>但是f-GAN的文章里最终说明了，不管你用哪种Divergence，其实都是很难Train</p><p>所以对于GAN，就有一句玩笑，No pain, No GAN</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220209151528554.png" alt="GAN很难Train" style="zoom:80%;"></p><h2 id="5-Impoving-GAN-WGAN"><a href="#5-Impoving-GAN-WGAN" class="headerlink" title="5. Impoving GAN: WGAN"></a>5. Impoving GAN: WGAN</h2><p>在2014年的Ian Fellow完成了GAN这个非常惊艳的框架之后，大家在实际训练的时候发现，GAN其实非常难train，而原因其实就出在了我们用二分类训练Discriminator得到的Divergence是JS Divergence。JS Divergence用来训练其实是有问题的，因此针对JS Divergence的问题，WGAN这篇文章就对其进行了修改，使用了新的Divergence。</p><p>而也正是因为WGAN，才使得GAN的训练变得相对简单，因此我们下面就来讲讲这个对GAN进行了重大改进，以至于不得不对其进行讲解。</p><h3 id="1-Why-is-JS-Divergence-bad"><a href="#1-Why-is-JS-Divergence-bad" class="headerlink" title="1. Why is JS Divergence bad?"></a>1. Why is JS Divergence bad?</h3><p>我们下面从两个角度来讲解为什么JS Divergence是不好的，第一个是从流型学习的角度，另外一个是从采样的角度。</p><h4 id="1-From-Manifold-Learning"><a href="#1-From-Manifold-Learning" class="headerlink" title="1. From Manifold Learning"></a>1. From Manifold Learning</h4><p>在从流型学习的角度进行讲解之前，我们先简单的介绍一下什么是流型学习</p><blockquote><p><strong>流型学习</strong></p><p>流形学习（manifold learning）是机器学习、模式识别中的一种方法，在维数约简（降低纬度）方面具有广泛的应用。它的主要思想是将高维的数据映射到低维，使该低维的数据能够反映原高维数据的某些本质结构特征。<strong>流形学习的前提是有一种假设，即某些高维数据，实际是一种低维的流形结构嵌入在高维空间中</strong>。流形学习的目的是将其映射回低维空间中，揭示其本质。</p><p>如何理解流行学习的的假设呢？我们下面举一个图片的例子。</p><p>假设现在图片是256*256大小，那么一个图片就可以用一个65536维度的向量来描述。而在这个65536维度的空间中，并不是每一个点都代表一张人类可以理解的图片。</p><p>在这个空间中，实际上只有非常非常小的一部分的区域能够表示图片。因此流行学习中假设存在一个空间，这个空间中的每一个点都是一张图片，而65536维空间中的点，就是这个空间中的点通过某种方式映射得到的。</p><p><code>流形</code>是指的是连在一起的区域，数学上，它指的是一组点，且每个点都有其邻域。给定任意一个点，其流形局部看起来像是欧几里得空间。换言之，它在局部空间有欧式空间的性质，能用欧式空间来进行距离计算。因此，很容易地在局部建立降维映射关系，然后再设法将局部关系推广到全局，进而进行可视化展示。</p><p>为什么说图片是一个低维度的流型结构呢？首先低维很好理解，因为假设的图像空间的维度比较低，而流型结构则是因为在维度空间中，把图片中某个像素修改，比如r通道的强度增减10，依旧是一张图片，如果认为每一个像素值都是连续的话，那么其实在某个图片代表的点周围都是连续的。所以图片就是一个流型结构。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/1555211631907.png" alt="低维数据在高维的示意"></p></blockquote><p>因此从流行学习的角度来说，在高维空间中的数据都是低维度的流型。</p><p>为了方便讲解，我们现在假设高维空间就是二维，而表示数据的低维空间就是一条线。那么表示生成数据的和真实数据的线其实很有可能重叠的部分很小，即$P<em>{data}$和$P_G$的重叠部分很小。尽管表示$P_G$的线是随着Generator的改变而变的，但是绝大部分时候，$P_G$和$P</em>{data}$表示的线重叠部分都很小，以至于可以忽略。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210011229617.png" alt="流型学习的角度来说，真实数据的分布和生成数据的分布重叠非常小"></p><p>而JS Divergence计算的是两个分布的重叠程度。所以，如果用JS Divergence来计算Generator输出的分布和真实的分布的差别的话，那么在绝大多数时候，JS Divergence计算得到的值都近似$\log 2$（当两个分布完全不重合时候，JS Divergence计算得到的值为$\log 2$）。</p><p>那么这个时候就有一个问题了，只有在极少数$P<em>G$和$P</em>{data}$已经有相当一部分的重叠的时候，JS Divergence计算得到的值才是介于$\log 2$和0之间的值，此时才可以有效的来更新。</p><p>可是正如下图所示的，我们人类直观的理解，第二个分布显然比第一个好，但是JS Divergence却认为第二个分布是和第一个分布一样坏的，因为两者都没有重叠。然而在我们理想的情况是，在训练中输出的分布和真实的分布之间的距离是慢慢减小的，直到输出的分布和真实的分布重合。</p><p>因此，用重叠来衡量输出的分布的好坏其实是不如距离的，因为同样是不重叠的分布之间也是有好坏之分的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210012430071.png" alt="JS Divergence衡量分布间的重叠程度，因此并不是最好的"></p><h4 id="2-From-Sampling"><a href="#2-From-Sampling" class="headerlink" title="2. From Sampling"></a>2. From Sampling</h4><p>我们上面讲的从流型的角度来说因为分布重叠部分很小，所以JS Divergence并不是最好的。可是这个说法是建立在流行学习中存在一个低维度的数据空间的假设上的。如果你不相信这个假设的话，我们从另外一个角度来讲解为什么JS Divergence不是最好的。</p><p>我们说真实数据的分布和生成数据的分布我们其实是不知道的，因此我们只能通过sample来估计这两个分布，因此用Discriminator来估算JS Divergence的时候也是通过这些数据来实现的。</p><p>因此现在假设$P<em>G$和$P</em>{data}$之间存在比较大的Overlap，可是如果我们现在sample的数量不够多，sample的不够密，对于Discriminator来说，重叠也是很小的，或者说重叠近似于0.</p><p>因此使用重叠来衡量好坏其实是有问题的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210014048161.png" alt="使用重叠来衡量好坏则会由于采样的问题导致有问题"></p><p>而sample导致的问题在实践中是非常直观、非常常见的。因为通常来说sample到几万张图片才会有效果。而训练时候为了节省图片一般都是sample几千张。</p><p>sample几千张的话就会导致上面说的问题。更进一步，如果两个分布重叠的非常非常小的话，那么对于Binary Classifier的Discriminator来说，其分辨的accuracy轻易就可以达到100%。</p><p>还会造成的问题就是非常不易于训练</p><p>因此如果你自己在实践Train一个GAN的话，那么每一次Train完Discriminator之后，accuracy基本都是100%。所以我们原先假设，在Generator和Discriminator两者博弈的过程中，Generator的表现越来越好，反映在图片上就是生成的图片越来越逼真，因此Discriminator就越来越难分辨出来，所以理想的情况就是Discriminator的accuracy越来越低，loss越来越大，这样的话我们就可以知道生成的结果越来越好。</p><p>可是现在每次train完Discriminator的accuracy都是100%，所以这个时候看Discriminator的Accuracy就没有用了，不会给我们提供任何的信息。</p><p>所以我们在train的时候，就真的很像黑魔法，因为每一个epoch之后都要生成图片来看一下，然后就要一边吃饭一边看生成的图片，如果发现结果坏掉了，然后就卡掉重做。</p><p>综上，使用GAN原始论文中提出的JS Divergence其实并不是一个很好的选择，WGAN中就对其进行了弥补。</p><h3 id="2-Wasserstein-Distance"><a href="#2-Wasserstein-Distance" class="headerlink" title="2. Wasserstein Distance"></a>2. Wasserstein Distance</h3><h4 id="1-Idea-of-Wasserstein-Distance"><a href="#1-Idea-of-Wasserstein-Distance" class="headerlink" title="1. Idea of Wasserstein Distance"></a>1. Idea of Wasserstein Distance</h4><p>我们上面说道，使用重叠来作为衡量不好。而由于训练的过程就是输出的分布逐渐靠近真实的分布的过程，因此使用分布之间的距离（Distance）来作为衡量的好坏才是更好的选择。所以就使用Wasserstein来计算两个分布之间的距离。</p><p>Wasserstein Distance的想法是这样的：</p><ul><li>假设现在有两个分布$P$和$Q$</li><li>他计算的方法就是想象现在有一台推土机，$P$是要推得土，而$Q$是土堆的目的地。</li><li>推土机把$P$移动到$Q$所需要的平均距离就是Wasserstein Distance。</li></ul><p>因为在讲解的时候我们用的推土机（Earth Mover）来讲的，所以Wasserstein Distance又称为Earth Mover Distance</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210021202213.png" alt="Wasserstein Distance的计算" style="zoom:80%;"></p><h4 id="2-How-to-calculate-Wasserstein-Distance"><a href="#2-How-to-calculate-Wasserstein-Distance" class="headerlink" title="2. How to calculate Wasserstein Distance"></a>2. How to calculate Wasserstein Distance</h4><p>Wasserstein Distance指的就是把一个Distribution变形成为另外一个Distribution需要移动的距离，因此不同的移动的方式，需要的距离不同，因此其实有“多个Wasserstein Distance“”。</p><p>因此，Wasserstein Distance的定义就是需要的距离最小的移动方案的移动距离</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210021917429.png" alt="Wasserstein Distance的定义" style="zoom: 67%;"></p><p>因此，如果我们现在用Wasserstein Distance来衡量Generator输出的分布和真实数据的分布之间的距离的话，就会好很多</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210022457857.png" alt="Wasserstein Distance要优于JS Divergence" style="zoom:80%;"></p><blockquote><p><strong>Wasserstein Distance</strong></p><p>Wasserstein Distance让李宏毅老师想到了一个生物学演化的例子，就是眼睛的形成</p><p>右边是人类的眼睛，具有非常精巧的结构，而左边则是非常原始的眼睛，只有一些感光细胞。但是，这些简单的眼睛是如何演化成为右边的复杂的眼睛呢？针对于人类来说其实非常难以想象，而且一步直接从感光细胞进化到眼睛想也知道不可能</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210102524923.png" alt="眼睛演化的例子" style="zoom:80%;"></p><p>那么其实，在天择的压力下，眼睛是逐渐的在进化的。例如这些感光细胞会逐渐凹陷下去，从而可以接受各个方向的光。然后开始被包围起来，可以形成保护与小孔成像。然后有了液体，可以调节焦距。最后就形成了现在的眼睛。而每一小步都会让一个生命存活的概率变高，因此这样的改变是必要的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210103245265.png" alt="眼睛是在逐渐进化的" style="zoom:67%;"></p><p>而同样的事情对于WGAN也是一样的，使用Wasserstein Distance的时候，输出的分布和真实的分布之间的距离越来越近，所以就类似于进化的过程，眼睛（输出的分布）在不断的向人类现在的眼睛（真实的分布）进化（靠近）。</p><p>可是使用JS Divergence的重叠的话，那么其实就是要求眼睛（输出的分布）一步进化（重叠）到人类现在的眼睛（真实的分布），因为只有一步直接从感光细胞到眼睛，JS Divergence才会有不同。</p><p>而在进化的过程中，Wasserstein Distance是在不断变化的，而Wasserstein Distance有变化，就可以用Gradient Descent来进行训练。</p></blockquote><h4 id="3-WGAN"><a href="#3-WGAN" class="headerlink" title="3. WGAN"></a>3. WGAN</h4><p>当我们修改了Discriminator的Objective Function以至于最终Discriminator的approximate的Wasserstein Distance之后的GAN就称为WGAN。</p><p>如果像上面一样要进行数学上的推导的话，那么我们首先需要知道如何计算两个我们已知解析式的分布的Wasserstein Distance。这个计算本身就比较复杂。</p><p>然后在此基础上，我们还需要寻找一个合适的Objective Function，使得训练之后Discriminator可以估计Wasserstein Distance。</p><p>这个过程我们就直接略掉了，如果想要学习的话就去看一下WGAN的论文。最终，训练Discriminator的目标函数如下：</p><script type="math/tex; mode=display">\max_{D\in 1-Lipschitz}\{E_{x\sim P_{data}}[D(x)]-E_{x\sim P_G}[D(x)] \}</script><p>而上面这个式子的含义就是，如果现在$x$是真实的数据，那么在经过Discriminator之后的输出越大越好，而如果是生成的数据，那么经过Discriminator之后的输出越小越好。</p><p>但是论文中在进行推导的时候有一个限制就是Discriminator所代表的函数必须是一个$1-Lipschitz$的函数。</p><blockquote><p>$k-Lipschitz$函数</p><p>对于在实数集的子集的函数$f:D\subseteq R\rightarrow R$，若存在常数$K$，使得$|f(a)-f(b)|\leq K|a-b|, a,b\in D$，则称$f$符合利普希茨条件，对于$f$最小的常数$K$称为$f$的利普希茨常数。</p><p>利普希茨连续（Lipschitz continuity）以德国数学家鲁道夫·利普希茨命名，是一个比通常连续更强的光滑性条件。利普希茨连续函数限制了函数改变的速度，符合利普希茨条件的函数的斜率，必小于一个称为利普希茨常数的实数（该常数依函数而定）。</p></blockquote><p>因此WGAN中，要求Discriminator表示的函数$D(\cdot)$必须满足</p><script type="math/tex; mode=display">|D(a)-D(b)|\leq 1\cdot |a-b|</script><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210162336842.png" alt="WGAN中要求Discriminator表示的函数式1-Lipschitz函数"></p><h4 id="4-How-to-fulfill-1-Lipschitz？"><a href="#4-How-to-fulfill-1-Lipschitz？" class="headerlink" title="4. How to fulfill 1-Lipschitz？"></a>4. How to fulfill 1-Lipschitz？</h4><p>单纯的以上面的目标函数来训练网络是简单的，但是难点就在于训练的时候如何保证Discriminator表示的网络是1-Lipschitz的。</p><p>在WGAN的原始论文中，文中自己说的是使用了rough的处理方法，即clipping。而clipping指的是在train网络的时候，如果发现网络的参数超过了一个范围之后，就把这个参数限制到这个范围内，即</p><script type="math/tex; mode=display">\forall w, w = \begin{cases}c, &if\ w>c\\w, &if\ -c < w < c\\-c, &if\ w < -c\end{cases}</script><p>然而这个方法并不一定会让Discriminator变成一个1-Lipschitz的function，但是相比原来的GAN已经非常平滑了，以至于可以train出不错的效果。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210164249000.png" alt="原始论文中使用Clipping的方法来保证平滑性"></p><p>因此就会别的新的文章来研究如何让Discriminator成为一个1-Lipschitz的function，例如在Impoved WGAN中，提出了Gradient Panelty的方法，具体方法是什么则参考其<a href="https://arxiv.org/pdf/1704.00028.pdf">论文</a>：<a href="https://arxiv.org/pdf/1704.00028.pdf">https://arxiv.org/pdf/1704.00028.pdf</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210164823983.png" alt="Improved WGAN中提出了Gradient Panelty"></p><p>最后，今天最常用的是<a href="https://arxiv.org/abs/1802.05957">Spectrum Normalization</a>，因为这篇文章中的方法真的方WGAN中的Discriminator成为了1-Lipschitz函数。这篇论文中用Spectrum Normalization训练的网络简写为SNGAN</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210165116156.png" alt="Spectrum Normalization"></p><h3 id="3-Train-GAN-is-still-hard"><a href="#3-Train-GAN-is-still-hard" class="headerlink" title="3. Train GAN is still hard"></a>3. Train GAN is still hard</h3><p>我们前面讲的WGAN只是弥补了Train GAN过程中的一个问题。但其实除了这个问题，Train GAN的过程中还是有很多的问题。例如Generator和Discriminator对抗的问题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210171520383.png" alt="Discriminator和Generator对抗" style="zoom:80%;"></p><p>因为两者是在对抗的过程中互相从对方身上学习，因此两者中的任意一个出了问题，就会导致另外一个的训练失败。例如现在Discriminator训练失败无法分辨出来图片，那么Generator就没有办法来提升自己</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210173655852.png" alt="Discriminator无法分辨图片导致Generator无法生成更好的图片" style="zoom: 67%;"></p><p>同理，如果Generator无法骗过Discriminator，Discriminator也就无法进步</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210173820222.png" alt="Generator无法生成高质量的图片从而导致Discriminator无法得到提升" style="zoom:67%;"></p><p>因此，在训练的时候必须要保证两者棋逢对手，才可以训练出来</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210174018143.png" alt="Generator和Discriminator必须棋逢对手" style="zoom:67%;"></p><p>可是我们前面已经训练了不少的网络了，而这些经验告诉我们，并不是每一次训练都是成功的，更何况现在train GAN是要训练两个GAN。</p><h2 id="6-Tips-for-training-GAN"><a href="#6-Tips-for-training-GAN" class="headerlink" title="6. Tips for training GAN"></a>6. Tips for training GAN</h2><p>除了Wasserstein Distance以外，还有更多的Train GAN的技巧</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210174621778.png" alt="更多Train GAN的技巧"></p><p>这些Tips并不是对每一个任务都是有技巧的，因此他们的使用见仁见智</p><h2 id="7-Problem-of-training-GAN"><a href="#7-Problem-of-training-GAN" class="headerlink" title="7. Problem of training GAN"></a>7. Problem of training GAN</h2><p>我们下面讲讲GAN训练的过程中常见的一些问题。</p><h3 id="1-Mode-Collapse-Diversity"><a href="#1-Mode-Collapse-Diversity" class="headerlink" title="1. Mode Collapse: Diversity"></a>1. Mode Collapse: Diversity</h3><p><strong>所谓的Mode Collapse指的是，我们预期的GAN输出的分布和真实的分布一样，可是在有的时候，训练之后GAN的输出的分布坍缩在了真实数据分布中的某个点。</strong>这样的结果就是GAN输出的图片的确是我们希望的输出，可是却缺乏了多样性，生成的图片都是同一张图片。</p><p>我们画示意图来说，就是下面这样的，输出的分布都围绕在某个点附近。例如我们看到崩坏的人脸老是出现，而且同样的脸，发色还不一样</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211013118541.png" alt="Mode Collapse的例子" style="zoom:67%;"></p><p>为什么会有Mode Collapse这个问题发生？其实这个比较好理解，因为在某个蓝色点周围的这些点就是Discriminator的盲点。这个点周围的点都是Discriminator无法分辨出来的，因此Generator在学会了这个点、发现了这个现象之后，就会硬打一发，导致模型现在的输出全部集中在这个点附近，从而导致了Mode Collapse问题。</p><p>如何解决Mode Collapse这个问题呢？李宏毅老师认为，今天其实没有一个非常好的解答。例如Google的BigGAN，即便是强如Google，在train到之后也是Model Collapse。</p><p>那BigGAN是如何解决这个问题的呢？很简单，就是每一次update前保存一下checkpoint，然后train到Mode Collapse之后，把前面的参数拿出来用就行了。</p><h3 id="2-Mode-Dropping-Diversity"><a href="#2-Mode-Dropping-Diversity" class="headerlink" title="2. Mode Dropping: Diversity"></a>2. Mode Dropping: Diversity</h3><p>Mode Collapse这个问题比较好发现，因为train到最后我们就会发现所有的图片都是一样了。而Mode Dropping这个问题更加隐蔽一些。</p><p><strong>Mode Dropping指的是，我们预期的GAN输出的分布和真实的分布一样，可是在有的时候，训练之后GAN的输出的分布只是真实数据分布中的一部分，即抛弃掉了真实分布的一部分。</strong>这样的结果就是GAN输出的图片的确是我们希望的输出，可是却缺乏了多样性，生成的图片都是同一类的，或者说缺乏某一类图片。</p><p>距离来说，对于人脸，人脸包括白人的、黑人的、黄种人的等等各类人种的脸</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211014606294.png" alt="Mode Dropping的例子" style="zoom: 67%;"></p><h2 id="8-GAN-for-Sequence-Generation"><a href="#8-GAN-for-Sequence-Generation" class="headerlink" title="8. GAN for Sequence Generation"></a>8. GAN for Sequence Generation</h2><p>Train GAN最难的呢，其实是让GAN来生成一段文字。具体原因就是由于Classification的不可导问题。但是经过科研工作者的努力，这个问题最终还是被解决了。下面就来讲讲如何用GAN来进行Sequence Generation</p><h3 id="1-Framework-of-Sequence-Generation"><a href="#1-Framework-of-Sequence-Generation" class="headerlink" title="1. Framework of Sequence Generation"></a>1. Framework of Sequence Generation</h3><p>我们首先讲解一下GAN是如何用在Sequence Generation任务上的。</p><p>首先GAN中的Generation是用于产生我们需要的数据的，因此Sequence GAN中的Generation就是用于生成文字的。而我们在前面已经将结果了可以用于生成文本的Seq2Seq的模型，因此我们就可以直接用Seq2Seq模型来作为我们的Generator。</p><p>Seq2Seq中的Encoder用于接受一个Sample自Gaussian Distribution的input vector，然后Decoder decode出一段文字，这个就是Generator。注意，下图中我们没有画出来Encoder。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210231840460.png" alt="Sequence Generation任务中的Generator" style="zoom: 50%;"></p><p>然后GAN中的Discriminator是用于判断这个文本到底是机器产生的，还是真实存在的文本。因此我们就把Generator产生的文本再丢到Discriminator中进行辨别即可。</p><p>因此，我们一个完整的Sequence Generator GAN的Framework如下图所示，我们的目标就是让Generator生成的本文在经过Discriminator后的分数越大越好</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210232239813.png" alt="Sequence Generation GAN的Framework" style="zoom: 50%;"></p><h3 id="2-Non-differentiable"><a href="#2-Non-differentiable" class="headerlink" title="2. Non-differentiable"></a>2. Non-differentiable</h3><p>我们乍一看，认为上面的Framework和一个GAN没有任何的区别，但其实上面的这个Framework是无法训练的，因为上面的式子是不可导的。</p><p>而导致不可导的原因，就是我们在得到输出文本的时候进行的argmax操作，这一步是不可导的。举例来说，我们现在给Decoder进行一个微小的扰动$\Delta$，然后Decoder输出的Sequence就会有一个微小的扰动$\Delta$。</p><p>可是因为这个扰动很小，因此我们在取argmax之后输出的结果并没有改变。因此，Discriminator在反向传播计算梯度的时候，上游的梯度为0，因此下游的Generator就Train不动。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220210233332141.png" alt="Argmax导致Generator无法训练" style="zoom:67%;"></p><p>梯度为0导致无法训练Generator只是一个问题，更重要的问题是argmax操作是不可导的。</p><blockquote><p><strong>为什么max可导而argmax不可导？</strong></p><p>对于max函数，我们其实可以写出其表达式，以二维的输入为例，</p><script type="math/tex; mode=display">\max(a,b)=\frac {a+b+|a-b|}{2}</script><p>那么这个式子只有在0处不可导，而考虑到一般的情况下，并不是所有的参数都是相等的，因此在一般情况下max是可以求导的。</p><p>下面考虑多维情况下的max pooling操作。我们以一维的max pooling为例 </p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/v2-e266fddcef21d8d8841778d6033e0e71_720w.jpg" alt="一维的max pooling情况"></p><p>那么这个从长度为4的向量$\vec x$到长度为2的向量$\vec y$的转换，可以用一个矩阵来表示</p><script type="math/tex; mode=display">\vec y = \begin{bmatrix}1 & 0 & 0 & 0\\0 & 0 & 0 & 1\end{bmatrix}\cdot \vec x</script><p>即</p><script type="math/tex; mode=display">\vec y = A \cdot \vec x</script><p>因此现在输出对输入求导的话，</p><script type="math/tex; mode=display">\frac{\partial \vec y}{\partial\vec x} = A^T</script><p>因此，max pooling是可以求导的。</p><p>而对于下面的例子，argmax的操作则是</p><script type="math/tex; mode=display">1 = arg\max(\begin{bmatrix}4 & 2 & 2 & 3\end{bmatrix})</script><p>可是即便是同样的数字，排列不同的时候，输出也不同</p><script type="math/tex; mode=display">3 = arg\max(\begin{bmatrix}2 & 2 & 4 & 3\end{bmatrix})</script><p>因此argmax操作，它的不可导性质在于，它的输出不能写作<strong>输入</strong>的一个表达式，从上面的例子就可以看出来，<strong>计算argmax输出的变换矩阵来源于输入组织方式而不是输入的任何元素</strong>，因此<strong>argmax的输出对于的任何元素都不存在偏导数</strong>。对于argmax操作来说，可以使用gumbel-softmax重参数化来替代，知乎上有很多相关文章，不再赘述。</p></blockquote><p>因此即便是上游的导数不为0了，梯度传到这里来也是无法计算的，因为计算图在这里被argmax截断了。</p><h3 id="3-Atom-Bomb"><a href="#3-Atom-Bomb" class="headerlink" title="3. Atom Bomb"></a>3. Atom Bomb</h3><p>我们上周说过，只要是无法训练的问题我们就可以当做一个RL问题来求解，因此，对于不可导的Argmax，我们其实也可以用RL来硬train一发</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211000144074.png" alt="用RL来硬train Sequence Generation GAN" style="zoom: 50%;"></p><p>可是我们前面就说过，RL本身就很难train，GAN也难train。所以两者加起来再train就炸了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211000312877.png" alt="RL+GAN的训练会把人训炸" style="zoom:67%;"></p><p>因此，在过去的很长一段时间中，没有一个人成功的用RL train出来Sequence Generation GAN</p><h3 id="4-Sequence-Generation-GAN"><a href="#4-Sequence-Generation-GAN" class="headerlink" title="4. Sequence Generation GAN"></a>4. Sequence Generation GAN</h3><p>上面说道，用RL来从头train一个Sequence Generation GAN很难，因此不少方法使用的都是finetune其他任务上得到的GAN到Sequence Generation Task中。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211000835016.png" alt="finetune其他任务上训练的得到的GAN" style="zoom:80%;"></p><p>直到这篇文章：<a href="https://arxiv.org/abs/1905.09922">Training language GANs from Scratch</a>，它告诉我们说我们可以从头训练一个Sequence Generation的GAN。</p><p>具体来说它是怎么样实现的呢？他就是暴搜了超参数，然后用了一堆trick，最终train出了性能。FED这个值在Sequence Generation任务用用于衡量生成的句子的好坏，越小越好。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211002237756.png" alt="Training Language GANs for Scratch最终可以train出性能" style="zoom:67%;"></p><h2 id="9-More-about-Generative-Model"><a href="#9-More-about-Generative-Model" class="headerlink" title="9. More about Generative Model"></a>9. More about Generative Model</h2><p>其实Generative的Model除了GAN以外，还有其他的很多Generative的Model。例如VAE、FLOW-based Model等等</p><p>这些Generative Model都可以用于生成图片，但是使用VAE、FLOW-based Model得到的结果并不如GAN好。在他们的论文中，都是用了一堆Trick、然后暴搜了参数，最后说得到的结果和GAN差不多</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211002739217.png" alt="以外GAN的课程" style="zoom:67%;"></p><p>以往的VAE和FLOW-based Model的课</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211002927124.png" alt="以往其他Generative Model的课程" style="zoom:80%;"></p><h2 id="10-Supervised-Learning？"><a href="#10-Supervised-Learning？" class="headerlink" title="10. Supervised Learning？"></a>10. Supervised Learning？</h2><p>我们上面讲了这么一大堆，我们可能会有一个疑问，就是既然我们现在的目标是输入一个低维度Vector，输出一个表示图片的高维度Vector，那么为什么我们一定要用上面的这些做法而不能用Supervised Learning的方法一步到位呢？</p><p>我们给每一个头像一个从Gaussian Distribution中sample得到的向量，然后硬train一发，这样可不可以呢？</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211003549168.png" alt="使用Supervied Learning的方式硬train一发来生成图片？" style="zoom: 67%;"></p><p>答案是其实是可以的，真的有人这样干。但是直接这样做得到的效果不好，必须要有特殊的手段，具体特殊的方法则参考这些论文。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211003941334.png" alt="直接用一个网络来训练的方法"></p><p>我们以后面会讲到的Conditional GAN为例，Conditional GAN接受一个$x$和random variable $z$然后生成图片。我们现在假设$x$是一张label image，要求它输出原始图片。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211154946829.png" alt="Conditional GAN的例子" style="zoom:67%;"></p><p>如果我们现在用Supervised Learning硬train一发，得到的结果是这样的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211155154494.png" alt="Supervised Learning得到的结果" style="zoom:67%;"></p><p>我们会发现图像的边缘是非常模糊的。而造成这个现象的原因和前面的小精灵的例子是一样的，在训练数据中，存在多个窗户是中间这样，但是边界不同的房子。因此模型两边讨好的结果就是中间的窗户处清晰，但是边缘模糊的图片。</p><p>这也是为什么我们说需要使用额外的手段来确保生成的图片是清晰的。我们在最前面讲过，使用GAN确保输出是一个分布这样就可以保证输出的图片是清晰地。不同的房子由Random Variable来保证</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211160033839.png" alt="使用GAN确保输出是一个分布，从而得到边缘清晰的图片" style="zoom: 67%;"></p><h2 id="11-Evaluation-of-GAN"><a href="#11-Evaluation-of-GAN" class="headerlink" title="11. Evaluation of GAN"></a>11. Evaluation of GAN</h2><p>我们接下来要讲的GAN中衡量生成得到的图像好坏的评估方法。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211004445403.png" alt="Evaluation of Generation" style="zoom:67%;"></p><h3 id="1-Problem-of-Human-Evaluation"><a href="#1-Problem-of-Human-Evaluation" class="headerlink" title="1. Problem of Human Evaluation"></a>1. Problem of Human Evaluation</h3><p>为了要衡量GAN生成的图片的质量的好坏，最直观的一个方法就是用人眼来看。可是用人眼来看就会产生很多问题。首先就是评价的标准不一样，有的人看可能觉得这张图片很好，而有的人看可能觉得这张图片很烂。</p><p>所以在过去的很长的一段时间，尤其是在人们刚开始研究GAN的时候，人们评价模型的好坏都是按照人眼来看的。所以那个时候结果都是吹得，只需要在appendix后面放几张实验图，然后说我觉得比现在文献上的结果都要好，所以我这个文章的结果就是State-of-the-Art，然后这样就结束了。</p><p>所以早年的研究GAN的paper，全篇都是没有数字的，只有最后的效果图让人眼来看。那么想也不用想，这样的结果肯定是不行的。</p><p>因此，人眼来看这种不稳定、不客观的方法肯定是不行的，我们需要有客观的、稳定的方法来评价生成的图片的质量。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211010213519.png" alt="我们需要标准的方法来衡量GAN生成的图片的质量" style="zoom:67%;"></p><h3 id="2-Task-Specific-Evaluation"><a href="#2-Task-Specific-Evaluation" class="headerlink" title="2. Task Specific Evaluation"></a>2. Task Specific Evaluation</h3><p>其实针对于特定的任务，我们是可以设计出来特定的Evaluation的方法的。</p><p>例如我们作业中的用GAN生成人脸的，那么我们其实可以利用Cascade Face Detection等成熟的人脸识别算法，或者说专门的动漫人脸检测的系统。然后来看看GAN生成的图片中有多少个是可以被检测到的，然后用这个准确率来作为Evaluation Metric。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211011250156.png" alt="Task Specific Evaluation" style="zoom:67%;"></p><h3 id="3-Judge-from-Quality-of-Image"><a href="#3-Judge-from-Quality-of-Image" class="headerlink" title="3. Judge from Quality of Image"></a>3. Judge from Quality of Image</h3><p>上面讲了如何对人脸的质量来进行判断，那么对于生成猫、狗这类更一般的GAN来说该怎么样衡量生成图片的好坏呢？为此，我们其实可以把上面的评价方法推广一下。</p><p>我们现在对于生成猫、狗等任务，我们可以用一个Train好的Classifier来计算accuracy，把accuracy视为Evaluation Metric。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211012150559.png" alt="用分类网络来作为Metric" style="zoom:67%;"></p><h3 id="4-Judge-from-Diversity-of-Images"><a href="#4-Judge-from-Diversity-of-Images" class="headerlink" title="4. Judge from Diversity of Images"></a>4. Judge from Diversity of Images</h3><p>我们前面讲了GAN训练的过程中会有Mode Collapse和Mode Dropping这类Diversity的问题。因此，我们其实可以从模型生成的图像的Diversity来衡量模型的好坏。</p><p>这个时候我们可以把所有生成的图片经过Classifier之后的得到的概率向量的分布加起来求平均，如果最后是比较集中的，就证明Diversity比较小，因此不太好</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211015750839.png" alt="小Diversity的GAN" style="zoom: 50%;"></p><p>而对于好的GAN来说，它输出的分布应该是非常diverse的，因此加起来的平均就会是一个uniform的Distribution。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211020105130.png" alt="大Diversity的GAN" style="zoom:50%;"></p><p>我们需要注意的是，上面说的从图像的质量来衡量是针对一张图像而言的，我们希望得到的伪概率向量是越集中越好，而从图像（们）的多样性来说，我们希望Generator生成的所有的图像的分布是Diversity的，因此其实是针对两个不同的对象来衡量的，因此我们说是从两个角度来衡量Generator生成图像的效果。</p><h3 id="5-Inception-Score-IS"><a href="#5-Inception-Score-IS" class="headerlink" title="5. Inception Score, IS"></a>5. Inception Score, IS</h3><p>我们上面讲了如何用Classifier来衡量GAN得到的图片的好坏，而不同的Classifier计算得到的分数不同，因此我们如果想要比较的话，就需要使用一个固定的Classifier。</p><p>一般来说，大家用的都是inception score，即Classifier用的是inception net。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211020608116.png" alt="Inception Score的计算" style="zoom:67%;"></p><p>但是需要注意的是，Inception Score有些情况下并不适用，即生成的图片并不在Inception的Class中。</p><p>例如我们现在要生成手机，那么假设手机不是Inception所有的类别，那么就没有办法计算。其次，Inception的类别中的一些子类别也是没有办法的，例如生成动漫书，那么Inception很有可能会分类成书，而因为不是动漫书、故事书、课本等类别，所以不管怎么样算都会得到Low Diversity的结果。</p><h3 id="6-Frechet-Inception-Distance-FID"><a href="#6-Frechet-Inception-Distance-FID" class="headerlink" title="6. Fréchet Inception Distance (FID)"></a>6. Fréchet Inception Distance (FID)</h3><p>除了IS之外，还有了一种新的衡量的方法，即计算FID。</p><p>FID的思想是不要用softmax之后的伪概率向量来判断Generator生成图像的好坏，而是用经过softmax之前的vector。</p><p>这个vector是一个长度和class数量相同的vector。而这个vector作为高维空间中的一个点，把所有的点画出来之后其实就可以看到Generator输出的分布。</p><p>然后我们同样的把真实数据的分布也这样计算出来，就得到了真实的分布和Generator输出的分布</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211021636910.png" alt="取softmax得到了真实的和输出的分布" style="zoom: 50%;"></p><p>我们假设，产生的和真实的图片在这个空间中都是服从Gaussian的Distribution，然后我们计算这两个Gaussian Distribution的FID作为评估的方法。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211021903213.png" alt="利用FID来作为衡量手段" style="zoom:50%;"></p><p>因为现在是Distance，所以其实Distance越小越好。</p><p>其次我们也不一定是一个Gaussian Distribution，这个数据点服从的分布是假设的，Gaussian不一定和它真实的分布类似。</p><h3 id="7-More-about-Evaluation"><a href="#7-More-about-Evaluation" class="headerlink" title="7. More about Evaluation"></a>7. More about Evaluation</h3><p>其实上面讲的FID也是有问题，举例来说，如果现在我们的GAN只是单纯的记住了每一个输入。这样的话计算得到的FID就很小。</p><p>可是这样的GAN真的是我们需要的么？显然不是，因为我们希望GAN是能够生成新的图片的，如果只是单纯的记忆的话，那么我们为什么不直接从Dataset里面sample呢？</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211022703272.png" alt="FID无法处理Memory GAN的问题" style="zoom:67%;"></p><p>更棘手的是，还有单纯的翻转了图像这个问题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211022948791.png" alt="翻转图像也是很难来评估的" style="zoom:67%;"></p><p>因此，其实GAN的Generator生成的结果的Evaluation其实是非常困难的，研究Evaluation的方法都可以写成一篇文章。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211023128271.png" alt="GAN的Evaluation本身就是一个可以研究的问题"></p><h2 id="12-Conditional-GAN"><a href="#12-Conditional-GAN" class="headerlink" title="12. Conditional GAN"></a>12. Conditional GAN</h2><p>我们前面讲了，GAN根据输入可以分为两类，分别是：</p><ul><li>Conditional GAN：输入是$x$以及一个sample自某一个简单分布（一般是Gaussian Distribution）的随机变量$z$</li><li>Unconditional GAN：输入是一个sample自某一个简单分布（一般是Gaussian Distribution）的随机变量$z$</li></ul><p>我们上面讲的都是Unconditional的GAN，下面我们就来讲讲Conditional的GAN</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211023529231.png" alt="Conditional的GAN" style="zoom:67%;"></p><h3 id="1-Why-Conditional-GAN"><a href="#1-Why-Conditional-GAN" class="headerlink" title="1. Why Conditional GAN"></a>1. Why Conditional GAN</h3><h4 id="1-Control-Output-of-GAN"><a href="#1-Control-Output-of-GAN" class="headerlink" title="1. Control Output of GAN"></a>1. Control Output of GAN</h4><p>我们上面讲的都是Unconditional GAN。可是为什么还要有Unconditional GAN呢？其实第一个原因就是因为我们现在希望能够控制GAN来生成我们需要的东西。</p><p>因为对于Unconditional GAN来说，我们现在直到给它一个Gaussian Distribution中sample得到的vector，它确实可以生成一张图片的。但是它生成的图片是不受我们的控制的。我们并不知道给一个向量，他会生成什么样的图片。</p><p>因此，如果我们可以给一个GAN一个额外的输入（Condition）来控制生成的结果，那么其实就可以让GAN来完成一些额外的任务。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211143243536.png" alt="Conditional GAN的结构" style="zoom:67%;"></p><h4 id="2-Different-output"><a href="#2-Different-output" class="headerlink" title="2. Different output"></a>2. Different output</h4><p>使用Conditional GAN的第二个原因就是因为我们希望在同样的Condition下，在Gaussian Distribution中sample得到不同vector生成的结构都是符合Condition的不同的结果。但是其他的Generative的模型并不能实现输出同一个Condition下得到不同的图像。</p><p>例如text-to-image任务，我们输入的文本，要求GAN生成符合我们文本要求的图片。这个时候，文本是input，图片是label，因此其实是一个有监督的任务，我们需要文本和图片的pair</p><p>然后我们给Generator输入除了Sample自Gaussian Distribution的Random Variable $z$以外，还有input的文本。这个input的本文我们当然可以用one-hot等方式转换成向量。但是正如我们前面说的embedding的问题，因此我们不妨先用一些方法尝试把高维度的One-Hot转换为Embedding。</p><p>在过去我们可以用Word Embedding、RNN，现在可能用Self-Attention等等，这个都是可以的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211145034408.png" alt="Text-to-image任务" style="zoom:67%;"></p><p>而我们现在告诉机器说我们要生成一个红眼睛的角色，那么因为Sample得到的$z$的不同，可能生成酷拉皮卡，也有可能生成辉夜大小姐。</p><p>而这件事可以做到么？其实是真的可以做到的，在过去的课程中是真的有这个作业的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211150535392.png" alt="真实的Text2Image的结果" style="zoom:67%;"></p><h3 id="2-Conditional-GAN"><a href="#2-Conditional-GAN" class="headerlink" title="2. Conditional GAN"></a>2. Conditional GAN</h3><p>我们接下来就来讲讲Conditional GAN的架构。</p><h4 id="1-Unconditional-GAN-Generator"><a href="#1-Unconditional-GAN-Generator" class="headerlink" title="1. Unconditional GAN Generator"></a>1. Unconditional GAN Generator</h4><p>首先是Conditional GAN的Generator。Conditional GAN的Generator会吃两个输入，具体吃入的方式可以是最前面说的$x$和$z$直接相加，也可以是$x$和$z$拼接起来，也可以是两个经过Transform之后相加……具体以哪种方式吃入两个输出，就看个人的设计。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211150801412.png" alt="Conditional GAN Generator" style="zoom:67%;"></p><h4 id="2-Unconditional-GAN-Discriminator"><a href="#2-Unconditional-GAN-Discriminator" class="headerlink" title="2. Unconditional GAN Discriminator"></a>2. Unconditional GAN Discriminator</h4><p>而对于Discriminator来说，如果我们用Unconditional GAN的Discriminator的话，其实是有问题的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211151650919.png" alt="Unconditional GAN的Discriminator" style="zoom:67%;"></p><p>而如果Discriminator的输入只有生成的图片的话，那么Discriminator的目标其实就只是分辨这张图片到底是不是真实的。因此Generator最终只会学会生成非常真实的图片但是生成的非常逼真的图片和输入的Condition没有任何关系。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211151901118.png" alt="Unconditional GAN的问题" style="zoom:67%;"></p><p>因此，我们的Generator现在也不能只吃生成的图片，也要吃入Condition $x$</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211152451325.png" alt="Conditional GAN的Discriminator也要吃入Condition" style="zoom:67%;"></p><p>因此，我们Discriminator对生成的图片在打分的时候，就要考虑两个因素，第一个是生成的图片是否逼真，另外一个就是生成的图片是否能和Condition match起来。</p><h4 id="3-Unconditional-GAN-Data"><a href="#3-Unconditional-GAN-Data" class="headerlink" title="3. Unconditional GAN Data"></a>3. Unconditional GAN Data</h4><p>除了GAN的Generator和Discriminator要做出改变以外，训练时候的数据也要有改变。我们因为会存在输出的图片和Condition Mismatch的现象，因此我们其实还需要有Mismatch的数据，这样的话Discriminator才会从Mismatch的数据中学到Mismatch这件事情，从而强迫Generator学会生成match的图片这件事</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211153337358.png" alt="我们需要三类数据：正、负和Mismatch的数据"></p><h3 id="3-Conditional-GAN-Application"><a href="#3-Conditional-GAN-Application" class="headerlink" title="3. Conditional GAN Application"></a>3. Conditional GAN Application</h3><p>其实到这里，我们就讲完了Conditional GAN训练时候的注意事项。下面就来讲讲Conditional GAN的一些运用</p><h4 id="1-Image-Translation-Pix2Pix"><a href="#1-Image-Translation-Pix2Pix" class="headerlink" title="1. Image Translation / Pix2Pix"></a>1. Image Translation / Pix2Pix</h4><p>除了上面讲的Text2Image任务以外，Conditional GAN其实完全可以以一张图片作为Condition，然后输出一张图片。</p><p>而这样的任务在实际中有非常多的应用。例如黑白图片上色、白天黑夜转换、设计图转效果图等等应用</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211154700712.png" alt="Image Translation的例子" style="zoom:67%;"></p><h4 id="2-Sound-to-Image"><a href="#2-Sound-to-Image" class="headerlink" title="2. Sound to Image"></a>2. Sound to Image</h4><p>Conditional GAN的另外一个应用就是把声音转换成图片。虽然为什么要进行转换听起来可能很莫名其妙。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211160621084.png" alt="Sound2Image任务" style="zoom:67%;"></p><p>而对于Sound2Image任务来说，example就是pair在一起的音频和图像。这个数据其实并不是很难找，用电视剧的声音就行了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211160825560.png" alt="Sound2Image任务的数据的收集" style="zoom:67%;"></p><p>最后，这样的GAN实际训练下来的结果如下，上面的声音是水流的声音，那么机器在听到了之后就生成了一个小溪，而下面是一个发动机的声音，听到了之后机器就生成了一个快艇的图片</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211161100345.png" alt="Sound2Image的例子" style="zoom:67%;"></p><p>然后有一个神奇的现象，就是我们如果放大音频的音量，那么得到的图片如下。上面的图片中，随着流水声变大，模型的输出逐渐从消息变成了尼加拉瓜瀑布。而随着发动机声音越来越大，输出的快艇边上的水流越来越大。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211161357158.png" alt="sound2image的神奇结果" style="zoom:67%;"></p><p>但是需要说明的是，这个结果是挑选过的结果，并不是每一个图像都是这样的，例如给一段逐渐声音变大的钢琴声，输出的图像不知所云，只有声音合适的时候才生成了钢琴</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211161820903.png" alt="上面的现象失败的例子" style="zoom:80%;"></p><h4 id="3-Talking-Head-Generation"><a href="#3-Talking-Head-Generation" class="headerlink" title="3. Talking Head Generation"></a>3. Talking Head Generation</h4><p>最近的一个使用GAN得到的惊艳的效果的任务就是让静态照片中的人脸说话</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/61726512_2357808061210699_90764616153432064_n.gif" alt="Talking Head" style="zoom:150%;"></p><h2 id="13-GAN-for-Unsupervised-Learning"><a href="#13-GAN-for-Unsupervised-Learning" class="headerlink" title="13. GAN for Unsupervised Learning"></a>13. GAN for Unsupervised Learning</h2><p>我们要讲的关于GAN的最后一个内容，就是如何用GAN来进行无监督学习，即从Unpaired Data中学习。</p><p>我们前面讲了Conditional GAN和Unconditional GAN。Conditional GAN和Unconditional GAN都是Supervised Learning。Conditional GAN是Supervised Learning非常好理解。而Unconditional GAN的话虽然训练过程中不需要Label，但是如果直接用它来硬train一发其实是有问题的，这个等下会详细的介绍。</p><p>但是为了用到Unsupervised Learning中，我们先讲讲如何把GAN用到Unsupervised Learning中。 </p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211163207273.png" alt="GAN for Unsupervised Learning" style="zoom:67%;"></p><h3 id="1-Why-Unsupervised-GAN"><a href="#1-Why-Unsupervised-GAN" class="headerlink" title="1. Why Unsupervised GAN?"></a>1. Why Unsupervised GAN?</h3><p>我们前面在作业中遇到了Semi-Supervised Learning，就是数据只有一部分是有Label的，而有一部分是没有Label的。在作业3中我们用的Pseudo Label来进行的Semi-Supervised Learning。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211164303661.png" alt="Semi-Supervised Learning" style="zoom:67%;"></p><p>可是在有一些任务中，我们的数据是完全没有label的，例如图像风格迁移。我们要把$x$ domain中的图片转移到$y$ domain中，例如把照片转换到漫画风格。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211165501567.png" alt="图像风格迁移完全是Unsupervised Learning的任务" style="zoom:67%;"></p><p>这个时候就根本没有Label，因此就需要对GAN进行改进，让其进行Unsupervised Learning。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211165801271.png" alt="对GAN进行改进" style="zoom:67%;"></p><h3 id="2-Why-not-Unconditional-GAN"><a href="#2-Why-not-Unconditional-GAN" class="headerlink" title="2. Why not Unconditional GAN?"></a>2. Why not Unconditional GAN?</h3><p>我们前面说GAN的输入是有一个Gaussian Distribution，然后输出也是一个Distribution。为了遵从Unsupervised Learning中的惯用语，我们这里用Domain而不是Distribution。</p><p>那么GAN的任务就是把X Domain中的数据经过变换到Y Domain中去。注意，这个时候X Domain不一定是我们前面说的一个来自Gaussian的low Dimension的variable，他可以使一个high Dimension的vector </p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211170517369.png" alt="Unsupervised Conditional GAN的任务" style="zoom:67%;"></p><p>而Unconditional GAN只需要一些真实的图片，因此也是Unsupervised Learning，那么我们为什么不用Unconditional GAN来做Unsupervised Learning呢？</p><p>这是因为，如果用Unconditional GAN来硬做Unsupervised Learning的话，会遇到和前面Conditional GAN一样的Mismatch的问题。</p><p>例如对于上面这个图像风格迁移问题来说，如果用Unconditional的Learning的话，那么Discriminator只会看生成的图片是否逼真，而不会看生成的图片是否是和输入的X Domain的图片是否是一一对应的。</p><p>这个时候对于Generator来说，他很有可能把X Domain的图片当做是High Dimensional的Gaussian Distribution</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211172425296.png" alt="使用Unconditional GAN硬做图像风格迁移会导致Mismatch问题" style="zoom: 67%;"></p><p>在Conditional GAN中解决这个问题是依靠paired data解决的，可是在UnconditionalGAN来说，就没有办法了。</p><h3 id="3-Cycle-GAN"><a href="#3-Cycle-GAN" class="headerlink" title="3. Cycle GAN"></a>3. Cycle GAN</h3><p>为了解决上面说的问题，有一个想法就是Cycle GAN。Cycle GAN中train了两个Generation，第一个Generator是把输出从X Domain转到Y Domain上去，而第二个Generator是把Y Domain的输入转会X Domain上去。</p><p>这样强迫第一个Generator学会的Transformation是可逆的，因此就存在了一个映射关系，从而使得Transform的结果和X Domain中的图片是Match的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211174103612.png" alt="CycleGAN的思想" style="zoom:67%;"></p><p>因此，CycleGAN在训练的过程中的训练目标除了第一个Generator生成的动漫头像Discriminator无法分辨以外，还有第二个Generator生成的图片和原来的输入要尽可能一致。</p><p>虽然CycleGAN听起来比较靠谱，但是其实是没有办法处理一个问题的，就是第一个Generator学会了图像左右翻转，第二个Generator也学会了图像左右翻转。这样的奇怪的转换满足我们的要求，但是得到的图片的质量显然不高。</p><p>这样的状况在CycleGAN上确实有可能会发生，而且也无法避免。但是这个状况一般不会发生，或者说发生概率比较小</p><h3 id="4-More-about-CycleGAN"><a href="#4-More-about-CycleGAN" class="headerlink" title="4. More about CycleGAN"></a>4. More about CycleGAN</h3><p>其实关于CycleGAN，有一个比较神奇的事情就是，几乎在同一个时间，三个不同的团队都提出来了CycleGAN，虽然名字不一样，但是干的都是同一件事。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211185430938.png" alt="三个不同名字的网络干的都是一件事" style="zoom:67%;"></p><p>此外，StarGAN能够实现多个风格之间的转换</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211185816268.png" alt="StartGAN" style="zoom:67%;"></p><h3 id="5-Application-of-CycleGAN"><a href="#5-Application-of-CycleGAN" class="headerlink" title="5. Application of CycleGAN"></a>5. Application of CycleGAN</h3><p>我们最后讲一讲CycleGAN的作用</p><h4 id="1-Selfie2Anime"><a href="#1-Selfie2Anime" class="headerlink" title="1. Selfie2Anime"></a>1. Selfie2Anime</h4><p>最后上面这个把照片转成真人头像这个任务是真实可行的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211190554445.png" alt="Selfie2Anime的结果" style="zoom:67%;"></p><h4 id="2-Text-Style-Transfer"><a href="#2-Text-Style-Transfer" class="headerlink" title="2. Text Style Transfer"></a>2. Text Style Transfer</h4><p>同样的，我们也可以进行Text Style Transfer，即转换文本的情感。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211191251194.png" alt="Text Style Transfer任务" style="zoom:80%;"></p><p>而这个任务我们就用CycleGAN，什么都不用改</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211191529324.png" alt="直接用Text Style Transfer" style="zoom: 50%;"></p><p>最后，得到的效果如下，我们可以看到，有的效果确实不错，而有的生成的句子则不知所云</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211191817377.png" alt="Text Style Transfer的结果" style="zoom:67%;"></p><h4 id="3-More-tasks"><a href="#3-More-tasks" class="headerlink" title="3. More tasks"></a>3. More tasks</h4><p>Unsupervised Learning还可以解决其他的各种任务，具体如下图所示</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220211192250083.png" alt="无监督GAN的应用" style="zoom:67%;"></p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
            <tag> GAN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-9: Transformer</title>
      <link href="/2022/02/05/li-hong-yi-ml2021-spring-9-transformer/"/>
      <url>/2022/02/05/li-hong-yi-ml2021-spring-9-transformer/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是Machine Learning 2021 Spring 第九节课的笔记，本节课主要讲解了基于Attention（Self-Attention）机制的网络：Transformer，包括Self-Attention和Seq2Seq的网络结构。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205185856666.png" alt="第九节课：Transformer"></p><h1 id="李宏毅ML2021-Spring-9-Transformer"><a href="#李宏毅ML2021-Spring-9-Transformer" class="headerlink" title="李宏毅ML2021-Spring-9: Transformer"></a>李宏毅ML2021-Spring-9: Transformer</h1><p>在前面的课程中，我们很多次的提到了Transformer，因为在Transformer之前，深度学习的发展大致分为：</p><ul><li>上古时期：Alexnet出现之前</li><li>Alexnet：Alexnet重燃了大家对深度学习的热情，很多研究员都被DL吸引，开始研究DL</li><li>大发展时期：在Alexnet提出了之后，大家都一股脑的扎入了DL的领域。这个时候DL训练时候的很多问题就逐渐的暴露了出来，例如梯度消失、不收敛……在这个阶段，人们逐渐的解决了这些问题，渐渐地使得训练一个work的模型越来越简单，人们对DL的认识也越来越深刻</li><li>ResNet：而ResNet的提出很好的解决了深层网络训练过程中梯度消失的问题，配合kaiming初始化，使得人们能够几乎训练任意深度的网络，因此极大地提升了人们探索模型的能力。从这以后模型越来越复杂，越来越大</li><li>注意力时期：在ResNet之后，人们从人类的在观察的时候会有注意力这个角度出发，开始通过各种不同的方式给网络中引入注意力。而不同的方法对注意力的定义不同，因此引入的方法也不同。</li><li>Transformer：Transformer中抛弃了CNN的卷积，而完全使用Self-Attention，取得了巨大的进步。从此以后，使用Self-Attention来作为注意力就几乎成了注意力机制的范式，而Transformer的架构类似于ResNet一样，称成为了网络的经典范式。</li></ul><p>可以说，在目前的阶段，Transformer架构为基础的模型基本上已经占据了半壁江山，很多新的模型都是在Transformer的架构的基础上修改得到的，例如：<code>ViT(Vision Transformer)</code>、<code>Swin Transformer</code>……</p><p>因此我们还是需要来学习一下Transformer这个网络架构的。</p><p>当我们说到Transformer的时候，我们第一个想到的就是变形金刚，因为变形金刚的英文名就是Transformer<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205200230497.png" alt="Transformer指的就是变形金刚" style="zoom:50%;"></p><p>此外，课程后面会讲到的bert就是在Transformer基础上建立的模型，而bert是芝麻街里的一个怪物（Monster），所以我们说到Transformer的时候还会想到这个怪物。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205185856666.png" alt="说道Transformer就会想起来Transformer和Bert" style="zoom:50%;"></p><h2 id="1-Introduction-of-Seq2Seq"><a href="#1-Introduction-of-Seq2Seq" class="headerlink" title="1. Introduction of Seq2Seq"></a>1. Introduction of Seq2Seq</h2><p>Transformer是一个Seq2Seq的模型，其通过Self-Attention结构，同时实现了Seq2Seq和Attention两个能力。</p><p>因此在开始介绍Transformer之前，我们最好还是介绍一下Seq2Seq模型以及Seq2Seq模型的作用。</p><h3 id="1-Sequence-to-Sequence"><a href="#1-Sequence-to-Sequence" class="headerlink" title="1. Sequence-to-Sequence"></a>1. Sequence-to-Sequence</h3><p>在上一节课：Self-Attention中，我们介绍了一类新的模型，和全连接、CNN不同，这类网络的输入是具有上下文关系的Vector Set。然后根据这类模型输入和输出的关系，我们又进一步把这类模型分为了三类：</p><ul><li>输入和输出等长的模型，这类模型又称为Sequence Labeling的模型</li><li>输出只有一个值，这类模型又称为Sequence Regression/Classification的模型</li><li>输入和输出不等长（由网络自己决定），这个时候因为输入和输出都是具有独立的、完整含义的Sequence，因此这类模型又称为Sequence to Sequence的模型，简称为Seq2Seq</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205203754130.png" alt="Seq2Seq模型的定义"></p><h3 id="2-Application-of-Seq2Seq"><a href="#2-Application-of-Seq2Seq" class="headerlink" title="2. Application of Seq2Seq"></a>2. Application of Seq2Seq</h3><p>我们下面讲讲Seq2Seq模型的一些运用</p><h4 id="A-Speech-Recognition"><a href="#A-Speech-Recognition" class="headerlink" title="A. Speech Recognition"></a>A. Speech Recognition</h4><p>在语音辨识的时候，输入的语音是一段PCM波形信号转换之后得到的向量，而输出是这段语音对应的文本。而输入和输出都是具有独立含义的Sequence。</p><p>我们前面在作业二的时候，讲过了Phoneme的Classification，我们讲到用MFCC、filter bank等算法实现把一小段语音讯号（25ms左右）转换为一个长度为39或者其他长度的向量。然后通过Sliding Window把一个长度为1秒的语音信号转换成100个向量的集合。</p><p>但是1秒的语音转换成文字可能就几个字，因此完成Speech Recognition任务的模型的输入输出就是长度不等的，因此Speech Recognition任务的Model就是Seq2Seq。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205220129916.png" alt="Seq2Seq可以解决Speech Recognition任务" style="zoom: 80%;"></p><h4 id="B-Machine-Translation"><a href="#B-Machine-Translation" class="headerlink" title="B. Machine Translation"></a>B. Machine Translation</h4><p>机器翻译同样也是输入和输出不等长的例子，例如几个字的中文（文言文）就可以翻译成很长的英文。因此机器翻译也可以用Seq2Seq的模型来解决。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205220529732.png" alt="Seq2Seq可以解决机器翻译任务" style="zoom:80%;"></p><h4 id="C-Speech-Translation"><a href="#C-Speech-Translation" class="headerlink" title="C. Speech Translation"></a>C. Speech Translation</h4><p>还有一类人物就是语音翻译，语音翻译指的是模型现在的输入是一段语音信号，而输出则是另外一个语言的文本。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205220856150.png" alt="Seq2Seq可以解决语音翻译任务" style="zoom:80%;"></p><p>虽然我们轻易就能知道Speech Translation的输入和输出是不等长的，可是我们就会问，为什么不把语音识别的模型和机器翻译的模型接起来，而非要在提出一个Speech Translation的模型呢？</p><p>其实是因为，<strong>现在世界上有7000多种语言，其中一半都是没有文字的</strong>。而没有文字的语言是没有办法进行语音识别的，因此我们是有必要直接得到一个Speech Translation的模型的。</p><p>其次，使用一个专精某个任务的模型其实是比两个模型的效果好而且开销要低很多。</p><h4 id="D-Chat-Bot"><a href="#D-Chat-Bot" class="headerlink" title="D. Chat Bot"></a>D. Chat Bot</h4><p>使用Seq2Seq模型，还可以做出来一个聊天机器人。因为聊天时候的前后两句话其实长度是不一定相等的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205234831525.png" alt="Seq2Seq模型可以做出来一个聊天机器人" style="zoom:67%;"></p><p>而这个时候我们的训练的数据就可以来自于剧本。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205235325567.png" alt="训练数据可以来自于剧本" style="zoom:67%;"></p><h3 id="3-Case-Study-闽南语-台语转中文"><a href="#3-Case-Study-闽南语-台语转中文" class="headerlink" title="3. Case Study: 闽南语/台语转中文"></a>3. Case Study: 闽南语/台语转中文</h3><p>举一个真实的Seq2Seq的Speech Translation的例子，就是把闽南语/台语转换成中文文本。</p><h4 id="A-task-identification"><a href="#A-task-identification" class="headerlink" title="A. task identification"></a>A. task identification</h4><p>虽然说台语的确是有自己的文字的，但是绝大多数人都看不懂泰台语的文字。例如用一个台语语音识别的模型来做的话，现在给一段台语的语音信号，转换出来的台语文字其实是看不懂的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205225035572.png" alt="台语文字少见，即便转换出来大家也看不懂是什么意思" style="zoom:67%;"></p><p>因此我们就需要一个Speech Translation的模型，即把闽南语当做是外语来翻译。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205225402555.png" alt="使用Speech Translation模型来把闽南语转为台语" style="zoom:80%;"></p><h4 id="B-Preparation-of-dataset"><a href="#B-Preparation-of-dataset" class="headerlink" title="B. Preparation of dataset"></a>B. Preparation of dataset</h4><p>要完成台语的Speech Translation的Task的话，我们需要的训练数据是台语的语言和对应的中文文本作为label。</p><p>这样的数据还是很好收集的，直接去YouTube上搜索肥皂剧/乡土剧的视频即可。把语音从视频里面抠出来，然后把字幕作为label。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205230013185.png" alt="使用电视剧来作为数据集" style="zoom:80%;"></p><p>有了数据之后，我们接下来就可以用各种各样的Seq2Seq的模型来完成Speech Translation任务，包括我们后面要讲的Transformer模型。我们进行了真实的实验，下载了1500个小时的乡土剧来训练模型，最后得到了一个模型。</p><h4 id="C-Dataset-ShortComing"><a href="#C-Dataset-ShortComing" class="headerlink" title="C. Dataset ShortComing"></a>C. Dataset ShortComing</h4><p>其实我们直接用上面这些来自于肥皂剧的数据来进行训练是有不少问题的：</p><ul><li><p>电视剧里的背景音乐如何处理？</p><ul><li>答：不理他    </li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205230859553.png" alt="直接忽略掉背景音乐的问题" style="zoom:67%;"></p></li><li><p>字母和语音如果有错位（mismatch）怎么办？</p><ul><li>答：不理他</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205230956130.png" alt="直接忽略掉字幕（Label）的问题" style="zoom: 67%;"></p></li><li><p>为什么直接用mp3而不是先转成台语的Phoneme?</p><ul><li><p>答：为了方便……</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205231119259.png" alt="三无训练：甚至不转成Phoneme" style="zoom:67%;"></p></li></ul></li></ul><p>所以，像上面这样明明问题很大，但是没有管这些直接训练一个模型出来的方法，叫做：<strong>硬（Ying）train一（Yi）发（fa）</strong><span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205231542601.png" alt="硬Train一发" style="zoom: 67%;"></p><h4 id="D-Results"><a href="#D-Results" class="headerlink" title="D. Results"></a>D. Results</h4><p>最后是上面硬Train一发得到的模型的一些结果。</p><p>第一个例子（中文发音：<code>你身体无刊</code>），但是机器听到<code>无刊</code>的时候能够正确的翻译成<code>撑不住</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205231809729.png" alt="识别成功的例子-1"></p><p>第二个例子（中文发音：<code>没代没志，你系为嘎母亲家</code>），而机器听到了<code>没代没志</code>之后就直到是<code>没事</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205232215380.png" alt="识别成功的例子-2"></p><p>虽然有一些成功的例子，但是机器其实也是会犯错的，例如下面的例子：</p><p>第三个例子（中文发音：<code>梅涩弄</code>），而一开始李宏毅老师听到之后的结果和机器给出来的结果一样，都是<code>要生了吗</code>。但这句话正确的翻译却是：<code>不会腻嘛</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205233839971.png" alt="错误的例子-1"></p><p>第四个例子（中文发音：<code>我有答强奖拜托</code>），这个是一个倒装句，正确的翻译应该是<code>我拜托厂长了</code>，但是机器的翻译却是：<code>我有帮厂长拜托</code>，所以机器其实没有学习到这个倒装句</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205234114533.png" alt="错误的例子-2：机器没有学到倒装句"></p><p>而反过来，就是语音合成任务，不过由于没法把模型合成的声音进行播放，所以就略掉这部分</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205234546590.png" alt="Seq2Seq来处理台语语音合成问题" style="zoom:67%;"></p><h2 id="2-More-General-Seq2Seq"><a href="#2-More-General-Seq2Seq" class="headerlink" title="2. More General Seq2Seq"></a>2. More General Seq2Seq</h2><p>我们上面讲的一些任务，他们的特点都是输入和输出是非常明显的不相等的关系。<strong>但是需要注意的是，Seq2Seq模型的应用其实非常非常非常广泛，千万不要被输入和输出不等长这个特点迷惑住</strong>。</p><p>很多即便是输入和输出等长、只有一个输出，乃至有一些问题的输出都不是Sequence的任务也可以用Seq2Seq来解。</p><p>而能够用Seq2Seq模型来解的任务，我们首先要把他们抽象成一个QA问题，然后再把任务的数据转化为Sequence数据。</p><p>下面就将讲解这两步，以实现Seq2Seq模型更广泛的运用。</p><h3 id="1-Question-Answering"><a href="#1-Question-Answering" class="headerlink" title="1. Question Answering"></a>1. Question Answering</h3><p><strong>所谓的问答系统指的是给机器一个文章（序列输入），然后问机器一个问题，让机器给出来答案（输出）</strong>。注意，Question Answering并不是一个具体的任务，而是我们认知上的概念。</p><p><strong>通过看能否把一个具体的Task抽象为Question Answering，我们其实就可以知道一个任务能不能用Seq2Seq模型来解</strong>。<strong>而Question Answering的关键就在于如何提出问题，因为输入和答案其实就是任务的数据</strong></p><p>下面举几个通过把Task抽象成QA的从而使用Seq2Seq来解例子：</p><ul><li><strong>机器翻译</strong>：输入是一篇文章，问题是这个文章的德语翻译是什么，输出是德语句子（Label）</li><li><strong>文章摘要</strong>：输入是一篇文章，问题是这个文章的摘要是什么，输出就是摘要</li><li><strong>情感分析</strong>：输入是一篇文章，问题是这个句子的情感是正面的还是负面的。</li><li><strong>动作预测</strong>：输入是过去人的动作，问题是未来人的动作是什么</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206002639348.png" alt="一些可以抽象成QA后用Seq2Seq求解的例子"></p><p>那么假如说我们现在已经把一个Task转换为了QA问题，那么我们该如何使用Seq2Seq来进行求解呢？可以参考下面的两篇文章：</p><ul><li><a href="https://arxiv.org/abs/1806.08730">文章一</a>：<a href="https://arxiv.org/abs/1806.08730">https://arxiv.org/abs/1806.08730</a></li><li><a href="https://arxiv.org/abs/1909.03329">文章二</a>：<a href="https://arxiv.org/abs/1909.03329">https://arxiv.org/abs/1909.03329</a></li></ul><p>这两篇文章直接从问题和文章的抽象概念出发，一步步说明该如何用Seq2Seq来求解</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206004448245.png" alt="将问题抽象为QA之后就可以恩方便的求解" style="zoom:67%;"></p><h3 id="2-Output-as-Sequence"><a href="#2-Output-as-Sequence" class="headerlink" title="2. Output as Sequence"></a>2. Output as Sequence</h3><p>在把问题抽象为QA问题之后，我们还需要做的一个步骤就是把任务的输出变换为一个序列（Sequence）数据。变换的方式有很多，这个具体就看具体的数据的label的格式自己来思考。</p><p>下面举一个文法剖析（Syntactic Parsing）的例子。所谓文法剖析指的就是现在给机器一个句子，句子要给出整个句子的文法。例如，现在给机器一句话：Deep learning is very powerful。那么机器要能够划分出来：deep learning在一起构成名字短语，very power在一起构成状语、is very powerful在一起构成动词、状语结构，最终所有词语在一起构成一个句子。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206011412145.png" alt="上面句子的文法解析树" style="zoom:67%;"></p><p>所以，文法剖析这个任务的目标就是输入是一个句子，输出是一个文法的解析树。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206011716987.png" alt="Syntactic Parsing最终要求输出一个文法解析树" style="zoom:67%;"></p><p>可是这个输出是一个树状结构，因此我们如果想要用Seq2Seq的模型来解的话，就要把树状结构转换为一个Sequence。那么这件事情其实是办得到的，我们可以用括号来表示不同的层级，即</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206012137637.png" alt="把树状结构转换为Sequence" style="zoom:67%;"></p><p>而这件事情，在文章<a href="https://arxiv.org/abs/1412.7449">Grammer as a Foreign Language</a>中做到了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206012402886.png" alt="Grammer as a Foreign Language" style="zoom:67%;"></p><p>这篇文章现在是古早时期的Paper，在这篇文章出来之前，Seq2Seq模型并不是非常的流程，而且主要用于翻译问题上。所以这篇文章才起了Grammer as a Foregin Language这个名字，意思是把文法当做是一门外语来进行翻译。</p><p>李宏毅老师上课时候讲，又一次开会老师遇到了这个文章的一作，那个时候大家都不太熟悉Seq2Seq的模型，于是李宏毅老师问一作训练Seq2Seq有没有什么特别的trick，结果没想到一作说没有什么Trick，他们甚至连Adam都没有用，简单的SGD就Train起来了，而且第一次Train性能就很好。只不过为了达到State-of-the-Art的精度还是稍微调了一下参数。</p><p>再举一个例子，Multi-Label的分类问题。和Multi-Class不同，Multi-Class指的是有很多个Class而每一个物体只能有一个Label。而Multi-Label则指的是一个物体可以有很多个Label。例如特朗普出轨这个新闻分类的时候既可以是政治新闻，又可以是桃色新闻，还可以是娱乐新闻……</p><p>那我们就会说，能否取输出的Possibility Vector中的前几位作为Multi-Label呢？这样做其实是有问题的，因为Multi-Label的话每个object的Label数量可能是不相等的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206013814003.png" alt="Multi-Label Classification问题" style="zoom:67%;"></p><p>这个问题其实可以用Seq2Seq来硬做，即硬Train一发，损失函数除了分类的损失函数以外，再加上输出的Label数量的损失函数</p><p>有些甚至输入数据和Sequence完全无关、看起来甚至和Seq2Seq八竿子打不着的问题都可以用Seq2Seq来求解，例如Object Detection</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206014618530.png" alt="Seq2Seq解Object Detection问题" style="zoom: 50%;"></p><h3 id="3-QA-is-not-the-best"><a href="#3-QA-is-not-the-best" class="headerlink" title="3. QA is not the best"></a>3. QA is not the best</h3><p>需要说明的是，经过前面两步，我们其实可以用Seq2Seq来求解很多的问题，但是需要注意的是，有一些任务中，Seq2Seq往往不是最好的模型。</p><p>打个形象的比喻，Seq2Seq就是一个瑞士军刀，我们可以用瑞士军来切菜、砍柴，但是瑞士军刀不见得是最好用的工具。往往为了这些任务特制化的工具才是最好用的工具。即牺牲通用性换取了高精度。例如Google的英语转文字的模型Pixel 4，里面就没有用Seq2Seq的模型，而是从语音数据的特点出发设计的模型。</p><p>而这些任务特质化的模型的讲解，就不是我们这个课程讲解的内容了，如果想学习可以参考李宏毅老师之前的<a href="https://speech.ee.ntu.edu.tw/~hylee/dlhlp/2020-spring.html">课程</a>： <a href="https://speech.ee.ntu.edu.tw/~hylee/dlhlp/2020-spring.html">https://speech.ee.ntu.edu.tw/~hylee/dlhlp/2020-spring.html</a></p><h2 id="3-Transformer"><a href="#3-Transformer" class="headerlink" title="3. Transformer"></a>3. Transformer</h2><p>千呼万唤始出来，前面我们为了讲Transformer，讲解了一大堆的Seq2Seq模型作为铺垫，现在终于讲到了Transformer模型。下面就将开始讲解Transformer的架构。</p><h3 id="1-Overview-of-Transformer（Seq2Seq）"><a href="#1-Overview-of-Transformer（Seq2Seq）" class="headerlink" title="1. Overview of Transformer（Seq2Seq）"></a>1. Overview of Transformer（Seq2Seq）</h3><p>（因为Transformer是Seq2Seq的模型，）我们不妨先看看Transformer（Seq2Seq）模型的结构。</p><p>总的来说，Seq2Seq模型分为两部分：Encoder和Decoder。Encoder的作用是接受一个输入，然后对输入进行处理之后把处理的结果交给Decoder，由Decoder决定要输出什么样的Sequence。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206015943097.png" alt="Seq2Seq模型的大的结构"></p><p>更加详细的结构如下图，下图是2014年Seq2Seq第一次被提出的时文章的图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206020215482.png" alt="Seq2Seq更加详细的图" style="zoom:67%;"></p><p>而到了今天，当提起Seq2Seq模型的时候，大家脑子里的第一个印象就是Transformer的结构图，下面这些花花绿绿的block我们接下来就会进行讲解</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206020350413.png" alt="Transformer的结构图" style="zoom:67%;"></p><h3 id="2-Encoder"><a href="#2-Encoder" class="headerlink" title="2. Encoder"></a>2. Encoder</h3><p>我们上面说到，Transformer架构也分为Encoder和Decoder两个部分，因此我们下面就来讲解一下Encoder部分</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206105915216.png" alt="Transformer的Encoder" style="zoom: 67%;"></p><h4 id="A-Purpose-of-Encoder"><a href="#A-Purpose-of-Encoder" class="headerlink" title="A. Purpose of Encoder"></a>A. Purpose of Encoder</h4><p>Encoder的作用就是吃进去一排向量，然后吐出来一排向量。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206110530312.png" alt="Encoder的作用" style="zoom:67%;"></p><p>那么我们可能第一个想到的，就是上节课讲的Self-Attention的结构，其实除了Self-Attention的结构可以用作Encoder以外，RNN、CNN都可以吃入一排向量，然后输出一排向量，因此他们也可以用作Encoder。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206111650698.png" alt="很多结构都可以用作Encoder" style="zoom:67%;"></p><p>而Transformer的Encoder用的用的就是Self-Attention的结构。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206112145066.png" alt="Transformer的Encoder用的是Self-Attention结构" style="zoom:67%;"></p><h4 id="B-Transformer-Encoder"><a href="#B-Transformer-Encoder" class="headerlink" title="B. Transformer Encoder"></a>B. Transformer Encoder</h4><p>我们前面讲到的Self-Attention的结构是一层Self-Attention层提取上下文信息，然后一层FC提取局部信息。然后不断交替</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206112633731.png" alt="Self-Attention的结构" style="zoom: 67%;"></p><p>为什么上面的图里用的是Block，其实是因为Transformer的Encoder中的Block除了Self-Attention以外，还干了很多的事情。但是中间的输出数列都是和Self-Attention保持一样的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206112912906.png" alt="在Self-Attention的基础上还有其他的操作，但是中间和最终的输出数量和Vanilla Self-Attention是一样的" style="zoom:67%;"></p><p>我们下面详细的来介绍一下Transformer的Encoder。</p><p>首先在经过一个Self-Attention的Layer之后，得到含有上下文信息的输出，但是在这个基础上，又增加了Residual Connect。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206113555287.png" alt="image-20220206113555287" style="zoom:67%;"></p><p>然后这还不算完，接下来又对residual之后得到的输出进行Layer Normalization。Batch Normalization是针对不同的example的同一个Dimension计算，而Layer Normalization则是针对同一个example的不同的Dimension进行的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206114308157.png" alt="对Residual的结果进行Layer Normalization"></p><p>最终，在经过了Layer Normalization之后得到的输出才是FC的输入。而FC也会有一个Residual Connection，在计算完Residual之后也会计算Layer Normalization，最后得到的才是这一个Block的输出。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206134735490.png" alt="Transformer最终一个Block的输出" style="zoom:67%;"></p><p>对照论文里的图给出的Encoder的结构，输入首先被添加了一个Positional Encoding，然后用了Multi-Head Attention，接下来把Residual和Layer Normalization画在一起，然后Feed Forward表示全连接。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206135040536.png" alt="image-20220206135040536" style="zoom: 67%;"></p><p>以上就是Transformer的Encoder的结构。而在接下来我们会讲到的Bert模型的Encoder用的就是Transformer的Encoder</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206135841598.png" alt="BERT用的就是Transformer的Encoder"></p><h4 id="C-More-about-Transformer-Encoder"><a href="#C-More-about-Transformer-Encoder" class="headerlink" title="C. More about Transformer Encoder"></a>C. More about Transformer Encoder</h4><p>我们在学习了Transformer的Encoder之后，我们就会有一些疑问：</p><ul><li>为什么Encoder要这样设计？能不能不这样设计？<ul><li>答案：行</li></ul></li><li>为什么要在Residual之后进行Layer Normalization？能不能在别的地方进行Layer Normalization？<ul><li>答案：行</li></ul></li></ul><p>我们这里是按照Transformer的原始的结构来讲的，而原始的结构不一定是最好的结构，例如有一篇文章：<a href="https://arxiv.org/abs/2002.04745">On Layer Normalization in the Transformer Architecture</a>，里面就讨论了为什么Layer Normalization就要放在那个地方呢？Layer Normalization能不能放在别的地方？能不能把Layer Normalization放到别的地方？</p><p>这篇文章里把Layer Normalization放到了每个Block里面，结果发现效果更好</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206140607756.png" alt="On Layer Normalization in the Transformer Architecture" style="zoom:67%;"></p><p>然后还有问题，就是为什么要用Layer Normalization？能不能用Batch Normalization？这个也有文章在讨论，文章里提出了Power Normalization，他首先讲为什么Batch Normalization不如Layer Normalization，然后根据他的理解提出了效果更好的Power Normalization</p><h3 id="3-Decoder"><a href="#3-Decoder" class="headerlink" title="3. Decoder"></a>3. Decoder</h3><p>上面讲完了Encoder，我们接下来讲一下Decoder的部分</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206141219488.png" alt="Transformer的Decoder" style="zoom:67%;"></p><p>而常见的Decoder的结构有两种：</p><ul><li>一种是AutoRegressive的Decoder</li><li>另外一种是Non-AutoRegressive的Decoder</li></ul><p>下面就来讲讲这两种Decoder</p><h3 id="4-AutoRegressive-Decoder"><a href="#4-AutoRegressive-Decoder" class="headerlink" title="4. AutoRegressive Decoder"></a>4. AutoRegressive Decoder</h3><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206141549045.png" alt="AutoRegressive的Decoder"></p><p>我们接下来结合语音识别的例子来讲讲AutoRegressive的Decoder是如何工作的。</p><h4 id="A-Before-Decoder"><a href="#A-Before-Decoder" class="headerlink" title="A. Before Decoder"></a>A. Before Decoder</h4><p>我们上面讲了Encoder，Encoder接收一排向量，然后输出一个向量。在语音识别的例子中，Encoder吃入的向量组是转换成向量的语音信号，然后输出一堆向量</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206152356447.png" alt="Encoder部分" style="zoom:67%;"></p><p>然后Decoder就会接受这一排向量作为输入，然后开始产生语音识别的结果</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206152619982.png" alt="Before Decoder" style="zoom:67%;"></p><h4 id="B-Output-of-Decoder"><a href="#B-Output-of-Decoder" class="headerlink" title="B. Output of Decoder"></a>B. Output of Decoder</h4><p>我们接下来先不去考究Decoder内部的结构，先从输入输出的角度讲讲Decoder是如何给出来输出的。</p><p>Decoder除了会吃Encoder的输出以外，还会吃一个特殊的符号（BOS：Begin of Sentence）来表示句子的开始，这个符号就在我们的lexicon里面，和其他的字符的地位是同等的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206154448423.png" alt="吃了特殊的符号后Decoder开始输出" style="zoom:67%;"></p><p>在吃了这个特殊的符号之后，Decoder会输出一个长度和我们的Vocabulary长度一样的向量。而Vocabulary则是模型所有可能的输出在一起构成的表。</p><p>例如，如果我们模型的输出的英文的字母的话，那么输出的向量的长度是26维的向量，每一个维度表示一个单词。如果模型输出的英文的单词的话，假设现在只有4000个词语，那么模型的输出是长度为4000的向量。如果模型输出的是中文文字的话，那么假设有8000个汉字，那么输出的向量是长度为8000的向量。</p><p>类似于分类一样，我们对输出的向量取一个Softmax，然后取最大值作为输出的class。需要注意的是，这里用Softmax只是单纯的为了把所有的值归一化到0~1，与概率无关</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206155242342.png" alt="Softmax归一化之后取最大值在的位置作为输出" style="zoom:67%;"></p><p>接下来第二步，我们就把模型的第一个输出当做第二个输入，得到第二个输出</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206155742937.png" alt="用第一个输出作为第二个输入得到第二个输出" style="zoom:67%;"></p><p>同理，这个过程我们不断反复的执行下去，就得到的很多的输出</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206155945471.png" alt="不断把机器的输出作为输入从而得到新的输出" style="zoom: 80%;"></p><p>因此，除了第一个特殊符号意外，Decoder的输入其实都是自己的输出。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206161255415.png" alt="Decoder的输入是自己的输出" style="zoom:67%;"></p><h4 id="C-Problem-of-Decoder"><a href="#C-Problem-of-Decoder" class="headerlink" title="C. Problem of Decoder"></a>C. Problem of Decoder</h4><p>因为Decoder的输入都是自己的输出，所以其实会有一个Error Propagation的问题，即如果网络中间某一次输出是错误的，那么会不会导致接下里的输出也是错误的？毕竟Decoder是基于输入得到的输出。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206161130329.png" alt="Error Propagation问题" style="zoom:67%;"></p><h4 id="D-Structure-of-Decoder"><a href="#D-Structure-of-Decoder" class="headerlink" title="D. Structure of Decoder"></a>D. Structure of Decoder</h4><p>我们接下来看看Decoder内部的结构，这里我们先关注Decoder如何通过自己的输出来得到新的输出，这里先忽略掉来自于Encoder的Output，等下在将这部分。</p><p>我们先来看看Transformer论文中Decoder的结构图，可以看到还是有很多花花绿绿的Block</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206162117419.png" alt="论文里Decoder的Block" style="zoom:67%;"></p><p>我们把Encoder和Decoder拿来比较一下，就会发现Decoder相比于Encoder多了中间的一个部分</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206162321191.png" alt="Decoder比Encoder多了一部分" style="zoom:67%;"></p><p>而除了中间这个部分意外，Encoder和Decoder基本上没有太大的差别，只有在Multi-Head Attention部分Decoder是Musked Multi-Head Decoder</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206162534155.png" alt="Decoder和Encoder的差别非常小" style="zoom: 80%;"></p><p>所以我们接下来就会着重讲这个Masked Multi-Head Attention和中间遮起来的部分</p><h4 id="E-Masked-Multi-Head-Attention"><a href="#E-Masked-Multi-Head-Attention" class="headerlink" title="E. Masked Multi-Head Attention"></a>E. Masked Multi-Head Attention</h4><p>Masked Multi-Head Attention是为了解决在Decode阶段的Self-Attention存在的的问题。</p><p>在Encode阶段，我们是一次性获得所有的输入的，因此我们的Self-Attention的时候是对所有的input的vector计算Attention的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206163333446.png" alt="Encode阶段对所有的vector计算Attention" style="zoom:67%;"></p><p>可是在Decode阶段，输出是依次获得的，为此，我们就是用Masked Multi-Head Attention。</p><p>Masked Multi-Head Attention说的就是在产生前面的输出的时候，计算Attention只看前面的input，而不考虑后面暂时未得到的input，相当于把后面的input vector mask起来。</p><p>依照上面的图来说，就是在产生第一个输出的时候，Attention只能计算第一个input，而产生第二个输出的时候，只能计算前两输入的Attention，第三个的时候看前三个，以此类推……</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206163749575.png" alt="Masked Self-Attention" style="zoom: 67%;"></p><p>更加具体的来说，计算第二个的output的时候，只用第二个input vector的query向量乘以第一个和第二个input的key向量，得到了两个input的Attention Score。注意我们这里为了表示Mask，所以把后面两个input vector画了出来，其实在真实的计算的时候是没有后面两个input vector的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206163955785.png" alt="Masked Attention的计算过程" style="zoom: 67%;"></p><h4 id="F-AutoRegressive"><a href="#F-AutoRegressive" class="headerlink" title="F. AutoRegressive"></a>F. AutoRegressive</h4><p>AutoRegressive Decoder和Encoder在一起是一个Seq2Seq模型，输入和输出不等长，因此还有一个问题就是需要让机器自己决定需要输出多长的句子，因为按章上面讲的计算output的方式的话，机器的Output是无休止的。</p><p>因此有可能在输出了<code>机器学习</code>之后可能会输出<code>惯</code>这个字</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206164743094.png" alt="Seq2Seq模型需要机器能够自己决定输出有多长" style="zoom:67%;"></p><blockquote><p><strong>推文接龙（Tweet Solitaire）</strong></p><p>李宏毅老师上课讲到，在很早前的台湾的聊天室里会玩一个叫做叫做推文接龙的游戏。具体来说就是第一个人先发出来一个字，然后后面就会有人接上新的字，前后两个字构成一个词语</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206165328004.png" alt="推文接龙" style="zoom:67%;"></p><p>这个过程可以持续几个月都不会停下来。</p><p>那么如果要结束掉这个游戏的话，该怎么办呢？那么就需要有人发一个<code>断</code>的消息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206165449020.png" alt="推断结束掉推文接龙" style="zoom: 80%;"></p></blockquote><p>所以对于Decoder来说也是一样的，我们希望模型可以自己自己输出一个<code>断</code>，那么我们就要在Vocabulary里面加一个表示<code>断</code>的符号。END符号可以和开始符号相同，也可以不同，这个是无所谓的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206165911446.png" alt="给Vocabulary里面加入断" style="zoom:80%;"></p><p>所以有了<code>断</code>之后，我们就预期模型能够自己输出一个END符号来结束输出。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206170431841.png" alt="预期模型自己结束输出" style="zoom:80%;"></p><h3 id="5-Non-AutoRegressive-Decoder"><a href="#5-Non-AutoRegressive-Decoder" class="headerlink" title="5. Non-AutoRegressive Decoder"></a>5. Non-AutoRegressive Decoder</h3><p>另外一种Decoder的结构就是Non-AutoRegressive的Decoder</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206220132314.png" alt="Non-AutoRegressive的Decoder"></p><h4 id="A-Non-AutoRegressive"><a href="#A-Non-AutoRegressive" class="headerlink" title="A. Non-AutoRegressive"></a>A. Non-AutoRegressive</h4><p>AutoRegressive的模型一次只产生一个输出，然后通过不断地循环迭代，最终得到所有的输出（直到输出断）。而Non-AutoRegressive则是一次吃进去一排Begin Token，然后输出整个句子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206220418290.png" alt="AT v.s. NAT" style="zoom:67%;"></p><p>那这样的话就会有一个问题，就是我们是不知道输出有多长的，所以我们如果是NAT的话，那么该给多少个Begin的Token呢？</p><p>所以针对这个问题，就有了几种可能的解决方法：</p><ul><li><p>在网络之外额外训练一个Classifier，这个Classifier吃入一排向量，然后输出一个值，这个值就是输出的句子的长度</p></li><li><p>输出一个非常长的句子，假设我们现在输出的句子的长度不会超过300，那么我们就直接把Decoder的输出设为300，然后只选用第一个END前的输出作为网络的输出</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206221351959.png" alt="用一个END前的输出作为网络最终的输出"></p></li></ul><p>而使用Non-AutoRegressive的好处有：</p><ul><li>可以并行计算，因为只需要运行一次Non-AutoRegressive的Decoder就可以获得输出，而AutoRegressive的Decoder则需要不断重复的运行</li><li>NAT的输出的长度比较好控制</li></ul><p>可是，NAT有一个缺点就是NAT的效果往往不如AT，如果要让NAT达到和AT的精度一样高的话，往往需要非常多的Trick。</p><h4 id="B-More-about-Non-AutoRegressive"><a href="#B-More-about-Non-AutoRegressive" class="headerlink" title="B. More about Non-AutoRegressive"></a>B. More about Non-AutoRegressive</h4><p>我们对NAT的讲解其实是非常简单的，但是NAT其实是目前研究的一个热点，因为人们现在都在研究为什么NAT性能比AT要差，研究如何能够对NAT进行改进，使其达到AT的性能。</p><p>例如上面我们说NAT性能一般没有AT好，其实有一个可能的问题Multi-Modality，即多模态的问题，不过关于这些我们这里都不准备讲，如果需要学习的话看一下往年李宏毅老师课程。</p><p><img src="/home/jack/.config/Typora/typora-user-images/image-20220206225008942.png" alt="往年讲解NAT的课程" style="zoom:67%;"></p><h3 id="6-Encoder-Decoder-Cross-Attention"><a href="#6-Encoder-Decoder-Cross-Attention" class="headerlink" title="6. Encoder-Decoder: Cross-Attention"></a>6. Encoder-Decoder: Cross-Attention</h3><p>我们上面单独讲解了Encoder和Decoder，我们接下来讲讲Encoder和Decoder中间是如何连接的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206225220582.png" alt="Encoder和Decoder的连接"></p><h4 id="A-Cross-Attention"><a href="#A-Cross-Attention" class="headerlink" title="A. Cross Attention"></a>A. Cross Attention</h4><p>我们上面在将Decoder的时候只讲了Masked Multi-Head Attention、AutoRegressive和Non-AutoRegressive三个内容，我们没有将Encoder和Decoder是如何链接起来的，在前面我们其实用灰色的部分把Decoder的一部分遮住了。而这部分就是起着连接的作用。</p><p>灰色方块遮住的部分其实叫做Cross Attention。为什么称为Cross Attention呢？是因为这一个Attention的Block的输入有两个来自于Encoder，有一个来自于Decoder</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206225928617.png" alt="Transformer中负责连接的Attention Module称为Cross-Attention" style="zoom:67%;"></p><p>我们下面详细讲解一下Cross-Attention是如何运行的。</p><h4 id="B-Details-of-Cross-Attention"><a href="#B-Details-of-Cross-Attention" class="headerlink" title="B. Details of Cross Attention"></a>B. Details of Cross Attention</h4><p>在前面我们说道，Encoder部分最后会输出一排向量，而Decoder（我们以AutoRegressive的Decoder为例）的第一层则是Masked Multi-Head Self-Attention。Masked Multi-Head Self-Attention根据输入的个数，计算Attention Score然后给出来输出。</p><p>所以在Cross Attention前，我们就有了Encoder输出的所有向量和Decoder Masked Multi-Head Encoder输出的向量</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206231007220.png" alt="Cross Attention前的数据" style="zoom:67%;"></p><p>然后我们对来Encoder的输出计算通过Key Matrix计算得到每个输出的Key Vector，然后对Decoder的输出利用Query Matrix得到Query Vector。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206232332251.png" alt="计算Query向量和Key向量" style="zoom:67%;"></p><p>接下来我们用query向量和key向量计算得到三个Attention Score，然后再进行Softmax得到最终的Attention Score</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206234500834.png" alt="计算得到Attention Score" style="zoom:67%;"></p><p>类似的，我们给Encoder的输出用Value Matrix进行转换，得到Value Vector。然后乘以得到的Attention Score就得到的了Cross Attention的输出</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206235401656.png" alt="计算得到Cross Attention的输出" style="zoom:67%;"></p><p>Corss Attention的输出就用于接下来的计算，例如交给FC提取局部特征。</p><p>因为我们计算Attention时候的Query来自于Encoder，而Key和Value都来自于Decoder，因此这样的计算称为Cross Attention。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220206235728433.png" alt="Cross Attention计算的全过程" style="zoom:67%;"></p><p>同理，我们在得到第一个输出之后，计算第二个输出的时候，我们计算Cross Attention的步骤也是一样的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207000742919.png" alt="计算Encoder的第二个输出" style="zoom:67%;"></p><h4 id="C-Case-Study"><a href="#C-Case-Study" class="headerlink" title="C. Case Study"></a>C. Case Study</h4><p>我们接下来讲一个真实的Cross Attention的例子。这个例子是来自于2016年的文章<a href="https://ieeexplore.ieee.org/document/7472621">Listen, attend and spell: A neural network for large  vocabulary conversational speech recognition</a>：<a href="https://ieeexplore.ieee.org/document/7472621">https://ieeexplore.ieee.org/document/7472621</a></p><p>这篇文章用Seq2Seq模型做出来了Speech Recognition问题，并且性能和当年的State-of-the-Art的结果所差无几。因此2016年这篇文章的会议现场人山人海，因为在这年之前的最好的方法使用其他的方法做的，而这篇文章cast light on Seq2Seq模型，让人们觉得Seq2Seq用在语音识别任务上是非常有前景的。</p><p>需要注意的是，Cross-Attention出现和Self-Attention并不是同步的，是先有了Cross-Attention才有了Self-Attention。所以Transformer中也不是自己提出了Cross Attention。</p><p>在2016年的这篇文章中的Seq2Seq使用了Cross Attention。其中的输入是下面的向量组，其中横轴为时间，纵轴为feature。这句话实际上是一句英文的绕口令</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207002448791.png" alt="文章输入语音的向量组"></p><p>而这个文章Decoder部分输出的unit是一个个字母，空格和句号等标点都是用特殊的符号来表示的，相当于记为一个特殊的字母。</p><p>而模型再给出来每一个输出时候的Cross Attention的分数如下图所示，横轴是Encoder的输出，纵轴是Decoder的每个输出。而颜色越深，就表示Attention的Score越高。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207002759624.png" alt="模型得到的Attension的分数"></p><p>那么在Decoder输出第一个字母的时候，它关注了语音的开始部分（一开始的几毫秒是空白），然后它关注到一开始的部分的说了h，然后就输出h，然后输出第二个字母的时候，就注意力就会主键后移，接下来在输出w的时候，注意力基本上移动到了后面。接下来随着语音的继续，注意力不断地后移，直到输出完了整个句子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207003736366.png" alt="Attention在不断地后移" style="zoom:80%;"></p><h4 id="D-More-about-Cross-Attention"><a href="#D-More-about-Cross-Attention" class="headerlink" title="D. More about Cross Attention"></a>D. More about Cross Attention</h4><p>其实目前Transformer也是在处在研究的过程中，人们不断地对其进行研究，以获得更深的认知。而Cross Attention也不例外，有很多的文章在研究Cross Attention。例如这篇<a href="https://arxiv.org/abs/2005.08081">文章</a></p><p>这篇文章的研究的出发点就是，在Transformer的标准论文里，计算Cross-Attention用的是Encoder最后的输出。而Encoder在Encoder的过程中其实是用了多层的Self-Attention、FC的Block堆叠。在Decode阶段也是一样的会有多个Self-Attention、FC的Block堆叠。当然，在Block中间还会加载Cross-Attention层。</p><p>所以这篇文章的角度就在于，为什么进行Cross Attention的时候是用Encoder最终输出给每一个Cross-Attention，为什么不能用Encoder的Self-Attention中间的输出来给Decoder进行Cross Attention？</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207004901817.png" alt="原始的Transformer是Encoder最终的输出给每一个Cross Attention来计算"></p><p>所以从这个角度出发，这篇文章进行了不同的实验，把Encoder不同层的Self-Attention的输出拿来给Decoder不同层的Cross Attention进行计算</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207004937977.png" alt="各种各样的搭配"></p><p>所以这个例子的目的在于告诉大家，现在DL这个领域是处于火热的研究中的，只要我们有任何的想法、new idea就可以去进行尝试。</p><h2 id="3-Traning-Transformer"><a href="#3-Traning-Transformer" class="headerlink" title="3. Traning Transformer"></a>3. Traning Transformer</h2><p>到这里，我们就已经讲完了Transformer的结构，接下来我们来讲讲Transformer是如何进行训练的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207005427705.png" alt="Transformer的Training" style="zoom:80%;"></p><h3 id="1-After-Inference"><a href="#1-After-Inference" class="headerlink" title="1. After Inference"></a>1. After Inference</h3><p>根据我们前面讲的，我们的模型现在的example是语音的vector和对应的句子的pair，而模型的输出就是多个Vocabulary的Distribution</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207010114969.png" alt="模型进行一个推理后的样子" style="zoom: 67%;"></p><h3 id="2-Single-Output"><a href="#2-Single-Output" class="headerlink" title="2. Single Output"></a>2. Single Output</h3><p>现在对于一个输出的vector来说，我们的输出是一个所有class的（伪）概率向量，而target我们也可以表示成一个one-hot向量，所以对于一个输出单独来说，这个就是一个分类问题，所以我们可以用Cross-Entropy来作为损失函数</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207011607162.png" alt="单个输出视为Classification问题用Cross-Entropy" style="zoom:67%;"></p><h3 id="3-Multiple-Output-Teacher-Forcing"><a href="#3-Multiple-Output-Teacher-Forcing" class="headerlink" title="3. Multiple Output: Teacher Forcing"></a>3. Multiple Output: Teacher Forcing</h3><p>对于多个输出的话，我们的可以直接当做多个分类问题，然后summation所有的Cross-Entropy即可。需要注意的是，我们还需要额外加一个END，所以相比于原始的Label，我们还要再多一个Classification。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207012404031.png" alt="Minimize Summation over Cross-Entropy" style="zoom: 67%;"></p><p>但是在训练的时候需要注意，虽然上面讲的是让Decoder用自己的输出作为输入，但是在训练阶段我们是使用的Ground Truth来作为每一次解码的input。这样的操作叫做Teacher Forcing，意思是现在有老师强迫模型在学习</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207013037499.png" alt="训练的时候进行Teacher Forcing" style="zoom:67%;"></p><p>我们需要注意的是Teacher Forcing和我们的讲的Decoder得到输出的方式不一样，所以其实是会有Mismatch的问题的。即模型现在吃了正确的Label的话的确能够给出正确的输出，但是如果模型如果吃了错误的输入的话，就没有办法得到正确的输出了。</p><p>所以这个就是由于训练和测试阶段不同的设置（训练时候用了Teacher Forcing）导致的Mismatch。</p><p>关于这个问题，我们会在下面进行讲解。</p><h2 id="4-Application-variance-of-Seq2Seq"><a href="#4-Application-variance-of-Seq2Seq" class="headerlink" title="4. Application variance of Seq2Seq"></a>4. Application variance of Seq2Seq</h2><p>我们上面讲到，Seq2Seq模型其实是可以用到很多任务上的，针对不同的任务我们根据我们的Domain Knowledge设计出来一些新的模块或者Layer，将他们implement到Seq2Seq的模型上就可以实现各种各样的任务。</p><p>所以我们接下来就来讲解一下可以对Seq2Seq模型进行的改变。</p><h3 id="1-Copy-Mechanism"><a href="#1-Copy-Mechanism" class="headerlink" title="1. Copy Mechanism"></a>1. Copy Mechanism</h3><p>所谓的Copy Mechanism指的是，对于很多的Seq2Seq的Task来说，我们的output的一部分是是来自于我们的input的，有的时候甚至是完全来自于output的。</p><p>举例来说，对于一个聊天机器人来说，经常会有下面的例子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207015742410.png" alt="Chat-bot中很多情况下output有一部分是来自于input的" style="zoom:67%;"></p><p>而有一些极端的任务，他们的output是完全来自于input的，例如文章摘要任务。</p><p>对于文章摘要任务来说如果我们直接让Seq2Seq生成句子的话，那么这个需要的数据量是非常恐怖的。先不说摘要任务，首先让模型生成看起来合理的句子就需要上百万的数据，更不用说还需要在生成句子的基础上完成摘要任务。</p><p>可是这个时候我们换一个角度，我们现在不需要让模型自己学会输出一个句子，而是学会如何从input中copy得到output，那么这样的话，我们需要的数据量就会小很多，而且性能也会非常好。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207020218972.png" alt="文章摘要任务" style="zoom:50%;"></p><p>最早提出Copy Mechanism的文章是Pointer Network，这篇文章老师过去有讲过，所以链接直接放在这里了。此外，还有另外的一篇讲Copy Mechanism的文章，Reference放在了下面。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207020903695.png" alt="Copy Mechanism的文章" style="zoom:67%;"></p><h3 id="2-Guided-Attention"><a href="#2-Guided-Attention" class="headerlink" title="2. Guided Attention"></a>2. Guided Attention</h3><p>神经网络是一个黑盒子，所以我们训练完之后，我们其实是不知道模型在处理输入的Vector Set中每一个input vector的时候的注意力以及输入的注意力间变化的。但是我们有的时候在有一些情况下，或者说在一些任务中，我们其实是知道我们的模型的注意力的变化的。</p><p>举例来说，在进行语音合成的时候，我们输入是文本，输出是一段语音（MP3）。那么我们再输入每个字的词向量的时候，我们知道模型的注意力应该关注当前的文字和前后两个文字，并且逐渐后移。</p><p>我们用红色的线来表示模型的注意力，越高表示Attention Score越大。那么TTS任务的Attention的变化应该如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207104217335.png" alt="TTS任务的Attention的变化" style="zoom:67%;"></p><p>可是我们实际上合成的时候却有问题，例如下面，前面三个发财都是没有问题的，可是合成最后一个发财的时候，只能听到财而没有听到发</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207104434056.png" alt="TTS任务出问题的例子" style="zoom:67%;"></p><p>那么造成这个问题可能的就是模型的Attention在合成发这个字的时候，全都集中到财这个字上面去了，所以造成的问题就是语音合成有问题。</p><p>更进一步，在我们知道模型合成语音的Attention应该是什么样的情况下。模型的Attention如果是错乱的话，那么就会存在问题。例如合成第一个字的时候注意力都在后面的句子上，而合成第二个字的时候注意力没有关注后面，合成第三个字的时候注意力又在首尾。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207105438382.png" alt="错乱的Attention可能会导致问题" style="zoom:67%;"></p><p>关于Guided Attention的话，想要去学习的话去Google一下Location Aware Attention</p><h3 id="3-Beam-Search"><a href="#3-Beam-Search" class="headerlink" title="3. Beam Search"></a>3. Beam Search</h3><p>Seq2Seq模型在Decode的时候，是先输出第一个字，然后输出第二个字，然后以此类推，直到输出断。而在每一次输出的时候，我们计算的都是argmax，所以我们每一次生成结果的时候都类似搜索树的展开。</p><p>假设现在世界上某种语言只有两个字，那么我们Decoder解码三次就可以展开为下面的搜索树</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207113003256.png" alt="展开为搜索树" style="zoom:67%;"></p><p>而每一次输出概率向量中的每一个维度都是某个class的概率，我们又是取得最大概率的类别作为输出，所以我们Decode得到输出的过程类似于贪心算法。</p><p>然而贪心的问题就是我们生成输出Sequence并不是具有最优子结构性质的问题，因此贪心其实是有问题的，即我们每次选择概率最大的作为分类的结果其实是有问题的，每个字的概率最大并不意味着输出的整个句子的概率最大</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207113910887.png" alt="Seq2Seq处理的任务不一定有最优子结构性质，因此贪心可能无法找到最优解" style="zoom:67%;"></p><p>考虑到真实的情况，每一次输出其实都是有4000个可能的，因此搜索树是一个4000叉树，暴力搜索根本没有办法解决。</p><p>所以这个时候，就有一个叫做Beam Search的算法，能够有效的进行搜索，最终得到approximate的最优结果。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207114522134.png" alt="Beam Search" style="zoom: 80%;"></p><p>不过需要注意的是，Beam Search这个方法对于一些任务不一定有用</p><h3 id="4-Sampling-adding-noise"><a href="#4-Sampling-adding-noise" class="headerlink" title="4. Sampling: adding noise"></a>4. Sampling: adding noise</h3><p>再有一些任务中Beam Search的效果其实是不好的，例如下面的文本补全问题。我们用Beam Search的话，就会发现得到的文本全部都是一样的，因为这些文本的得分是最高的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207115645828.png" alt="Beam Search会有问题" style="zoom: 80%;"></p><p>在这个时候，得分不是最高的输出看起来却是比较合理的，因此就启发我们，有一些任务的满足Metric的最优解并不一定是我们人类理解的最优解。</p><p>为什么会出现这样的问题呢？其实问题发生的根本，就在于这类任务的评判标准不是唯一的。就相对于艺术品的评价，不同的人认为美的标准不一样，有的人可能喜欢毕加索的画、有的人喜欢莫奈的印象画、还有的人喜欢前卫的画……而这些人对美的评判标准不一样，我们看不懂或者觉着这幅画不好看，并不能说别人也觉得这幅画不好看。而评判标准不唯一，往往对应的就是创造的问题。因为创造出来的作品的评判标准并不是唯一的。</p><p>所以上面的文本生成问题其实就是有那么一点点创造的任务，当然接下来就会开始讲生成任务。</p><p>针对创造任务，我们其实为其引入一些random的因素之后得到的表现其实更好，比较明确的任务，beam search的效果会更好。具体如何添加杂讯，则参考文章<a href="https://arxiv.org/abs/1904.09751">The Curious Case of Neural Text Degeneration</a>：<a href="https://arxiv.org/abs/1904.09751">https://arxiv.org/abs/1904.09751</a></p><p>比如对于TTS任务来说，如果不加入一些杂讯的话，那么合成得到的声音类似于机关枪，很难听，可是加入一些杂讯之后，声音会更加的拟人。</p><p>所以这就对应了一个谚语，美存在于不完美之中。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207142921826.png" alt="美存在于不完美之中" style="zoom:67%;"></p><h3 id="5-Reinforcement-Learning"><a href="#5-Reinforcement-Learning" class="headerlink" title="5. Reinforcement Learning"></a>5. Reinforcement Learning</h3><p>我们上面说道，在Seq2Seq的时候我们的损失函数就是summation over all cross-entropy。然而这样做的话，我们最后优化得到的解有可能不是最优的解。因为我们的目标是一整句话，而非一个字，所以理论上来说，我们的损失函数应该是吃进入output的句子和target的句子然后给出来输出。</p><p>我们用cross-entropy的相加，其实是把句子视为单独的字的组合，所以这样优化得到的结果不一定是最佳的。例如对于翻译来说，翻译的句子可以不同，只需要意思是一样的即可。因此，我们应该要求计算的是机器翻译的结果和人工翻译的结果的相似性，而非让机器模仿label。所以我们计算的应该是输出句子和label的blue score而非cross-entropy</p><blockquote><p><strong>Blue Score</strong></p><p>BLEU的全名为：bilingual evaluation understudy，即：双语互译质量评估辅助工具。它是用来评估机器翻译质量的工具。BLEU的设计思想：机器翻译结果越接近专业人工翻译的结果，则越好。BLEU算法实际上就是在判断两个句子的相似程度。想知道一个句子翻译前后的表示是否意思一致，直接的办法是拿这个句子的标准人工翻译与机器翻译的结果作比较，如果它们是很相似的，说明我的翻译很成功。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207145323951.png" alt="应该用Blue Score当做Optimization objective" style="zoom:67%;"></p><p>可是使用Blue score有一个问题，就是blue score的计算过程是不可微分的，所以没法用Gradient Descent进行优化得到最优的参数。</p><p>所以这个时候怎么办呢？这个时候有一个口诀，就是遇事不决用RL。即把无法优化的问题当做是RL问题，然后来硬Train一发。</p><p>具体过程是，把Loss Function当做是reward，Model当做是Agent，然后把整个问题当做RL问题来硬做。这样确实可以做，不过不推荐这样做。因为RL训练的成本太大了。具体的方法下面的文章里有写</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207145752687.png" alt="把问题当做RL问题来解" style="zoom:67%;"></p><h3 id="6-Exposure-bias-Scheduled-Sampling"><a href="#6-Exposure-bias-Scheduled-Sampling" class="headerlink" title="6. Exposure bias: Scheduled Sampling"></a>6. Exposure bias: Scheduled Sampling</h3><p>我们前面再讲训练decoder的时候，用了Teacher Forcing。而Teacher Forcing会导致和真实的inference的时候出现mismatch现象。因此，为了解决这个问题，我们就可以用Scheduled Sampling，即在训练阶段，人为的给Decoder一些错误。</p><p>Scheduled Sampling在Seq2Seq模型出现的时候就已经有了，并不是在Transformer出现之后就有了。但是需要专注于，Scheduled Sampling会伤害NAT的平行化能力</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220207151525964.png" alt="Scheduled Sampling" style="zoom:67%;"></p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
            <tag> Self-Attention </tag>
            
            <tag> Attention </tag>
            
            <tag> Transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch中使用TensorBoard</title>
      <link href="/2022/02/03/shen-du-xue-xi-pytorch-zhong-shi-yong-tensorboard/"/>
      <url>/2022/02/03/shen-du-xue-xi-pytorch-zhong-shi-yong-tensorboard/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文记录了如何在Pytorch中使用Tensorboard（主要是为了备忘）</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/tensorboard.gif" alt="TensorBoard的界面"></p><h1 id="Pytorch中使用TensorBoard"><a href="#Pytorch中使用TensorBoard" class="headerlink" title="Pytorch中使用TensorBoard"></a>Pytorch中使用TensorBoard</h1><p>虽然我本身就会用TensorBoard，但是因为TensorBoard只有在写训练代码的框架的时候才会写，因此实际上写的频率的还是很低的，所以我每次要写训练代码、使用TensorBoard的时候都需要看自己之前写的代码，或者查一下别人写的博客。而且不少博客写的都是一鳞半爪的，不少用法都要查很多博客，久而久之就会觉得很烦。而且很多技巧随着时间的流逝也逐渐的忘记。</p><p>因此为了方便以后自己的查询（备忘），同时也是能够留下一个不错的教程，因此决定自己写一个比较全面的TensorBoard的教程。</p><h2 id="1-Introduction-to-TensorBoard"><a href="#1-Introduction-to-TensorBoard" class="headerlink" title="1. Introduction to TensorBoard"></a>1. Introduction to TensorBoard</h2><p>在炼丹的时候，经常需要追踪模型在训练过程中性能的变化，例如：Regression任务中的MSE、分类任务中的准确率、生成（图片）任务中图片的生成质量、此外还有合成语音的质量……</p><p>大体上来说，所有需要追踪的数据包括：标量（scalar）、图像（image）、统计图（diagram）、视频（video）、音频（audio）、文本（text）、Embedding等等</p><p>除了有大量的数据需要追踪外，我们还需要很好的把这些数据显示出来，即数据的写入和显示（读取）要有异步IO，有的时候服务器在学校的机房托管，因此还需要能够通过内网提供可视化……</p><p>因此，在种种需求之下，使用一个网页程序来帮助我们进行数据的追踪就成了一个很好的解决方案。具体来说，网页程序实现了前后端的分离，后端只需要专注于数据的记录，而前端专注于数据的显示。此外，网页程序可以进一步扩展，提供网络服务。</p><p>因此，就有了TensorBoard这个网页程序实现了我们上面的需求。TensorBoard最早是TensorFlow中的模块，不过现在经过Pytorch团队的努力，TensorBoard已经集成到了Pytorch中。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204112804634.png" alt="TensorFlow官网上的TensorBoard"></p><blockquote><p>TensorBoard的教程主要分为两部分，一部分是如何使用TensorBoard（即在训练过程中添加数据，然后在浏览器中监视训练的这整个pipeline）的教程，另外一部分是TensorBoard如何添加不同种类数据（即TensorBoard的API）的教程</p></blockquote><h2 id="2-TensoBoard-Pipeline"><a href="#2-TensoBoard-Pipeline" class="headerlink" title="2. TensoBoard Pipeline"></a>2. TensoBoard Pipeline</h2><p>上面说道，TensorBoard是分为前段显示和后端数据记录的，因此其Pipeline也分为两步：</p><ul><li>第一步：后端数据记录</li><li>第二步：前段查看数据</li></ul><h3 id="A-后端数据记录"><a href="#A-后端数据记录" class="headerlink" title="A. 后端数据记录"></a>A. 后端数据记录</h3><p>类似于<code>Flask</code>和<code>Django</code>中把后端程序（服务器）被抽象为了一个类，然而这个类中提供了方法来开启和关闭服务，TensorBoard中也是把后端服务器抽象成了一个类：<code>SummaryWriter</code>，不过不同的是，TensorBoard中的<code>SummaryWriter</code>类在被声明后就开启了对应的服务，直到我们使用了<code>SummaryWriter</code>关闭服务的API。</p><p>此外，还有一个不同的之处在于，TensorBoard的前段数据显示和后端数据记录是<code>异步I/O</code>的，即后端程序（<code>SummaryWriter</code>类的实例）将数据写入到一个文件中，而前端程序读取文件中的数据来进行显示。因此后端所谓的服务指的就是数据的记录，而非提供前端的显示。数据记录的实现方式即通过<code>SummaryWriter</code>类中的方法</p><p>然后在开启了后端程序的服务器之后，我们就可以通过各种API来添加数据了</p><h4 id="0-导入包"><a href="#0-导入包" class="headerlink" title="0. 导入包"></a>0. 导入包</h4><p>我们首先导入包</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-SummaryWriter类"><a href="#1-SummaryWriter类" class="headerlink" title="1. SummaryWriter类"></a>1. SummaryWriter类</h4><p><code>SummaryWriter</code>声明之后就会开启后端数据记录的服务，因此在实例化该类的时候我们就需要保存数据的位置。声明保存数据的位置有好几种方式</p><p><code>SummaryWriter</code>的签名如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">torch</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard<span class="token punctuation">.</span>writer<span class="token punctuation">.</span>SummaryWriter<span class="token punctuation">(</span>log_dir<span class="token operator">=</span>None<span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> purge_step<span class="token operator">=</span>None<span class="token punctuation">,</span> max_queue<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> flush_secs<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span> filename_suffix<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li><code>log_dir</code> (str)：指定了数据保存的文件夹的位置，如果该文件夹不存在则会创建一个出来。如果没有指定的话，默认的保存的文件夹是<code>./runs/现在的时间_主机名</code>，例如：<code>Feb04_22-42-47_Alienware</code>，因此每次运行之后都会创建一个新的文件夹。在写论文的时候我们会涉及一系列实验，从不同的角度来说明一些问题，例如我们的假设是否正确、模型性能是否更好……因此最好不要用默认的实现来直接作为存放数据的文件夹，而是使用具有含义的二级结构，例如：<code>runs/exp1</code>。这样的话，所有的实验1的数据都在这个文件夹下，这样我们就可以方便的进行比较。</li><li><code>comment</code> (string)：给默认的<code>log_dir</code>添加的后缀，如果我们已经指定了<code>log_dir</code>具体的值，那么这个参数就不会有任何的效果</li><li><code>purge_step</code> (int)：TensorBoard在记录数据的时候有可能会崩溃，例如在某一个epoch中，进行到第$T+X$个step的时候由于各种原因（内存溢出）导致崩溃，那么当服务重启之后，就会从$T$个step重新开始将数据写入文件，而中间的$X$，即<code>purge_step</code>指定的step内的数据都被被丢弃。</li><li><code>max_queue</code> (int)：在记录数据的时候，在内存中开的队列的长度，当队列慢了之后就会把数据写入磁盘（文件）中。</li><li><code>flush_secs</code> (int)：以秒为单位的写入磁盘的间隔，默认是120秒，即两分钟。</li><li><code>filename_suffix</code> (string)：添加到<code>log_dir</code>中每个文件的后缀。更多文件名称设置要参考<code>tensorboard.summary.writer.event_file_writer.EventFileWriter</code>类。</li></ul><p>因此，一个成熟的数据记录方式就是在<code>runs</code>文件夹下按照一定的意义来划分二级文件夹，例如<code>网络结构1</code>、<code>网络结构2</code>、<code>实验1</code>、<code>实验2</code>等等。</p><h4 id="2-添加数据"><a href="#2-添加数据" class="headerlink" title="2. 添加数据"></a>2. 添加数据</h4><p>想后端服务程序添加数据使用的是<code>SummaryWriter</code>类中的一系列方法，这些方法都以<code>add_</code>开头，例如：<code>add_scalar</code>、<code>add_scalars</code>、<code>add_image</code>……具体来说，所有的方法有：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pprintpprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> SummaryWriter<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>startwith<span class="token punctuation">(</span><span class="token string">"add_"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>add_hparams，add_scalar，add_scalars，add_histogram，add_histogram_raw，add_image，add_images，add_image_with_boxes，add_figure，add_video，add_audio，add_text，add_onnx_graph，add_graph，add_embedding，add_pr_curve，add_pr_curve_raw，add_custom_scalars_multilinechart，add_custom_scalars_marginchart，add_custom_scalars，add_mesh</li></ul><p>后面在第二部分会详细的讲解每个方法，这里先讲共性。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205000043632.png" alt="SummaryWriter中所有添加数据的API" style="zoom:67%;"></p><p>每个方法根据需要添加的数据的不同，方法中具体的参数也不同，但是所有的方法终归都是要添加数据的，因此会存在相同的参数。具体来说，相同的参数包括：</p><ul><li><p><code>tag</code> (str)：用于给数据进行分类的标签，标签中可以包含父级和子级标签。例如给训练的loss以<code>loss/train</code>的tag，而给验证以<code>loss/val</code>的tag，这样的话，最终的效果就是训练的loss和验证的loss都被分到了<code>loss</code>这个父级标签下。而<code>train</code>和<code>val</code>则是具体用于区分两个参数的标识符（identifier）。例如我们现在有两个tag，<code>cos/dense</code>和<code>cos/sparse</code>，那么最终展示下来的效果是这样的。此外，<strong>只支持二级标签</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205003612607.png" alt="二级标签可视化后的效果"></p></li><li><p><code>globa_step</code> (int)：首先，每个epoch中我们都会更新固定的step。因此，在一个数据被加入的时候，有两种step，第一种step是数据被加入时当前epoch已经进行了多少个step，第二种step是数据被加入时候，累计（包括之前的epoch）已经进行了多少个step。而考虑到我们在绘图的时候往往是需要观察所有的step下的数据的变化，因此<code>global_step</code>指的就是当前数据被加入的时候已经计算了多少个step。计算<code>global_step</code>的步骤很简单，就是$global_step=epoch * len(dataloader) + current_step$</p></li><li><p><code>wlltime</code> (int)：从<code>SummaryWriter</code>实例化开始到当前数据被加入时候所经历时间（以秒计算），默认是使用<code>time.time()</code>来自动计算的，当然我们也可以指定这个参数来进行修改。这个参数一般不改</p></li></ul><p>以添加标量（add_scalar）为例，演示一下添加数据的方法的用法。其他的方法第二部分会讲</p><pre class="line-numbers language-python"><code class="language-python">writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_epoch <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> step <span class="token keyword">in</span> range<span class="token punctuation">(</span>total_step <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 训练代码</span>        <span class="token comment" spellcheck="true"># ...</span>        <span class="token comment" spellcheck="true"># ...</span>        <span class="token comment" spellcheck="true"># 计算 loss</span>        loss <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>step <span class="token operator">*</span> <span class="token number">0.01</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 添加标量</span>        writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span>tag<span class="token operator">=</span><span class="token string">"loss/train"</span><span class="token punctuation">,</span> scalar_value<span class="token operator">=</span>loss<span class="token punctuation">,</span>                          global_step<span class="token operator">=</span>epoch <span class="token operator">*</span> total_step <span class="token operator">+</span> step<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后可以看到的效果如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205010449745.png" alt="添加数据的效果"></p><h4 id="3-关闭SummaryWriter"><a href="#3-关闭SummaryWriter" class="headerlink" title="3. 关闭SummaryWriter"></a>3. 关闭SummaryWriter</h4><p>我们刚才说过，SummaryWriter这样的后端程序在被实例化出来就自动开启了数据记录的服务，而我们在完成了所有的数据记录只有，需要关闭服务。</p><p>关闭服务很简单，就是直接调用<code>close</code>方法即可</p><pre class="line-numbers language-python"><code class="language-python">writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-Summary"><a href="#4-Summary" class="headerlink" title="4. Summary"></a>4. Summary</h4><p>最终，总结一下整个后端数据记录的流程，其实就三步：</p><ul><li>实例化<code>SummaryWriter</code>类，同时指定数据保存的文件夹</li><li>利用<code>SummaryWriter</code>类提供的方法，添加不同类型的的数据</li><li>关闭<code>SummaryWriter</code>类，中止服务</li></ul><h3 id="B-前端显示数据"><a href="#B-前端显示数据" class="headerlink" title="B. 前端显示数据"></a>B. 前端显示数据</h3><p>因为TensorBoard是异步I/O的网页服务程序，因此后端程序在把数据写入到文件的时候，前端程序可以读取数据来进行显示。</p><p>具体来说，后端数据记录程序会把所有的数据记录到同一个文件夹下的一个文件内。<strong>因此，前端显示程序在启动的时候需要指定读取的文件夹</strong>。多次实验就会产生多个文件，我们通过显示这个文件夹，就可以很方便的来进行多个实验的比较</p><h4 id="1-默认使用"><a href="#1-默认使用" class="headerlink" title="1. 默认使用"></a>1. 默认使用</h4><p>前端显示程序提供了CLI（命令行）界面，因此我们直接在命令行启动就行了</p><pre class="line-numbers language-shell"><code class="language-shell">tensorboard --logdir=数据文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中数据文件夹就是在声明SummaryWriter时候指定的文件夹。</p><p>例如：</p><pre class="line-numbers language-shell"><code class="language-shell">tensorboard --logdir=./Feb05_01-00-48_Alienware/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而在我们启动前端显示程序之后，就会得到一个端口，访问这个端口就能看到显示的效果</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205012353764.png" alt="命令行启动tensorboard后会看到程序启动的端口" style="zoom: 67%;"></p><p>访问该端口就能看到程序</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205012630314.png" alt="浏览器中访问就能看到效果" style="zoom:67%;"></p><h4 id="2-修改端口"><a href="#2-修改端口" class="headerlink" title="2. 修改端口"></a>2. 修改端口</h4><p>有的时候，在服务器上训练模型的时候为了避免和别人的TensorBoard的端口撞了，我们需要指定新的端口。或者有的时候我们在docker容器里跑TensorBoard，我们通过一个端口映射到主机上去，这个时候就需要指定TensorBoard使用特定的端口。</p><p>具体来说就是通过CLI的<code>--port</code>参数</p><pre class="line-numbers language-shell"><code class="language-shell">tensorboard --logdir=数据文件夹 --port=端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如我们现在指定上面的例子端口为10000</p><pre class="line-numbers language-shell"><code class="language-shell">tensorboard --logdir=./Feb05_01-00-48_Alienware/ --port=10000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205013842301.png" alt="修改后的端口"></p><h3 id="C-Summary"><a href="#C-Summary" class="headerlink" title="C. Summary"></a>C. Summary</h3><p>最后，总结一下使用TensorFlow的Pipeline，首先在训练的过程中使用SummaryWriter来记录数据，记录的过程中需要注意文件夹需要来合理的划分。</p><p>然后我们在前端查看的时候，运行<code>tensorboard</code>的CLI程序即可，一般用的最多的就是<code>--log_dir</code>和<code>--port</code>两个参数。</p><p>此外，如果是服务器上的话，那么tensorboard的CLI运行在服务器上，然后在自己的电脑上，利用浏览器，通过内网来查看训练过程。</p><h2 id="3-SummaryWriter-APIs"><a href="#3-SummaryWriter-APIs" class="headerlink" title="3. SummaryWriter APIs"></a>3. SummaryWriter APIs</h2><p>上面讲完了SummaryWriter的Workflow/Pipeline，剩下的就是SummaryWriter添加数据的API的讲解了。关于这些API的话，正如上面介绍的，他们都以<code>add_</code>开头，具体有：</p><ul><li>标量类：<code>add_scalar</code>、<code>add_scalars</code>、<code>add_custom_scalars</code>、<code>add_custom_scalars_marginchart</code>、<code>add_custom_scalars_multilinechart</code>、</li><li>数据显示类：<ul><li>图像：<code>add_image</code>、<code>add_images</code>、<code>add_image_with_boxes</code>、<code>add_figure</code></li><li>视频：<code>add_video</code></li><li>音频：<code>add_audio</code></li><li>文本：<code>add_text</code></li><li>Embedding：<code>add_embedding</code></li><li>点云：<code>add_mesh</code></li></ul></li><li>统计图：<code>add_histogram</code>、<code>add_histogram_raw</code>、<code>add_pr_curve</code>、add_pr_curve_raw</li><li>网络图：<code>add_onnx_graph</code>、<code>add_graph</code></li><li>超参数图：<code>add_hparams</code></li></ul><p>因为我目前主要在做CV、点云和NLP，对于语音、视频设计的比较少，因此关于这些API以后用到了我再慢慢补充。</p><p>其实主要就是对官网上的翻译，可以直接看官网上的<a href="https://pytorch.org/docs/stable/tensorboard.html">介绍</a>：<a href="https://pytorch.org/docs/stable/tensorboard.html">https://pytorch.org/docs/stable/tensorboard.html</a></p><h3 id="1-add-scalar"><a href="#1-add-scalar" class="headerlink" title="1. add_scalar"></a>1. add_scalar</h3><p><code>add_scalar</code>主要用于添加一个标量。其签名为</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_scalar</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> scalar_value<span class="token punctuation">,</span> global_step<span class="token operator">=</span>None<span class="token punctuation">,</span> walltime<span class="token operator">=</span>None<span class="token punctuation">,</span> new_style<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> double_precision<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li><code>tag</code>、<code>global_step</code>、<code>walltime</code>是前面讲过的，这里不再细讲</li><li><code>scalar_value</code> (float or string/blobname) ：是要保存的值</li><li><code>new_style</code> (boolean)：是否使用新的内存格式，即把值保存为tensor的形式。新的格式读取速度会快一点</li><li><code>double_precision</code>(boolean)：是否使用双精度(double)来保存每个值</li></ul><p>例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> SummaryWriter<span class="token punctuation">(</span>log_dir<span class="token operator">=</span><span class="token string">"./runs/add_scalar"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> writer<span class="token punctuation">:</span>    <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_epoch <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> step <span class="token keyword">in</span> range<span class="token punctuation">(</span>total_len <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span>tag<span class="token operator">=</span><span class="token string">"sin/1"</span><span class="token punctuation">,</span> scalar_value<span class="token operator">=</span>np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">,</span>                            global_step<span class="token operator">=</span>epoch <span class="token operator">*</span> total_len <span class="token operator">+</span> step<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205105158529.png" alt="add_scalar徐爱公益"></p><h3 id="2-add-hparams"><a href="#2-add-hparams" class="headerlink" title="2. add_hparams"></a>2. add_hparams</h3><p><code>add_hparams</code>用于添加超参数列表，主要用于调参。</p><pre class="line-numbers language-shell"><code class="language-shell">def add_hparams(hparam_dict, metric_dict, hparam_domain_discrete=None, run_name=None)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li><code>hparam_dict</code> (dict)：字典中的每个键都是一个超参数的名字，而对应的值就是该超参数的值。参数的值可以是bool、string、float、int或者None</li><li><code>metric_dict</code> (dict)：字典中的每个键都是衡量标准的名字，对应的值就是该衡量标准的值。注意，<code>metric_dict</code>字典中的键要在tensorboard所有的记录（<code>tag</code>、其他的dict的键）中唯一。</li><li><code>hparam_domain_discrete</code> (Optional[Dict[str, List[Any]]])：有的超参数只是一个值，而有的超参数在训练过程中是动态变化的，因此对于这些动态变化的超参数，使用该参数来进行传递，其中储存了动态变化的超参数的名字和他们的值的字典</li><li><code>run_name</code> (str)：本次运行时候的名称，如果没有指定的话就默认用现在的时间</li></ul><p>一般来说有特殊需求的话不用指定第三个参数，第四个看个人</p><p>例子如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">with</span> SummaryWriter<span class="token punctuation">(</span>log_dir<span class="token operator">=</span><span class="token string">"./runs/add_hparams"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> writer<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># train codes</span>    <span class="token comment" spellcheck="true"># ...</span>    <span class="token comment" spellcheck="true"># ...</span>    <span class="token comment" spellcheck="true"># ...</span>    <span class="token comment" spellcheck="true"># add hparams</span>    writer<span class="token punctuation">.</span>add_hparams<span class="token punctuation">(</span>        hparam_dict<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"lr"</span><span class="token punctuation">:</span> <span class="token number">5e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>            <span class="token string">"batch_size"</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">,</span>            <span class="token string">"optimizer"</span><span class="token punctuation">:</span> <span class="token string">"SGD"</span><span class="token punctuation">,</span>            <span class="token string">"weight_decay"</span><span class="token punctuation">:</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        metric_dict<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"accuracy"</span><span class="token punctuation">:</span> <span class="token number">0.76</span><span class="token punctuation">,</span>            <span class="token string">"cross-entropy"</span><span class="token punctuation">:</span> <span class="token number">0.01</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示的效果如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205120855376.png" alt="hparam的效果"></p><p>需要注意的是，我们多个实验就会在同一个文件夹下面得到多个数据，例如我们改一下上面的参数，再跑一遍，生成新的数据。然后刷新一下tensorboard就可以看到第二次实验的数据。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205132631667.png" alt="第二组实验"></p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning Blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> Pytorch </tag>
            
            <tag> AI </tag>
            
            <tag> TensorBoard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-8: Self-Attention</title>
      <link href="/2022/02/02/li-hong-yi-ml2021-spring-8-self-attention/"/>
      <url>/2022/02/02/li-hong-yi-ml2021-spring-8-self-attention/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是Machine Learning 2021 Spring 第八节课的笔记，本节课主要讲解了Neural Network中的Attention机制以及常见的Attention的架构（Module）：Self-Attention，此外，Self-Attention也可以像RNN一样实现Sequence的input。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203105511476.png" alt="第八节课：Self-Attention"></p><h1 id="李宏毅ML2021-Spring-8-Self-Attention"><a href="#李宏毅ML2021-Spring-8-Self-Attention" class="headerlink" title="李宏毅ML2021-Spring-8: Self-Attention"></a>李宏毅ML2021-Spring-8: Self-Attention</h1><p>有的时候，我们的神经网络需要接受可变长输入作为input。这个时候使用前面说的全连接神经网络或者卷积神经网络就无法处理了。我们需要新的网络架构来处理。循环神经网络（Recurrent Neural Network，RNN）和Self-Attention架构的网络都可以接收边长输入。</p><p>另外一方面，我们人类在观察输入（例如图像）的时候，是会把我们的注意力分散到几个关键的地方的，例如鸟嘴、鸟爪等几个地方。换而言之，我们并不是等同对待图片中的所有的地方的，而是有注意力的。这种机制称为Attention（注意力）机制。为网络引入注意力机制的方法（即引入注意力的网络模块/结构/架构）有很多，而Self-Attention就是其中的一种。</p><p>因此，本文就将讲解Self-Attention这一网络架构</p><h2 id="1-Problem-Restatement"><a href="#1-Problem-Restatement" class="headerlink" title="1. Problem Restatement"></a>1. Problem Restatement</h2><h3 id="1-Changeable-Length-Vector-set-as-input"><a href="#1-Changeable-Length-Vector-set-as-input" class="headerlink" title="1. (Changeable Length) Vector set as input"></a>1. (Changeable Length) Vector set as input</h3><p>我们在前面讲解了两种网络架构：全连接网络和卷积神经网络。着两种网络的输入都是一个向量，输出是一个标量（Regression任务）或者类别（Classification任务）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203125150488.png" alt="全连接和卷积神经网络都接受向量作为时输入" style="zoom:67%;"></p><p>而在有些情况下，我们的输入并不是一个一个的向量，而是一组向量，因为向量与向量之间是具有关系的。例如我们现在有一堆人在进行体育运动的视频，例如一个人在跑步、游泳、踢足球、打篮球等等。再比如前面的Phoneme的分类。在这种情况下，我们的输入就应该是一排向量。稍后给出来更加详细的例子</p><p>更复杂的是，有的时候我们输入的一组向量的长度是在变化的。因此对于可变长一组向量的时候，使用全连接网络或者卷积网络就无法处理了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203125730849.png" alt="现实中很多问题要求输入是一排可边长向量" style="zoom:67%;"></p><h3 id="2-Real-Examples"><a href="#2-Real-Examples" class="headerlink" title="2. Real Examples"></a>2. Real Examples</h3><p>我们接下来举几个真实的可变长的Vector Set作为输入的例子。</p><h4 id="A-Sentence-as-Vector-Set"><a href="#A-Sentence-as-Vector-Set" class="headerlink" title="A. Sentence as Vector Set"></a>A. Sentence as Vector Set</h4><p>在自然语言处理中，我们往往需要处理一整个句子，即把一整个句子作为输入。如果这个时候我们把一个单词处理为向量，那么这个时候，作为输入的一个句子就是一个Vector Set</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203133828779.png" alt="Sentence as Vector Set"></p><p>具体来说我们是如何把一个单词处理为一个向量的呢？这个方法有很多，例如我们可以直接进行one-hot encoding，这样就得到了一个向量</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203133941690.png" alt="通过one-hot encoding来得到word vector" style="zoom:67%;"></p><p>但是one-hot encoding有很多问题：</p><ul><li>第一个问题就是每一个向量的长度都需要等于世界上已知的所有单词的数量，因此会造成空间的浪费。</li><li>其次，one-hot因为用不同的维度来表示单词，因此使用one-hot的话就表示这些词之间是没有关系的。可是我们又知道cat、dog和elephant都是动物，之间是有关系的，而cat和apple是没有关系的，而如果我们使用one-hot encoding的话就无法表示出来这种词之间的关系。</li><li>还有多音字、一词多义等等问题，这种问题就需要考虑到上下文。</li></ul><p>除了one-hot来获得词向量之外，还要一个更加合理的方法来获得词向量，即word embedding。Word Embedding方法给每个词语的词向量都是包含了语义信息的。因此我们如果把Word Embedding得到的每个词语的向量画出来之后，就会发现同类的词语之间靠的就会非常接近。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203134707422.png" alt="Word Embedding" style="zoom:67%;"></p><p>关于Word Embedding是如何得到含语义信息的向量的，就不是我们今天这节课的要讨论的问题。可以参考李宏毅老师以前的<a href="https://youtu.be/X7PH3NuYW0Q">课程链接</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203135117402.png" alt="Learn More About Word Embedding" style="zoom: 80%;"></p><p>总的来说，我们上面将One-Hot和Word Embedding的目的就在于告诉大家，我们是有方法把一个词语转变为一个向量的，并且在这个基础上处理句子就需要我们的模型能够接受一个可变长的vector set作为输入。</p><h4 id="B-Audio-as-Vector-Set"><a href="#B-Audio-as-Vector-Set" class="headerlink" title="B. Audio as Vector Set"></a>B. Audio as Vector Set</h4><p>我们在进行音频相关的任务的时候，也是把音频作为了一个Vector的Set。例如我们前面的Phoneme Classification的任务。</p><p>针对一段音频，我们首先取一个(Sliding) Windows，获得一小段音频，然后对其进行处理，得到一个向量。这个向量一般称为一个frame。而处理得到向量的方法有很多，例如MFCC、Filter Bank等方法</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203140249384.png" alt="通过MFCC、filter bank等方法可以把一个Window转换为一个Frame（向量）" style="zoom: 67%;"></p><p>然后我们在把这个window向右滑动一下（所谓Sliding Window），例如10ms，然后计算的到第二个frame的值</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203140827996.png" alt="向右滑动" style="zoom: 67%;"></p><p>通过这样，我们就把一个1秒长度的音频转变为一个100个frame的vector set了。而又因为语音的长度是不定的，因此一段音频对应的vector set的长度其实也是不确定的。</p><h4 id="C-Graph-as-Vector-Set"><a href="#C-Graph-as-Vector-Set" class="headerlink" title="C. Graph as Vector Set"></a>C. Graph as Vector Set</h4><p>除了句子和音频可以转换为Vector Set以外，Graph也可以用一个Vector Set来表示，例如Social Network，我们把Graph中的每一个Node都当做一个向量。而Node中可以以这个人的姓名、年龄等等作为一个Vector中不同的Dimension。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203141813529.png" alt="Graph as Vector Set" style="zoom:67%;"></p><p>除了Social Network以外，我们也可以把一个molecule当做一个Graph，而molecule中的atom就可以当做Graph中的Node</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203142029516.png" alt="一个分子可以视为一个Graph" style="zoom: 67%;"></p><p>而每一个atom，我们又可以通过one-hot encoding的方式来得到一个向量，所以一个分子就可以表示为一个Vector Set</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203142320041.png" alt="对原子进行one-hot encoding来得到一个向量" style="zoom: 80%;"></p><h2 id="2-Classified-by-Output"><a href="#2-Classified-by-Output" class="headerlink" title="2. Classified by Output"></a>2. Classified by Output</h2><p>我们上面说道，我们需要新的一类接受可变长向量组作为输入的模型来处理一些任务，而针对这些模型，我们根据其输出的类别可以把他们分为三类：</p><ul><li>输出和输入等长</li><li>输出只有一个值</li><li>由模型自己决定输出多长</li></ul><p>下面我们就结合实际的案例来介绍一下这三类网络和对应的应用</p><h3 id="1-输出和输入等长-Sequence-Labeling"><a href="#1-输出和输入等长-Sequence-Labeling" class="headerlink" title="1. 输出和输入等长 (Sequence Labeling)"></a>1. 输出和输入等长 (Sequence Labeling)</h3><p>第一种网络的输出和输入是等长的，这种网络一般都是用于给原始的输入进行打”label”的，例如对于一个句子，我们现在对其中每个词进行词性标注；然后还有我们在第二个作业里的Phoneme Classification，需要给一段语音的所有的vector分类，得到其Phoneme的类别；其次如果是电商的话，我们可以根据Social Network来判断用户（结点，即Vector）对某个商品是否会购买</p><p>因此输入和输出等长的任务又称为Sequence Labeling任务</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203143643017.png" alt="输出和输入等长的网络的例子" style="zoom:67%;"></p><h3 id="2-输出只有一个值-Sequnce-Classification-Regression"><a href="#2-输出只有一个值-Sequnce-Classification-Regression" class="headerlink" title="2. 输出只有一个值 (Sequnce Classification/Regression)"></a>2. 输出只有一个值 (Sequnce Classification/Regression)</h3><p>第二种情况，我们的输入是一个Vector Set，而输出只有一个值。这种情况就很想我们把输入的Vector Set视为一个整体，然后对其进行Classification或者Regression任务。</p><p>因此这类任务又称为Sequence Classification 或者 Sequence Regression任务</p><p>例如现在有一个句子，我们可以对其进行情感分析，这个在某个产品上线之后判断用户对其的态度非常好用。然后未来在作业四中我们还会根据一段语音来判断说这段话的人是谁，这也是输入是一个vector set而输出只有一个值的例子。最后就是现在给一个分子，判断这个分子是亲水性还是疏水性。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203144308056.png" alt="输出只有一个值的模型的例子" style="zoom:67%;"></p><h3 id="3-输出长度由网络自己来决定"><a href="#3-输出长度由网络自己来决定" class="headerlink" title="3. 输出长度由网络自己来决定"></a>3. 输出长度由网络自己来决定</h3><p>有的任务中，我们并不知道我们网络输出的长度是多少，例如在机器翻译中，四个字的中文句子可能翻译成英文有十多个单词，而且不同的人翻译得到的长度也不同。</p><p>这种任务又称为Sequence to Sequence的任务，因为输入输出都是一段具有独立意义的Sequence。在作业5中我们会有相关的任务。</p><p>经典的Seq2Seq的任务包括有翻译、语音转文字等等</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203144717141.png" alt="输出长度由网络自己决定的模型的例子" style="zoom:67%;"></p><h3 id="4-Focus-of-this-lecture"><a href="#4-Focus-of-this-lecture" class="headerlink" title="4. Focus of this lecture"></a>4. Focus of this lecture</h3><p>本节课要讲的Self-Attention这个网络的架构主要是为了能够让网络接受一个Function Set作为输入，而具体的输出是什么样的这个需要我们自己在self-attention模块之后接自己设计出来的针对任务的（Task Specified）的模型。</p><p>因此为了简单起见，我们本节课就以Sequence Labeling任务为载体讲解Self-Attention Module</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203145920055.png" alt="本节课的关注点" style="zoom: 67%;"></p><h2 id="3-Sequence-Labeling-as-Vector-Labeling"><a href="#3-Sequence-Labeling-as-Vector-Labeling" class="headerlink" title="3. Sequence Labeling as Vector Labeling?"></a>3. Sequence Labeling as Vector Labeling?</h2><h3 id="1-Fully-Connected-Network-fails"><a href="#1-Fully-Connected-Network-fails" class="headerlink" title="1. Fully Connected Network fails"></a>1. Fully Connected Network fails</h3><p>我们前面说Sequence Labeling的输出和输入是等长的，而输出往往就是给输入进行Labeling，那么我们就会想能不能用前面讲的吃一个vector的模型来对每个vector单独进行Labeling。</p><p>例如我们就直接用前面的全连接网络来完成Sequence Labeling</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203150952396.png" alt="全连接来完成Sequence Labeling" style="zoom:67%;"></p><p>可是这样做会有非常大的问题，例如我们现在就进行词性分析（POS Labeling）这个任务。</p><p>例如下面的句子：I saw a saw，这两个saw是不同的词义的，可是如果我们使用全连接或者卷积网络的话输入是一样的，Network是没有理由给出来不一样的输出的。因此这种时候就会有问题。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203153010069.png" alt="单独进行Label是有问题的" style="zoom:67%;"></p><p>这个问题的出现，就是我们忽略了Vector Set的Vector之间的相关性，或者说我们忽略了Sequence内在的逻辑。Sequence整体是作为一个整体，其内部最小的unit之间是有逻辑关系的，而我们上面这样做就忽略了这个逻辑背景，因此失败了。</p><p>所以为了能够进行弥补这个问题，我们就想，能不让对Fully Connected的Neural Network进行改进，让他能够考虑更多的、上下的Context的数据呢？这其实是有可能的。</p><h3 id="2-Neighbor-as-input"><a href="#2-Neighbor-as-input" class="headerlink" title="2. Neighbor as input"></a>2. Neighbor as input</h3><p>为了考虑一个vector的Context，一个简单的方法就是把这个vector的邻居在一起作为一个input丢给全连接网络</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203160934305.png" alt="当前vector和邻居在一起作为FC的input" style="zoom: 67%;"></p><p>这就相当于我们用一个windows在Sequence上滑动。这个做法我们在作业二中就是这样处理的，我们把当前需要分类的Phoneme和前后各5个Phoneme在一起作为一个input</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203161209696.png" alt="FC可以考虑一个vector的上下文" style="zoom: 67%;"></p><h3 id="3-Limitation-of-Neighbor"><a href="#3-Limitation-of-Neighbor" class="headerlink" title="3. Limitation of Neighbor"></a>3. Limitation of Neighbor</h3><p>可是上面这样把邻居作为输入一起丢入模型还是有问题的，它能考虑到的Context只有一个windows的范围。可是在很多情况下，我们要对一个句子进行词性划分的话是需要考虑很长范围的。例如上面的I saw a saw，如果中间有插入语、定语什么的，句子的长度就长了，这个时候windows只会越开越大。</p><p>可是window开大了又有一个问题，那就是边缘的几个vector开window的话前面后面都是没有vector的，所以就会有问题。</p><p>其次，考虑上下文的极限就是考虑整个句子，可是如果考虑整个句子的话最终又回到了句子作为一个input是变长的这个问题。</p><p><strong>因此，我们不得不就开从模型的端入手，来进行修改</strong></p><h2 id="4-Self-Attention"><a href="#4-Self-Attention" class="headerlink" title="4. Self-Attention"></a>4. Self-Attention</h2><p>上面，我们铺垫了差不多3500个字，讲解了全连接和CNN的问题，然后又提出了可能的解决方法的问题，最终讲到不得不使用Self-Attention的必要性（Justification of Self-Attention）。下面我们就来讲解Self-Attention具体的操作。</p><h3 id="1-Function-of-Self-Attention"><a href="#1-Function-of-Self-Attention" class="headerlink" title="1. Function of Self-Attention"></a>1. Function of Self-Attention</h3><p>我们先来看一看Self-Attention的作用。Self-Attention一次吃一个Sequence的输入，然后会输出和输入的数量一样的Sequence。</p><p>不过不同的是，经过Self-Attention之后得到的Sequence和原输入的sSequence相比，其是考虑了整个句子上下文的Sequence。因此我们然后就可以把考虑了上下文的vector再传入FC中，这样的话效果就会好很多。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203162720283.png" alt="Self-Attention的作用：让一个单词考虑整个句子" style="zoom:67%;"></p><p>然而，并不是说Self-Attention只能用一次，我们完全可以多次、重复进行Self-Attention。即在经过FC之后，再通过一次Attention</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203163649642.png" alt="经过多次Self-Attention" style="zoom:67%;"></p><p>这样的话，让Fully Connected的网络专注于处理某一个位置的特征，而Self-Attention着眼于处理全局的特征。</p><h3 id="2-About-Self-Attention"><a href="#2-About-Self-Attention" class="headerlink" title="2. About Self-Attention"></a>2. About Self-Attention</h3><p>关于Self-Attention最出名的文章就是谷歌的Attention is all you need。在这篇文章中，Google提出了Transformer这样的结构（Transformer后面会讲）。而Transformer里最重要的一个Module，就是Self-Attention的Module。</p><p>Self-Attention其实不是这一篇文章提出来的，而是在很早以前就已经有人提出来了，但是这篇文章是把Self-Attention发扬光大的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203164047953.png" alt="Self-Attention由Attention is all you need发扬光大"></p><h3 id="3-Overview-of-Self-Attention"><a href="#3-Overview-of-Self-Attention" class="headerlink" title="3. Overview of Self-Attention"></a>3. Overview of Self-Attention</h3><p>首先，Self-Attention可以用于第一层，也可以用于中间的层。因此Self-Attention的input可以是input，也可以是hidden layer的output，因此我们用$a^i$来表示输入。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203171958662.png" alt="Self-Attention的输入可以是input也可以hidden layer的output" style="zoom:50%;"></p><p>而在接受了这一排输入之后，self-attention输出和输入一样数量的output</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203172741916.png" alt="Self-Attention的输出数量和输入一样多" style="zoom: 50%;"></p><p>需要注意的是，输出的每一个Vector都是考虑了input的整个Sequence的、含有全文Context的输出</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203172854680.png" alt="Self-Attention的输出是含有全文Context的输出" style="zoom: 67%;"></p><h3 id="4-Step-1-Attention-Score"><a href="#4-Step-1-Attention-Score" class="headerlink" title="4. Step 1: Attention Score"></a>4. Step 1: Attention Score</h3><p>Self-Attention的第一步，就是来计算当前的这个vector和上下文的哪些Vector（为了完成最终的任务）是有关系的。</p><p>为了描述这个关系，我们用一个值来进行表述，即attention score</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203173702425.png" alt="Self-Attention用attention score来表示input sequence中两个vector的关系" style="zoom:67%;"></p><p>那么现在的问题就是，输入的$a^1$和其他的vector，例如$a^4$之间的attention score该如何计算呢？注意，attention score的计算是有方向的，例如我们这里计算的是$\alpha$是$\alpha^1$对$a^4$的attention score。</p><p>具体计算$\alpha$的分数有两种，一种是通过<code>dot product</code>的方式，另外一种是通过<code>additive</code>的方法，注意计算attention score的时候，输入是两个输入的vector，而输出是attention score，因此我们也可以把计算attention score画成一个模块</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203191152265.png" alt="计算attention score的两种方式" style="zoom:50%;"></p><h4 id="A-Dot-Product"><a href="#A-Dot-Product" class="headerlink" title="A. Dot-Product"></a>A. Dot-Product</h4><p>dot-product计算attention score的方式是给输入的两个向量分别乘以两个矩阵进行变换，这两个矩阵分别称为<code>query矩阵</code>和<code>key矩阵</code>，记为$W^q$和$W^k$，稍后会解释为什么称为$query矩阵$和$key矩阵$。</p><p>我们这里因为计算的是$a^1$对$a^4$的attention score，因此我们给$a^1$乘以矩阵$W^q$得到<code>query向量</code>$q$，给被计算attention score的$a^4$乘以矩阵$W^k$得到<code>key向量</code>$k$。</p><p>然后让<code>query向量</code>和<code>key向量</code>进行dot product，就得到了$a^1$对$a^4$的attention score</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203194552617.png" alt="Dot-Product计算attention score" style="zoom:80%;"></p><h4 id="B-Additive"><a href="#B-Additive" class="headerlink" title="B. Additive"></a>B. Additive</h4><p>相加计算attention score的方法则是在得到了<code>query向量</code>和<code>key向量</code>的基础上，进行element-wise的相加，然后经过一个activation function，例如tanh函数，然后在经过一个transform就得到了最终的attention score</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203195633489.png" alt="Addtive计算attention score的方法" style="zoom: 67%;"></p><p>这两种计算attention score是最经典的计算的方式，实际上还有很多种计算的方式。而一般我们常用的计算attention score的方式就是第一种，即通过dot product来计算attention score。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203200603411.png" alt="Dot-product是最常用的计算attention score的方式" style="zoom:67%;"></p><h4 id="C-Calculate-All-Attention-Score"><a href="#C-Calculate-All-Attention-Score" class="headerlink" title="C. Calculate All Attention Score"></a>C. Calculate All Attention Score</h4><p>接下来，我们就来计算$a^1$对$a^2$、$a^3$、$a^4$四个vector的Attention Score，具体如下。</p><p>我们首先用上面说的Dot-Product的方式计算$a^1$对$a^2$的Attention Score</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203202034141.png" alt="image-20220203202034141" style="zoom:50%;"></p><p>然后同理，我们重复这个过程，直到计算出来$a^1$对$a^3$、$a^4$的Attention Score</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203202538134.png" alt="计算出来所有的Attention Score" style="zoom: 67%;"></p><p>在实践中，我们其实也会为了$a^1$计算出来一个<code>key向量</code>，然后计算自己对自己的Attention Score。这样的话方便等一会的向量化计算。因此，$a^1$会计算得到四个Attention Score</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203202847520.png" alt="计算得到四个Attention Score" style="zoom:67%;"></p><p>最后，在计算完初始的Attention Score之后，还需要进行归一化。因为我们的注意力总和是1，因此这里表示我们把多少比例的注意力分配给了周围的Context</p><p>当然，进行归一化的方式还有很多，这里用softmax是没有概率上的意义的，其实也可以别的归一化的方式。有人甚至换成了ReLu，结果效果还更好</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203203735396.png" alt="归一化之后得到最终的Attention Score" style="zoom:67%;"></p><h3 id="5-Context-Fusion"><a href="#5-Context-Fusion" class="headerlink" title="5. Context Fusion"></a>5. Context Fusion</h3><p>在计算得到了Attention Score，或者说Relevance Score之后，我们接下来就是利用这个Attention Score来计算得到含有Context的output。</p><p>具体来说怎么做能，我们再通过一个<code>value矩阵</code>$W^v$，然后用<code>value矩阵</code>给每一个input的vector相乘之后进行transform得到<code>value向量</code>，这个value向量就是稍后用于合成输出的向量</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203204502270.png" alt="通过value矩阵计算value向量" style="zoom:67%;"></p><p>这个时候因为我们计算的是$a^1$的输出，因此我们现在把这四个<code>value向量</code>乘以Attention Score之后就得到了含有注意力的value向量。</p><p>接下来把这四个向量相加就得到了$a^1$对应的输出</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203205824899.png" alt="Context Fusion得到a1对应的输出" style="zoom:67%;"></p><p>所以通过上面的这些操作，我们就计算得到了$a^1$对应的、含有整个输入上下文的输出$b^1$。</p><p>同理，我们对$a^2$进行计算，得到$a^2$对应的输出$b^2$。</p><p>首先计算得到$a^2$对四个input的Attention Score，然后经过Softmax归一化得到Attention Score。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203220634374.png" alt="计算a2的四个Attention Score" style="zoom: 67%;"></p><p>然后我们把这四个值和四个<code>value向量</code>相乘得到然后加和得到$a^2$对应的输出$b^2$</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203221027740.png" alt="计算a2对应的输出b2" style="zoom: 67%;"></p><p>我们在计算的时候，发现$b^2$的计算和$b^1$完全无关，因此我们进行计算的时候是可以并行计算同时得到所有的四个输出的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203211138191.png" alt="得到含有上下文Context的输出b1" style="zoom:67%;"></p><p>所以并行计算就可以得到所有的四个输出。</p><h2 id="5-Vectorization"><a href="#5-Vectorization" class="headerlink" title="5. Vectorization"></a>5. Vectorization</h2><p>我们上面介绍完了Self-Attention所有的操作。在最后的部分我们说道，其实可以并行计算同时得到四个输出$b^1$，$b^2$，$b^3$和$b^4$。</p><p>那么我们下面就讲讲如何对向量化Self-Attention的计算，以实现并行计算。而计算得到所有输出大体上分为两步：</p><ul><li>计算得到K、Q、V</li><li>利用K、Q、V计算Attention Score</li><li>利用Attention Score计算得到输出</li></ul><h3 id="1-Vectorization-of-query-key-and-value-vectors"><a href="#1-Vectorization-of-query-key-and-value-vectors" class="headerlink" title="1. Vectorization of query, key and value vectors"></a>1. Vectorization of query, key and value vectors</h3><p>我们首先对query vector的计算进行向量化。</p><p>对于四个输入$a^1,a^2,a^3,a^4$而言，我们计算得到四个<code>query向量</code>就是用用一个<code>query矩阵</code>和四个输入向量分别相乘。如下图所示</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203222913675.png" alt="计算q1"></p><p>然后我们再同样计算得到$q^2,q^3$和$q^4$</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203223215661.png" alt="计算得到所有的query向量"></p><p>那这个时候，我们就可以把四个$a$和$q$拼起来，成为两个矩阵，称为$I$和$Q$（input和query）。在计算$Q$的过程中，Q是计算得到的，$I$是输入的矩阵，而$W^q$是网络的参数，因此网络需要学习的就是$W^q$这个矩阵</p><p>同样，我们接下来向量化计算<code>key向量</code>的过程。计算key向量和计算query向量一样，使用一个key矩阵左乘向量即可，因此我们仿照上面的步骤，进行计算。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203224320680.png" alt="计算得到所有的key向量"></p><p>类似的，我们记所有的key向量拼成的矩阵为$K$，而参数矩阵$W^k$就是需要学习的参数</p><p>同理，我们向量化value向量的计算。</p><p>过程还是一样的，我们直接略过。需要注意的是，我们计算的value vector拼起来得到的矩阵记为$V$。而网络的参数$W^v$就是第三个需要学习得到的参数</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203225033010.png" alt="计算得到所有的value向量"></p><p>最后，我们向量化计算query、key和value，最后得到$K,Q,V$三个矩阵其实就是通过三个参数矩阵$W^v,W^q,W^k$，这三个矩阵是我们稍后需要Update的对象。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203230525114.png" alt="第一步：计算得到K,Q,V" style="zoom:67%;"></p><h3 id="2-Vectorization-of-Attention-Score"><a href="#2-Vectorization-of-Attention-Score" class="headerlink" title="2. Vectorization of Attention Score"></a>2. Vectorization of Attention Score</h3><p>我们接下来计算Attention Score。Attention Score因为是考究方向的，因此我们用$\alpha_{i,j}$表示输入$a^i$对$a^j$的Attention Score。</p><p>我们计算Attention Score的时候使用$a^i$的query向量和所有输入的key向量进行Dot-Product。而Dot-Product即向量转置相乘。</p><p>因此，现在计算$\alpha<em>{1,1}$的即：$\alpha</em>{1,1}={k^1}^T\cdot q^1$，用图来表示的话，为了减少符号，所以横过来表示转置</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203233142746.png" alt="计算a11"></p><p>同理，我们可以计算$a^1$对其他三个输入的Attention Score，得到$a<em>{1,1},a</em>{1,2},a<em>{1,3},a</em>{1,4}$四个Attention Score</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203235036509.png" alt="计算得到a1的四个Attention Score"></p><p>这四个值其实也可以通过向量化的方式来计算，即把四个key向量hstack起来，那么得到了$a^1$的Attention Vector</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203235052334.png" alt="计算得到a1的Attention Vector"></p><p>那么同样，我们用$q^2$来计算$a^2$的Attention Score，那么最后就会得到下面的式子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203235342200.png" alt="计算a2的Attention Score" style="zoom:67%;"></p><p>同理，我们重复计算就得到了$a^3$和$a^4$的Attention Score</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203235800348.png" alt="计算得到所有的Attention Score"></p><p>而计算得到16个Attention Score的过程，可以视为两个矩阵相乘，即</p><script type="math/tex; mode=display">A = K^T\times Q</script><p>最后，我们还需要对某一个输入的四个Attention Score进行归一化，就得到了最终的16个Attention Score</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204000238245.png" alt="计算得到最终的Attention Score"></p><h3 id="3-Vectorization-of-Output"><a href="#3-Vectorization-of-Output" class="headerlink" title="3.  Vectorization of Output"></a>3.  Vectorization of Output</h3><p>我们接下来计算最终的输出。</p><p>计算输出就是用前面计算得到的四个Attention Score和四个Value Vector分别相乘，然后相加得到最终的输出。例如把$a<em>{1,1},a</em>{1,2},a<em>{1,3},a</em>{1,4}$和$v_1,v_2,v_3,v_4$分别相乘然后相加就得到了$b^1$，而$b^1$的计算图示如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204000701096.png" alt="计算b1" style="zoom: 67%;"></p><p>注意，图中是把$V$这个矩阵按行分块视为一个向量，所以$V$左乘$A’$的第一列就得到了$b^1$。在实际的计算时候，是要进行广播操作的。</p><p>那么我们用$V$和$A’$的每列分别相乘，就得到了最终的输出矩阵$O$</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204001639091.png" alt="最终的输出矩阵O"></p><h3 id="4-Summary"><a href="#4-Summary" class="headerlink" title="4. Summary"></a>4. Summary</h3><p>最后我们对上面的整个过程进行一下总结</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204001924302.png" alt="Self-Attention计算的全过程" style="zoom:67%;"></p><p>我们就会发现，Self-Attention进行了那么多复杂的计算，其实最后需要学的参数很少，只有3个，即$W^q,W^k,W^v$</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204002055613.png" alt="需要学习的参数" style="zoom:67%;"></p><h2 id="6-Multi-head-Self-Attention机制"><a href="#6-Multi-head-Self-Attention机制" class="headerlink" title="6. Multi-head Self-Attention机制"></a>6. Multi-head Self-Attention机制</h2><p>上面讲完的Self-Attention机制其实只是最简单的Self-Attention，而近些年有对Self-Attention提出改进的方法，其中之一就是Multi-head的Self-Attention。</p><p>Multi-head Self-Attention对Self-Attention提出的改进的角度就是，Self-Attention抽取到的relevance或者说Attention只是从一个角度出发考虑的，例如现在进行词性分析的话，现在计算得到可能只是从与谓语的关系（副词、主语还是宾语）这个角度出发来分析的。而有的时候我们可能需要从多个角度来进行分析，例如分析该词对主语、宾语（定语），对谓语的关系。</p><p>因此我们可能需要多种不同的Attention。所以Multi-head的Self-Attention就是实现了多个Attention。</p><h3 id="1-Multi-query、key-and-value-vectors"><a href="#1-Multi-query、key-and-value-vectors" class="headerlink" title="1. Multi query、key and value vectors"></a>1. Multi query、key and value vectors</h3><p>首先，Multi-head的Self-Attention和Single Head的一样，都是先针对一个vector计算得到query、key和value三个向量</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204004745419.png" alt="首先计算得到q,k,v三个向量" style="zoom:67%;"></p><p>而为了获得两种Attention，Multi-head就是给每一个输入多套query、key和value向量。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204005240950.png" alt="给一个输入多套key,query和value" style="zoom:67%;"></p><p>而如何获得多个query、key和value呢？以query向量为例，就是给一开始得到的$q^i$乘以两个向量</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204005620836.png" alt="给qi乘以两个矩阵得到qi1和qi2"></p><p>同理，计算得到两个$k$和$v$都是用两个矩阵。</p><h3 id="2-Multi-Output"><a href="#2-Multi-Output" class="headerlink" title="2. Multi Output"></a>2. Multi Output</h3><p>然后假设我们现在只有两个输入来计算Multi-head的Self-Attention</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204010302479.png" alt="用两个输入来计算Multi-head Attention" style="zoom:80%;"></p><p>我们接下来计算Attention，一般都是用某一套来独立计算，例如现在$q^{i,1}$计算Attention Score，那么就不要管$k^{i.2}$和$v^{i,2}$，对$q^{i,2}$也是同理</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204010741576.png" alt="计算第一个output b1" style="zoom:67%;"></p><p>同理，针对第二套参数我们也计算得到一个output</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204010948309.png" alt="计算第二个output b2" style="zoom: 50%;"></p><h3 id="3-Final-Output"><a href="#3-Final-Output" class="headerlink" title="3. Final Output"></a>3. Final Output</h3><p>最后，我们再用一个矩阵得到最终的输出</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204011139670.png" alt="最终的输出"></p><h2 id="7-Positional-Encoding"><a href="#7-Positional-Encoding" class="headerlink" title="7. Positional Encoding"></a>7. Positional Encoding</h2><p>Self-Attention最终可以获得一个含有上下文信息的输出，然而Self-Attention的另外一个缺点就是它缺少了这个vector在整个句子中的绝对的位置信息。例如大多数时候，动词都不会出现在句子的开头而是处于中间或者结尾（主谓宾或者主谓结构的句子）。</p><p>那这个时候该怎么办呢？办法就是如果我们觉得位置这个信息是比较重要的话，我们就把位置的信息塞入到Self-Attention中去。这个技术就成为Positional Encoding。</p><p>Positional Encoding具体来说就是给每一个vector一个包含位置信息的vector，然后把它加到原始的输入上去就行了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204011853038.png" alt="Positional Encoding" style="zoom: 80%;"></p><p>求取位置编码$e$的时候，在Attention is all you need中，是手工设计的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204012158311.png" alt="手工设计的Positional Vector" style="zoom: 67%;"></p><p>而目前，Positional Encoding获得的方法仍然是尚待研究的问题，不过目前也有人尝从数据中自己学出来</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204012518472.png" alt="研究Positional Encoding的Paper" style="zoom:80%;"></p><h2 id="8-Self-Attention-Application"><a href="#8-Self-Attention-Application" class="headerlink" title="8. Self-Attention Application"></a>8. Self-Attention Application</h2><p>Self-Attention运用的领域非常广，下面就将进行介绍</p><h3 id="1-NLP"><a href="#1-NLP" class="headerlink" title="1. NLP"></a>1. NLP</h3><p>2017年Transformer最早被提出是运用在NLP领域，而对应的文章Attention is all you need就是把Self-Attention发扬广大的文章。进一步在2018年就有了bert这个模型</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204012952917.png" alt="Self-Attention在NLP的运用" style="zoom:67%;"></p><h3 id="2-Speech"><a href="#2-Speech" class="headerlink" title="2. Speech"></a>2. Speech</h3><p>Self-Attention在语音领域也有所应用，不过有一个问题就是我们说的一句话，转换成Vector Set的话就会非常大，向量的维度往往会上千。</p><p>那么我们这个时候的Attention Matrix就会很大，导致塞爆Memory。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204013318192.png" alt="Self-Attention用于Speech领域的问题" style="zoom:67%;"></p><p>所以就需要进行一下修改，而Truncated Self-Attention就是对其进行了修改之后得到的用于Speech领域的Self-Attention</p><p>具体来说，其思路就是一次让模型只接受一个局部作为输入，而非看所有的输入，并且看到了后面就会丢弃掉前面的输入</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204013714823.png" alt="Truncated Self-Attention" style="zoom:80%;"></p><p>而为什么我们认为只需要看一个片段即可，那么这个取决于我们对问题的立即，即我们的Domain Knowledge。例如Phoneme的识别只需要局部的语音即可。</p><h3 id="3-Image"><a href="#3-Image" class="headerlink" title="3. Image"></a>3. Image</h3><p>Self-Attention还可以用于图像领域，因为一个图像也可以视为一个Vector Set。例如我们把一个Pixel上的RGB三个颜色视为一个Vector，那么一张图片（以下面的鹰为例）就是5*10个向量</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204014125833.png" alt="Self-Attention在图像上的运用" style="zoom: 67%;"></p><p>而实际运用Self-Attention到图像领域的工作有Self-Attention GAN和DETR</p><p>Self-Attention GAN用于生成任务</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204014316042.png" alt="Self-Attention GAN" style="zoom: 67%;"></p><p>DETR将Self-Attention运用到Detection任务</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204014337844.png" alt="DEtection Transformer"></p><h3 id="3-Graph"><a href="#3-Graph" class="headerlink" title="3. Graph"></a>3. Graph</h3><p>我们前面还说过，Self-Attention可以用在Graph上面，Node是作为一个Unit嵌入在Network的Context下面的，因此我们这个时候也可以用Self-Attention来抽取上下文的信息。</p><p>我们的Attention Matrix只需要计算有边相连的Node，因为没有边相连的Node就暗示两个Node之间没有关系，所以我们就没有必要计算没有边相连的两个Node之间的Attention Score</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204021746816.png" alt="Self-Attention for Graph" style="zoom:67%;"></p><h2 id="8-Self-Attention-v-s-CNN"><a href="#8-Self-Attention-v-s-CNN" class="headerlink" title="8. Self-Attention v.s. CNN"></a>8. Self-Attention v.s. CNN</h2><p>我们接下来来看看Self-Attention和我们前面讲的CNN之间的关系。</p><p>我们按照上面说的，把一个pixel当做一个Vector，那么这个时候Self-Attention考虑的就是两个Pixel之间的关系</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204014652518.png" alt="Self-Attention考虑两个Pixel之间的关系" style="zoom: 67%;"></p><p>而CNN则是只考虑一个Receptive Field范围内的input</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204014801024.png" alt="CNN考虑一个Receptive Field内的关系" style="zoom:67%;"></p><p>因此，CNN就是简化版的Self-Attention，只会学习一个Receptive Field内的关系（Attention Score）。反过来说，Self-Attention是升级版的CNN，其Receptive Field是可以自己学的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204015014710.png" alt="CNN与Self-Attention的关系" style="zoom:67%;"></p><p>更下详细的解释可以在这篇paper中看到：<a href="https://arxiv.org/abs/1911.03584">On the Relationship between Self-Attention and<br>Convolutional Layers</a>。这篇Paper中以严谨的数学证明了Self-Attention是CNN的超集，而对Self-Attention加以适当的限制，其就退化为了CNN，并且训练得到的结果一致</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204015152148.png" alt="Self-Attention v.s. CNN" style="zoom:67%;"></p><p>我们前面说过，可以表示更大的Function Set的模型相比于小的模型更加难Train，但是可能会存在更优的参数。因此对于CNN和Self-Attention来说，就是Self-Attention比CNN更加难train，但是如果Train的好了最后性能有可能由于CNN。</p><p>而实验是支持这个理论的，在数据量比较小的时候，CNN轻易的就可以得到很好的表现，可是随着数据量的增加，最终Self-Attention的模型的表现超过了CNN</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204015704433.png" alt="支持上面理论的实验结果" style="zoom: 67%;"></p><h2 id="9-Self-Attention-v-s-RNN"><a href="#9-Self-Attention-v-s-RNN" class="headerlink" title="9. Self-Attention v.s. RNN"></a>9. Self-Attention v.s. RNN</h2><p>我们最前面说过，可以接受边长输入的模型除了Self-Attention以外还有RNN。</p><p>RNN有一个Memory，然后RNN的block每次吃Memory和input得到更新的Memory，然后对更新的Memory通过一个FC得到输出。</p><p>而这个Memory又称为Hidden Vector，因此RNN传递Sequence的信息就是通过Hidden Vector在RNN内部的传递。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204020230330.png" alt="Recurrent Neural Network" style="zoom:67%;"></p><p>而RNN和Self-Attention干的事情是一模一样的。两者的input和output都是Sequence</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204020544843.png" alt="RNN和Self-Attention干的事情是一样的" style="zoom:67%;"></p><p>可以有一个问题就是，RNN只考虑了从前往后的Context，而Self-Attention则是考虑了前后的Context，不过这个问题RNN其实可以解决。其次RNN是需要前一个更新完的Memory，因此RNN是无法并行计算的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204021059947.png" alt="RNN无法做到平行计算" style="zoom:67%;"></p><p>而且，RNN还存在遗忘的问题，就是第一个input的Context在中间已经被更新好几次了，所以计算到最后一次的时候都已经遗忘的差不多了，因此后面的input很难会考虑到很前面的Context，而这问头对于Self-Attention来说就不成立</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204021229150.png" alt="RNN因为遗忘很难考虑奥前面的Context" style="zoom:67%;"></p><p>因此现在更加常用的就是Self-Attention，虽然Self-Attention更难Train。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204021217637.png" alt="Self-Attention Wins" style="zoom:67%;"></p><p>现在其实也有文章在讨论RNN和Self-Attention的关系，例如这篇文章：<a href="https://arxiv.org/abs/2006.16236">Transformers are RNNs: Fast Autoregressive Transformers with Linear Attention</a></p><h2 id="10-To-Learn-More"><a href="#10-To-Learn-More" class="headerlink" title="10. To Learn More"></a>10. To Learn More</h2><p>最后，关于Self-Attention其实有非常非常多的变形，因此有很多的Paper对其进行研究，例如减少Self-Attention的计算量等等。针对Self-Attention不同的缺点，就有不同的Paper来进行研究，因此构成了关于Self-Attention非常多的研究。</p><p>下面就是两篇关于Self-Attention的综述文章</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220204022237069.png" alt="两篇关于Self-Attention的综述文章" style="zoom:80%;"></p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
            <tag> Self-Attention </tag>
            
            <tag> Attention </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-7: Convolutional Neural Network (CNN)</title>
      <link href="/2022/02/01/li-hong-yi-ml2021-spring-7-convolutional-neural-network/"/>
      <url>/2022/02/01/li-hong-yi-ml2021-spring-7-convolutional-neural-network/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是Machine Learning 2021 Spring 第七节课的笔记，本节课主要讲解了Neural Network架构中的Convolutional Neural Network。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202093153305.png" alt="第七节课：Conolutional Neural Network (CNN)"></p><h1 id="李宏毅ML2021-Spring-7-Convolutional-Neural-Network-CNN"><a href="#李宏毅ML2021-Spring-7-Convolutional-Neural-Network-CNN" class="headerlink" title="李宏毅ML2021-Spring-7: Convolutional Neural Network (CNN)"></a>李宏毅ML2021-Spring-7: Convolutional Neural Network (CNN)</h1><p>从本节课开始，就将开始讲解Neural Network的架构，而本节课将讲解Neural Network中一种专门为图像相关任务设计的Neural Network的架构（Architecture）：Convolutional Neural Network。</p><p>本节课将会讲解CNN这样的Neural Architecture的设计背后的原理，以及为什么不同的Network的架构可以让网络的结果更好。</p><h2 id="1-Backgroud-Image-Classification"><a href="#1-Backgroud-Image-Classification" class="headerlink" title="1. Backgroud: Image Classification"></a>1. Backgroud: Image Classification</h2><p>CNN是专门为图像相关的任务设计的Neural Network的架构，因此我们在讲解CNN的时候就需要一个Image的任务来作为Context。</p><p>我们最终选择的Context就是Image Classification任务，即图像分类任务。</p><h3 id="1-Image-Classification-Basics"><a href="#1-Image-Classification-Basics" class="headerlink" title="1. Image Classification Basics"></a>1. Image Classification Basics</h3><p>图像分类这个任务说的其实就是我们现在给Model一张图片，Model可以告诉我们这个图片里面东西的类别，例如下面我们希望图片在经过Model之后它能够告诉我们这张图片的类别，或者说图片中的物体的类别是猫</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202094600208.png" alt="Image Classification"></p><p>因为图像是一个二维栅格图，因此图像的大小，或者说分辨率（Resolution）也会有影响，例如对于Lena来说，低分辨率的图片看起来要模糊很多，而在极限情况下，假设分辨率只有3*3，那么很有可能什么我们人类什么都分辨不出来，更何况机器了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202095334195.png" alt="不同分辨率的Lena"></p><p>因此，为了简化问题的讨论，我们假设图像都是一样的size（resolution），都是100*100的。而在实践中，有的人会把图像rescale到同一个大小，而有的人用专门的模块来处理resolution的问题，让网络可以接受不同size的input。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202095527322.png" alt="假设都是100*100的图像"></p><p>而分类这件事情我们在前面就已经讲过了，因此对于图像分类而言，其本质也是一个分类任务，因此我们的label取的也是class的one-hot vector，而Model的输出也是one-hot vector。使用的Loss Function是label和output的Cross-Entropy/Negative Log Likelihood（NLL）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202100348906.png" alt="Image Classification"></p><h3 id="2-Image-to-vector"><a href="#2-Image-to-vector" class="headerlink" title="2. Image to vector"></a>2. Image to vector</h3><p>我们上面介绍了图像分类的基础知识，那么接下来一个问题就是，我们需要把图像转变为一个可以量化的值。在前面说过，不论是Neural Network也好还是其他的Machine Learning的Algorithm，我们都需要把一个object数值化为一个向量或者一个矩阵。这样我们的Learning Algorithm才可以利用。因此，我们其实也需要把一个图像转换为一个可以量化的值。</p><p>对于电脑来说，一张图像是一个3维的tensor。注意，tensor指的是维度大于二维的矩阵。而这三个维度分别是：height、width和channel。而一个pixel的颜色可以用红、绿、蓝三种颜色表示，因此三个channel分别指的就是red、green和blue</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202101626433.png" alt="计算机内部一张图像是三个Channel"></p><p>然后我们就可以把这张图片的三个Channel的matrix拉成一个vector，然后拼接在一起，就得到了最后的vector。这个vector中每一个Dimension就是对应位置的pixel的表示的光的强度。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202102010737.png" alt="Image to vector"></p><h2 id="2-Fully-Connected-Neural-Networks"><a href="#2-Fully-Connected-Neural-Networks" class="headerlink" title="2. Fully Connected Neural Networks?"></a>2. Fully Connected Neural Networks?</h2><p>我们前面已经讲过了Fully Connected Neural Network了，而全连接的网络的input是一个vector，因此我们其实可以直接把表示一个图片的vector丢给全连接网络即可。</p><p>我们假设第一层的输出是有1000个Neuron，那么全连接网络的图像如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202103206035.png" alt="全连接来进行分类"></p><p>可是这样做的一个问题就是，因为是全连接，所以input的vector的每一个Dimension都和100个Neuron相连，因此我们计算一下就会发现，这样做的话参数的数量实在是太多了。</p><p>而参数多就会带来两个问题（参考前面网络训练攻略）：</p><ul><li>参数太多的话就会非常难Train，表现出来即在Training Set上loss大且在Testing Set上loss也大，即Optimization失败</li><li>如果Train出来了，非常容易Overfitting，表现出来就是Training Set上loss小但在Testing Set上loss大</li></ul><p>因此，我们自然就会问真的需要使用全连接网络来进行分类么？</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202103520204.png" alt="真的有必要使用全连接网络么？"></p><p>那么接下来，我们就对图像进行观察，以获得Domain Knowledge，以指导我们进行更好的完成图像得任务</p><h2 id="3-Observations-and-Simplifications"><a href="#3-Observations-and-Simplifications" class="headerlink" title="3. Observations and Simplifications"></a>3. Observations and Simplifications</h2><h3 id="1-Observation-1-Pattern-Recognition"><a href="#1-Observation-1-Pattern-Recognition" class="headerlink" title="1. Observation 1: Pattern Recognition"></a>1. Observation 1: Pattern Recognition</h3><p>对于图像的任务来说，我们就会想说网络里的每个神经元学的是不是图片中的pattern？</p><blockquote><p><strong>什么是模式（Patter）？</strong></p><p>模式指的就是现实世界（人感知到的世界）或者说人造的设计、抽象思想中的<strong>规律</strong>。所以模式识别指的其实就是规律的识别</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202105225302.png" alt="维基百科上对模式的介绍"></p></blockquote><p>例如对于下面识别鸟的网络来说，有可能有的Neuron负责识别鸟嘴，有的神经元负责眼镜而有的神经元负责鸟爪。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202105414722.png" alt="第一个猜想：网络中的神经元负责识别图像中的Pattern"></p><p>那么我们为什么会这样认为呢？因为类比于人类的大脑，我们人在看到了一张图像后对其进行分类、识别的时候也是进行了模式的提取，例如下面的图。</p><p>我们第一眼可能会把这张图片认成鸟，为什么呢，因为我们第一眼看到这张图片就会发现鸟嘴和鸟眼，所以就以为它是鸟；直到我们更仔细的观察下，发现了猫的另外一只眼镜和猫嘴、鼻子，所以我们才会明白过来这张图片是一个猫。</p><p>那么鸟嘴和鸟眼就是一开始比较明显的、易于抽取的Pattern，而另外一只眼睛和鼻子、嘴都是不太容易抽取的Pattern，我们需要第二眼（更仔细的观察）才能够抽取到。</p><p>所以我们就会有上面网络中的神经元，每个学习的其实都是不同的Pattern。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202110220850.png" alt="被当做鸟的猫"></p><p>因此，根据这个观察我们就会发现，其实没有必要样一个Nueron看到整个图片，因为反正也是抽取特征，只让一个Neuron看图像中的一小部分就可以了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202111138506.png" alt="只让一个神经元看图像中的一小部分就可以了"></p><h3 id="2-Simplification-1-Receptive-field"><a href="#2-Simplification-1-Receptive-field" class="headerlink" title="2. Simplification 1: Receptive field"></a>2. Simplification 1: Receptive field</h3><p>根据我们的观察，我们就可以做出来第一个对全连接网络的简化，原来是让一个Neuron看完整个图像，然后再得到一个输出，而现在让一个神经元只看一部分区域，就得到一个输出。这样的相当于这个神经元只会关注图像中的这一小部分，提取该部分中的Pattern。</p><p>而我们在图像中取一个小范围的区域，称为Receptive Field。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202141543963.png" alt="Simplification 1: Receptive Field" style="zoom:67%;"></p><p>然后我们把这个Receptive Field拉成一个向量，丢给一个Neuron，让它计算得到一个output即可。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202141946110.png" alt="一个Neuron现在只看一个Receptive Field范围的图片" style="zoom:67%;"></p><p>此外，不同的Receptive Field可以是不同的Neuron来计算，例如下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202142436527.png" alt="不同的Receptive Field可以是不同的Neuron来计算" style="zoom:67%;"></p><p>而Receptive Field之间也是可以重叠的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202142538840.png" alt="Receptive Field之间可以是重叠的" style="zoom:80%;"></p><p>即便是用一个Receptive Field，也可以用多个不同的Neuron来计算，因为不同的Neuron提取到的特征是不同的，而一个区域内的特征往往是很多的，因此完全可以用多个Neuron来计算一个Receptive Field的Pattern</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202143227006.png" alt="Receptive Field可以重叠也可以具有多个Neuron" style="zoom: 80%;"></p><p>所以，Receptive Field其实没有那么多的限制，具体的选取都是我们自己来定的，所以我们可能会想：</p><ul><li>不同的Neuron的Receptive Field大小可不可以不一样？</li><li>Receptive Field可不可以只包含某个/某些channel而不用包含全部的channel？</li><li>可不可以用不是正方形的Receptive Field？</li></ul><p>以上问题的答案都是可以的，我们甚至可以让一张图像上固定只有左上角、右上角、左下角和右下角四个Receptive Field。当然，这样做的效果不一定会比较好。我们得看这些想法背后有没有合理的假设。例如有没有Pattern只是固定的出现在四个角</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202144310201.png" alt="image-20220202144310201"></p><h3 id="3-Classical-Receptive-Field"><a href="#3-Classical-Receptive-Field" class="headerlink" title="3. Classical Receptive Field"></a>3. Classical Receptive Field</h3><p>虽然我们说Receptive Field的设计是由我们随心所欲的设定的，我们还是介绍一下Receptive Field经典的设置。</p><p>第一个设置就是一个Receptive Field包含所有的channel。那么这样的话我们说一个Receptive Field就不用说他的Channel数了，只需要说一个Receptive Field高和宽即可。一个Receptive Field的高和宽称为Kernel Size</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202160837827.png" alt="Setting 1: Kernel Size &amp; All Channel" style="zoom:67%;"></p><p>一般来说，Kernel Size设的都是3*3的，像7*7和9*9这样的Kernel都是比较大的了。可是这样的话我们就会有一个问题，就是有的Pattern是不是一个3*3的Receptive Field装不下，我们这样做的话就是假设绝大部分Pattern都是在3*3这个范围内的，而必定有一些大的Pattern会被割裂开。关于这个问题等一下会讲</p><p>第二个设置就是同一个Receptive Field会有多个神经元来观察它，例如64个或者128个</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202153935610.png" alt="Setting 2: Miltiple Neuron" style="zoom: 67%;"></p><p>上面的两个setting都是针对一个Receptive Field的，那么针对多个Receptive Field，我们有下面的第三个setting。</p><p>我们会把左上角的Receptive Field向右移动一点，然后形成一个新的Receptive Field。而这个移动的距离称为stride。stride也是一个我们自己决定的Hyper-parameter。stride一般不会设置的很大，往往都是1或者2，因为如果取得太大的话，那么会漏掉很多的Pattern</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202154426474.png" alt="Setting 3: Stride" style="zoom:67%;"></p><p>第四个setting是随着滑动到过程中产生的。随着我们Receptive Field向右滑动的时候，有可能会超出边界，即最后一个区域的边长和Kernel Size不相同。</p><p>那么这个时候我们就会进行padding。padding指的就是就是给图片的周围补0。补的值也可以是整张图片里所有pixel强度的平均值，或者说用边上的数字来补，这些各种补值的方式都可以，反正只需要最后补完了之后形状是符合计算要求的形状即可。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202155444485.png" alt="Settring 4: Padding" style="zoom:67%;"></p><p>最后一个Setting就是所有的Receptive Field在一个cover住了整张图片。因为Receptive Field不仅可以横向移动，还可以在竖直方向移动。所以最后图片上的每一个Pixel都会在一个或者多个Receptive Field里面</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202161211514.png" alt="Setting 5: Covering All Pixels" style="zoom: 80%;"></p><h3 id="4-Observation-2-Spatial-Shifts-of-Patterns"><a href="#4-Observation-2-Spatial-Shifts-of-Patterns" class="headerlink" title="4. Observation 2: Spatial Shifts of Patterns"></a>4. Observation 2: Spatial Shifts of Patterns</h3><p>我们对图片的第二个观察就是，同一个Pattern可能会出现在一张图片的不同的位置，例如鸟嘴这个Pattern</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202161503136.png" alt="同一个Pattern可能出现在不同的位置" style="zoom:67%;"></p><p>按照上面讨论的Classic的CNN的设置，这个现象其实是没有问题的。因为不论是左上角还是中心的鸟嘴，都必定落在一个Receptive Field里，而一个Receptive Field会有多个Neuron来抽取其中的Pattern，因此在左上角的鸟嘴和中间的鸟嘴所在的Receptive Field里，都会有一个Neural来抽取鸟嘴这个Pattern。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202161955478.png" alt="不同的Receptive Field会有抽取相同/类似Pattern的Neuron" style="zoom:67%;"></p><p>因此同一个Pattern在空间上的Shift其实并不会导致Pattern可能无法被识别出来。可是我们就有一个疑问了，那就真的有必要让每个Receptive Field都有一个抽取类似特征的Neuron么？</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202163119124.png" alt="每个Receptive Field独立的Neuron是否是必须的？" style="zoom: 67%;"></p><p>这样的重复会不会导致参数量太多了，或者说参数存在冗余</p><h3 id="5-Simplification-2-Parameter-Sharing"><a href="#5-Simplification-2-Parameter-Sharing" class="headerlink" title="5. Simplification 2: Parameter Sharing"></a>5. Simplification 2: Parameter Sharing</h3><p>那么为了解决我们上面观察到的问题，我们就想减少这种参数量的冗余，既减少重复的Neuron。为此，我们就可以让不同的Neuron之间共享参数</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202164517466.png" alt="Simplification 2: 不同的参数之间共享参数" style="zoom:67%;"></p><p>所谓共享参数，意思就是不同的两个Receptive Field共享同一个Neuron的参数。即假设每个Receptive Field都有64个Neuron，那么就让所有的Receptive Field的第32个Neuron的参数保持一样。不过由于输入不同，因此即便是参数相同，最后得到的输出的值也不同</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202164924225.png" alt="Sharing Parameter的计算过程" style="zoom:67%;"></p><h3 id="6-Classic-Parameter-Sharing"><a href="#6-Classic-Parameter-Sharing" class="headerlink" title="6. Classic Parameter Sharing"></a>6. Classic Parameter Sharing</h3><p>类似于Receptive Field，我们下面讲讲一般大家是怎么样进行Parameter Sharing的。</p><p>一般来说，每个Receptive Field都会有多个Neuron。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202165144174.png" alt="每个Receptive Field都有很多的Neuron" style="zoom: 67%;"></p><p>那么传统的Parameter Sharing的方式就是让同一个位置的Neuron之间共享参数。而每一个共用参数的Neuron又称为filter</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202165910476.png" alt="传统的Parameter Sharing的方式" style="zoom: 67%;"></p><h2 id="4-Benefits-of-Convolutional-Layer"><a href="#4-Benefits-of-Convolutional-Layer" class="headerlink" title="4. Benefits of Convolutional Layer"></a>4. Benefits of Convolutional Layer</h2><p>我们上面已经讲解完了Convolution的计算，我们接下来就讲讲Convolution计算的好处。</p><p>首先对于全连接网络来说，他的模型的参数量比较多，因此比较Flexible，学习能力强，但是非常难train，容易Optimization失败，而且train出来也容易Overfitting。</p><p>因为参数比较多，因此能够表示的模型的范围很广，因此我们用一个大的Set来表示Fully Connected Layer的Function Set</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202171310903.png" alt="Fully Connected Layer的Function Set" style="zoom:67%;"></p><p>然后接下来，我们首先对Fully Connected Layer做出第一个限制，即让每个Neuron只看一个Receptive Field范围的input，所以减少了参数量，那么对应的可以表达的Function Set就会小很多</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202171737979.png" alt="第一个限制: Receptive Field" style="zoom:67%;"></p><p>接下来我们再进行限制，添加参数共享，让不同的Neuron的参数相同</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202171943159.png" alt="第二个限制: Parameter Sharing" style="zoom: 67%;"></p><p>经过这样的两个限制，我们的全连接层就成为了卷积层</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202183913693.png" alt="卷基层" style="zoom:67%;"></p><p>而参数越少，其实就意味着模型能够表达的Function Set是有限的，而结合我们提出限制的Domain Knowledge，就能直到Convolutional Layer的Model Bias是很大的。那么我们就会问，前面不是说过Model Bias不是是导致Model性能差的原因么？那卷积层现在又Model Bias了，那么该怎么办呢？</p><p>其实Model Bias不一定是一件坏事，只有在我们的Model不足以学习到好的Function的时候才是坏事情，而对学习能力强的Model，对其进行限制以使得其学习能力变弱，从而变得更加易于学习，而且如果能够保证最好的Function仍然在我们限制之后的Function Set中的话，那么就意味着我们所引入的Model Bias其实是好的，是有助于我们完成任务的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202185432107.png" alt="Model Bias帮助网络更加适合某一类任务"></p><h2 id="5-Another-Story-filter"><a href="#5-Another-Story-filter" class="headerlink" title="5. Another Story: filter"></a>5. Another Story: filter</h2><p>我们上面通过从Model的学习能力的角度出发，介绍了CNN，我们接下来再从另外一个角度出发，介绍另外一种观点下的CNN，即filter视角下的CNN。</p><h3 id="1-Neuron-as-filter"><a href="#1-Neuron-as-filter" class="headerlink" title="1. Neuron as filter"></a>1. Neuron as filter</h3><p>在filter视角下看来，网络中的每一个神经元都是一个filter（滤波器）。</p><p>所谓过滤指的是让某些物质通过而让某些物质无法通过，因此对于图像而言，这里的filter（过滤器、滤波器）指的是让某些Pattern通过（计算后得到的数值大），而让其他的值无法通过。</p><p>因此，在Filter视角看来，每一个神经元就是提取一个指定的特征</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202185721002.png" alt="filter视角小每一个滤波器提取一个特征" style="zoom:67%;"></p><h3 id="2-How-filter-works"><a href="#2-How-filter-works" class="headerlink" title="2. How filter works"></a>2. How filter works</h3><p>那么我们接下来就来看看filter是如何提取特征的。在一开始的时候，网络里的filter的参数都是随机初始化的。我们最后通过Gradient Descent来得到最优的参数。那么假设我们现在已经得到最终的filter，及我们已经知道最终的filter里的参数具体的值。</p><p>为了简单起见，我们假设只有一个channel，不过多个channel的情况是一样的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202210714239.png" alt="一开始参数的值是未知的，我们假设已经知道了参数的值" style="zoom:67%;"></p><p>那么我们首先把filter放到左上角相乘，然后得到第一个值</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202211354930.png" alt="计算得到第一个值" style="zoom:50%;"></p><p>然后我们把这个filter向右移动一点再相乘得到第二个值，移动的距离称为stride。这里我们的stride设置的是1，所以我们把filter向右移动一格，然后相乘得到第二个值</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202212340045.png" alt="计算得到第二个值" style="zoom:50%;"></p><p>然后我们依次类推，直到计算完第一行所有的值，然后我们把filter向下移动一格，继续计算</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202213244568.png" alt="filter向下移动一格" style="zoom:50%;"></p><p>直到最后，我们让这个filter在整个图像上滑动一次，计算得到了全部的值</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202213420049.png" alt="filter在图像上滑动过一次" style="zoom:50%;"></p><p>因为我们的filter的特点是主对角线都是1，因此我们这样的filter计算的时候，如果图像上对应的区域的也是主对角线上的元素都是1的话，那么计算得到的值就会很大。</p><p>所以我们就会说，针对这个filter，图片的左上角和左下角出现了filter 1对应的Pattern</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202214315683.png" alt="filter 1提取对应的Pattern" style="zoom:50%;"></p><p>对于第二个filter，我们进行同样的操作，就得到了第二组数值</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202214902925.png" alt="filter 2提取对于的Pattern" style="zoom:50%;"></p><p>因此，现在对于一张图像来说，我们有几个filter，就会得到几组数字。因为filter是提取的特征（feature），因此这些值也称为feature map</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202215224238.png" alt="一组filter得到一个feature map" style="zoom: 67%;"></p><h3 id="3-feature-map"><a href="#3-feature-map" class="headerlink" title="3. feature map"></a>3. feature map</h3><p>所以原始图像在通过一个Convolutional Layer之后，就成了一个有64个Channel的feature map。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202215518247.png" alt="通过第一层之后得到了64个Channel的通道图" style="zoom: 67%;"></p><p>我们可以把这个64个Channel的feature map视为一张图像，那么我们下面就可以继续接一个Convolutional Layer。</p><p>接下来的这个Convolutional Layer，他的filter的形状是3*3*64形状的filter</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202221925713.png" alt="第二个Convolutional Layer的filter的形状" style="zoom: 67%;"></p><h3 id="4-Larger-Receptive-field"><a href="#4-Larger-Receptive-field" class="headerlink" title="4. Larger Receptive field"></a>4. Larger Receptive field</h3><p>我们前面说了一个问题，就是我们的filter只有3*3的大小，会不会不能看到size比较大的Pattern。那么我们现在来回答这个问题。</p><p>对于第二层的filter来说，我们假设他的大小也是3*3，则其计算feature map上的一个3*3大小的位置，如右下角的图所示。那么现在，对于第二层左上角的这个数值，对应到原始图片上其实是一个3*3的范围，同理，右下角的这个值对应在原始图像上也是一个3*3范围。</p><p>所以，现在第二层的一个3<em>3的Receptive Field就表示了原来图像上5\</em>5范围的区域。因此随着Network层数的加深，同一个filter能够看到的Receptive Field就越来越大。</p><p>因此，越深层的filter就能够提取到越高级的feature/Pattern，所以我们不必担心比较大的Pattern提取不到，因为浅层的filter因为Receptive Field的限制确实无法提取，但是深层的filter是可以提取到的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202223020505.png" alt="越深层的filter的Receptive Field越大"></p><h2 id="6-Comparison-of-Two-Stories"><a href="#6-Comparison-of-Two-Stories" class="headerlink" title="6. Comparison of Two Stories"></a>6. Comparison of Two Stories</h2><p>我们上面讲了两个CNN的故事，即从两个不同的角度出发，解释了CNN的两个基本操作，我们接下来就来比较一下这两个故事。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202225220472.png" alt="Shared Neuron对应Filter" style="zoom: 67%;"></p><p>我们在第一个故事中，是以固定的Receptive Field、共享的参数来进行解释的，而第二个故事则是固定的filter，在图像上滑动。</p><p>那么第一个版本的故事中shared parameter的Neuron其实就是第二个故事中的filter。</p><p>其次，我们第一个故事中，相同的Neuron进行Parameter Sharing的过程就对应了filter在图像上进行滑动。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202225919970.png" alt="Parameter Sharing对应filter滑动" style="zoom: 67%;"></p><p>最后，filter在图像上滑动的过程其实就对应了卷积的计算，我们把积分的式子运用到这里就会发现这里其实就是一个卷积的式子，因此卷积层才称为卷积层</p><p>所以，我们上面讲的两个故事，其实就是同一个故事</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202230659725.png" alt="They are the same story"></p><h2 id="7-Pooling"><a href="#7-Pooling" class="headerlink" title="7. Pooling"></a>7. Pooling</h2><p>最后，对于CNN来说，前面讲的两个Simplification是必要的，其实还有第三个非常常用的，但是不是必要的Simplification，那就是Pooling。</p><h3 id="1-Observation-3-Subsampling-don’t-hurt"><a href="#1-Observation-3-Subsampling-don’t-hurt" class="headerlink" title="1. Observation 3: Subsampling don’t hurt"></a>1. Observation 3: Subsampling don’t hurt</h3><p>我们对图像进行的第三个观察就是我们对图像进行下采样的时候并不会改变图像中原有的物体。例如下面我们把所有偶数的列和行去掉，图像成了原有图像的的1/4，但是并没有改变其中的鸟。</p><p>而减小图片的大小能够带来的一个显著地好处就是能够降低图片的大小，进而减少需要学习的参数量</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202232158498.png" alt="Observation 3"></p><h3 id="2-Pooling-Max-Pooling"><a href="#2-Pooling-Max-Pooling" class="headerlink" title="2. Pooling: Max Pooling"></a>2. Pooling: Max Pooling</h3><p>Pooling的方式有很多，可以是min pooling、max pooling、mean pooling等等，我们这里用Max Pooling。</p><p>Pooling本身只是对图像进行降采样的操作，因此是不包含任何learnable的参数，所以pooling有的时候又被称为operator，类似于Sigmoid、Relu等激活函数一样，都是operator。</p><p>假设我们现在通过filter计算得到了feature map之后得到下面的feature map</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202232951918.png" alt="before max pooling" style="zoom:50%;"></p><p>那么具体来说，pooling的操作就是按照2*2的分组内，取最大的来代表这四个值。这里的分组的大小、Pooling计算值的方式都是看我们自己的。</p><p>而Pooling是针对每个Channel内部的，因此Pooling只会改变feature map的height和width，并不会改变Channel的数量</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202233128888.png" alt="Max Pooling" style="zoom:67%;"></p><p>因此，在一个一般的CNN的网络里，我们在Convolution之后接一个Pooling，如下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202233620213.png" alt="一般CNN的结构，Convolution之后接Pooling" style="zoom: 67%;"></p><p>最后，Pooling在带来参数量减少的同时，其实还是有可能会给我们模型的最终表现带来伤害的，因为如果我们需要检测非常微小的东西的话，Pooling可能就会把这个东西给丢掉。而Pooling又不是必须的，因此现在有的工作中的网络就是完全抛弃了Pooling，进行全卷积。</p><p>而完全抛弃Pooling得益于现在计算能力越来越强，足够支撑我们不用使用Pooling来减少参数量。</p><h2 id="8-The-whole-CNN"><a href="#8-The-whole-CNN" class="headerlink" title="8. The whole CNN"></a>8. The whole CNN</h2><p>上面我们讲解完了CNN相比全连接的三个Simplification以及对应的两个层：Convolution和Pooling</p><p>那么我们CNN在一开始就是Convolution + Pooling，Convolution + Pooling这样重复几次</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203000246891.png" alt="CNN前半部分" style="zoom: 67%;"></p><p>因为我们现在是分类任务，因此接下来我们把最终的feature map flatten得到一个vector，然后传入分类的全连接和softmax进行分类</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203000727697.png" alt="CNN的完整结构" style="zoom: 67%;"></p><p>这个就是一个经典的CNN的结构，前面用Convolution来提取特征，后面用全连接来进行分类。</p><h2 id="9-CNN-Applications"><a href="#9-CNN-Applications" class="headerlink" title="9. CNN Applications"></a>9. CNN Applications</h2><p>到这里，我们其实已经讲完了CNN的全部的结构，因此下面我们就来讲讲CNN的运用。</p><h3 id="1-Playing-Go"><a href="#1-Playing-Go" class="headerlink" title="1. Playing Go"></a>1. Playing Go</h3><p>CNN的第一个运用就是下围棋。</p><p>我们说下围棋模型要给出来下一步的位置，因此就是一个19*19的分类任务。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203001130320.png" alt="下围棋模型的Framework" style="zoom:67%;"></p><p>那么接下来的任务就是要把棋盘数值化，这个其实也不是很困难，我们完全可以把一个棋盘表示成一个19*19维的向量。如果这个格子上有黑子，那么就是1，白子则是-1，没有子则是0。因此，一个全连接的网络当然可以用于下象棋</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203001920742.png" alt="全连接网络完全可以胜任下围棋" style="zoom:67%;"></p><p>然而就像我们前面说的，全连接的网络的潜力很大，但是不好train。因此相比于用全连接网络，卷积网络的表现其实更好。</p><p>我们把一个棋盘看成一张19*19分辨率的图片，然后Channel的话可以是单纯的黑白无子的三个channel。不过在AlphaGo中，棋盘是一个48个Channel的图片。这48个channel不仅包括黑白灰的棋子的表示，还有周围是不是有其他颜色的棋子、是否被叫吃等等这些被围棋高手设计出来的standard</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203002713618.png" alt="AlphaGo中使用49个Channel的CNN" style="zoom:67%;"></p><p>我们说CNN是专门为图像识别设计的，而CNN又能够用于下围棋。那么其实就意味着，图像和围棋其实是有共同之处的</p><p>具体来说，都有：</p><ul><li>很多重要的Pattern都是出现在某个局部，例如为围棋里的吃，因此AlphaGo里第一层的Kernel的size取得是5*5</li><li>其次，同一个Pattern可能会出现在不同的位置，可以出现在左上角，也可以出现在右下角。</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203002914750.png" alt="图像和围棋有共同之处" style="zoom: 67%;"></p><p>然而需要注意的一个不同就是，对于image来说，我们做pooling的话其实是不会改变object的，可是对棋盘进行Pooling的话就不对了，棋局就变了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203003305785.png" alt="Pooling用在围棋上会有问题"></p><p>那么AlphaGo中到底是则么样的呢？其实AlphaGo中就没有使用Pooling</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203003647760.png" alt="AlphaGo没有用Pooling" style="zoom:80%;"></p><p>所以这就给我们了一个启示，就是神经网络的设计存乎一心。不是别人都用了Pooling我们就一定要用Pooling，我们的结构的设计时一定要看这样设计是不是有利于我们的任务的</p><h3 id="2-More-Application-Speech-amp-Natural-Language-Processing"><a href="#2-More-Application-Speech-amp-Natural-Language-Processing" class="headerlink" title="2. More Application: Speech &amp; Natural Language Processing"></a>2. More Application: Speech &amp; Natural Language Processing</h3><p>除了下围棋以外，CNN还有更多的应用，例如语音识别和自然语言处理。</p><p>不过关于这个我们就不深入讲解了，想要了解的话去看Paper即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203004244644.png" alt="More Application"></p><h2 id="10-To-Learn-More"><a href="#10-To-Learn-More" class="headerlink" title="10. To Learn More"></a>10. To Learn More</h2><p>最后，CNN其实有一个问题就是它对于spatial的Transformation是有invariance的，但是如果我们对图片进行rescale的话，CNN就没有办法了。这个其实是非常反直觉的，因为在我们人看来一张图片放大缩小都是一样的。</p><p>这个其实也很好理解，对于CNN来说，放缩之后原有的Pattern就变了，因此这个时候就不行了。所以我们为什么说需要使用data augmentation。</p><p>不过也有一个特殊的结构可以实现对scale的invariance，即在网络中添加spatial transformer layer即可实现scale invariance。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220203004716170.png" alt="To Learn More: Spatial Transformer Layer"></p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
            <tag> CNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>炼丹手记</title>
      <link href="/2022/02/01/shen-du-xue-xi-lian-dan-shou-ji/"/>
      <url>/2022/02/01/shen-du-xue-xi-lian-dan-shou-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是我在炼丹的过程中的一些心得</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220202001104734.png" alt="Pytorch官网"></p><h1 id="炼丹手记"><a href="#炼丹手记" class="headerlink" title="炼丹手记"></a>炼丹手记</h1><p>因为目前是一个本科生，所以经常需要balance课程、科研、竞赛、写代码……所以一个问题就是我经常一段时间忙于做事情A，一段时间忙于做事情B。</p><p>这个对于炼丹其实是不太好的，因为炼丹的经验会随着时间的流逝而遗忘，因此决定还是把自己的炼丹时候的心得都记录下来，这样的话方便以后回顾、总结、提高。</p><p>此外，因为我用的是Pytorch，所以有一些关于Pytorch的心得，这部分工具的心得可能不是很适合TensorFlow用户，因此略掉就好。</p><h2 id="1-Pytorch读取Numpy"><a href="#1-Pytorch读取Numpy" class="headerlink" title="1. Pytorch读取Numpy"></a>1. Pytorch读取Numpy</h2><p>有的时候数据是以numpy的npy或者npz形式保存的，这个时候直接使用<code>np.load</code>就可以读取了。可是读取完了之后从numpy的ndarray转成torch的tensor的时候会有问题。</p><p>具体来说就是首先是数据类型的问题：</p><ul><li>numpy里转数据类型不如pytorch方便</li><li>pytorch有的时候在计算的时候是需要统一数据类型为float的，因此用numpy转换数据类型和用torch转换数据类型混着来容易分不清楚</li><li>有的时候pytorch计算有需要LongTensor，例如用交叉熵/负对数似然损失函数，因为去nature log的时候数值的范围比较大</li></ul><p><strong>因此，如果数据是numpy的文件的话，读完了之后直接转torch的tensor再进行后续操作</strong></p><p>读的时候<code>np.load</code>，而<code>torch.from_numpy</code>会直接帮我们完成从<code>np.ndarrary</code>到<code>torch.Tensor</code>的转换，转换过程中保持数据格式、内存对齐等属性不变，然后我们再用<code>torch.Tensor.long()</code>之类的方法转换</p><p>例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ExampleDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 类似的，还可以是</span>        long <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>file_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>long<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Pytorch使用CrossEntropy"><a href="#2-Pytorch使用CrossEntropy" class="headerlink" title="2. Pytorch使用CrossEntropy"></a>2. Pytorch使用CrossEntropy</h2><p>CrossEntropy损失函数一般用于分类任务。具体的原理就是交叉熵（Cross-Entropy）其实等价于最大化似然（Maximize Likelihood），或者说最小化对数负似然（Negative Log Likelihood），即让网络输出的分布和真实的数据的分布越相似越好。因此，交叉熵损失（Cross-Entropy Loss）其实等于负对数似然（NLL Loss）</p><p>在Pytorch中，提供了负对数似然损失函数的API，然后在其基础上又集成了softmax，就成了Pytorch中的Cross-Entropy损失函数。因此一般在分类的时候都是直接使用Cross-Entropy作为损失函数的，就避免了我们自己写softmax。</p><h3 id="1-数据类型的问题"><a href="#1-数据类型的问题" class="headerlink" title="1. 数据类型的问题"></a>1. 数据类型的问题</h3><p>但是使用Cross-Entropy的时候因为要计算Softmax，所以Pytorch要求输入的<code>target</code>是long类型的，即输入的label要求是long，输入的<code>input</code>也就是预测值是float</p><p>所以最好在读取完数据之后把<code>target</code>，也就是y转为long，y_pred转为float，即</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># train</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 注意在这里转换，如果Dataset里面以及转换了这里就不要转换了</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>        device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># zero grad</span>    self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># calculate loss</span>    output <span class="token operator">=</span> self<span class="token punctuation">.</span>network<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 注意这里要转成float和long</span>    loss<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>loss_function<span class="token punctuation">(</span>output<span class="token punctuation">.</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Gradient Descent</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Step</span>    self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>否则会出现如下的报错</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220317100142950.png" alt="没有转成long的错误"></p><h3 id="2-输入顺序问题"><a href="#2-输入顺序问题" class="headerlink" title="2. 输入顺序问题"></a>2. 输入顺序问题</h3><p>此外，除了要求转成long，计算CrossEntropyLoss的时候是要求预测值作为第一个实参，真实的label作为第二个实参，即</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># train</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 注意在这里转换，如果Dataset里面以及转换了这里就不要转换了</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>        device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># zero grad</span>    self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># calculate loss</span>    output <span class="token operator">=</span> self<span class="token punctuation">.</span>network<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 注意第一位是预测值，第二位是long的label</span>    loss<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>loss_function<span class="token punctuation">(</span>output<span class="token punctuation">,</span> y<span class="token punctuation">.</span>long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Gradient Descent</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Step</span>    self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>否则就会出现下面的错误</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220317100515724.png" alt="顺序出错的报错"></p><h3 id="3-输入维度的问题"><a href="#3-输入维度的问题" class="headerlink" title="3. 输入维度的问题"></a>3. 输入维度的问题</h3><p>对于分类问题来说，我们输入的$x$最后得到的$y_{pred}$是$[Batch, Class]$类型的数据，因此Pytoch的CrossEntropyLoss要求输入的预测值的是二维的数据。但是Pytorch却要求GroundTruth的$y$的形状是一维的，长度和$Batch$数相等，每一位表示对应的类别，即</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># train</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 注意在这里转换，如果Dataset里面以及转换了这里就不要转换了</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>        device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># zero grad</span>    self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># calculate loss</span>    output <span class="token operator">=</span> self<span class="token punctuation">.</span>network<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 注意对ground truth进行了squeeze来保证是一维的，因为dataloader里面进行了stack</span>    loss<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>loss_function<span class="token punctuation">(</span>output<span class="token punctuation">,</span> y<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Gradient Descent</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Step</span>    self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>否则会报错    </p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220317101634866.png" alt="形状出错的报错"></p><h2 id="3-训练代码调bug"><a href="#3-训练代码调bug" class="headerlink" title="3. 训练代码调bug"></a>3. 训练代码调bug</h2><p>把所有的测试代码写完了之后一般来说是没法直接开始训练的，需要调一下bug，但是这个时候因为<code>epoch</code>、<code>dataloader</code>的循环都写好了，因此如果直接调试的话可能会卡到训练部分。</p><p>这个时候可以给训练循环的这类步骤直接break掉就行了，因为的目的在于验证流程，即验证是否可以跑完流程而非开始训练，因此这个时候break掉即可。即</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor    y<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor    <span class="token comment" spellcheck="true"># train</span>    self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>            device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># zero grad</span>        self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># calculate loss</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>network<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        loss<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>loss_function<span class="token punctuation">(</span>output<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Gradient Descent</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Step</span>        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># summary in train</span>        self<span class="token punctuation">.</span>writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span>tag<span class="token operator">=</span><span class="token string">"loss/train"</span><span class="token punctuation">,</span> scalar_value<span class="token operator">=</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               global_step<span class="token operator">=</span>epoch <span class="token operator">*</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loader<span class="token punctuation">)</span> <span class="token operator">+</span> step<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 注意，调试的时候break即可</span>        <span class="token keyword">break</span>    <span class="token comment" spellcheck="true"># validation</span>    self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>val_loader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>                device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># calculate loss</span>            output <span class="token operator">=</span> self<span class="token punctuation">.</span>network<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            loss <span class="token operator">=</span> self<span class="token punctuation">.</span>loss_function<span class="token punctuation">(</span>output<span class="token punctuation">,</span> y<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># summary in validation</span>            self<span class="token punctuation">.</span>writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span>tag<span class="token operator">=</span><span class="token string">"loss/test"</span><span class="token punctuation">,</span> scalar_value<span class="token operator">=</span>loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                           global_step<span class="token operator">=</span>epoch <span class="token operator">*</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>val_loader<span class="token punctuation">)</span> <span class="token operator">+</span> step<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#同上，调试的时候break掉</span>            <span class="token keyword">break</span>    <span class="token comment" spellcheck="true"># early stop</span>    <span class="token keyword">if</span> loss <span class="token operator">&lt;</span> min_val_loss<span class="token punctuation">:</span>        min_val_loss <span class="token operator">=</span> loss        earl_stop <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>save_check_point<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        earl_stop <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> earl_stop <span class="token operator">></span> self<span class="token punctuation">.</span>early_stop_cnt<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.YELLOW}Early Stoped at epoch: {epoch}"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token comment" spellcheck="true"># print logs</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Epoch: {Fore.GREEN + Style.BRIGHT}{epoch}/{n_epoch}{Style.RESET_ALL}, "</span>        <span class="token string">"val_loss: {Fore.GREEN + Style.BRIGHT}{loss:>.5f}{Style.RESET_ALL}, "</span>        <span class="token string">"min_val_loss: {Fore.GREEN + Style.BRIGHT}{min_val_loss:>.5f}{Style.RESET_ALL}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-训练阶段Early-Stop"><a href="#4-训练阶段Early-Stop" class="headerlink" title="4. 训练阶段Early Stop"></a>4. 训练阶段Early Stop</h2><p>在训练网络的过程中，可能会出现过拟合，因此就需要用Early Stop技术来防止过拟合。判断是否过拟合的依据是看训练和验证阶段的loss曲线，但在真实训练的时候是没办法人工一直查看损失曲线的，因此我们更希望在代码里面能够进行判断。</p><p>相比于记录下来每一个epoch的性能，Early Stop其实更加简单粗暴，<strong>Early Stop指的其实就是如果网络在N个epoch中性能都没有下降，那么就停止训练</strong>。</p><p>在代码里的实现类似这样</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor    y<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor    <span class="token comment" spellcheck="true"># train</span>    self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># validation</span>    self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>val_loader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># early stop</span>    <span class="token keyword">if</span> loss <span class="token operator">&lt;</span> min_val_loss<span class="token punctuation">:</span>        min_val_loss <span class="token operator">=</span> loss        earl_stop <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>save_check_point<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        earl_stop <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span> earl_stop <span class="token operator">></span> self<span class="token punctuation">.</span>early_stop_cnt<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.YELLOW}Early Stoped at epoch: {epoch}"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-代码里使用SummaryWriter"><a href="#5-代码里使用SummaryWriter" class="headerlink" title="5. 代码里使用SummaryWriter"></a>5. 代码里使用SummaryWriter</h2><p>如果代码里使用了SummaryWriter，那么调试的时候有一个问题，就是Python是遇到报错之后就直接退出，不会运行完所有的代码。</p><p>而SummaryWriter是一个异步的服务程序，因此在使用之后是需要关闭的。如果这次调试没有关闭SummaryWriter，那么下一次调试产生的数据就会写入到这次调试的数据里去。</p><p>所以在调试阶段为了防止这个问题，可以吧SummaryWriter的关闭方法写入到类的<code>__del__</code>方法里去。<code>__del__</code>是在对象被销毁的时候运行，一般在程序运行结束（不管是正常结束还是因为异常报错）的时候，Python会自动销毁所有的对象。</p><p>因此如果我们把训练的代码写成了一个类的话，重写<code>__del__</code>方法就可以帮助我们关闭SummaryWriter</p><p>具体在代码中是这样的</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">NetworkTrainer</span><span class="token punctuation">:</span>    available_device <span class="token operator">=</span> <span class="token string">"cuda:0"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span>log_dir<span class="token operator">=</span>path2log<span class="token punctuation">)</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-高效使用tqdm"><a href="#6-高效使用tqdm" class="headerlink" title="6. 高效使用tqdm"></a>6. 高效使用tqdm</h2><p>在训练代码的时候，往往使用tqdm来给出来一个训练的进度条，例如下面</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/697264-20200723170905473-1915244785.png" alt="tqdm可视化得到的训练进度条"></p><p>然而很多时候我们都需要再输出一些内容，比如训练和验证的loss，分类的准确率这类信息。</p><p>如果我们直接print的话，就会导致tqdm的进度条断开，非常的不美观，因此我们可以使用tqdm的<code>set_description</code>或者<code>set_postfix</code>方法来设置一些训练的信息，可是这样做并不优雅，因为能够显示的信息有限。一个优雅的解决方案如下面的gif所示</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/深度录屏_x-terminal-emulator_20220317111046.gif" alt="优雅的解决方案"></p><p>即每次输出都会保证tqdm的进度条在最下面。要实现这样的效果，其实通过tqdm的另外一个方法就行了。</p><p>在输出的时候，缓冲区是被tqdm占用的，因此直接输出肯定会有问题，我们使用tqdm的write方法来让tqdm自动处理即可。例如实现上面的效果的代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_epoch<span class="token punctuation">:</span> int<span class="token punctuation">,</span> early_stop<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor        y<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor        max_acc <span class="token operator">=</span> <span class="token number">0</span>        early_stop_cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token punctuation">(</span>tt <span class="token punctuation">:</span><span class="token operator">=</span> tqdm<span class="token punctuation">.</span>trange<span class="token punctuation">(</span>n_epoch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># train</span>            <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>                x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">,</span>                                                                                          dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>                <span class="token keyword">pass</span>            <span class="token comment" spellcheck="true"># val</span>            acc <span class="token operator">=</span> <span class="token number">0</span>            all <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> step<span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>self<span class="token punctuation">.</span>val_loader<span class="token punctuation">)</span><span class="token punctuation">:</span>                    x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>                        device<span class="token operator">=</span>self<span class="token punctuation">.</span>available_device<span class="token punctuation">,</span>                        dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>                    <span class="token keyword">pass</span>                    <span class="token comment" spellcheck="true"># get acc</span>                    acc <span class="token operator">+=</span> <span class="token punctuation">(</span>y_pred<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token punctuation">)</span>                    all <span class="token operator">+=</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            self<span class="token punctuation">.</span>writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span>tag<span class="token operator">=</span><span class="token string">"acc"</span><span class="token punctuation">,</span> scalar_value<span class="token operator">=</span><span class="token punctuation">(</span>cur_acc <span class="token punctuation">:</span><span class="token operator">=</span> acc <span class="token operator">/</span> all<span class="token punctuation">)</span><span class="token punctuation">,</span> global_step<span class="token operator">=</span>epoch<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># early stop</span>            <span class="token keyword">if</span> cur_acc <span class="token operator">></span> max_acc<span class="token punctuation">:</span>                max_acc <span class="token operator">=</span> cur_acc                early_stop_cnt <span class="token operator">=</span> <span class="token number">0</span>                <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                early_stop_cnt <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># 注意，这里调用了tqdm的trange对象的write方法，其实别的对象也是可以的</span>            tt<span class="token punctuation">.</span>write<span class="token punctuation">(</span>                f<span class="token string">"Epoch [{epoch:>5d}|{n_epoch:>5d}], train_loss {train_loss:>7.4f}, val_loss {val_loss:>7.4f}, "</span>                f<span class="token string">"early_stop_cnt: [{early_stop_cnt:>5d}|{early_stop:>5d}]"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> early_stop_cnt <span class="token operator">>=</span> early_stop<span class="token punctuation">:</span>                <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-网络中含有线性层的问题"><a href="#7-网络中含有线性层的问题" class="headerlink" title="7. 网络中含有线性层的问题"></a>7. 网络中含有线性层的问题</h2><p>很多时候网络中都需要写线性层，尤其是对于分类网络或者Self-Attention的结构来说。在网络中经常出现的一个情况就是前面的层不是线性层，而后面接的是线性层。这个时候就需要注意一下特征数量的问题。</p><p>以图像分类的卷积网络为例，输入要求的形状是：$[Batch, Channel, Width, Height]$，经过前面几个用于特征提取的层之后，feature map的形状是：$[Batch, Channel<em>{new}, Width</em>{new}, Height_{new}]$。但是对于全连接层来说，他其实干的事情就是矩阵相乘，因此要求输入的形状是$[Batch,feature_num]$。所以<strong>直接把前面层的输出丢给线性层往往是会有问题的，这个时候就需要对前面层的输出进行变换</strong>。</p><p>对于上面的分类的卷积网络来说，就需要把$Batch$维度之后的$Channel<em>{new}$、$Width</em>{new}$和$Height_{new}$三个维度拉平成一个向量丢给分类网络。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>activation<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pool2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>activation<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 注意这里把后面的特征维度拉平为一个向量</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>start_dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>linear1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>activation<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>linear2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>activation<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>output<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，对于不同的网络模型，在进行操作的时候一定要注意，在经过线性层之前一定要把上一层的输入处理好。</p><h2 id="8-TensorBoard查看多次实验"><a href="#8-TensorBoard查看多次实验" class="headerlink" title="8. TensorBoard查看多次实验"></a>8. TensorBoard查看多次实验</h2><p>TensorBoard实际上是支持一次性查看多组实验的训练过程的。多组实验的结果会显示在左下角，我们点击就可以切换</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/20180726171253594" alt="TensorBoard支持查看多组实验"></p><p>但是我们自己在查看的时候，很多情况下都是左下角只有一个<code>.</code>，并且只会显示一组实验的过程。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220318160601709.png" alt="TensorBoard支持查看多组实验" style="zoom:67%;"></p><p>其实这是由于我们的路径选择的问题，TensorBoard会递归的扫描我们指定的目录下所有的文件，找到其中所有的event文件，然后把这个event文件所在的文件夹视为一个训练，因此我们其实只需要在启动TensorBoard的时候制定所有训练日志所在的父级目录即可，例如下面</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220318161426776.png" alt="制定打开父级文件即可"></p><h2 id="9-从Tensor列表中创建Tensor"><a href="#9-从Tensor列表中创建Tensor" class="headerlink" title="9. 从Tensor列表中创建Tensor"></a>9. 从Tensor列表中创建Tensor</h2><p>在Dataset读取图像的时候，进场需要进行的一个从操作就是读取图像，这个时候往往读出来的是单张图像的Tensor。我们接下来会使用一个list，来保存所有的单张图像的Tensor。在读取完接下来我们又会需要把所有的图像转换成一个大的TensorBoard，即<code>[Batch, Channel, Width, Height]</code>形状的TensorBoard。</p><p>这个时候我们就需要把<code>List[Tensor[Channel, Width, Height]]</code>的列表转换为<code>Tensor[Batch, Channel, Width, Height]</code>。如果直接使用<code>torch.Tensor(List[Tensor])</code>的话会报错</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220321230351403.png" alt="会抛出来ValueError"></p><p>这个时候我们需要用的其实是<code>torch.stack</code>，他会自动帮我们在前面构建一个维度，即</p><pre class="line-numbers language-python"><code class="language-python">a<span class="token punctuation">:</span> List<span class="token punctuation">[</span>torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">]</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其实，<code>a</code>只需要是一个以<code>torch.Tensor</code>为原子的可迭代对象即可</p><h2 id="10-线性层flatten问题"><a href="#10-线性层flatten问题" class="headerlink" title="10. 线性层flatten问题"></a>10. 线性层flatten问题</h2><p>前面说到，对于分类任务来说，在输入到网络进行计算的时候在线性层之前需要把输入flatten。这个时候存在一个问题，就是flatten的时候得到的feature的维度数量是和输入的时候的图像的大小是相关的。</p><p>因此在网络初始化的时候就需要有一个参数指定这个feature的数量。具体feature的数量完全可以单步调试的时候来确定，即</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">(</span>nn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_size<span class="token punctuation">:</span> int<span class="token punctuation">,</span> predict_class<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">96</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">96</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span>kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 注意这里留下来了in_size</span>        self<span class="token punctuation">.</span>linear1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span>in_size<span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>output <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span>predict_class<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-持续监控GPU缓存"><a href="#11-持续监控GPU缓存" class="headerlink" title="11. 持续监控GPU缓存"></a>11. 持续监控GPU缓存</h2><p>在训练模型的时候我们需要监控内存和GPU缓存的用量。内存的用量使用htop就可以很好的来监控，但是GPU缓存的话使用<code>nvidia-smi</code>只能看到当前时刻的用量。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/image-20220322105449663.png" alt="htop可以很好的监控系统状态，包括内存"></p><p>那么我们就会想问有没有类似htop、top一类可以实时监控GPU缓存用量的命令行工具呢？</p><p>答案其实是有的，下面几种方法都可以实现持续不断地监控GPU缓存的用量</p><h3 id="1-watch-nvidia-smi"><a href="#1-watch-nvidia-smi" class="headerlink" title="1. watch nvidia-smi"></a>1. watch nvidia-smi</h3><p>第一种方法就是最原始<code>watch</code>+<code>nvidia-smi</code>的方式，使用下面的命令，指定0.1秒查询一次</p><pre class="line-numbers language-shell"><code class="language-shell">watch -n0.1 nvidia-smi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用效果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/深度录屏_选择区域_20220322105816.gif" alt="watch+nvidia-smi的使用效果"></p><h3 id="2-gpustat"><a href="#2-gpustat" class="headerlink" title="2. gpustat"></a>2. gpustat</h3><p>使用<code>nvidia-smi</code>得到的输出是没有颜色的，我们就希望能不能像htop一样有彩色的输出。这个时候我们就可以结束<code>gpustat</code>这个工具实现。</p><p>首先安装该工具</p><pre class="line-numbers language-shell"><code class="language-shell">pip install gpustat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在安装的python环境下，使用如下命令</p><pre class="line-numbers language-shell"><code class="language-shell">gpustat -cp --watch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以看到如下的效果</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/深度录屏_选择区域_20220322110301.gif" alt="gpustat的效果"></p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning Blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> Pytorch </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex基础：Environments</title>
      <link href="/2022/01/31/latex-ji-chu-latex-zhong-de-huan-jing/"/>
      <url>/2022/01/31/latex-ji-chu-latex-zhong-de-huan-jing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了Latex中的环境</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220201014340608.png" alt="Latex中的环境"></p><h1 id="Latex基础：Enviroments"><a href="#Latex基础：Enviroments" class="headerlink" title="Latex基础：Enviroments"></a>Latex基础：Enviroments</h1><p>上文介绍到，Latex的源代码类似于Markdown和HTML，都是含有特殊标记的纯文本。而Latex的排版引擎（编译器）通过解析这些特殊的标记来得知我们对某些文本的排版要求（例如字号、粗细）等等。而后Latex排版引擎而后通过排版算法，最终将我们文档中的所有的元素按照我们希望的方式完成排版。<strong>这些特殊的标记称为命令</strong>。</p><p>在命令的基础上，Latex的另外一个概念就是环境（Environment）。通过环境，我们能够更好的组织我们的文档，本文下面就将介绍Latex中的环境（Environment）。</p><h2 id="1-Concept-of-Latex-Environment"><a href="#1-Concept-of-Latex-Environment" class="headerlink" title="1. Concept of Latex Environment"></a>1. Concept of Latex Environment</h2><p>为了能够准确的把握Latex中环境（Environment）这个概念，我们先来看看环境（Environment）这个词语的意思。</p><p>由于Surrounding和Environment等多个词语翻译成中文都是环境的意思，因此为了准确，我们还是得查英文的词典中Environment的意思。</p><p>在剑桥词典中，Environment有两个意思：</p><ul><li><p>自然环境</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131211630440.png" alt="环境的第一个意思"></p></li><li><p>周围的状况</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131204735055.png" alt="环境的第二个意思"></p></li></ul><p>因此，<strong>对于Latex而言，环境指的就是一段文本周围状况</strong>。文本周围的状况具体包括这段文本的字号、字间距、字体、字体风格（斜体、加粗、下滑线、删除线等等）。<strong>形象的理解，对于一段含有格式的文本而言，我们把文本从中抽取出来，剩下的所有字体格式等内容包含在一起就称为环境</strong>。</p><p>例如我们下面的这个<code>center</code>环境。这个环境的作用可以使一段文本居中对齐</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span>This text will be centred since it is inside a special environment. Environments provide a efficient way of modifying blocks of text within your document.<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131214956715.png" alt="居中环境的效果"></p><h2 id="2-Introdcution"><a href="#2-Introdcution" class="headerlink" title="2. Introdcution"></a>2. Introdcution</h2><p>我们上面介绍了Latex的环境的概念，下面就将更深入的介绍Latex的环境。</p><h3 id="A-一般的环境"><a href="#A-一般的环境" class="headerlink" title="A. 一般的环境"></a>A. 一般的环境</h3><p>正如我们在最前面所讲的，Latex中的排版是通过命令完成的，而环境是建立在命令基础上的概念。因此，环境也是通过命令来实现的。具体而言，就是用过<code>\begin</code>和<code>\end</code>两个命令来开启和结束环境的。例如上面的居中环境</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span>This text will be centred since it is inside a special environment. Environments provide a efficient way of modifying blocks of text within your document.<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在命令那一节中说过，命令可以理解为函数，那么<code>center</code>这里就是我们传递给<code>\begin</code>和<code>\end</code>命令的参数，即<code>\begin</code>和<code>\end</code>通过参数的形式来开启和关闭环境。</p><p>我们说过环境是一段文本周围包括字号等格式在内的状况，而我们使用<code>\begin</code>开始一个环境和<code>\end</code>结束一个中间都处于我们开启的环境中，因此，被<code>\begin{环境名}</code>和<code>\end{环境名}</code>包围的文字，都将拥有环境的格式。</p><p>因此，环境是一个非常方便的能够设置一块（block）文本的格式。</p><h3 id="B-含参数的环境"><a href="#B-含参数的环境" class="headerlink" title="B. 含参数的环境"></a>B. 含参数的环境</h3><p>我们前面说，环境是用<code>\begin</code>和<code>\end</code>两个命令来开启和结束，而命令可以接受参数和可选参数，因此我们在开启环境的时候也可以指定参数或者可选参数。</p><p>参数的例子例如表格环境，我们的第一个参数是每列单元格的就这种格式</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token punctuation">{</span> c c c <span class="token punctuation">}</span>   cell1 <span class="token punctuation">&amp;</span> cell2 <span class="token punctuation">&amp;</span> cell3 <span class="token function selector">\\</span>   cell4 <span class="token punctuation">&amp;</span> cell5 <span class="token punctuation">&amp;</span> cell6 <span class="token function selector">\\</span>   cell7 <span class="token punctuation">&amp;</span> cell8 <span class="token punctuation">&amp;</span> cell9 <span class="token function selector">\\</span>  <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131225137991.png" alt="表格环境的效果"></p><p>我们也可以用<code>[]</code>来传入可选参数，例如表格环境中使用<code>[htbp]</code>来指定排版算法在排版时优先排版的位置</p><h2 id="3-Defining-a-new-environment"><a href="#3-Defining-a-new-environment" class="headerlink" title="3. Defining a new environment"></a>3. Defining a new environment</h2><p>在Latex中，我们可以使用<code>\newcommand</code>来定义一个新的命令，从而简化我们编写源代码。</p><p>我们其实也可以自己定义一个新的环境，在新的环境中定义我们需要的格式，这样的话就可以减少不必要的重复。</p><h3 id="A-定义简单的环境"><a href="#A-定义简单的环境" class="headerlink" title="A. 定义简单的环境"></a>A. 定义简单的环境</h3><p>环境因为包含开始和结束两部分，因此我们在自己定义环境的时候也需要环境的开始和结束部分。而定义新环境所使用的命令为<code>\newenvironment</code>，具体使用如下</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newenviroment</span><span class="token punctuation">{</span>新环境名<span class="token punctuation">}</span><span class="token punctuation">{</span>    环境开始部分代码<span class="token punctuation">}</span><span class="token punctuation">{</span>    环境结束部分代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，环境开始部分的代码会在环境开始的<code>\begin</code>之后立即执行，而环境结束部分代码则紧跟在<code>\end</code>前运行</p><p>而在定义结束之后，我们和使用正常的环境一样进行使用即可，即</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">新环境名</span><span class="token punctuation">}</span>...<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">新环境名</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例如我们现在定义用一个单元格的表格给四周加上线来表示一个方框的环境，代码如下</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newenvironment</span><span class="token punctuation">{</span>myBox<span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">% 开始环境代码</span>    <span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span>    <span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token punctuation">{</span>|c|<span class="token punctuation">}</span>    <span class="token function selector">\hline</span>    <span class="token function selector">\newline</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">% 结束环境代码</span>    <span class="token function selector">\\</span>    <span class="token function selector">\hline</span>    <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span>    <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们使用新定义的环境之后的效果如下</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">myBox</span><span class="token punctuation">}</span>    This sentence will be placed in the center with a box.<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">myBox</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220201004826372.png" alt="新定义的box"></p><h3 id="B-接受参数的环境"><a href="#B-接受参数的环境" class="headerlink" title="B. 接受参数的环境"></a>B. 接受参数的环境</h3><p>同样，在定义新环境的时候我们也可以接受一个参数，然后在代码部分通过<code>#1</code>、<code>#2</code>的形式来调用。而和命令一样的是，我们在指定了环境的名称之后使用<code>[]</code>来指定参数个数，具体如下</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newenvironment</span><span class="token punctuation">{</span>新环境名<span class="token punctuation">}</span><span class="token punctuation">[</span>参数数量<span class="token punctuation">]</span><span class="token punctuation">{</span>    环境开始部分代码<span class="token punctuation">}</span><span class="token punctuation">{</span>    环境结束部分代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如我们现在要给前面的box加上名字</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newenvironment</span><span class="token punctuation">{</span>myNamedBox<span class="token punctuation">}</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">% 开始环境代码</span>    <span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span>    Title: #1<span class="token function selector">\\</span><span class="token punctuation">[</span>1ex<span class="token punctuation">]</span>    <span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token punctuation">{</span>|c|<span class="token punctuation">}</span>    <span class="token function selector">\hline</span>    <span class="token function selector">\newline</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token function selector">\\</span>    <span class="token function selector">\hline</span>    <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span>    <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">myNamedBox</span><span class="token punctuation">}</span><span class="token punctuation">{</span>Named Box Example<span class="token punctuation">}</span>    This is a named box.<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">myNamedBox</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220201010602125.png" alt="使用参数的环境"></p><h3 id="C-含默认参数的环境"><a href="#C-含默认参数的环境" class="headerlink" title="C. 含默认参数的环境"></a>C. 含默认参数的环境</h3><p>含默认参数的环境和命令一样，都是</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newenvironment</span><span class="token punctuation">{</span>新环境名<span class="token punctuation">}</span><span class="token punctuation">[</span>参数个数<span class="token punctuation">]</span><span class="token punctuation">[</span>默认参数值<span class="token punctuation">]</span><span class="token punctuation">{</span>    开始部分代码<span class="token punctuation">}</span><span class="token punctuation">{</span>    结束部分代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newenvironment</span><span class="token punctuation">{</span>indexedBox<span class="token punctuation">}</span><span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">[</span>A<span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span>    Title #1. #2<span class="token function selector">\\</span>    <span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span><span class="token punctuation">{</span>|c|<span class="token punctuation">}</span>    <span class="token function selector">\hline</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token function selector">\\</span>    <span class="token function selector">\hline</span>    <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">tabular</span><span class="token punctuation">}</span>    <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">indexedBox</span><span class="token punctuation">}</span><span class="token punctuation">{</span>Indexed Box A<span class="token punctuation">}</span>    This is box A<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">indexedBox</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">indexedBox</span><span class="token punctuation">}</span><span class="token punctuation">[</span>B<span class="token punctuation">]</span><span class="token punctuation">{</span>Indexed Box B<span class="token punctuation">}</span>    This is box B<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">indexedBox</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译之后的效果如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220201013215957.png" alt="含默认参数的环境"></p><h2 id="4-Overwriting-existing-environments"><a href="#4-Overwriting-existing-environments" class="headerlink" title="4. Overwriting existing environments"></a>4. Overwriting existing environments</h2><p>要重写一个现有的环境也非常简单，直接用<code>\renewenvironment</code>即可</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\renewenvironment</span><span class="token punctuation">{</span>原环境名<span class="token punctuation">}</span><span class="token punctuation">[</span>参数个数<span class="token punctuation">]</span><span class="token punctuation">{</span>    开始代码<span class="token punctuation">}</span><span class="token punctuation">{</span>    结束代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如我们重写一下<code>itemize</code>环境</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\renewenvironment</span><span class="token punctuation">{</span>itemize<span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span>    <span class="token function selector">\em</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220201012457406.png" alt="覆盖环境"></p><h2 id="5-带编号的环境"><a href="#5-带编号的环境" class="headerlink" title="5. 带编号的环境"></a>5. 带编号的环境</h2><p>实际上，<code>enumerate</code>、<code>itemize</code>都是带编号的环境，在其中我们可以使用环境内部定义的命令来生成编号项。</p><p>而我们其实也可以自己的来实现，即运用Latex自带的<code>\newcounter</code>命令来实现，或者用<code>amsmath</code>包中提供的<code>\newtherum</code>宏来实现。例如</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token comment" spellcheck="true">%Numbered environment</span><span class="token function selector">\newcounter</span><span class="token punctuation">{</span>example<span class="token punctuation">}</span><span class="token punctuation">[</span>section<span class="token punctuation">]</span><span class="token function selector">\newenvironment</span><span class="token punctuation">{</span>example<span class="token punctuation">}</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token function selector">\refstepcounter</span><span class="token punctuation">{</span>example<span class="token punctuation">}</span><span class="token function selector">\par</span><span class="token function selector">\medskip</span>    <span class="token function selector">\noindent</span> <span class="token function selector">\textbf</span><span class="token punctuation">{</span>Example~<span class="token function selector">\theexample</span>. #1<span class="token punctuation">}</span> <span class="token function selector">\rmfamily</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token function selector">\medskip</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">example</span><span class="token punctuation">}</span>    User-defined numbered environment 1<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">example</span><span class="token punctuation">}</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">example</span><span class="token punctuation">}</span>    User-defined numbered environment 2<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">example</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">%Numbered environment defined with Newtheorem</span><span class="token function selector">\newtheorem</span><span class="token punctuation">{</span>SampleEnv<span class="token punctuation">}</span><span class="token punctuation">{</span>Sample Environment<span class="token punctuation">}</span><span class="token punctuation">[</span>section<span class="token punctuation">]</span><span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">SampleEnv</span><span class="token punctuation">}</span>User-defined environment created with the <span class="token function selector">\texttt</span><span class="token punctuation">{</span>newtheorem<span class="token punctuation">}</span> command.<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">SampleEnv</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后得到的效果如下，注意第二种方法需要在导言区<code>\usepackage{amsmath}</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220201013827348.png" alt="带编号的环境"></p>]]></content>
      
      
      <categories>
          
          <category> Latex基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
            <tag> Overleaf </tag>
            
            <tag> Latex Environment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Research Skills Workshop 5</title>
      <link href="/2022/01/30/research-proposal-workshops-5/"/>
      <url>/2022/01/30/research-proposal-workshops-5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是本文是CCSIT Research Skills Workshop 5的笔记。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131105840698.png" alt="Research Skills Workshop 5"></p><p>密码：ResearchSkillsWorkshop-5</p><h1 id="Research-Skills-Workshop-5"><a href="#Research-Skills-Workshop-5" class="headerlink" title="Research Skills Workshop 5"></a>Research Skills Workshop 5</h1><p>本节课将会讲解以下内容：</p><ul><li>How to write a research report<ul><li>Introduction</li><li>Literature review</li><li>Metodology</li><li>Results</li><li>Discussion</li><li>Conclusion</li></ul></li><li>Long literature review</li></ul><h2 id="1-Write-a-research-report"><a href="#1-Write-a-research-report" class="headerlink" title="1. Write a research report"></a>1. Write a research report</h2><p>正如前面所讨论的，一篇研究报告通常包含以下六个部分：</p><ul><li>引言</li><li>文献综述</li><li>研究方法</li><li>结果</li><li>讨论</li><li>结论</li></ul><p>除了这六个部分，我们当然可以包含其他的部分</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131110707393.png" alt="research report的结构"></p><h3 id="A-Title-page"><a href="#A-Title-page" class="headerlink" title="A. Title page"></a>A. Title page</h3><p>在我们开始文章前，我们要有一个标题页。标题页要包含以下信息：</p><ul><li>项目标题</li><li>你的名字</li><li>导师名字</li><li>提交日期</li><li>如果是学位论文或者学院有要求，那么好需要额外的说明</li><li>我们有的时候还需要包含学校的校徽</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131115447665.png" alt="标题页需要包含的内容"></p><p>除了上面的内容以外，我们在标题页需要注意下面的内容</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131115731464.png" alt="标题页的注意事项"></p><h3 id="B-Before-Introduction"><a href="#B-Before-Introduction" class="headerlink" title="B. Before Introduction"></a>B. Before Introduction</h3><p>在标题页和Introduction（正文）开始前，我们其实还可以写很多的内容，包括：</p><ul><li>Acknowledgements：致谢部分，可以是小组成员、机构或者赞助者</li><li>Abstract：摘要是我们对项目的一个简短的总结</li><li>Table of contents：我们接下来可以包括目录</li><li>图和表的列表，词汇表或者缩略语表</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131120030696.png" alt="Introduction前要写的内容"></p><h3 id="C-Introduction"><a href="#C-Introduction" class="headerlink" title="C. Introduction"></a>C. Introduction</h3><p>接下来就是Introduction部分了。在Introduction部分，我们需要设定报告的课题、目的和相关性，并且告诉读者其他部分会有什么样的内容。具体来说：</p><ul><li>设定一个背景（开始讲故事），让我们的研究具有前后的背景，情景化</li><li>缩小我们的话题，定义我们的研究着眼处</li><li>展示我们的研究和背景的关系，需要注意的是，我们这里只需要简短的说一下就行了，不需要完整的进行描述</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131120356031.png" alt="Introduction-1"></p><p>最后，我们还需要说明：</p><ul><li>研究问题和研究目标</li><li>论文或者报告的结构以及每一部分简短的说明。例如，解释一下在文献综述中做了什么，我们在研究方法、结果、讨论和结论中分别展示了什么</li></ul><p>最后，Introduction结束之后，我们预期读者了解我们的研究做了什么、为什么做的以及怎么做的</p><h3 id="D-Literature-review"><a href="#D-Literature-review" class="headerlink" title="D. Literature review"></a>D. Literature review</h3><p>在文献综述部分，我们不能只是单纯的总结现有的研究。而是通过总结前人的研究，指出来他们的缺点，从而为自己的研究提供清晰基础。因此，Literature review的目的有下面的几种：</p><ul><li>强调现有文献中的空白领域</li><li>为课题提出来一个新的理论或者方法</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131121637954.png" alt="Literature Review 1"></p><ul><li>对尚未解决的问题提出来一种可能的解决方案</li><li>推动异常理论的辩论</li><li>根据现有的数据来得到新的认知</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131122015616.png" alt="Literature Review 2"></p><h3 id="E-Methodology"><a href="#E-Methodology" class="headerlink" title="E. Methodology"></a>E. Methodology</h3><p>研究方法部分我们应该描述我们是怎样进行我们的研究的，让文章的读者评估你的方法的有效性。</p><p>因此，在文章的Methodology部分，我们应该包括：</p><ul><li>研究的方法和研究的类型</li><li>使用的数据</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131122300948.png" alt="Methodology 1"></p><ul><li>分析数据的方法和结果衡量的标准</li><li>使用的工具</li><li>研究的时候遇到的障碍以及我们是如何解决的</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131122405312.png" alt="Methodology 2"></p><h3 id="F-Results"><a href="#F-Results" class="headerlink" title="F. Results"></a>F. Results</h3><p>在结果部分，我们可以针对我们在前文中提出的子问题、假设或者主题来组织、编写。</p><p>在Results中，我们要注意：</p><ul><li>准确的说清楚与该子问题相关的子问题的结果</li><li>间接地说清楚结果对问题的关系，如果前文提出的是假设的话，我们还要说清楚结果是如何与问题相关的</li><li>包含图或者表来进一步说清楚你的结果</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131122615717.png" alt="Results 1"></p><ul><li>无论结果是否支持你的假设（是否是预期的结果），都需要在结果中写出来</li><li>不要包含主观的解释或者任何的猜测</li><li>而其他额外的数据都不要出现在这里，例如问卷调查的时候问卷的设计，问卷结果的回收统计，代码等等，都在附录部分展示</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131122916087.png" alt="Results 2"></p><h3 id="G-Discussion"><a href="#G-Discussion" class="headerlink" title="G. Discussion"></a>G. Discussion</h3><p>在讨论部分，我们需要讨论研究问题结果的意义和启示。在这个部分我们应该详细的讨论我们的结果，例如他们是否达到我们的期望，以及数据背后的启示</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131170201950.png" alt="Discussion 1"></p><p>具体来说，我们需要讨论：</p><ul><li>我们对结果的理解，这些结果到底意味着什么</li><li>探究结果的能带来的启示，为什么这些结果重要</li><li>承认局限性，为接下来的研究提供基础</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131170337085.png" alt="Discussion 2"></p><h3 id="H-Conclusion"><a href="#H-Conclusion" class="headerlink" title="H. Conclusion"></a>H. Conclusion</h3><p>最后是Conclusion部分，Conclusion应该简明扼要的回答主要的研究问题，让读者清晰地了解你的中心论点，强调你的研究贡献。</p><p>这一章中，最重要的解释给读者留下一个清晰地影响，为什么我们的研究很重要，我们的工作在已知的研究的基础上又添加了些什么</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131171956402.png" alt="Conclusion"></p><h3 id="I-Reference"><a href="#I-Reference" class="headerlink" title="I. Reference"></a>I. Reference</h3><p>一般来说，在Conclusion之后，需要有Reference部分来列举所有的参考文献。一般来说，计算机和工程用I-triple-E的参考格式就可以，除非投稿的会议或者期刊有另外的要求。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131172738993.png" alt="Reference"></p><h3 id="J-Appendix"><a href="#J-Appendix" class="headerlink" title="J. Appendix"></a>J. Appendix</h3><p>我们对研究问题的回答在前面就已经结束了，而附录则是把一些我们研究过程中产生的材料附加上去。例如额外的图表、问卷甚至其他文件。</p><p>然而，读者一般不会阅读附录，因此我们不要预期读者会去读附录的内容，除非读者非常想要复现我们的工作</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131173739201.png" alt="image-20220131173739201"></p><h2 id="2-Long-literature-review"><a href="#2-Long-literature-review" class="headerlink" title="2. Long literature review"></a>2. Long literature review</h2><p>一般来说，literature review一般来说都是我们的学位论文、会议论文中的一部分。但是在某些时候，literature review的确会成为一篇独立的论文。</p><p>这个时候，我们就需要对我们领域内和我们的问题相关的所有的文章做出来一个详尽的研究和总结，从而对未来的研究做出启示。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131174811065.png" alt="Long Literature Review"></p>]]></content>
      
      
      <categories>
          
          <category> Cambridge CCISTC AI Research Programme 2022 Winter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Research Proposal Workshops </tag>
            
            <tag> CCISTC </tag>
            
            <tag> University of Cambridge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Research Skills Workshop 4</title>
      <link href="/2022/01/30/research-proposal-workshops-4/"/>
      <url>/2022/01/30/research-proposal-workshops-4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是本文是CCSIT Research Skills Workshop 4的笔记。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131002715395.png" alt="Research Skills Workshop 4"></p><p>密码：ResearchSkillsWorkshop-4</p><h1 id="Research-Skills-Workshop-4"><a href="#Research-Skills-Workshop-4" class="headerlink" title="Research Skills Workshop 4"></a>Research Skills Workshop 4</h1><p>本节课将会包含以下内容：</p><ul><li>Tools can be used in machine learning.</li><li>How to plan your research and how to define the timeline?</li><li>What are the common report writing tools and how do they compare?</li><li>What are various ways to manage your bibliography and how to reference correctly?</li><li>Where to find additional learning resources?</li></ul><h2 id="2-Research-Tools"><a href="#2-Research-Tools" class="headerlink" title="2. Research Tools"></a>2. Research Tools</h2><p>这部分对于我来说没有多大的用处，但是为了课程的完整性因此还是带上</p><h3 id="A-TensorFlow"><a href="#A-TensorFlow" class="headerlink" title="A. TensorFlow"></a>A. TensorFlow</h3><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131004440842.png" alt="TensorFlow"></p><h3 id="B-Keras"><a href="#B-Keras" class="headerlink" title="B. Keras"></a>B. Keras</h3><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131004646111.png" alt="Keras"></p><h3 id="C-Pytorch"><a href="#C-Pytorch" class="headerlink" title="C. Pytorch"></a>C. Pytorch</h3><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131004715335.png" alt="Pytorch"></p><h3 id="D-Matlab"><a href="#D-Matlab" class="headerlink" title="D. Matlab"></a>D. Matlab</h3><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131004813492.png" alt="Matlab"></p><h2 id="2-Research-plan-and-time-schedule"><a href="#2-Research-plan-and-time-schedule" class="headerlink" title="2. Research plan and time schedule"></a>2. Research plan and time schedule</h2><p>研究计划有两个目的：</p><ul><li>向其他人表明你对你的项目进行了周全的考虑，并且证明我们确实有一个计划</li><li>希望其他人帮助我们注意到我们遗漏的地方，以让我们能够完善我们的研究计划</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131005254116.png" alt="使用甘特图帮助管理"></p><h2 id="3-Report-writing-tools"><a href="#3-Report-writing-tools" class="headerlink" title="3. Report writing tools"></a>3. Report writing tools</h2><p>我们科研最终的成果可以是发表的文章，也可以是一个学术报告。那么我们真正在写的时候就需要用工具来帮助我们进行书写</p><p>一般常用的工具有：</p><ul><li>Mac上的Pages</li><li>Word</li><li>Latex，Overleaf</li></ul><p>随着文档复杂性的增加，使用Word的难度越来越高</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131102857249.png" alt="多种不同的写作工具"></p><p>一般来说，在书写小的文档的时候Word会很方便。但是Word打开包含图片的大的文件就会很慢</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131103115550.png" alt="Word擅长写小的文章"></p><p>而Latex，或者说Overleaf，我们在书写的时候只能看到源代码，需要编译之后才能看到文本。而处理大型的文档的时候，Latex会快很多。此外，由于我们需要学习语法，因此使用Latex需要门槛</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131103251304.png" alt="Latex适合大型的文档"></p><h2 id="4-bibliography"><a href="#4-bibliography" class="headerlink" title="4. bibliography"></a>4. bibliography</h2><p>当说到参考文献的时候，实际上有多种参考文献的格式，如果没有说明的话，我们应该采用我们领域内最常用的参考文献的引用格式。</p><p>一般对于计算机、工程这类工科来说，就使用i-triple-3的参考文献格式。</p><p>参考文献的引用一般分成两部分，一部分是正文本分的引用，另外一部分是末尾部分的列表</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131103511014.png" alt="参考文献的注意事项"></p><p>Word内置的参考文献引用系统非常的糟糕</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131104129042.png" alt="Word参考文献很糟糕"></p><p>Latex的参考文献引用系统则非常强大</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131104351609.png" alt="Latex非常善于处理参考文献"></p><p>最后，随着我们阅读量的增加，我们遗忘的速度也越来越快，因此我们在读文章的时候一个良好的习惯就是记笔记。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131104937246.png" alt="读文章的时候记笔记"></p><h2 id="5-Extra-learning-resources"><a href="#5-Extra-learning-resources" class="headerlink" title="5. Extra learning resources"></a>5. Extra learning resources</h2><p>我们在进行项目的研究的时候，往往需要学习这个项目涉及的课程、知识等等。因此我们就需要寻找额外的学习资源。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131105231756.png" alt="额外的学习资源"></p>]]></content>
      
      
      <categories>
          
          <category> Cambridge CCISTC AI Research Programme 2022 Winter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Research Proposal Workshops </tag>
            
            <tag> CCISTC </tag>
            
            <tag> University of Cambridge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Research Skills Workshop 3</title>
      <link href="/2022/01/28/research-proposal-workshops-3/"/>
      <url>/2022/01/28/research-proposal-workshops-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是本文是CCSIT Research Skills Workshop 3的笔记。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129005050717.png" alt="Research Skills Workshop 3"></p><p>密码：ResearchSkillsWorkshop-3</p><h1 id="Research-Proposal-Workshops-3"><a href="#Research-Proposal-Workshops-3" class="headerlink" title="Research Proposal Workshops 3"></a>Research Proposal Workshops 3</h1><p>上节课我们介绍了Literature Review是什么以及如何编写Literature Review，本节课则关注研究设计与研究方法、定量研究与定性研究等内容。具体而言：</p><ul><li>What is the difference between research design and research method</li><li>Qualitative v.s. quantitative research</li><li>Primary v.s. secondary research</li><li>Resources to draw on</li><li>How to evaluate your AI model</li></ul><h2 id="1-Research-design-v-s-research-method"><a href="#1-Research-design-v-s-research-method" class="headerlink" title="1. Research design v.s. research method"></a>1. Research design v.s. research method</h2><p>我们在进行科研的时候，需要明白研究设计和研究方法之间的区别。</p><ul><li>Research design：<strong>研究实际是一个计划</strong>。例如我们现在的领域是不确定性在点云的运用。而具体的问题是不确定性能否提高点云分割的准确度。那么我们的计划就是，首先找出来描述点云中的不确定性的方法。然后设计出来把不确定性运用到点云上的方法。接下来设计实验、跑实验、收集数据。最后撰写文章。那么像上面这样的计划就是Research Design</li><li>Research method：<strong>研究方法是用来实现计划的</strong></li></ul><p>一个好的Research Design可以确保我们的实验可以获得我们需要的数据，并且确保我们需要的数据能够回答我们的问题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129154637357.png" alt="research design v.s. research method"></p><h2 id="2-Types-of-research-method"><a href="#2-Types-of-research-method" class="headerlink" title="2. Types of research method"></a>2. Types of research method</h2><h3 id="A-如何确定需要使用的研究方式"><a href="#A-如何确定需要使用的研究方式" class="headerlink" title="A. 如何确定需要使用的研究方式"></a>A. 如何确定需要使用的研究方式</h3><p>在进行研究的时候，其实有很多的研究的方法，而决定使用什么研究方法的最重要的方法有：</p><ul><li><strong>我们需要完成的目的</strong>（最重要的）</li><li>我们需要什么样的信息</li><li>我们做的实验</li><li>如何衡量我们的实验是否成功</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129183721218.png" alt="Research Method"></p><h3 id="B-Quantitative-Research"><a href="#B-Quantitative-Research" class="headerlink" title="B. Quantitative Research"></a>B. Quantitative Research</h3><p>定量研究是用数字和图表来表示实验的结果，用来检验或者证实理论和假设。</p><p>一般来说常见的定量研究的实验方法包括以数字记录的实验结果和封闭式的问卷调查</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129184055852.png" alt="定量研究"></p><h3 id="C-Qualitative-Research"><a href="#C-Qualitative-Research" class="headerlink" title="C. Qualitative Research"></a>C. Qualitative Research</h3><p>定性研究是用语言来表述的、用于理解概念、想法和经验。使用定性研究研究课题可以使我们对难以入门的课题有深入的理解。</p><p>而常见的定性研究的方法有：</p><ul><li>开放式问卷调查</li><li>词汇描述的现象</li><li>为探索概念和理论做的文献调研</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129185117755.png" alt="定性研究"></p><h3 id="D-Comparison-between-Quantitative-and-Qualitative"><a href="#D-Comparison-between-Quantitative-and-Qualitative" class="headerlink" title="D. Comparison between Quantitative and Qualitative"></a>D. Comparison between Quantitative and Qualitative</h3><p>定性研究方法的优点在于它非常的灵活，在样本数量比较少的时候也适用；而其缺点在于无法通过统计给出来比较准确的关系或者说他人很难复现。而且由于主观性比较强，因此很难做到标准化</p><p>定量研究的优点在于可以系统的描述大量的数据，并且其结果是可以复现的。然而其缺点在于需要经过统计学的训练来分析数据，而且需要大量的数据</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220130234135619.png" alt="两种研究方法的比较"></p><h2 id="3-Types-of-data-used-in-research"><a href="#3-Types-of-data-used-in-research" class="headerlink" title="3. Types of data used in research"></a>3. Types of data used in research</h2><h3 id="A-Primary-and-secondary"><a href="#A-Primary-and-secondary" class="headerlink" title="A. Primary and secondary"></a>A. Primary and secondary</h3><p>在研究中，根据数据的来源，我们会有两种数据：</p><ul><li>原始数据，Primary Data：Primary Data指的是我们为了回答研究的问题而收集的数据</li><li>二手数据，Secondary Data：二手数据是指其他研究人员已经收集的数据，例如政府的人口普查和先前的实验</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220130234713089.png" alt="Types of data"></p><h3 id="B-Comparisons"><a href="#B-Comparisons" class="headerlink" title="B. Comparisons"></a>B. Comparisons</h3><p>一手数据和二手数据的比较如下：</p><ul><li>原始数据的优点在于他可以回答我们所提出的、特定的研究问题。而且我们自己决定控制取样和测量的方法</li><li>原始数据的缺点在于他的数据的收集需要我们自己做实验，因此成本高昂而且更加花费时间。需要我们接受过数据收集方面的训练</li><li>二手数据的优点在于非常容易获得，我们只需要去收集文献即可。然而问题就在于我们无法决定数据是如何得到的，我们也需要额外的处理才能够使用二手数据来回答我们的问题</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220130234930624.png" alt="Comparison between Primary and Secondary data"></p><h2 id="4-科研时的思路"><a href="#4-科研时的思路" class="headerlink" title="4. 科研时的思路"></a>4. 科研时的思路</h2><p>一般来说，在做科研的时候，我们的的思路是下面这样的。在最初的时候我们只有一个idea，脑子里完全不知道该怎么样去做出来这个idea。</p><p>然后随着更多的文献综述和阅读，我们对问题的理解越来越深入，对自己的方法也越来越清晰</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131000808458.png" alt="科研时的思路"></p><h2 id="5-数据集来源"><a href="#5-数据集来源" class="headerlink" title="5. 数据集来源"></a>5. 数据集来源</h2><p>这个没啥用，略掉了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131001609387.png" alt="数据集的来源"></p><h2 id="6-Evaluation-method"><a href="#6-Evaluation-method" class="headerlink" title="6. Evaluation method"></a>6. Evaluation method</h2><p>衡量模型好坏的metrics，同样没啥用，略掉</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220131001749459.png" alt="Evaluations"></p>]]></content>
      
      
      <categories>
          
          <category> Cambridge CCISTC AI Research Programme 2022 Winter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Research Proposal Workshops </tag>
            
            <tag> CCISTC </tag>
            
            <tag> University of Cambridge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex基础：Commands</title>
      <link href="/2022/01/27/latex-ji-chu-latex-zhong-de-ming-ling/"/>
      <url>/2022/01/27/latex-ji-chu-latex-zhong-de-ming-ling/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了Latex中的命令</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128162651753.png" alt="Latex中的Command"></p><h1 id="Latex基础：Commands"><a href="#Latex基础：Commands" class="headerlink" title="Latex基础：Commands"></a>Latex基础：Commands</h1><p>Latex对我们写好的文章进行排版，主要是通过我们在文章中写好的一些特殊标记（Special Tags）来完成的。这些标记称为命令（Command）。</p><p>Latex内置了不少命令，还有许多第三方包也提供了不少新的命令。有的时候现有的命令可能无法满足我们的需求，这个时候我们就需要自己定义新的命令了。</p><p>下面，本文就将介绍什么是命令以及如何编写新的命令。</p><h2 id="1-Commands"><a href="#1-Commands" class="headerlink" title="1. Commands"></a>1. Commands</h2><h3 id="A-Introduction-to-Commands"><a href="#A-Introduction-to-Commands" class="headerlink" title="A. Introduction to Commands"></a>A. Introduction to Commands</h3><p><strong>Latex中的命令是由词语和符号组成的一段具有特殊的语义和功能的、能被Latex编译器识别的字符序列</strong>。</p><p>例如下面这段代码</p><pre class="line-numbers language-latex"><code class="language-latex">In a document there are different types of <span class="token function selector">\textbf</span><span class="token punctuation">{</span>commands<span class="token punctuation">}</span> that define the way the elements are displayed. This commands may insert special elements: <span class="token equation string">$<span class="token equation-command regex">\alpha</span> <span class="token equation-command regex">\beta</span> <span class="token equation-command regex">\Gamma</span>$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128105239982.png" alt="编译出来的效果"></p><p>上面的这段代码中出现了多个不同的命令，例如：<code>\documentclass</code>、<code>\title</code>、<code>\begin</code>、<code>\end</code>、<code>\textbf</code>、<code>\alpha</code>等等。</p><h3 id="B-Commands的分类"><a href="#B-Commands的分类" class="headerlink" title="B. Commands的分类"></a>B. Commands的分类</h3><p>从不同的角度出发，我们能够给Latex中的命令以不同的标准进行分类。这样做的好处就是可以帮助我们更深入的理解Latex中的命令。</p><p>从是否接受参数的角度出发，Latex中的命令可以分为两类：</p><ul><li>有一类命令接受参数。我们其实可以当做编程语言中的函数，而后面花括号<code>{}</code>里的内容就对应了函数的参数。因此这这类命令接受不同的参数，实现不同的功能，例如：<code>\textbf</code>命令将会加粗传入的参数</li><li>还有一类命令不接受参数。这类命令根据具体命令的不同，有不同的效果，例如：<code>\alpha</code>、<code>\beta</code>、<code>\Gamma</code>等等</li></ul><p>而从命令使用者的角度出发，Latex中的命令可以分为三类：</p><ul><li>第一类是给文章（<code>.tex</code>）作者使用的命令，例如上面截图中的所有命令</li><li>第二类是给包（<code>.sty</code>）和类（<code>.cls</code>）的作者使用的命令，例如<code>\ProvidesClass</code>、<code>\ProvidesPackage</code>等命令</li><li>第三类是用于实现Latex本身的内部命令（类比于C语言的关键字），例如<code>\@tempcnta</code>、<code>\@ifnextchar</code>、<code>\@eha</code>等命令。这类命令中通常包含<code>@</code>，并且这些命令只能用于类和包中，而不能用于普通的文档中</li></ul><p>对于一般的写作而言，我们只需要用第一类命令即可，只有要创建Latex包和类，我们才会用到第二类、第三类命令。而<code>Latex基础</code>的系列文章不会讲解Latex类和包。类和包请参考我的<code>Latex类和包</code>系列文章。</p><h3 id="C-命令与环境"><a href="#C-命令与环境" class="headerlink" title="C. 命令与环境"></a>C. 命令与环境</h3><p>Latex中的另外一个重要的概念就是环境。所谓环境，在剑桥词典中有两个意思：</p><ul><li><strong>自然环境</strong>，例如：一些化学药品因为对环境有破坏作用因此已经被禁止使用</li><li><strong>周围的状况</strong>，例如：办公室明亮、通风，工作环境还不错。</li></ul><p>而在Latex中，环境即指一段文本周围的状况。状况包括：行间距、对齐格式、字号、字体等等因素。因此在一个环境内的文本都将会具有该环境特定的行间距、字号、对齐方式等格式。</p><p>例如下面一段文本，我们开始了一个<code>itemize</code>环境和<code>center</code>环境。在<code>itemize</code>环境中，我们可以进行编号项的排序。而在<code>center</code>环境中，一句话将会居中对齐</p><pre class="line-numbers language-latex"><code class="language-latex">This is a normal sentence. It will with a tab in front of it. and automatically return to another line.<span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">itemize</span><span class="token punctuation">}</span>    <span class="token function selector">\item</span> This is an <span class="token function selector">\textbf</span><span class="token punctuation">{</span>itemize<span class="token punctuation">}</span> environment    <span class="token function selector">\item</span> To begin an item in itemize environment, use <span class="token equation string">$<span class="token equation-command regex">\backslash</span>$</span>item command.<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">itemize</span><span class="token punctuation">}</span>This is a sentence without center environment. It will starts from the left with a tab in front of it.<span class="token function selector">\begin</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span>    A sentence nested in center environment<span class="token function selector">\\</span>    will be placed in the center of the page.<span class="token function selector">\end</span><span class="token punctuation">{</span><span class="token keyword">center</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的效果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128142131557.png" alt="itemize环境和center环境的效果"></p><p>而Latex中是使用命令来控制一切格式的，因此，环境的开启、设置、结束也是通过命令来完成的。因此从环境的角度出发，命令又可以分为：</p><ul><li>普通命令：不涉及到环境的命令</li><li>环境命令：涉及到环境的设置、结束的命令</li></ul><p>普通环境用于特殊字符的显示、格式的控制；而环境命令用于环境的开启、结束以及环境内字符显示和格式控制。</p><p>其实如果观察仔细的话，就可以发现我们的文章都是在<code>document</code>这个环境里的，其实这是Latex设计的的一个哲学，更多的内容就不展开了。</p><p>具体的关于Latex环境更多的介绍请参考我在<code>Latex基础</code>系列文章中的<code>Latex环境</code>文章。</p><h2 id="2-Defining-a-new-command"><a href="#2-Defining-a-new-command" class="headerlink" title="2. Defining a new command"></a>2. Defining a new command</h2><p>虽然Latex本身自带了很多命令以满足不同需求的任务，然而在有的时候，我们确实有需要来自己定义一些新的特殊的命令来简化不必要的重复或者简化复杂格式的创建。</p><p>例如在每一页都需要设置页眉，那么如果我们写一个命令来自动的执行设置页眉的一系列命令，那么在20多页的PDF里我们在新的一页只需要调用我们新建的命令即可，而避免了每页都要进行复杂的格式设置</p><h3 id="A-新建简单命令"><a href="#A-新建简单命令" class="headerlink" title="A. 新建简单命令"></a>A. 新建简单命令</h3><p>在Latex中提供了<code>\newcommand</code>命令帮助我们新建一个简单命令，新建简单命令的格式如下</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newcommand</span><span class="token punctuation">{</span>调用格式<span class="token punctuation">}</span><span class="token punctuation">{</span>实际执行的代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如我们为一个专用词语新建一个简单命令</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newcommand</span><span class="token punctuation">{</span><span class="token function selector">\PRC</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\textbf</span><span class="token punctuation">{</span>People's Republic of China<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们写出来下面的一句话来调用我们新建的简单命令</p><pre class="line-numbers language-latex"><code class="language-latex">I'm Jack, I live in <span class="token function selector">\PRC</span>. There is the Grate Wall in <span class="token function selector">\PRC</span>, welcome to <span class="token function selector">\PRC</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译之后的效果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128143426060.png" alt="新建简单命令的效果"></p><p>所以我们通过新建命令的一个好处就是可以减少重复。</p><p>一般来说，自己定义的命令最好放在文章的最前面，这样的话实现定义和内容的分离。</p><h3 id="B-接受参数的命令"><a href="#B-接受参数的命令" class="headerlink" title="B. 接受参数的命令"></a>B. 接受参数的命令</h3><p>命令我们可以视为参数来对待，因此我们自己定义的命令也可以接受新的参数，具体而言，定义接受新的参数的命令如下</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newcommand</span><span class="token punctuation">{</span>调用格式<span class="token punctuation">}</span><span class="token punctuation">[</span>参数个数<span class="token punctuation">]</span><span class="token punctuation">{</span>实际执行的代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而在实际执行的代码（即函数体中），通过<code>#1</code>、<code>#2</code>等方式来调用实际传入的参数。</p><p>而我们在调用命令的时候，我们写参数个数个<code>{}</code>，并在括号里写入真实的参数值</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\调</span>用命令<span class="token punctuation">{</span>参数1的值<span class="token punctuation">}</span><span class="token punctuation">{</span>参数2的值<span class="token punctuation">}</span>...<span class="token punctuation">{</span>参数n的值<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，Latex中最多支持九个参数</p><p>例如下面的命令</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newcommand</span><span class="token punctuation">{</span><span class="token function selector">\generatePolynomial</span><span class="token punctuation">}</span><span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token equation string">$$</span>#1^3+#2^2+#3^1<span class="token equation string">$$</span><span class="token punctuation">}</span>We just define a command to generate a polynomial, so we next call it and see what happened:<span class="token function selector">\generatePolynomial</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">{</span>y<span class="token punctuation">}</span><span class="token punctuation">{</span>z<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译之后的效果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128145129309.png" alt="接受参数的命令"></p><h3 id="C-带默认参数-可选参数的命令"><a href="#C-带默认参数-可选参数的命令" class="headerlink" title="C. 带默认参数/可选参数的命令"></a>C. 带默认参数/可选参数的命令</h3><p>同样类比于编程语言的中的函数，我们同样可以给一些参数指定默认值，这样的话我们在调用命令的时候其实就可以不用指定这些参数的值。格式如下</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newcommand</span><span class="token punctuation">{</span><span class="token function selector">\调</span>用格式<span class="token punctuation">}</span><span class="token punctuation">[</span>参数个数<span class="token punctuation">]</span><span class="token punctuation">[</span>第一个参数的默认值<span class="token punctuation">]</span>...<span class="token punctuation">[</span>第n个参数的默认值<span class="token punctuation">]</span><span class="token punctuation">{</span>实际执行的代码<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而在实际调用的时候，我们通过<code>{}</code>指定的参数就是第一个没有默认值的参数</p><p>例如下面</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newcommand</span><span class="token punctuation">{</span><span class="token function selector">\sumSquare</span><span class="token punctuation">}</span><span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function selector">\alpha</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token equation string">$$</span>(#2+#3)^#1<span class="token equation string">$$</span><span class="token punctuation">}</span><span class="token function selector">\sumSquare</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">{</span>y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们首先指定了这个命令接受三个参数，然后指定第一个参数的默认值是\alpha。</p><p>编译之后的效果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128160734885.png" alt="使用参数的默认值"></p><p>如果我们想要改变默认参数的值的话，我们就在一半参数前用<code>[]</code>来指定这些默认参数的新的值</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newcommand</span><span class="token punctuation">{</span><span class="token function selector">\sumSquare</span><span class="token punctuation">}</span><span class="token punctuation">[</span>3<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function selector">\alpha</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token equation string">$$</span>(#2+#3)^<span class="token punctuation">{</span>#1<span class="token punctuation">}</span><span class="token equation string">$$</span><span class="token punctuation">}</span><span class="token function selector">\sumSquare</span><span class="token punctuation">[</span>12<span class="token punctuation">]</span><span class="token punctuation">{</span>x<span class="token punctuation">}</span><span class="token punctuation">{</span>y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译之后的效果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128161038000.png" alt="改变参数的默认值"></p><h2 id="3-Overwrite-a-command"><a href="#3-Overwrite-a-command" class="headerlink" title="3. Overwrite a command"></a>3. Overwrite a command</h2><p>Latex中其实是有条件判断语句的，因此我们其实可以搭配着条件判断语句来实现程序流程的控制。因此，在有些情况下我们就需要重写一下已经定义过的命令。此时如果我们使用<code>\newcommand</code>的话编译器就会报错。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128161742577.png" alt="直接使用newcommand会报错"></p><p>因此，我们此时就需要用<code>\renewcommand</code>来重写一个命令。<code>\renewcommand</code>和<code>\newcommand</code>一模一样，只不过重复的时候会重写。因此下面就举一个简单的例子</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\newcommand</span><span class="token punctuation">{</span><span class="token function selector">\overWrite</span><span class="token punctuation">}</span><span class="token punctuation">{</span>x+y<span class="token punctuation">}</span><span class="token function selector">\overWrite</span><span class="token function selector">\newline</span><span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\overWrite</span><span class="token punctuation">}</span><span class="token punctuation">{</span>a+b<span class="token punctuation">}</span><span class="token function selector">\overWrite</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128162613742.png" alt="重写命令的例子"></p>]]></content>
      
      
      <categories>
          
          <category> Latex基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
            <tag> Overleaf </tag>
            
            <tag> Latex Commands </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex包与类-2: Writing my own class files</title>
      <link href="/2022/01/27/latex-bao-yu-lei-2-bian-xie-zi-ji-de-lei/"/>
      <url>/2022/01/27/latex-bao-yu-lei-2-bian-xie-zi-ji-de-lei/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了如何编写Latex中的类（Class）</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127231805688.png" alt="Latex Project"></p><h1 id="Latex包与类-2-Writing-my-own-class"><a href="#Latex包与类-2-Writing-my-own-class" class="headerlink" title="Latex包与类-2: Writing my own class"></a>Latex包与类-2: Writing my own class</h1><p>有的时候，我们需要高度定制化一个文章出来，那么这个时候最佳的选择就是自己从头开始写一个<code>.cls</code>类文件。本文介绍了一个<code>.cls</code>类文件的主要的结构以及一些必要的命令。</p><h2 id="1-Before-Writing"><a href="#1-Before-Writing" class="headerlink" title="1. Before Writing"></a>1. Before Writing</h2><p>在开始编写自己的<code>.cls</code>类文件之前，我们首先需要干两件事以确保自己是不是真的要写一个<code>.cls</code>类文件出来：</p><ol><li>在<a href="http://www.ctan.org/ctan-portal/search/">CTAN (Comprehensive Tex Archive Network)</a>上看看有没有已经写了并上传一个我们最终目标相似的<code>.cls</code>文件。如果有的话其实我们只需要改改就可以了，这样就可以节省我们大量的时间，因为我们的重点在于组织内容而非格式编排</li><li>根据前一篇文章，确定自己到底是要写一个类文件还是包。因为如果决定错的话，未来做出来的模板的扩展性就很差，而且也会影响到最终成果的美观程度</li></ol><h2 id="2-General-Structure"><a href="#2-General-Structure" class="headerlink" title="2. General Structure"></a>2. General Structure</h2><p>一般来说，一个<code>.cls</code>文件需要有以下四个部分/可以被分为以下四个部分：</p><ol><li>定义类（Identification）：在根本上<code>.cls</code>和<code>.tex</code>、<code>.sty</code>文件没什么区别，都是文本文件，因此Latex判断一个文件到底是不是<code>.cls</code>文件是根据特殊的命令的。因此一个<code>.cls</code>文件首先需要通过Latex提供的命令来声明自己是Latex的类文件。</li><li>声明依赖及变量定义（Preliminary Declarations）：类文件之间、类文件与包之间会相互引用，因此需要首先声明我们自己写的类文件以来的类和包。此外，一些全局变量的声明也是在这里定义的。</li><li>声明/提供选项（Options）：一个类通过提供不同的选项，来实现不同的配置。因此在声明完依赖和变量之后就声明该类提供哪些选项以及该类如何处理这些选项</li><li>更多的定义（More Declarations）：类文件的主题</li></ol><h3 id="A-Identification"><a href="#A-Identification" class="headerlink" title="A. Identification"></a>A. Identification</h3><p>Identification的作用就是让一个类文件声明自己是一个类文件，定义该类文件提供的类。</p><p>而进行Identification的语法就两句话</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\NeedsTeXFormat</span><span class="token punctuation">{</span>LaTeX2e<span class="token punctuation">}</span><span class="token punctuation">[</span>2021/1/28<span class="token punctuation">]</span><span class="token function selector">\ProvidesClass</span><span class="token punctuation">{</span>exampleclass<span class="token punctuation">}</span><span class="token punctuation">[</span>2021/01/28 Example LaTeX class<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>\NeedsTexFormat</code>定义了编译这个类需要的Latex编译器版本，后面的<code>[]</code>内的内容是可选选项，表示日期</li><li><code>\ProvidesClass</code>定义了这个类文件提供的类，花括号中是提供的类名，而后面的<code>[]</code>中的内容也是日期，可以加上一些说明文字</li><li>日期按照<code>yyyy/mm/dd</code>的格式书写</li></ul><h3 id="B-Preliminary-declarations"><a href="#B-Preliminary-declarations" class="headerlink" title="B. Preliminary declarations"></a>B. Preliminary declarations</h3><p>一般来说，我们的文章都是需要使用到别的类、包的，因此我们就可以在<code>.cls</code>文件中定义这些依赖</p><p>例如下面我们扩充了上面的话</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\NeedsTeXFormat</span><span class="token punctuation">{</span>LaTeX2e<span class="token punctuation">}</span><span class="token function selector">\ProvidesClass</span><span class="token punctuation">{</span>exampleclass<span class="token punctuation">}</span><span class="token punctuation">[</span>2014/08/16 Example LaTeX class<span class="token punctuation">]</span><span class="token function selector">\newcommand</span><span class="token punctuation">{</span><span class="token function selector">\headlinecolor</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\normalcolor</span><span class="token punctuation">}</span><span class="token function selector">\LoadClass</span><span class="token punctuation">[</span>twocolumn<span class="token punctuation">]</span><span class="token punctuation">{</span>article<span class="token punctuation">}</span><span class="token function selector">\RequirePackage</span><span class="token punctuation">{</span>xcolor<span class="token punctuation">}</span><span class="token function selector">\definecolor</span><span class="token punctuation">{</span>slcolor<span class="token punctuation">}</span><span class="token punctuation">{</span>HTML<span class="token punctuation">}</span><span class="token punctuation">{</span>882B21<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li>我们首先通过<code>\newcommand</code>命令自己定义了一个新的命令，后面我们可能会用到这个命令。<code>\newcommand</code>第一个参数是新的命令的名称，第二个参数是调用了新的命令执行的代码。这里的<code>\normalcolor</code>就是恢复到默认颜色。在word中我们设置了前面的字符是某种颜色之后，如果我们不修改的话那么后面的字符也成了相同的颜色，在Latex中也是一样的。</li><li>接下来<code>\LoadClass</code>命令加载了<code>article</code>体裁的文章。<code>\LoadClass</code>类似于<code>import</code>和<code>#include</code>都是文本意义上的复制粘贴。因此我们这里就表示我们自己的这个类是在<code>article</code>的基础上修改得到的。同样类比于<code>import</code>和<code>#include</code>，我们在完成了加载其他类之后，我们就可以使用这个类里面定义的名了。此外我们这里就是在加载<code>article</code>这个class的同时指定了<code>twocolum</code>参数，即双栏文章。</li><li>然后，<code>\RequirePackage</code>指明了我们这个类文件以来的包。而<code>\RequirePackage</code>其实除了指明我们用的包以外，还直接帮助我们导入了这个包，因此就和<code>\usepackage</code>一样，我们也可以在花括号<code>{}</code>前使用中括号<code>[]</code>来传入参数</li><li>最后，使用<code>\definecolor</code>命令定义了一个颜色缩写，第一个参数是缩写的名称，第二个参数是色彩系统，第三个参数是色彩系统中该色彩具体的值</li></ul><h3 id="C-Options"><a href="#C-Options" class="headerlink" title="C. Options"></a>C. Options</h3><p>为了增加类的扩展性以适应同一体裁不同的文章的具体要求，我们接下来在类中定义一系列的选项，以及处理具体参数值的语句。</p><p>注意，在Latex中，参数是在导入类的时候通过<code>[]</code>来选择的，如果把整个class当做一个函数的话，这里有点类似于我们这里定义函数的参数，而在<code>.tex</code>导入类的时候则类比于传入具体的参数值</p><p>我们下面就添加了更多的语句</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\NeedsTeXFormat</span><span class="token punctuation">{</span>LaTeX2e<span class="token punctuation">}</span><span class="token function selector">\ProvidesClass</span><span class="token punctuation">{</span>exampleclass<span class="token punctuation">}</span><span class="token punctuation">[</span>2014/08/16 Example LaTeX class<span class="token punctuation">]</span><span class="token function selector">\newcommand</span><span class="token punctuation">{</span><span class="token function selector">\headlinecolor</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\normalcolor</span><span class="token punctuation">}</span><span class="token function selector">\RequirePackage</span><span class="token punctuation">{</span>xcolor<span class="token punctuation">}</span><span class="token function selector">\definecolor</span><span class="token punctuation">{</span>slcolor<span class="token punctuation">}</span><span class="token punctuation">{</span>HTML<span class="token punctuation">}</span><span class="token punctuation">{</span>882B21<span class="token punctuation">}</span><span class="token function selector">\DeclareOption</span><span class="token punctuation">{</span>onecolumn<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\OptionNotUsed</span><span class="token punctuation">}</span><span class="token function selector">\DeclareOption</span><span class="token punctuation">{</span>green<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\headlinecolor</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\color</span><span class="token punctuation">{</span>green<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function selector">\DeclareOption</span><span class="token punctuation">{</span>red<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\headlinecolor</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\color</span><span class="token punctuation">{</span>slcolor<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function selector">\DeclareOption*</span><span class="token punctuation">{</span><span class="token function selector">\PassOptionsToClass</span><span class="token punctuation">{</span><span class="token function selector">\CurrentOption</span><span class="token punctuation">}</span><span class="token punctuation">{</span>article<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function selector">\ProcessOptions</span><span class="token function selector">\relax</span><span class="token function selector">\LoadClass</span><span class="token punctuation">[</span>twocolumn<span class="token punctuation">]</span><span class="token punctuation">{</span>article<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>\DeclareOption</code>命令接受两个必须的参数，第一个参数是该选项的名称，而第二个参数是若指定该参数/给参数传入数值后需要执行的命令<ul><li><code>\OptionNotUsed</code>会在日志里输出一句话，表示这个选项不能使用。这样的话当用户在使用<code>\OptionNotUsed</code>这个参数的时候就会被忽略掉，这样就强制文章是双栏的，这样做是为了覆盖掉基类的选项</li><li><code>\renewcommand</code>用于重新定义一个已经定义过的命令，这里就是说如果传入了<code>green</code>选项的话，那么就把标题的颜色设置为绿色，如果传入了<code>red</code>选项的话，那么就使用上面定义的红色</li><li><code>\DeclareOption*{}</code>则表示没有传入参数时候执行的代码，因此只需要一个参数，即执行的命令即可</li><li><code>\PassOptionsToClass{options-list}{package-name}</code>用于将optons-list参数中列出的选项（不止一个时用逗号隔开）传递给包package-name。即执行了package-name中这些option对应的代码，相当于在<code>\RequirePackage</code>中指定/传入了option-list中的选项。</li><li><code>\CurrentOption</code>表示当前所有的选项</li></ul></li><li>注意，前面<code>\DeclareOption</code>都只是声明了选项和如果指定该选项执行的代码，而<code>\ProcessOptions\relax</code>这一句话才表示真正的处理传入的参数，找到对应的定义，执行代码。所以这一句话必须在所有的<code>\DeclaraOption</code>后面</li></ul><h3 id="D-More-declarations"><a href="#D-More-declarations" class="headerlink" title="D. More declarations"></a>D. More declarations</h3><p>在声明完选项之后，我们就可以开始对文章中的细节进行设置了，包括行间距、标题字号等等。例如</p><pre class="line-numbers language-latex"><code class="language-latex"><span class="token function selector">\NeedsTeXFormat</span><span class="token punctuation">{</span>LaTeX2e<span class="token punctuation">}</span><span class="token function selector">\ProvidesClass</span><span class="token punctuation">{</span>exampleclass<span class="token punctuation">}</span><span class="token punctuation">[</span>2014/08/16 Example LaTeX class<span class="token punctuation">]</span><span class="token function selector">\newcommand</span><span class="token punctuation">{</span><span class="token function selector">\headlinecolor</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\normalcolor</span><span class="token punctuation">}</span><span class="token function selector">\RequirePackage</span><span class="token punctuation">{</span>xcolor<span class="token punctuation">}</span><span class="token function selector">\definecolor</span><span class="token punctuation">{</span>slcolor<span class="token punctuation">}</span><span class="token punctuation">{</span>HTML<span class="token punctuation">}</span><span class="token punctuation">{</span>882B21<span class="token punctuation">}</span><span class="token function selector">\DeclareOption</span><span class="token punctuation">{</span>onecolumn<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\OptionNotUsed</span><span class="token punctuation">}</span><span class="token function selector">\DeclareOption</span><span class="token punctuation">{</span>green<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\headlinecolor</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\color</span><span class="token punctuation">{</span>green<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function selector">\DeclareOption</span><span class="token punctuation">{</span>red<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\headlinecolor</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\color</span><span class="token punctuation">{</span>slcolor<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function selector">\DeclareOption*</span><span class="token punctuation">{</span><span class="token function selector">\PassOptionsToClass</span><span class="token punctuation">{</span><span class="token function selector">\CurrentOption</span><span class="token punctuation">}</span><span class="token punctuation">{</span>article<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function selector">\ProcessOptions</span><span class="token function selector">\relax</span><span class="token function selector">\LoadClass</span><span class="token punctuation">[</span>twocolumn<span class="token punctuation">]</span><span class="token punctuation">{</span>article<span class="token punctuation">}</span><span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\maketitle</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">%</span>    <span class="token function selector">\twocolumn</span><span class="token punctuation">[</span><span class="token comment" spellcheck="true">%</span>        <span class="token function selector">\fontsize</span><span class="token punctuation">{</span>50<span class="token punctuation">}</span><span class="token punctuation">{</span>60<span class="token punctuation">}</span><span class="token function selector">\fontfamily</span><span class="token punctuation">{</span>phv<span class="token punctuation">}</span><span class="token function selector">\fontseries</span><span class="token punctuation">{</span>b<span class="token punctuation">}</span><span class="token comment" spellcheck="true">%</span>        <span class="token function selector">\fontshape</span><span class="token punctuation">{</span>sl<span class="token punctuation">}</span><span class="token function selector">\selectfont</span><span class="token function selector">\headlinecolor</span>        <span class="token function selector">\@</span>title        <span class="token function selector">\medskip</span>        <span class="token punctuation">]</span><span class="token comment" spellcheck="true">%</span><span class="token punctuation">}</span><span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\section</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">%</span>    <span class="token function selector">\@</span>startsection    <span class="token punctuation">{</span>section<span class="token punctuation">}</span><span class="token punctuation">{</span>1<span class="token punctuation">}</span><span class="token punctuation">{</span>0pt<span class="token punctuation">}</span><span class="token punctuation">{</span>-1.5ex plus -1ex minus -.2ex<span class="token punctuation">}</span><span class="token comment" spellcheck="true">%</span>    <span class="token punctuation">{</span>1ex plus .2ex<span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\large</span><span class="token function selector">\sffamily</span><span class="token function selector">\slshape</span><span class="token function selector">\headlinecolor</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">%</span><span class="token punctuation">}</span><span class="token function selector">\renewcommand</span><span class="token punctuation">{</span><span class="token function selector">\normalsize</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token function selector">\fontsize</span><span class="token punctuation">{</span>9<span class="token punctuation">}</span><span class="token punctuation">{</span>10<span class="token punctuation">}</span><span class="token function selector">\selectfont</span><span class="token punctuation">}</span><span class="token function selector">\setlength</span><span class="token punctuation">{</span><span class="token function selector">\textwidth</span><span class="token punctuation">}</span><span class="token punctuation">{</span>17.5cm<span class="token punctuation">}</span><span class="token function selector">\setlength</span><span class="token punctuation">{</span><span class="token function selector">\textheight</span><span class="token punctuation">}</span><span class="token punctuation">{</span>22cm<span class="token punctuation">}</span><span class="token function selector">\setcounter</span><span class="token punctuation">{</span>secnumdepth<span class="token punctuation">}</span><span class="token punctuation">{</span>0<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而这些内容都涉及到Latex具体细节的设置了，例如：字号、字体等等。因此这里就不展开了。</p><p>然而More Declaration这一部分才是一个<code>.cls</code>文件关键的地方。真正决定长什么样子的地方就在这里，因此我们要学习怎么学<code>.cls</code>文件的编写，另外一个重要的内容就是学习如何写More Declaration。</p><p>而学习的方法只有一个，就是看别人是怎么写的，从他们写的<code>.cls</code>中来学习</p><h2 id="3-Handling-errors"><a href="#3-Handling-errors" class="headerlink" title="3. Handling errors"></a>3. Handling errors</h2><p>因为我们的类中也会执行代码，因此也会存在代码运行出错的可能，此时我们就需要去处理错误。而Latex并不完全是一个编程语言，因此不存操作try……except……、catch……throw……这类异常处理机制。</p><p>为此，Latex中的处理错误的机制其实就是抛出异常，然后让写文章的人自己根据日志来进行修改，因此常用的在日志中报错的命令有：</p><ul><li><code>\ClassError{*class-name*}{*error-text*}{*help-text*}</code>：Error直接中止编译，对应Overleaf中的红色。此外三个参数分别是报错的时候说哪一个类在报错，保存的信息，提供的帮助信息</li><li><code>\ClassWarning{*class-name*}{*warning-text*}</code>：Warning只会警告，但是编译过程并不会停下来，对应Overleaf中的黄色。参数和Error类似</li><li><code>\ClassWarningNoLine{*class-name*}{*warning-text*}</code>：NoLine的Warning效果和上面的warning一样，但是不会报行号</li><li><code>\ClassInfo{*class name*}{*info-text*}</code>：打印出来信息就结束了，对应Overleaf中的蓝色</li></ul><h2 id="4-Commonly-used-commands"><a href="#4-Commonly-used-commands" class="headerlink" title="4. Commonly used commands"></a>4. Commonly used commands</h2><p>下面列出来了在class中常用的一些命令</p><ul><li><code>\newcommand{*name*}{*definition*}</code>：上面介绍过了，略。参考<a href="https://www.overleaf.com/learn/latex/Commands%23Defining_a_new_command">new command</a>，其中有更深入的讲解</li><li><code>\renewcommand{}{}</code>：同样说过了</li><li><code>\providecommand{}{}</code>：和<code>\newcommand</code>一样的效果，但是如果命令已经存在，那么这个命令不会覆盖之前的命令，而知直接被无视掉</li><li><code>\CheckCommand{}{}</code>：语法和<code>\newcommand</code>一样，但是会先检查一下这个命令是否存在，以及如果存在了时候和<code>\CheckCommand{}{}</code>中提供的定义有一样。不一样的话就会产生一个warning。</li><li><code>\setlength{}{}</code>：第一个参数是要展示的内容，第二个参数是长度</li><li><code>\mbox{}</code>：创建一个装着<code>{}</code>里内容的盒子。</li><li><code>\fbox{}</code>：和<code>\mbox{}</code>一样，但是这个盒子的位置会浮动。效果则类似于<code>\begin{figure}</code>环境时候会根据内容自动寻找合适的位置</li></ul>]]></content>
      
      
      <categories>
          
          <category> Latex包与类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
            <tag> Overleaf </tag>
            
            <tag> Latex Package </tag>
            
            <tag> Latex Class </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex包与类-1: Understanding packages and class files</title>
      <link href="/2022/01/27/latex-bao-yu-lei-1-li-jie-bao-yu-lei/"/>
      <url>/2022/01/27/latex-bao-yu-lei-1-li-jie-bao-yu-lei/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了Latex中的包（Package）与类（Class）</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127231805688.png" alt="Latex Project"></p><h1 id="Latex包与类-1-Understanding-packages-and-class-files"><a href="#Latex包与类-1-Understanding-packages-and-class-files" class="headerlink" title="Latex包与类-1: Understanding packages and class files"></a>Latex包与类-1: Understanding packages and class files</h1><p>我们在使用Latex编写PDF文件的时候，我们通常关注的有两件事：</p><ul><li>我们首先关注PDF的外观，即PDF的看起来是什么样的，例如什么样的纸A4还是A3、页边距是多少、行间距是多少等等。<strong>这些规定了一个PDF文档看起来是什么样的内容加在一起，统称为格式（Formatting）</strong>。</li><li>我们其次会关注PDF具有的一些功能，例如我们通过<code>\cite</code>来引用文献，通过<code>\url</code>来实现点击网页链接（超链接跳跃）。<strong>这些为一个PDF提供了额外的功能的内容加在一起，统称为功能(性)（Functionality）</strong>。</li></ul><blockquote><p>PS：有些英文的内容翻译成中文真的不好把握，因此下面还是使用Formatting和Functionality来分别指代上面</p></blockquote><p>因此，<strong>外观</strong>和<strong>功能</strong>就是我们在通过Latex写一个PDF文件时候所关注的两个方面。为了控制一个PDF的外观和实现更多的功能：</p><ul><li>Latex提供了一些命令来控制一个PDF的格式</li><li>Latex还提供了一些命令来为一个PDF实现更多的功能</li></ul><p>因此，Latex中就提供了分别用于控制格式和功能的命令。</p><p>本文后面就将对这些命令及其连带的概念进行讲解。</p><p>注意，本文的前提是通过docker已经运行了一个Overleaf（ShareLatex的镜像），本文后面的代码也将基于此进行演示。</p><h2 id="1-tex、cls、sty文件"><a href="#1-tex、cls、sty文件" class="headerlink" title="1. tex、cls、sty文件"></a>1. tex、cls、sty文件</h2><p>为了实现内容、格式、功能的分离，Latex中分别提供了三种文件来分别保存内容、格式和功能的命令，这三种文件分别是：<code>.tex</code>、<code>.cls</code>和<code>.sty</code>文件</p><h3 id="A-tex文件"><a href="#A-tex文件" class="headerlink" title="A. .tex文件"></a>A. .tex文件</h3><p><code>.tex</code>文件中存放着当前这个PDF所表示的文章的内容。我们在<code>.tex</code>文件中编写我们需要表达的内容。</p><blockquote><p>注意，这里的文章指论文、书信、书等记录信息的文字。他们只是在格式上有所不用。</p></blockquote><p>在编写<code>.tex</code>文件的过程中，我们调用<code>.sty</code>文件中提供的命令（可以理解为函数）即可实现一定的功能，例如插入图片<code>\includefigure</code>，插入超链接<code>\url</code>，进行引用<code>\cite</code>等等。</p><p>而在编译生成PDF文件的时候，又会根据我们在<code>.cls</code>文件中写好的排版格式来安排我们书写的内容</p><p>例如下面的<code>.tex</code>文件</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127221811704.png" alt=".tex文件"></p><p>而最后通过编译得到的PDF如下。可以看到，Latex排版系统不仅帮我们完成了排版，还帮我们实现了图片的交叉引用、图片的插入等功能。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127222107535.png" alt="编译后得到的PDF文件"></p><h3 id="B-cls文件"><a href="#B-cls文件" class="headerlink" title="B. .cls文件"></a>B. .cls文件</h3><p><code>.cls</code>文件中存放着当前这个PDF文件格式，包括但不限于上面说的行间距、段间距。</p><p>一般来说，一种题材/格式的文章就会有一个自己的<code>.cls</code>文件。例如下面，<code>letter</code>格式就有自己的<code>.cls</code>文件。</p><p>我们可以看到，<code>.cls</code>文件中定义了包括各种型号的纸的大小、字体大小等内容。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127221222508.png" alt="letter题材的文章有对应的cls文件定义格式"></p><p>我们可以在<code>.tex</code>文件中指定使用哪一种格式。如果没有指定的话，Latex在排版的时候就会使用默认的行间距的配置参数，即默认格式。</p><h3 id="C-sty文件"><a href="#C-sty文件" class="headerlink" title="C. .sty文件"></a>C. .sty文件</h3><p><code>.sty</code>文件中存放着当前这个PDF可以调用的诸多命令（定义了很多函数）。通过调用这些命令我们就可以实现不同的功能。</p><p>例如<code>hyperref</code>包的sty文件中提供了<code>\url</code>命令，通过这个命令我们就可以实现点击超链接跳转到网页去这个功能</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127215723865.png" alt="hyperref包的sty文件中定义了该包提供的命令（函数）"></p><h2 id="2-包（Package）与类文件（class-file）"><a href="#2-包（Package）与类文件（class-file）" class="headerlink" title="2. 包（Package）与类文件（class file）"></a>2. 包（Package）与类文件（class file）</h2><h3 id="A-Package"><a href="#A-Package" class="headerlink" title="A. Package"></a>A. Package</h3><p>在上面<code>.sty</code>文件的图中，我们能看到sty文件里的内容和编程语言非常像，包括变量定义、程序流程控制语句if……else……、函数定义等等，基本上一应俱全。</p><p>也正是因为和编程语言如此相似，甚至都出现了函数定义，因此<code>.sty</code>文件也会存在代码复用性的问题。</p><p>所以，我们就可以把自己写好的<code>.sty</code>文件上传到网上，让大家来下载，从而实现代码复用。类似于其他语言中的库的这个概念，我们一般说的Latex包其实指的就是指我们上传到网上的<code>.sty</code>文件。</p><p>我们可以看看有多少包</p><pre class="line-numbers language-shell"><code class="language-shell">find ./usr/ -name "*.sty" | tr / "\n" | grep ".sty"find ./usr/ -name "*.sty" | tr / "\n" | grep ".sty" | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127224443223.png" alt="有5809个包"></p><p>当然，这个数字是比较粗略的，因为有的比较大的包里面会有多个<code>.sty</code>文件。</p><h3 id="B-Class-file"><a href="#B-Class-file" class="headerlink" title="B. Class file"></a>B. Class file</h3><p>我们在前面说过，在现实的写作中往往是一类体裁的文章就会有对应的格式。例如书信有书信的要求，论文有论文的要求。而这些就某一类体裁，其格式也会有微小的差异。例如对于论文，有学位论文、会议论文、期刊论文等等具体的区分。</p><p>虽然这些论文体裁不同，但是在大体上他们遵从的格式都是一样的，例如相同/类似的参考文献罗列格式、相同/类似的图表插入、引用格式等等。</p><p>所以，在Latex中，除了包以外的另一个概念就是Class。Latex中将一类大的体裁视为一类对象，例如<code>letter</code>，<code>letter</code>类中定义了大体上信的格式，同时针对家书、公函、联络信等不同的信提供了选项。<strong>一个Class定义了这一大类体裁的文章所共有的格式，并且为多种不同的具体的体裁的文章提供了选项</strong></p><p>在Latex定义格式的文件是<code>.cls</code>文件，因此<code>.cls</code>文件又被称为class file（其实缩写就能看出来。。。）</p><p>我们在编写<code>.cls</code>文件的时候就一定要有一个<code>\ProvidesClass</code>命令，以在<code>.tex</code>文件中使用该类体裁作为文章的体裁。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127225654975.png" alt="letter.cls文件中提供了letter类"></p><p>最后关于具体的Package、Class file怎么写，我们在后面会进行讲解</p><h2 id="3-Difference-between-classes-and-packages"><a href="#3-Difference-between-classes-and-packages" class="headerlink" title="3. Difference between classes and packages"></a>3. Difference between classes and packages</h2><p>最后，我们讲讲class和package的区别。因为在我们自己动手开始写的时候，我们要自己定义格式和功能，往往会搞不太清楚到底是要写一个package出来还是写一个class出来。因为两者都比较类似，都是通过定义提供了新的命令。这个我们在后面讲解如何写class和package的时候就会有所体会</p><p>其实，我们可以通过一个简单的原则来判断到底是要写一个package出来还是一个class出来，即：我们要实现的内容是否会给独立于体裁外的内容添加新的功能，如果是那么就要写一个package，即写一个<code>.sty</code>文件；而如果我们要实现的是用于控制最终PDF的长相（外观）的命令，那么就需要写一个class出来，即写一个<code>.cls</code>文件。</p><p>举例来说，如果一个公司现在需要一个新的命令来便捷的高亮一些词句，那么高亮这个功能是和体裁无关的，因此我们应该写一个package出来。而如果一个公司想要一个以公司logo作为水印的宣传海报，那么这个是和格式强相关的，因此我们就应该写一个class文件出来。</p>]]></content>
      
      
      <categories>
          
          <category> Latex包与类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
            <tag> Overleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo gen文章渲染不全问题</title>
      <link href="/2022/01/27/hexo-gen-wen-zhang-xuan-ran-bu-quan-wen-ti/"/>
      <url>/2022/01/27/hexo-gen-wen-zhang-xuan-ran-bu-quan-wen-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了hexo deploy失败的解决方案</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127181008020.png" alt="hexo 文章渲染不全"></p><h1 id="hexo-gen文章渲染不全问题"><a href="#hexo-gen文章渲染不全问题" class="headerlink" title="hexo gen文章渲染不全问题"></a>hexo gen文章渲染不全问题</h1><p>最近在因为参加的一些项目是有版权要求的，因此就需要加上密码保护版权。之前在我写的<code>hexo博客搭建</code>系列文章中写了如何给文章设置密码。</p><p>因为设置密码的时候需要在博客的Markdown文件里写上SHA256加密后的密码，因此就需要一些网上的工具来帮助进行加密。我在那篇文章里写了一些提供了SHA256位加密工具的网站，可是当我自己查看我的网页的时候，却发现网页渲染不全。</p><h2 id="1-问题现象"><a href="#1-问题现象" class="headerlink" title="1. 问题现象"></a>1. 问题现象</h2><p>下面是渲染不全的网页</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127181008020.png" alt="渲染不全的网页"></p><p>图中红框框出来的部分都是没有渲染出来的内容。</p><p>而一个正常的页面应该是这样的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127185215558.png" alt="渲染完全的页面"></p><p>可以看到，首先是文章渲染不全，然后顶部的绿色的选项卡没了，右上方的目录没了，右下角的返回顶部和目录按钮都没了。此外我开的樱花特效也没了。</p><h2 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2. 解决办法"></a>2. 解决办法</h2><p>在经过一番搜索之后，都没有在网上找到类似的问题，于是决定自己分析一下问题在哪。因为hexo框架发布文章的时候是根据Markdown中的标记转换为html，而css、JavaScript等文件都是由主题提前定义好的。考虑到别的文章都没有问题，只有这个文章出了这个问题，因此这个问题大概率不是由于主题的问题，而是发生在我这篇文章上。</p><p>更具体的来说，我怀疑问题出来了代码的转换上。于是我扒了一下网页的源码</p><p>看到code标签之后就没有了内容了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127185935423.png" alt="源码code之后就没了"></p><p>可是我看到为什么会有一个title标签，于是我点开看了一下这个标签里的内容。不看不知道，一看吓一跳，title标签里的内容竟然就是没有显示完的文章</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127190150483.png" alt="title标签吓死人"></p><p>再看看Markdown源文件，翻到对应的部分，这下就看到了凶手！</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127190329842.png" alt="凶手竟然是代码块里的内容！" style="zoom:67%;"></p><p>这下真相大白了。我在代码块里无意写成了html标签的形式的内容，而hexo在生成html的时候并不会对代码块的字符做转义，相反的，只是把需要转换（例如mathjax）和添加（例如css）的部分添加进去。</p><p>而title这个标签在hexo的主题（我用的是matery主题）下并没有进行定义，因此并不会显示出来title内部的文字，因此就出现了上面渲染错误的效果。</p><p>因此，解决方法就很简单，要么自己手动给code fence里的内容转义，要么换一种表达。我感觉转义有点丑陋，所以换称中文表达即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127190850347.png" alt="更改之后的代码块"></p><p>最后我们修改之后的效果如下，everything goes fine <span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127191001549.png" alt="完美解决:)"></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Research Skills Workshop 2</title>
      <link href="/2022/01/27/research-proposal-workshops-2/"/>
      <url>/2022/01/27/research-proposal-workshops-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是本文是CCSIT Research Skills Workshop 2的笔记。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129005132562.png" alt="Research Skills Workshop 2"></p><p>密码：ResearchSkillsWorkshop-2</p><h1 id="Research-Proposal-Workshops-2"><a href="#Research-Proposal-Workshops-2" class="headerlink" title="Research Proposal Workshops 2"></a>Research Proposal Workshops 2</h1><p>本节课是Research Proposal workshops的第二节课。在上节课我们集中讲解了Research Proposal，具体而言：</p><ul><li>我们首先讲解了什么是Research Proposal。其实Research Proposal就是一种有特殊目的的文章，我们在文章里要回答一些特殊的问题。</li><li>然后我们讨论了为什么要写Research Proposal（Research Proposal的重要性）。具体来说就是首先它帮助大学选出来更加符合他们的MS/PhD项目的学生，其次它能够帮助我们更好的展示我们自己。</li><li>接下来我们讨论了一下三种类型的研究，例如：应用研究、实证研究以及理论研究</li></ul><p>而一个Research Proposal的标准的结构如下图：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124185654379.png" alt="标准的Research Proposal的结构" style="zoom:67%;"></p><p>上节课经过讨论，我们讲解了如何找到当前研究领域内的空白，就对应了<code>title</code>和<code>Research questions</code>这两个部分。具体来说：</p><ul><li>首先想清楚研究的动机，即Research Motivation</li><li>然后通过阅读文章、向老师寻求帮助等方法来找到一个没有被人研究的领域</li><li>然后按照清晰、简洁、复杂、争论的原则，从这个领域中抽出来一个问题</li></ul><p>而本节课主要关注与Literature Review，因为在我们的Research Proposal、最终的论文中都需要有Literature Review部分。讲解以下内容：</p><ul><li>Importance of motivation</li><li>What is literature review and why write it？</li><li>How to search relevant literature?</li><li>How to identify key themes, dabates, and gaps in the field?</li><li>How to structure and write your literature review</li></ul><h2 id="1-Importance-of-motivation"><a href="#1-Importance-of-motivation" class="headerlink" title="1. Importance of motivation"></a>1. Importance of motivation</h2><p>现在假设我们已经选择了一个课题了，我们对这个课题非常的感兴趣，那么我们现在需要做的一个事情就是向别人解释我们的动机，即<strong>解释我们为什么选择这个课题</strong></p><p>因为我们可以选择一个课题并且通过努力给出来这个课题的结论，可是一个重要的问题就是，为什么人们要要关注你的研究？或者说你的研究的影响是什么？</p><p>因此我们<strong>首先</strong>就需要通过说清楚我们的Motivation，在Motivation中来解释课题的影响和重要性。</p><p>而我们一般说影响的时候，其实包含两个方面的影响：</p><ul><li>如果成功做完了你的项目的话，这个项目带来的给学术界的影响</li><li><p>项目带来的社会影响</p><p><strong>此外</strong>，我们还需要在Motivation中讲清楚为什么我们认为没有人之前做过相关的课题</p></li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128223419354.png" alt="importance of motivation" style="zoom:67%;"></p><p>距举例来说，现在某人的课题是使用AI来对病人的病理性心音进行分类。这个项目的社会影响在于，该项目的成果可以用于向贫困地区提供医疗保健和诊断服务，避免了这些地区的人们因为贫困而无法方便的接触到医生和体检项目。而该项目的学术影响在于他可以探究从信号中提取到重要特征的不同的方法</p><h2 id="2-What-is-literature-review"><a href="#2-What-is-literature-review" class="headerlink" title="2. What is literature review?"></a>2. What is literature review?</h2><p>当说到文献综述的时候，我们首先需要明白的就是文献综述的作用。文献综述的作用是对于特定的课题的文献进行评论，以展示评论者在该领域的位置以及学术储备。</p><p>通常来说，在文献综述中我们需要对已有的文章进行高度凝练的总结，然后比较这些文章的方法，确定他们的局限性以便于解释我们的研究是怎样发挥作用的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128224721026.png" alt="What is literature review" style="zoom: 80%;"></p><h2 id="3-Why-write-a-literature-review"><a href="#3-Why-write-a-literature-review" class="headerlink" title="3. Why write a literature review"></a>3. Why write a literature review</h2><p>选择写一个literature review原因自然就是因为literature review有用，因此下面就将说说literature review的作用：</p><ul><li>首先literature review可以展示我们对课题的熟悉程度以及我们的学术背景</li><li>他也会促使我们形成研究的理论框架和研究方法</li><li>可以将我们的理论与其他研究者的成果和理论进行定位</li><li>还可以展示我们的研究是如何弥补了当前领域的一个空白，或者说对一个还在争论中的问题做出贡献</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128225419255.png" alt="literature review的作用" style="zoom: 80%;"></p><h2 id="4-Search-for-relevant-literature"><a href="#4-Search-for-relevant-literature" class="headerlink" title="4. Search for relevant literature"></a>4. Search for relevant literature</h2><h3 id="A-Key-to-find-relevant-literature-Massive-reading"><a href="#A-Key-to-find-relevant-literature-Massive-reading" class="headerlink" title="A. Key to find relevant literature: Massive reading"></a>A. Key to find relevant literature: Massive reading</h3><p>一般来说，查找我们的问题相关的文献是很难的。例如下面这个漫画，为了我们的这篇paper，我们一共找了248篇paper，可是我们实际上只读了其中的107篇，然后我们只理解了其中的5篇，而最后和我们的论文直接相关（方法基于此）只有2篇。可是最后我们的参考文献却列了246篇</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128225601714.png" alt="展示搜索相关文献困难的地方" style="zoom:80%;"></p><p>所以，为了找到真正能够给我们的方法提供启发的文献，我们需要找到248个文献，阅读107个文献。因此，在寻找真正能够给我们提供启发的文章是很困难的。</p><p>唯一有效的找到这些inspiring的文章的方法就只能通过大量的阅读</p><h3 id="B-Helpful-tips"><a href="#B-Helpful-tips" class="headerlink" title="B. Helpful tips"></a>B. Helpful tips</h3><p>下面给出来一些寻找文献的方法：</p><h4 id="A-使用数据库进行查找"><a href="#A-使用数据库进行查找" class="headerlink" title="A. 使用数据库进行查找"></a>A. 使用数据库进行查找</h4><p>首先列出来一些和我们的问题相关的关键字</p><p>然后使用这些关键字来在不同的数据库上进行查询。我们可以在期刊和会议的数据库上进行查询：</p><ul><li>学校的电子图书馆</li><li>IEEE Xplore</li><li>ACM Digital Library</li><li>dblp Computer science bibliography</li><li>PubMed</li><li>arxiv</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128231339160.png" alt="使用数据库搜索文献" style="zoom:67%;"></p><h4 id="B-使用逻辑操作符帮助查找"><a href="#B-使用逻辑操作符帮助查找" class="headerlink" title="B. 使用逻辑操作符帮助查找"></a>B. 使用逻辑操作符帮助查找</h4><p>我们在数据库上进行查找的时候，可以使用逻辑操作符来帮助我们进行快速的查找，例如：</p><ul><li><strong>AND</strong>：交集，例如，social media AND body image AND generation Z</li><li><strong>OR</strong>：并集，例如，generation Z OR teenagers OR adolescents</li><li><strong>NOT</strong>：差集，例如，apple not fruit</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128231332863.png" alt="使用逻辑操作符帮助查找"></p><h2 id="5-Evaluate-and-select-sources"><a href="#5-Evaluate-and-select-sources" class="headerlink" title="5. Evaluate and select sources"></a>5. Evaluate and select sources</h2><p>我们上面已经通过文献的数据库和各种搜索技巧找到了合适的文章，那么我们接下来需要干的，就是对这些文章进行筛选。</p><p>而筛选一篇文章的方法就是需要去阅读这篇文章。但是因为文章很多，每一篇文章有很长，因此一个问题就是我们真的需要去从头到尾“阅读”这篇文章吗？</p><p>换而言之，有没有办法可以加速我们在筛选文章时候的阅读速度呢？这个问题其实是没有统一的答案的。每个人都有不同的方法</p><p>而Keshav在他写的如何读一篇论文的论文中给出了一个很有用的读论文的三遍法：</p><ul><li>第一遍：读完title、abstract、Introduction、sub-headings和conclusions</li><li>第二遍：读完这个文章，忽略掉证明，但是要看论文中的图和表</li><li>第三遍：亲自复现这篇文章</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128235331383.png" alt="阅读三遍文章" style="zoom:67%;"></p><p>而在完成第一遍阅读之后，只有符合要求的、高质量的论文才可以进行第二遍阅读。具体来说，在完成第一遍阅读之后，需要回答下面五个问题：</p><ul><li>Category：文章是哪类的paper？是提出了新方法的文章？还是对已有的方法进行了改进？还是对主流的观点进行了重构Rethinking？</li><li>Context：文章和其他的哪些论文有关？文章和哪些理论有关？</li><li>Correctness：文章的假设合理么？</li><li>Contributions：文章的核心贡献是什么？</li><li>Clarity：文章的文笔如何？读起来是否清晰易懂？</li></ul><p>通过回答这五个问题，我们就可以判断这篇文章是否是一篇值得我们读的文章</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220128235842254.png" alt="回答5C判断文章是否值得继续读下去" style="zoom:67%;"></p><p>此外，其他一些可以辅助我们完成评估论文的判断标准有：</p><ul><li>作者在这个研究领域的专业知识积累（之前发的文章）、他的学历</li><li>作者的研究是否有经验上的支持？作者的研究是定性还是定量？</li><li>作者的观点是否是过于biased？有没有考虑其他的观点和方法？</li><li>所选的文章是否有助于我们对这个领域有更深入的理解？</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129000530738.png" alt="其他有用的判断标准" style="zoom: 80%;"></p><h2 id="6-Themes-dabates-and-gaps"><a href="#6-Themes-dabates-and-gaps" class="headerlink" title="6. Themes, dabates, and gaps"></a>6. Themes, dabates, and gaps</h2><p>为了完成一个literature review，我们需要在里面说明：</p><ul><li>当前研究的趋势和模式：例如Transformer是当前的趋势，而模式就是套用transformer在各种各样的任务上</li><li>当前研究的主题：阅读的文献中共有的主题和concept，例如很多文章中都出现了attention机制</li><li>debates、conflicts以及contradictions：看看哪些文章在哪些观点上有冲突</li><li>pivotal publication：这个领域内的有影响力的paper以及其他出版物。例如Attention is all you need。</li><li>Gaps：文献中没有提到的地方或者他们的方法的不足</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129002500261.png" alt="Literature Review需要涵盖的内容"></p><h2 id="7-Structure-Literature-Review"><a href="#7-Structure-Literature-Review" class="headerlink" title="7. Structure Literature Review"></a>7. Structure Literature Review</h2><p>有多种方式可以组织我们的文献综述</p><h3 id="A-Chronological"><a href="#A-Chronological" class="headerlink" title="A. Chronological"></a>A. Chronological</h3><p>按照时间顺序进行讨论是追踪课题随着时间发展而改变的最简单的方式。然而按照这样的方式来进行文献的讨论的话，要尽量避免只是简单的罗列和组织素材。</p><p>我们需要讨论研究方法和关键的争议的转折点，因为他们深刻影响，或者说决定了该领域未来研究的走向</p><p>我们必须解释，研究的发展是怎样，以及如何发生的。例如网络变得越来越深和网络不能太深这个发展和debates</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129003144287.png" alt="按照时间顺序进行总结" style="zoom:67%;"></p><h3 id="B-Thematic"><a href="#B-Thematic" class="headerlink" title="B. Thematic"></a>B. Thematic</h3><p>另外一种组织文献综述的方式是按主题进行讨论。例如我们的课题是跨领域的，例如将transformer从NLP运用到CV上。那么我们就会发现我们的文献综述就喝NLP、Transformer、CV这几个中心主题有关。</p><p>因此我们此时就可以把我们的文献综述分成不同的小节，每个小节分别论述不同的主题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129003057663.png" alt="按主题来组织文献综述" style="zoom: 67%;"></p><h3 id="C-Methodological"><a href="#C-Methodological" class="headerlink" title="C. Methodological"></a>C. Methodological</h3><p>一种组织文献综述的方式就是按照方法进行讨论。例如如果我们的文章提出了新的方法，可以讨论相同任务的文章他们的方法，我们比较不同的方法得到结果和结论</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129003234009.png" alt="按照方法来组织文献总数" style="zoom: 80%;"></p><h3 id="D-Theoretical"><a href="#D-Theoretical" class="headerlink" title="D. Theoretical"></a>D. Theoretical</h3><p>最后一种组织方式是按照理论来进行组织。例如同样是Batch Normalization。我们可以从Internal Covariate Shift这个理论、观点、流派来进行讨论，也可以从Smoothing Loss Surface这个理论来进行讨论</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129003614622.png" alt="按照理论来进行讨论" style="zoom:67%;"></p><h2 id="8-Structure-of-Literature-Review"><a href="#8-Structure-of-Literature-Review" class="headerlink" title="8. Structure of Literature Review"></a>8. Structure of Literature Review</h2><p>一般来说，一个文献综述可以分为以下三个部分：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129003727867.png" alt="Literature Review的结构" style="zoom: 80%;"></p><h3 id="A-Introduction"><a href="#A-Introduction" class="headerlink" title="A. Introduction"></a>A. Introduction</h3><p>在Introduction部分，我们需要讲清楚的内容有：</p><ul><li>为什么要写综述，为什么综述里讨论的话题很重要</li><li>综述讨论了那些话题</li><li>综述的结构是什么样的？</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129003939229.png" alt="Introduction部分需要包含的内容" style="zoom:80%;"></p><h3 id="B-Body"><a href="#B-Body" class="headerlink" title="B. Body"></a>B. Body</h3><p>Body部分需要注意：</p><ul><li>每一段都和我们的主题有关，每一段都处理了一个不同的方面</li><li>一段中需要包含对几个文献的评论，以形成一个清晰地脉络</li><li>Body中可以包括历史背景、研究方法、早前研究、已经得出来的结论等段落</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129004018460.png" alt="Body部分需要注意的内容" style="zoom:80%;"></p><h3 id="C-Conclusion"><a href="#C-Conclusion" class="headerlink" title="C. Conclusion"></a>C. Conclusion</h3><p>最后，Conclusion部分要包含下面的内容：</p><ul><li>对文献中的主要的共同观点和分析进行总结</li><li>任何还需要进一步进行研究的欠缺之处或者领域</li><li>我们对这个课题的整体观点的总结</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129004314375.png" alt="Conclusion部分应该包含的内容" style="zoom: 80%;"></p>]]></content>
      
      
      <categories>
          
          <category> Cambridge CCISTC AI Research Programme 2022 Winter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Research Proposal Workshops </tag>
            
            <tag> CCISTC </tag>
            
            <tag> University of Cambridge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo deploy失败解决方案</title>
      <link href="/2022/01/26/hexo-deploy-shi-bai-jie-jue-fang-an/"/>
      <url>/2022/01/26/hexo-deploy-shi-bai-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了hexo deploy失败的解决方案</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127120521462.png" alt="hexo deploy失败"></p><h1 id="hexo-deploy失败解决方案"><a href="#hexo-deploy失败解决方案" class="headerlink" title="hexo deploy失败解决方案"></a>hexo deploy失败解决方案</h1><p>我的博客是使用hexo作为框架的，而具体的网站的访问则是将静态网页部署在github上，以github page的的形式进行展示。因此，文章的发布其实就是将写好的文章同步到GitHub的仓库上去。然而在使用git进行仓库同步的时候却会发生很多的问题，因此本文记录了所有我在hexo deploy的过程遇到的的问题以及相应的解决方案。</p><h2 id="1-无法访问-‘仓库地址’：GnuTLS-recv-error-110-The-TLS-connection-was-non-properly-terminated"><a href="#1-无法访问-‘仓库地址’：GnuTLS-recv-error-110-The-TLS-connection-was-non-properly-terminated" class="headerlink" title="1. 无法访问 ‘仓库地址’：GnuTLS recv error (-110): The TLS connection was non-properly terminated."></a>1. 无法访问 ‘仓库地址’：GnuTLS recv error (-110): The TLS connection was non-properly terminated.</h2><p>这个报错具体的截图如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127120521462.png" alt="报错截图" style="zoom: 67%;"></p><p>这个问题发生的原因是由于代理的问题。因为最近西安解封了，我放寒假回家了。学校里是通过openwrt做的旁路由。而家里面则没有树莓派做旁路由。因此代理出了问题。</p><p>问题的解决也非常简单。直接按照下面的命令即可</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get install gnutls-bingit config --global http.sslVerify falsegit config --global http.postBuffer 1048576000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-6: Classification (Long-Version)</title>
      <link href="/2022/01/24/li-hong-yi-ml2021-spring-6-classification-long-version/"/>
      <url>/2022/01/24/li-hong-yi-ml2021-spring-6-classification-long-version/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是Machine Learning 2021 Spring 第六节课的笔记，本节课主要讲解了利用深度学习进行分类使用softmax以及cross-entropy背后的原理。</p><p>具体而言，本文首相讲解Probabilistic Generative Model，然后过渡到Logistic Regression，最后在讲解完前面两个模型之后，引出深度学习使用softmax个cross-entropy背后的原理</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127013533866.png" alt="第六节课：Classification (Long-Version)"></p><h1 id="李宏毅ML2021-Spring-6-Classification-Long-Version"><a href="#李宏毅ML2021-Spring-6-Classification-Long-Version" class="headerlink" title="李宏毅ML2021-Spring-6: Classification (Long Version)"></a>李宏毅ML2021-Spring-6: Classification (Long Version)</h1><p>前面的Classification的short-version只是讲解了该怎样进行操作，才可以让神经网络完成分类这件任务而避免掉直接用回归的模型来硬解分类可能带来的问题。然而我们并没有将这些操作的原理，可是只有知道了原理才能够更好的帮助我们来进行理解。因此在Classification的Long Version的版本中，将会讲解Classification背后的原理。课程比较长，有3个小时左右。</p><p>我们下面假装不知道什么是Classification，然后来进行讲解<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。注意，让神经网络进行分类这件事在推导的时候其实引入了概率，因此后面会涉及到概率论的知识</p><h2 id="1-Introduction-to-Classification"><a href="#1-Introduction-to-Classification" class="headerlink" title="1. Introduction to Classification"></a>1. Introduction to Classification</h2><p>在讲解Classification前，我们需要知道什么是Classification以及Classification的运用</p><h3 id="1-What-is-Classification"><a href="#1-What-is-Classification" class="headerlink" title="1. What is Classification"></a>1. What is Classification</h3><p>我们在前面的机器学习的介绍中说道，机器学习其实就是让机器自己去找函数。不同的任务找的函数不一样，而Classification这个任务要找的函数，他的输入是一个物体，object $x$，而他的output是这个object是属于哪一个class，n个class中的哪一个</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124221312733.png" alt="Classification任务找的函数"></p><p>这样的任务其实很容易就能够找到很多，例如：</p><ul><li><p>金融上，需要根据一个人以往的借贷的历史等因素来判断到底该不该给这个人放贷。因此，金融上Classification模型的input是这个人的收入、储蓄、职业、年龄、过去的借贷历史等等，而output就是要不要借钱给这个人</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124221643131.png" alt="Classification在金融上的运用"></p></li><li><p>在医疗诊断领域，可以用一个Classification来对一个病人的疾病进行Classification。因此，医疗上Classification模型的input就是某个病人现在的症状、年龄、性别和过去的医疗历史等等，而output就是这个人患的什么病</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124222107272.png" alt="Classification在医疗上的运用"></p></li><li><p>此外还可以进行手写字的识别，例如手写一个汉字，然后识别出来这个字是什么。这个其实也是一个Classification的任务，因为常用汉字有8000多个，因此这个就是一个8000个class的Classification任务</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124222405625.png" alt="手写字体识别是Classification任务"></p></li><li><p>还有人脸识别，和人脸分辨不同，分辨只需要区别出来这是一张人脸即可，而人脸识别则还要识别出来这个人脸是谁。因此，人脸识别的Classification的model的input是人脸的图片，而输出则是人脸对应的人（的名字）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124222550965.png" alt="人脸识别是Classification任务"></p></li></ul><h3 id="2-Example-Application"><a href="#2-Example-Application" class="headerlink" title="2. Example Application"></a>2. Example Application</h3><p>下面我们对Classification的讲解都将结合一个例子来进行，因此下面先介绍一下这个例子的background。</p><p>在神奇宝贝中，每个神奇宝贝都是有一个自己的属性，例如普通系、火系、水系等等</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124222905064.png" alt="神奇宝贝是有不同的属性的"></p><p>那么我们现在的任务的就是要input一只神奇宝贝，output这只神奇宝贝的属性，例如：</p><ul><li>输入一只皮卡丘，输出雷属性</li><li>输入一只杰尼龟，输出水属性</li><li>输入一只妙蛙种子，输出草属性</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124223334581.png" alt="神奇宝贝的Classification的模型"></p><p>那么现在，我们面临的第一个问题就是模型如何输入一只神奇宝贝。我们知道模型的input都是数字，因此我们的第一步其实就是把神奇宝贝数值化，用一些数值来表示一只神奇宝贝，然后把他们放到神经网络里面。</p><p>那么我们用哪些数值来描述一只神奇宝贝呢？</p><p>其实每只神奇宝贝都是有一些可以数值化的特性，例如：</p><ul><li>强度（total）：描述了总体上一只神奇宝贝有多强</li><li>生命值（HP）：描述了一只神奇宝贝血量有多高</li><li>攻击力（Attack）：描述了一只神奇宝贝的攻击能力</li><li>速度（Speed）：决定了两只神奇宝贝相遇的时候谁先攻击</li><li>防御力</li><li>特殊攻击力</li><li>特殊防御力</li><li>……</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124223934103.png" alt="一些用于描述神奇宝贝的值" style="zoom: 67%;"></p><p>那么现在我们就可以用这些值来描述一只神奇宝贝，例如皮卡丘</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124224140963.png" alt="用上面的值来描述皮卡丘" style="zoom:67%;"></p><p>因此，现在对于一个皮卡丘，我们就可以用这七个数值来描述。因此我们现在要研究的，就是能不能通过这七个数字，把一个长度为7的代表神奇宝贝的向量丢到模型里去，然后模型就可以给出来这个神奇宝贝的属性</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124224402796.png" alt="根据七个值来判断一个神奇宝贝的属性"></p><h3 id="3-Why-study-this"><a href="#3-Why-study-this" class="headerlink" title="3. Why study this"></a>3. Why study this</h3><p>我们可能会想，为什么要研究为神奇宝贝的属性进行分类，那么其实，这个是有“非常重要的原因“的。</p><ol><li><p>首先，不同属性的神奇宝贝在相遇的时候其实是有属性的克制的。例如格斗系大普通系，伤害就会翻倍。因此能够准确的判断对方的神奇宝贝的属性能够帮助我们获胜</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124224857912.png" alt="神奇宝贝之间属性的克制"></p></li><li><p>另外一个原因就是，并不是所有的神奇宝贝都是有图鉴的。例如在李宏毅老师小的时候一共只有150多只宝可梦，6种属性。但是现在却有800多只、18种属性。因此有一个预测的模型能够帮助我们判断神奇宝贝的类别还是很有必要的</p></li><li><p>让我们学习Classification任务啊<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></li></ol><h3 id="4-Dataset-preparation"><a href="#4-Dataset-preparation" class="headerlink" title="4. Dataset preparation"></a>4. Dataset preparation</h3><p>我们因为要做机器学习的任务，因此我们需要有数据让我们的模型来学习，因此我们收集到的数据其实就是下面这样的一个一个的pair</p><p>pair中的一个神奇宝贝的七个值作为$x$而对应的这个神奇宝贝的属性$\hat y$作为这个神奇宝贝的label</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124225822529.png" alt="训练数据"></p><p>然后现在一共有800只神奇宝贝，我们取其中的前150只作为训练数据，用后面的神奇宝贝作为测试数据。这样的话刚好可以模拟不断发现新的神奇宝贝的、对新的神奇宝贝进行分类的过程。</p><h2 id="2-How-to-do-Classification？"><a href="#2-How-to-do-Classification？" class="headerlink" title="2. How to do Classification？"></a>2. How to do Classification？</h2><p>上面我们介绍了我们的case，那么接下来我们就该讲解该怎么样来解这个问题了</p><h3 id="1-Classification-as-Regression？"><a href="#1-Classification-as-Regression？" class="headerlink" title="1. Classification as Regression？"></a>1. Classification as Regression？</h3><p>前面我们讲了Regression的问题，那么有人就想，现在我们会Regression的任务而不会Classification的任务，因此我们能不能把Classification的任务当做Regression来硬解。</p><p>例如我们现在就在两个class中进行分类。那么在训练阶段，让所有的example的label的值要么是1，要么是-1。而在测试阶段，模型的输出是一个consecutive的number，因此，我们就看这个值是接近1还是-1，然后来判断属于哪个类。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124230623954.png" alt="Classification as Regression"></p><h3 id="2-Problem-of-Classification-as-Regression"><a href="#2-Problem-of-Classification-as-Regression" class="headerlink" title="2. Problem of Classification as Regression"></a>2. Problem of Classification as Regression</h3><p>可是，上面这种做法其实是有问题的。我们举下面的例子来进行讲解</p><h4 id="A-Panelize-too-correct-example"><a href="#A-Panelize-too-correct-example" class="headerlink" title="A. Panelize too correct example"></a>A. Panelize too correct example</h4><p>假设我们的模型只有一层，即</p><script type="math/tex; mode=display">y=\vec w \times \vec x + \vec b = \begin{bmatrix}w_1\\w_2\end{bmatrix}\times\begin{bmatrix}x_1 & x_2\end{bmatrix}+\vec b</script><p>那么其实，我们的模型学的就是这个函数</p><script type="math/tex; mode=display">y=w_1x_1+w_2x_2+b</script><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124231332592.png" alt="数据的分布和模型的表达式" style="zoom: 67%;"></p><p>那么我们现在就想，从Regression的角度来说，蓝色这一类的example输入到模型之后，输出越接近-1越好，而红色这一类example输入到模型之后，输出越接近1越好。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124231637144.png" alt="我们预期模型能够办到的事情" style="zoom:67%;"></p><p>那么，我们的模型很有可能学到下面的这个函数，即$b+w_1x_1+w_2x_2=0$这条线里的参数（记为$b’,w_1’,w_2’$）</p><p>那么此时我们的模型就是$y=b’+w_1’x_1+w_2’x_2$，这样的话，当class 1中的example被输入之后（注意，每一个example有两个feature），那么得到的输出就会大于0，因此就会接近1。而class 2中的example被输入之后，就会小于0，接近-1。这个就是我们如果用Regression的方法处理之后得到的模型</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124231750691.png" alt="用Regression来解Classification模型得到的结果" style="zoom:67%;"></p><p>可是这样做有一个问题，就是如果我们现在多了一些新的数据的话，由于我们在Regression中用的损失函数是MSE，而<strong>MSE计算的是到线上的距离，因此我们原来学的线就会往下偏，模型最终学到的就是紫色这条线的参数，这样就会造成一些原来分类很好的example被错误的分类</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124232428149.png" alt="新的数据导致Regression求解Classification得到的模型性能变弱" style="zoom: 80%;"></p><p>然而，我们用眼睛的直觉看就知道，绿色的线要更好。</p><p>因此，导致这样的问题发生的原因就在于我们的Regression的损失函数不适合Classification的任务。其实就印证了我们前面说的，不同的任务Loss Function不一样。</p><p>上面的这个例子中，紫色的解是对Regression来说比较好的解，而这个解其实并不适合Classification</p><p>用Bishop的机器学习的书中的话来说，Regression的Loss Function会乘法那些过于正确的点</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124233223467.png" alt="Bishop书中的原话"></p><h4 id="B-Similarity-of-different-classes"><a href="#B-Similarity-of-different-classes" class="headerlink" title="B. Similarity of different classes"></a>B. Similarity of different classes</h4><p>另外一个问题就是我们如果用一个数字来表示一个类别的话，那么在多分类的时候其实就会人为的引入多个不同的类之间的相似性</p><p>这个问题其实在前面就讨论过了，这里就不在强调了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124233934231.png" alt="多分类给Regression带来的相似性的问题"></p><h3 id="3-Ideal-Alternatives"><a href="#3-Ideal-Alternatives" class="headerlink" title="3. Ideal Alternatives"></a>3. Ideal Alternatives</h3><p>我们先以二分类为例，讲讲我们预期的、理想的模型。上面的问题发生的原因首先在于用一个数值来表示一个类，其次在于用Regression的方法硬解Classification。</p><p>因此首先，我们理想的Classification模型对应的函数就不用具体的值来表示类别，大于0则表示是类1，否则就是类2</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124234955793.png" alt="理想的Classification的model的函数的特点"></p><p>其次，我们的损失函数也要进行修改，相比于距离，我们直接用错误率来作为Loss</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124235104096.png" alt="理想的Classification的任务的Loss Function"></p><p>最后，由于我们上面的Function和Loss Function其实都是没有办法微分的，因此还需要我们自己去寻找对应的求解的方法</p><p>对应的方法有：Perceptron、SVM等等，不过因为我们今天关注的是如何使用神经网络来求解Classification问题，因此我们今天不会讲他们</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124235631271.png" alt="使用不同的方法来求解函数"></p><p>而由于神经网络找最佳的函数是通过Gradient Descent来进行的。又由于这两步不可微，因此我们就要找一个替代的solution，使得Gradient Descent可行。</p><p>下面的这个solution我们首先从概率的角度来进行讲解，最后会将为什么从概率的角度来说这个solution也是符合机器学习定义的，即这个solution也是机器学习的方法之一，以及如何把它用到神经网络上</p><h2 id="3-Probabilistic-Solution"><a href="#3-Probabilistic-Solution" class="headerlink" title="3. Probabilistic Solution"></a>3. Probabilistic Solution</h2><p>我们下面首先通过一个例子来引入用概率的方法求解分类问题的办法，然后再正式的进行讲解</p><h3 id="1-Preparedness"><a href="#1-Preparedness" class="headerlink" title="1. Preparedness"></a>1. Preparedness</h3><p>我们首先看下面的一个例子</p><p>我们现在有两个盒子，每个盒子里都有蓝球和绿球。现在从两个盒子中的一个抽一个球出来，发现是蓝球。问这个蓝球来自与两个盒子的概率分别是多少</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125000324548.png" alt="经典的贝叶斯问题" style="zoom: 50%;"></p><p>如果我们用频率代替概率的话，那么全贝叶斯公式得到蓝球的来自盒子1的概率计算如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125000622966.png" alt="蓝球来自盒子1的概率" style="zoom: 67%;"></p><p>来自盒子2的计算同理，这里就不列出来了。</p><p>那么为什么要讲这个例子呢？</p><p>我们把每一个球当做example，而盒子当做class。那么我们现在的问题就是，给定一个输入$x$（一个球），现在求这个输入$x$来自于两个类（盒子）的概率</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125001108538.png" alt="以概率的角度看分类问题" style="zoom:67%;"></p><p>为了使用贝叶斯公式进行计算，我们首先需要知道随便给一个输入，他是class 1的概率，即$P(C_1)$以及对应的，是class 2的概率，即$P(C_2)$。然后还有从class 1中抽出我们现在考虑的$x$的概率$P(x|C_1)$，以及从class 2中抽出我们现在考虑的$x$的概率$P(x|C_2)$。</p><p>在有了这些概率之后，我们就可以计算出来$x$是属于class 1的概率了。同理也能够求解出来$x$是class 2的概率。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125001822572.png" alt="有了四个值之后使用概率来判断输入是哪一个类" style="zoom: 67%;"></p><p>那么问题的关键就在于如何求解出这四个值。因为我们是机器学习的model，因此我们其实是有Training Data的，因此我们就希望能够从Training Data中的数据来估计这四个概率。而上面这一套理论，统称为generative的model。</p><p>为什么称为generative的model呢，就是根据贝叶斯公式，我们在得到了分布之后就可以自己产生一个example。关于这点，我们在后面会更加详细的进行讲解。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125002714318.png" alt="Generative Model" style="zoom:67%;"></p><p>因此，现在我们要计算一个object $x$属于某个类，例如$C_1$的概率，即$P(C_1|x)$。则计算的关键就是计算:$P(C_1),P(C_2)$以及$P(x|C_1),P(x|C_2)$这四个概率。</p><p>下面我们就分别来计算这四个概率</p><h3 id="2-Prior"><a href="#2-Prior" class="headerlink" title="2. Prior"></a>2. Prior</h3><p>我们首先计算$P(C_1)$和$P(C_2)$这两个概率，这两个概率称为Prior，即先验概率。</p><blockquote><p><strong>什么是先验概率</strong></p><hr><p><strong>回答一</strong>（摘自知乎用户Agenter的<a href="https://www.zhihu.com/question/24261751/answer/158547500">回答</a>）：</p><p>这几个概念可以用“原因的可能性”和“结果的可能性”的“先后顺序”及“条件关系”来理解。</p><p>下面举例：</p><p>隔壁老王要去10公里外的一个地方办事，他可以选择走路，骑自行车或者开车，并花费了一定时间到达目的地。在这个事件中，可以把交通方式（走路、骑车或开车）认为是原因，花费的时间认为是结果。</p><p>若老王花了一个小时的时间完成了10公里的距离，那么很大可能是骑车过去的，当然也有较小可能老王是个健身达人跑步过去的，或者开车过去但是堵车很严重。若老王一共用了两个小时的时间完成了10公里的距离，那么很有可能他是走路过去的。若老王只用了二十分钟，那么很有可能是开车。这种<strong>先知道结果，然后由结果估计原因的概率分布，$P(交通方式|时间)$，就是后验概率</strong>。</p><p>老王早上起床的时候觉得精神不错，想锻炼下身体，决定跑步过去；也可能老王想做个文艺青年试试最近流行的共享单车，决定骑车过去；也可能老王想炫个富，决定开车过去。老王的选择与到达目的地的时间无关。<strong>先于结果，确定原因的概率分布，$P(交通方式)$，就是先验概率</strong>。</p><hr><p><strong>回答二</strong>（摘自用户风铃猫的<a href="https://www.zhihu.com/question/24261751/answer/824331468">回答</a>）</p><p>太长不看版：</p><p>先验分布是你瞎猜参数服从啥分布</p><p>后验分布是你学习经验（已经获得结果）后有根据地瞎猜参数服从啥分布</p></blockquote><p>因此，我们这里说的先验概率其实就是有一个object $x$，然后这个$x$是class 1和class 2的概率</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125140622149.png" alt="求两个先验概率"></p><p>为了获得这两个先验，我们凭空的猜是肯定不行的。由于我们是机器学习的方法，因此我们就从训练集上来获取这两个先验。我们前面说我们以一个二分类为例，那么我们不妨就用神奇宝贝中的水系和普通系的神奇宝贝进行分类。用所有编号小于400的神奇宝贝作为训练集，然后编号大于400的神奇宝贝作为测试集。</p><p>我们这里暂时先考虑二分类，因此我们的训练集就是编号小于400的，为水系和普通系的神奇宝贝。我们用频率来代替概率的话，那么得到的先验就是</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125141233399.png" alt="用数据集来估计先验概率"></p><h3 id="3-Probability-from-class"><a href="#3-Probability-from-class" class="headerlink" title="3. Probability from class"></a>3. Probability from class</h3><p>在有了先验概率之后，我们接下来需要计算的，就是$P(x|C_1)$和$P(x|C_2)$。这两个概率表达的含义就是从class 1的所有神奇宝贝中随机抽出来一只神奇宝贝，得到它是object $x$的概率和对应的从class 2中得到object $x$的概率。例如下面，$x$表示圆盖海龟，$C_1,C_2$分别表示水系和普通系的神奇宝贝，那么$P(x|C_1)$就表示从水系神奇宝贝抽出来一只神奇宝贝，它是圆盖海龟的概率。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125141634564.png" alt="关键就是求从某个类中sample得到圆盖海龟的概率"></p><h4 id="A-不能用频率代替概率"><a href="#A-不能用频率代替概率" class="headerlink" title="A. 不能用频率代替概率"></a>A. 不能用频率代替概率</h4><p>这两个概率我们可能的一个想法就是和上面计算先验一样，用频率来代替概率。可是这样做其实是有问题的。因为在测试的时候，我们有79只神奇宝贝，那么可以用1/79作为从某个类中sample得到某个神奇宝贝的概率。</p><p>可是在测试的时候，我们的测试的example并不在训练集中，那么这个时候用频率来估计概率就不行了。例如上面的圆盖海龟就不是编号前400的水系神奇宝贝。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125142916955.png" alt="image-20220125142916955"></p><p>因此，我们在获取某个类中获取某个神奇宝贝的概率的时候，就不能用频率来估计概率。下面用图像来更加形象的说明</p><p>我们上面说道，为了描述一个神奇宝贝，我们可以用一个长度为7的向量来实现。换而言之，我们用一个长度为7的向量来表示一个神奇宝贝</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125143737005.png" alt="用长度为7的向量表示一个神奇宝贝"></p><p>由于七维点画不出来，因此为了能够画出来，我们这里只选取其中的两个feature，这样的话就可以用二维平面上的一个点来表示一个神奇宝贝。</p><p>那么我们真的把79个水系的神奇宝贝画出来在图上，就是下面的样子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125160807495.png" alt="79只水系神奇宝贝真实的分布" style="zoom:50%;"></p><p>我们这里只用了两个轴来表示，就是防御力和特殊防御力。例如下面的可达鸭和杰尼龟</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125175232645.png" alt="用防御力额特殊防御力表示神奇宝贝" style="zoom:50%;"></p><p>上面说的不能用频率代替概率就是指，Training里可能包含可达鸭和杰尼龟的数据，因此我们这个时候用频率作为概率还是可以得到一个概率的。可是在测试阶段出现了新的圆盖海龟，他并不在我们的训练集中，因此就用频率作为概率的话的概率就是0，这就与事实违背了</p><p>因此，我们就需要想办法来根据已经有的神奇宝贝，估测从水系的神奇宝贝挑一只出来，它是圆盖海龟的概率到底是多少</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125175557774.png" alt="不能用频率来估计概率" style="zoom:50%;"></p><h4 id="B-假设为高斯分布"><a href="#B-假设为高斯分布" class="headerlink" title="B. 假设为高斯分布"></a>B. 假设为高斯分布</h4><p>我们无法用频率来代替概率，那么我们下面就需要用别的方法来得到概率。</p><p>一个可行的思路就是，我们想想说这79个水系神奇宝贝其实都是冰山的一角。我们想想水系的神奇宝贝是服从正态分布的。因为我们一个神奇宝贝是用了七个特征值来进行描述，因此水系的神奇宝贝其实是从一个7维的Gaussian Distribution中sample得到的。</p><p>因此我们这里的防御力和特殊防御力两个值各自都服从一个Gaussian Distribution，因此两个维度在一起就服从一个联合的Gaussian Distribution。</p><p>因此，我们下面图里的79个点其实就是对Gaussian Distribution进行了79次sample之后得到的值。这个也非常好解释，因为在Gaussian Distribution中，中间部分sample到的概率要大一点而sample出圆盖海龟的概率会小一点，但是也不是0</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125180225348.png" alt="假设神奇宝贝是服从高斯分布的" style="zoom: 67%;"></p><p>因此，我们现在的问题就从<code>如何确定一个从水系神奇宝贝随机抽出来一只神奇宝贝，它是圆盖海龟的概率</code>成了<code>如何找到水系神奇宝贝的Gaussian Distribution</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125180902811.png" alt="问题的关键成了如何找到Gaussian Distribution" style="zoom: 80%;"></p><p>我们稍后再将如何获得这个分布，假设我们现在已经有了这个Distribution了（为了章节的完整新，因此关于Gaussian Distribution的一些性质放到下一小节）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125213655650.png" alt="假设我们已经有了这个理想的Gaussian Distribution" style="zoom: 67%;"></p><p>那么根据$\mu$和$\Sigma$就可以写出来这个Gaussian Distribution的expression。然后现在当新的、不在training set里面的$x$来了之后，我们就可以根据这个expression来进行计算</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125215809054.png" alt="根据得到的Gaussian Distribution来计算不在training set里的x的概率" style="zoom: 67%;"></p><p>因此，我们就可以得到$P(x|C_1)$和$P(x|C_2)$，即</p><script type="math/tex; mode=display">P(x|C_1)=f_{\mu_1,\Sigma_1}(x)</script><script type="math/tex; mode=display">P(x|C_2)=f_{\mu_2,\Sigma_2}(x)</script><h4 id="C-About-Gaussian-Distribution"><a href="#C-About-Gaussian-Distribution" class="headerlink" title="C. About Gaussian Distribution"></a>C. About Gaussian Distribution</h4><p>因为我们后面会讲到如何寻找Gaussian Distribution，会涉及到非常多的Gaussian Distribution的性质，因此我们这里要回顾一下Gaussian Distribution。</p><p>Gaussian分布的通式如下</p><script type="math/tex; mode=display">f_{\mu,\Sigma}(x)=\frac {1}{(2\pi)^{D/2}}\frac{1}{|\Sigma|^{1/2}}exp\{-\frac 1 2(x-\mu)^T\Sigma^{-1}(x-\mu)\}</script><p>Gaussian Distribution的表达式也是一个含参的函数，参数就是$\mu$和$\Sigma$。其中，$\mu$是均值向量，长度和feature的数量相同，而$\Sigma$是协方差矩阵，covariance matrix，是一个feature数的方阵，主对角线上的元素表示方差而其他元素表示协方差。</p><p>Gaussian Distribution这个函数的input是$x$，而对应的output是这个$x$的概率。不过严格上来说应该是概率的密度，但是我们现在说的只是单个值，因此可以理解为概率。</p><p>Gaussian Distribution给出的概率除了和$x$有关以外，还和$\mu$和$\Sigma$两个因素有关，即便是相同的$x$，不同的$\mu$或者$\Sigma$，得到的概率都不一样。下面就是几个具体的例子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125211701317.png" alt="相同的协方差矩阵不同的均值，概率分布不一样" style="zoom: 67%;"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125211748980.png" alt="相同的均值不同的协方矩阵，概率分布不一样" style="zoom:67%;"></p><h3 id="3-Maximum-Likelihood"><a href="#3-Maximum-Likelihood" class="headerlink" title="3. Maximum Likelihood"></a>3. Maximum Likelihood</h3><p>我们上面讲到Gaussian Distribution的一个性质，就是在任何地方一个具体的Gaussian Distribution（即给定了$\mu$和$\Sigma$）的值都不为0，因此从某一个Gaussian Distribution中sample得到这79个example的概率并不是0。这也就也为这，其实任意一个Gaussian Distribution都是完全有可能去sample得到这79个点的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125220255804.png" alt="任何一个Gaussian Distribution都有可能sample得到这79个点" style="zoom: 67%;"></p><p>我们在图上更加形象的进行表达，左下角的Gaussian Distribution完全有可能sample得到这79个点，而右上角的Gaussian Distribution虽然不太可能得到右下角的79个点，但是概率不为0，因此还是有可能的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125220511385.png" alt="任何一个Gaussian Distribution都有可能sample得到这79个点" style="zoom: 67%;"></p><p>然而我们上面的假设却说，这79水系神奇宝贝都是从水系神奇宝贝服从的这个Gaussian Distribution的中sample出来的。因此问题就成了：任意一个Gaussian Distribution都已可能sample得到我们这79个水系神奇宝贝，那么到底哪一个才是真真的水系神奇宝贝的Distribution呢？为此，我们就通过Maximum Likelihood来进行寻找。</p><p>上面我们虽然说任何一个Gaussian Distribution进行sample得到这79个example的概率不为0，但是每个Gaussian Distribution sample得到这79个example的可能性却不一样</p><p>例如在下图中，左下角的Gaussian就显然比右上角的Gaussian sample得到这79个example的可能性要高</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125221021233.png" alt="不同的Gaussian Distribution sample得到79个example的可能性不同" style="zoom: 67%;"></p><p>而我们衡量这个sample的可能性就是通过Likelihood（似然）实现的。</p><p>因此，当现在给定了一个Gaussian Distribution（一组$\mu$和$\Sigma$），我们就可以去计算这个Gaussian的Likelihood。因为Likelihood的开头字母也是L，这个和Loss Function撞了，但是实在是想不到更好的notation了，因此就用L来表示Likelihood。</p><p>因为我们在sample这79个example的时候都是独立进行的，因此Likelihood的计算方式就是概率连乘即可。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125221915941.png" alt="计算Likelihood"></p><p>我们接下来要做的，就是找到能够Maximum这个Likelihood的参数$\mu$和$\Sigma$。我们记最大化Likelihood的参数$\mu$和$\Sigma$为$\mu^<em>$和$\Sigma^</em>$，那么形式化的表述就是</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125222254513.png" alt="最大化似然的符号表述"></p><p>那么上面这个式子</p><script type="math/tex; mode=display">\mu^*, \Sigma^*=arg\max L(\mu,\Sigma)</script><p>的求解，如果想爽的话当然可以自己求微分解出来。不过这个事其实已经有人帮我们干过了，我们直接套公式写出来解就行了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125223256418.png" alt="直接套公式求解"></p><p>这个式子也是非常符合直觉的，均值向量就是每一个维度的平均，而协方差矩阵就是差的行向量和列向量相乘然后求平均</p><h3 id="4-Pipeline"><a href="#4-Pipeline" class="headerlink" title="4. Pipeline"></a>4. Pipeline</h3><p>我们接下来看看上面的理论在真实的案例下的implementation。</p><p>下面是真实的水系和普通系的神奇宝贝的散点图。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125224227102.png" alt="真实的神奇宝贝的散点图" style="zoom:67%;"></p><p>然后我们用上面的理论，假设水系和普通系都有各自的分布，然后我们计算出来两个分布各自的均值和方差</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125224413172.png" alt="image-20220125224413172" style="zoom:67%;"></p><p>然后在有了这两个Gaussian Distribution之后，我们就可以来计算$P(x|水系神奇宝贝)$和$P(x|普通系神奇宝贝)$</p><p>因此，我们就可以利用贝叶斯公式来进行分类</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125224929924.png" alt="运用贝叶斯进行分类" style="zoom: 80%;"></p><h3 id="5-Results"><a href="#5-Results" class="headerlink" title="5. Results"></a>5. Results</h3><p>我们接下来看下上面这个案例的效果。下面是两类神奇宝贝的散点图，水系神奇宝贝有蓝色的点来表示，普通系的神奇宝贝用红色来表示，$C_1$和$C_2$分别表示水系和普通系，图上的彩色线则表示相同概率的等高线。我们针对图上所有的点计算这些点是水系的概率，然后概率越高颜色就越红，反之越蓝。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125225309890.png" alt="image-20220125225309890" style="zoom: 67%;"></p><p>其实我们肉眼就能知道估计分类效果不会太好，因为两类的分布非常的密集。</p><p>我们根据计算出来的概率，如果大于0.5则表示是水系的，小于0.5就表示不是水系的。因为我们这个是二分类，因此不是水系就是普通系。最后得到的在训练集上的表现如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125230321127.png" alt="二值化之后训练集上的表现"></p><p>我们其实更关注在测试集上的表现，因此把测试集上的数据绘制在这个二值化的图像上，得到的结果如下</p><p>发现结果烂掉了<span class="github-emoji"><span>💔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。使用2个维度的值的话正确率只有47%，比瞎猜50%的表现还要烂。。。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125231059892.png" alt="测试集上的结果烂掉" style="zoom:67%;"></p><p>那么我们可能想机器学习厉害的地方就在于可以处理高维度的数据，因此我们就想性能烂的原因是不是因为我们只用了两个维度的数据。我们把所有的7个维度的数据用上，最后得到的结果就是在测试集上54%的准确率，之比瞎猜好一地点点。。。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125230828593.png" alt="用了所有的维度，之比瞎猜好一点点。。。"></p><h3 id="6-Modifying-Model"><a href="#6-Modifying-Model" class="headerlink" title="6. Modifying Model"></a>6. Modifying Model</h3><p>我们上面讲的模型最后的表现烂掉了，我们下面就想着能不能对模型进行一些修改，来提高模型的表现。我们根据前面的机器学习攻略手册中讲的，我们现在是在训练集上的loss小，但是在测试集上的loss大，因此我们现在的情况要么是Mismatch，要么是Overfitting。</p><p>Mismatch发生的条件比较苛刻，一般不会发生。因此我们这里其实发生的现象就是Overfitting。</p><p>而处理Overfitting要么就是增加训练的数据量，要么就是给模型进行限制。因为我们的神奇宝贝一共就这么多，因此我们只能走给模型增加限制这条路。增加限制其实就是限制模型的学习能力，为此我们需要减少参数。而减少参数的方式就是通过参数共享。</p><p>在实际的运用中，这个possibility的model大家一般都是把Variance Matrix取一样的，从而实现添加限制</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125233324291.png" alt="通过取相同的协方差矩阵来减小参数" style="zoom:67%;"></p><p>我们像上面这样添加限制，其实就等价于我们假设水系的神奇宝贝和普通系的神奇宝贝分别从两个相同covariance的Gaussian Distribution sample得到的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125233655159.png" alt="从两个相同covariance的Gaussian Distribution sample得到水系和普通系的神奇宝贝"></p><p>那么此时，我们进行Maximum Likelihood，计算均值向量和协方差矩阵的式子，就成了下面的式子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220125235754173.png" alt="求联合分布的Likelihood"></p><p>我们最后，进行修改后的模型，考虑七个维度的话，他的表现就有了极大地提升，</p><p>需要注意的是，在只有两个feature的时候，现在两个class的boundary成了线性的了。虽然我们是用概率的模型来看待的，但是因为最后的边界是线性的，因此我们也称为是一个线性的模型</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126000205957.png" alt="修改后的模型性能有了极大地提升"></p><h3 id="7-Summary-of-Probability-Model"><a href="#7-Summary-of-Probability-Model" class="headerlink" title="7. Summary of Probability Model"></a>7. Summary of Probability Model</h3><p>我们最后对上面的概率的模型进行一个总结</p><p>机器学习的三大步：</p><ul><li>定义含参的函数（模型）</li><li>定义衡量模型好坏的Loss Function</li><li>Optimize得到最好的Function（最佳参数）</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126000650952.png" alt="概率分类模型的三步" style="zoom: 67%;"></p><h3 id="8-Further-discussion"><a href="#8-Further-discussion" class="headerlink" title="8. Further discussion"></a>8. Further discussion</h3><h4 id="A-Why-Gaussian"><a href="#A-Why-Gaussian" class="headerlink" title="A. Why Gaussian"></a>A. Why Gaussian</h4><p>我们最后，可能想问的一个问题就是为什么我们假设的先验分布是一个Gaussian的分布而不是其他的分布。</p><p>其实关于先验分布的选择，是随意的，因为先验是我们写出的原因发生的概率，要写出来这个概率只能靠我们的认知。因此我们前面根据大数定律得到的认知就是Gaussian的分布。其实我们取别的分布也完全是OK的</p><p>不过如果我们的分布选的太简单，那么model bias可能就大了。因此具体使用那个也是看我们的。</p><p>例如我们如果某个feature的取值只有两种，表示是或者不是，那么相比于Gaussian，我们其实应该假设这个feature服从Bernoulli Distribution</p><h4 id="B-Why-high-dimension-Gaussian-Distribution"><a href="#B-Why-high-dimension-Gaussian-Distribution" class="headerlink" title="B. Why high-dimension Gaussian Distribution"></a>B. Why high-dimension Gaussian Distribution</h4><p>我们假设的Gaussian的分布是一个高维的Gaussian Distribution。那么这个其实也是我们的假设。我们完全可以假设每一个example的feature之间的取值都是independent的。换而言之每个feature都是服从一个独立的分布的。</p><p>我们假设每个feature都服从一个一维的Gaussian Distribution。这样当然也可以。这样的话其实也相当于给我们的模型添加限制。限制了covariance matrix的取值。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126002007465.png" alt="假设每一个feature都服从一个Gaussian Distribution"></p><h4 id="C-Naive-Bayes-Classifier"><a href="#C-Naive-Bayes-Classifier" class="headerlink" title="C. Naive Bayes Classifier"></a>C. Naive Bayes Classifier</h4><p>如果我们在假设每一个feature都是独立服从Gaussian Distribution的基础上，我们还假设每一个feature服从的Gaussian Distribution都是相同的。即假设每一个feature都是独立同分布的。那么这个时候，上面这个possibility model就称为naive bayes classifier</p><p>因为我们现在的假设是每一个feature都是独立同分布的，因此如果实际和我们的假设比较符合的话，那么naive bayes classifier的效果就比较，如果不是的话，那么性能就会差</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126002301770.png" alt="naive bayes classifier"></p><h2 id="4-From-Probability-Model-to-Logistic-Regression"><a href="#4-From-Probability-Model-to-Logistic-Regression" class="headerlink" title="4. From Probability Model to Logistic Regression"></a>4. From Probability Model to Logistic Regression</h2><p>我们在最前面说道，我们这一节课的目的是为了讲解使用Neural Network进行Classification的原理。可是我们上面讲了这么多，仿佛都只讲一个新的Probability的model。看起来和Neural Network进行Classification无关</p><p>那么下面，我们就要讲解是如何从这个Probability Model一步一步的推导到Neural Network中去的</p><h3 id="1-Posterior-Probability-Logistic-Regression"><a href="#1-Posterior-Probability-Logistic-Regression" class="headerlink" title="1. Posterior Probability: Logistic Regression"></a>1. Posterior Probability: Logistic Regression</h3><p>在概率论中，<strong>我们称某个事情发生之后，该事件由某个原因导致的概率为后验概率（Posterior）</strong>。</p><p>那么在上面的例子中，我们已经抽出来了一个圆盖海龟，它是水系的神奇宝贝这个概率就是一个后验概率，即</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126002825341.png" alt="Posterior Probability"></p><p>然后我们对后延上下同除分子，就得到了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126003130069.png" alt="上下同除分子" style="zoom:67%;"></p><p>我们如果再假设</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126003201515.png" alt="假设z"></p><p>那么就得到了一个Sigmoid函数</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126003241906.png" alt="对后验进行整理得到了Sigmoid函数" style="zoom:67%;"></p><p>所以，到现在，我们就知道后验分布是一个变量$z$的函数</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126003422306.png" alt="后验是z的分布" style="zoom:80%;"></p><p>我们现在就要研究一下这个$z$到底是长什么样子的（表达式是什么样的）</p><p>我们首先把后验中的先验拆出来，那么由于我们用频率来代替先验，一次你后面的先验就可以直接表示为两类的example的比值</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126003554858.png" alt="拆出来先验"></p><p>然后前一项我们因为假设了是Gaussian的Distribution，因此我们是可以写出来表达式的，因此我们写出来表达式，然后带进去相除</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126003908356.png" alt="写出表达式带入" style="zoom:67%;"></p><p>接下来我们进行化简，把指数部分相减，然后从$\ln$中取出来，就得到</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126004101013.png" alt="化简之后的式子" style="zoom:67%;"></p><p>然后我们就把常数项展开、合并同类项，进行化简。展开第一项的结果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126004305217.png" alt="展开第一项的结果" style="zoom:67%;"></p><p>然后把第二项继续展开，就得到了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126004357364.png" alt="完全展开后的式子" style="zoom:80%;"></p><p>由于我们上面假设两个Gaussian Distribution的$\Sigma^1$和$\Sigma^2$是一样的，因此我们还可以对$z$进行更进一步的化简、合并同类项</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126004716515.png" alt="更进一步的化简、合并同类项" style="zoom:67%;"></p><p>那么这个$z$其实是给$x$这个向量左乘一个矩阵，然后再加上一个向量，因此，上面的式子最终就化简为</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126005147008.png" alt="最终化简的式子" style="zoom:80%;"></p><p>从上面这个式子其实就能够看出来为什么边界是Linear的了。</p><p>因此，我们上面的generative的Probability的Model干的事情，其实就是我们通过一些手段，例如频率估计概率、假设高斯分布等等手段，最后算出来了$N_1,N_2,\mu_1,\mu_2,\Sigma$，然后用这些值算出来$W$和$b$。然后来来进行推断</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126005341724.png" alt="Generative Probability Model干的事" style="zoom:67%;"></p><p>那么我们这样是不是有一些舍近求远了，我们最重要的就是$W$和$b$，我们为什么要费这么大力气来求呢，有没有办法能够直接来求得这两个值？</p><p>这个就是我们接下来要讲的，Logistic Regression。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126005902198.png" alt="有没有办法来直接来求解？" style="zoom:67%;"></p><h2 id="5-Logistic-Regression"><a href="#5-Logistic-Regression" class="headerlink" title="5. Logistic Regression"></a>5. Logistic Regression</h2><p>我们上面说道，Probability Model最后化简到最后就是下面的式子</p><script type="math/tex; mode=display">f(z)=\frac{1}{1+e^{-z}}</script><script type="math/tex; mode=display">z=w\cdot x+b</script><p>我们从概率的角度出发，假设每一类服从高斯分布，然后从training set中计算得到上式中的参数$w$和$b$。</p><p>最终判断某一个input $x$是不是$C_1$类，就是看最后得到的概率$P(C_1|x)=f(x)$是否大于0.5。</p><p>最后，我们发现Probability Model最后判断一个input $x$到底是不是属于某各类，就是根据$w,b$来进行推断，那么我们其实没有必要通过假设高斯分布、频率代替概率、通过一步步的推导最后得到参数$w$和$b$。我们就想，反正就是要这两个参数，那么我们能不能通过别的方法来获得这两个参数。那么从这个思路出发，其实就是Logistic Regression。</p><p>我们接下来就将详细的讲解Logistic Regression。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126120416662.png" alt="Logistic Regression" style="zoom:67%;"></p><p>ML的三大步：</p><ol><li>定义含参函数（模型）</li><li>定义损失函数（衡量模型的好坏）</li><li>Optimize（求解最优参数）</li></ol><p>因此，我们下面就从这三大步出发，来介绍Logistic Regression</p><h3 id="1-Step-1-Function-Set"><a href="#1-Step-1-Function-Set" class="headerlink" title="1. Step 1: Function Set"></a>1. Step 1: Function Set</h3><p>Logistic Regression的函数的表达式如下</p><script type="math/tex; mode=display">f_{w,b}(z)=\frac{1}{1+e^{-z}}</script><script type="math/tex; mode=display">z=w\cdot x+b=\sum_i w_ix_i +b</script><p>而$f_{w,b}(x)$的含义就是$x$属于某一个类的概率，即</p><script type="math/tex; mode=display">f_{w,b}(x)=P_{w,b}(C_1|x)</script><p>我们模型里的参数就是$w$和$b$。$w,b$所有的取值构成的集合在一起，就成了我们这个模型的Function Set</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126144800516.png" alt="Logistic Regression的Function Set" style="zoom:67%;"></p><p>我们把Logistic Regression用图形来表示出来，就是下面的图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126145206773.png" alt="Logistic Regression的计算图形" style="zoom: 50%;"></p><p>那么现在当一个新的input $x$进入之后，Logistic Regression的计算如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126145534216.png" alt="Logistic Regression的计算" style="zoom: 67%;"></p><p>我们在最前面讲解了Linear Regression，我们和Logistic Regression进行一下比较。</p><p>Linear Regression最后没有通过Sigmoid函数，因此输出的值可能是any value，而Logistic Regression最后则因为通过了Sigmoid函数，因此输出的值只可能是介于0和1之间的值</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126150018265.png" alt="Logistic Regression和Linear Regression在Step 1的比较" style="zoom: 80%;"></p><h3 id="2-Step-2-Goodness-of-a-function"><a href="#2-Step-2-Goodness-of-a-function" class="headerlink" title="2. Step 2: Goodness of  a function"></a>2. Step 2: Goodness of  a function</h3><p>在定义完了Logistic Regression的Function Set只有，我们接下来要做的就是定义衡量模型（函数）好坏的Loss Function</p><p>我们的training set是一个input和label的pair。而label可能的取值数量和我们的类别数量一样。此外，我们还假设我们所有的数据都是从一个概率分布$f<em>{w,b}(x)=P</em>{w,b}(C_1|x)$生成的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126150311330.png" alt="image-20220126150311330"></p><p>模型中的参数$w$和$b$是根据某一个分布推导来的，在Probability Model中，我们假设这个分布是一个Gaussian Distribution。而带入Gaussian Distribution计算得到的结果准确的话，那么就意味着真实的data的Distribution和Gaussian Distribution长得很像。如果不准确的话，就意味着真实的data的Distribution和Gaussian Distribution差的比较大。因此我们就需要重新假设一个data的Distribution，然后带入。如果准确率较高，那么就结束，否则重新假设一个Distribution。直到我们最终找到了一个准确率比较高的Distribution。而准确率较高的Distribution就意味着它和data真实的Distribution很相近。</p><p>在表象上来说，不同的Distribution反映在模型上就是参数$w$和$b$，因此不同的$w$和$b$就表示了不同的分布。</p><p>因此，一个$w,b$的pair就和一个分布对应，因此我们衡量一个函数的好坏，就是看这个Distribution产生这些data的可能性大不大。</p><p>我们通过Likelihood来衡量这个可能性，即</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126152228652.png" alt="通过似然来衡量可能性" style="zoom: 80%;"></p><p>注意上式中，因为我们是二分类，因此$x^3$是$C<em>2$类的概率就是$(1-f</em>{w,b}(x^3))$</p><p>接下来，我们再对上式进行一下数学上的变形。因为取$\ln$的话增减性不变，而在前面加了一个符号，因此maximize Likelihood就等价于minimize变形后的式子，即</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126152840797.png" alt="对Likelihood进行数学上的变形" style="zoom: 67%;"></p><p>​    因为取了$\ln$，所以我们可以把Likelihood的连乘拆开</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126153401524.png" alt="拆开连乘" style="zoom: 67%;"></p><p>不过拆开连乘有一个很烦的事情就是，有的项是$-\ln f<em>{w,b}(x)$，而有的项又是$-\ln(1-f</em>{w,b}(x))$。因此我们没有办法直接写出来一个summation over n。</p><p>因此我们做一个符号上的转换，对于每一个input，如果它是class 1，他的label就是1，否则就是0。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126154135407.png" alt="进行符号上的转换" style="zoom: 80%;"></p><p>那么这个时候，我们就可以把negative nature log的Likelihood表示为统一的式子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126154502246.png" alt="把负对数似然表示为统一的表达式" style="zoom: 67%;"></p><p>我们可以验证一下，发现确实是对的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126154640254.png" alt="把Training Set带入验证" style="zoom: 80%;"></p><p>因此，我们最后就可以把负对数似然写为下面的式子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126154904402.png" alt="负对数似然表达为交叉熵" style="zoom:67%;"></p><p>而上面的式子中，我们如果把$\hat y^n$和$1-\hat y^n$视为两个随机变量的话，那么这两个随机变量服从Bernoulli Distribution。因为我们上面假设$\hat y^n$的取值只有0或者1。</p><p>而$f_{w,b}(x)$就是描述某一个input $x$的概率，因此如果把他也视为一个分布的话，那么上面的式子就是一个交叉熵。这个时候，我们最小化交叉熵就是要让输出的分布和真实的label的分布一样</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126155656279.png" alt="最大化似然等价于最小化交叉熵" style="zoom: 80%;"></p><p>最后，我们比较一下Logistic Regression和Linear Regression在Step 2上的异同</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126160051217.png" alt="Logistic Regression和Linear Regression在Step 2的比较" style="zoom: 80%;"></p><h3 id="3-Step-3-Find-the-best-function"><a href="#3-Step-3-Find-the-best-function" class="headerlink" title="3. Step 3: Find the best function"></a>3. Step 3: Find the best function</h3><p>对于Logistic Regression来说，找到最好的Function的计算方法就是Gradient Descent。</p><p>而Logistic Regression算Gradient还是比较简单的，首先计算第一项的微分</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126161614908.png" alt="Logistic Regression求Gradient——第一项" style="zoom:67%;"></p><p>然后求第二项的微分</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126161823188.png" alt="Logistic Regression求Gradient——第二项" style="zoom:67%;"></p><p>虽然中间的计算比较复杂，但是最后得到的式子很直观，就是输出和label的difference乘以input</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126161938552.png" alt="梯度最终的式子" style="zoom: 67%;"></p><p>最后，我们比较一下Logistic Regression和Linear Regression的第三步的异同，发现两者在表达式上其实是一样的。只不过是前面乘的系数的值域不同</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126162319671.png" alt="Logistic Regression和Linear Regression在Step 3的比较" style="zoom:67%;"></p><h3 id="4-Why-not-Mean-Square-Error？"><a href="#4-Why-not-Mean-Square-Error？" class="headerlink" title="4. Why not Mean Square Error？"></a>4. Why not Mean Square Error？</h3><p>我们上面在比较Logistic Regression和Linear Regression的时候，我们说道Logistic Regression的Loss Function是cross-entropy loss而Linear Regression则是使用mean square error。</p><p>造成这个现象的一个原因就是Logistic Regression我们的是从Probability的角度出发，一步步推导，最后使用Likelihood来衡量得到的。那么我们就想问为什么不能强行用MSE呢？使用MSE在这里还想也是说的通的，就是要预测的概率和真实的概率越接近越好。</p><p>所以我们不妨真实使用MSE来Train一发</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126163939205.png" alt="使用MSE Train一发Logistic Regression" style="zoom:67%;"></p><p>那么我们使用Gradient Descent计算得到的Gradient的表达式就是上图中的最后一行。</p><p>那个这个Gradient有一个什么问题，就是在模型推断得到的概率很小或者很大的时候，不管label是1还是0，求得的梯度直接就是0了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126164451425.png" alt="label为1时候，很接近或者很原理target梯度都是0"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126164528229.png" alt="label为0时候，很接近或者很原理target梯度也都是0"></p><p>就以两个feature的二分类来说的话，我们绘制MSE和cross-entropy的loss surface如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126170737449.png" alt="MSE和Cross-Entropy的loss surface" style="zoom: 67%;"></p><p>我们可以看到MSE在分类这件事情上，当距离目标很远的地方，就很平坦，对应的Gradient就是0，基本上就无法更新了。而此时cross-entropy的Gradient依然均匀，因此可以支持我们更好的进行训练。</p><h2 id="6-Discriminative-v-s-Generative"><a href="#6-Discriminative-v-s-Generative" class="headerlink" title="6. Discriminative v.s. Generative"></a>6. Discriminative v.s. Generative</h2><p>Logistic Regression这个方法我们称其为Discriminative的方法，而上面用Gaussian来描述Posterior Probability的方法称为Generative的方法。</p><p>我们下面就将比较一下两个方法的异同</p><h3 id="1-Optimization-Method"><a href="#1-Optimization-Method" class="headerlink" title="1. Optimization Method"></a>1. Optimization Method</h3><p>而实际上，两者Model能表示的Function Set是一模一样的，都是$P(C_1|x)=\sigma(w\cdot x+b)$，只不过两者寻找最优参数的Optimization的方法不同。</p><p>Discriminative的Model是通过Gradient Descent来求得的，而Generative的Model则是我们再假设为Gaussian Distribution的基础上求取$\mu^1,\mu^2,\Sigma^{-1}$计算得到的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126172604148.png" alt="Discriminative Model和Generative Model Optimization的方法不同" style="zoom: 67%;"></p><p>而因为两个模型能表达的Function Set是一样的，因此我们就会问，Discriminative和Generative的Model两个得到的参数$w$和$b$是否是一样的</p><p>答案其实是两个方法找到的最佳的参数是不一样的，这个其实就提醒我们，尽管模型相同（意味着best function candidate是相同的），但是我们加的限制（Logistic Model中没有假设是Gaussian Distribution）不同、求解的方法不同，最终得到的参数是不同的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126173404092.png" alt="相同的Model不同的限制得到的最优解不同" style="zoom:67%;"></p><h3 id="2-Results-Comparison-Distribution-in-mind"><a href="#2-Results-Comparison-Distribution-in-mind" class="headerlink" title="2. Results Comparison: Distribution in mind"></a>2. Results Comparison: Distribution in mind</h3><p>我们既然说两个方法的model都是一样的，只是Optimization的方法不一样，那么我们会问哪个方法得到的结果会好一点呢？</p><p>我们看一下上面的神奇宝贝分类的例子，我们用所有的feature，最后Discriminative Model得到的准确率是79%，而Generative Model得到的准确率是73%</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126173820518.png" alt="神奇宝贝分类的例子" style="zoom:80%;"></p><p>当然我们这里只有一个例子，在真实的例子中其实往往都是Discriminative的Model准确率更高。为什么会这样呢？</p><p>其实是因为Generative的Model会在心中有一个Distribution，这个心中的Distribution会影响到准确率。我们下面通过一个toy dataset讲解Distribution in mind问题。</p><p>我们假设有下面的一个dataset作为training dataset</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126185955514.png" alt="toy dataset" style="zoom:80%;"></p><p>这个training data一共有13个example，其中属于class 1的example只有一个，其他12个都是class 2的example。</p><p>那么现在有一个新的input来了，我们需要判断这个input是哪一个class。我们首先用Human Learning来看一下，我们就会觉得这个input是class 1</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126190418882.png" alt="判断新的input的class" style="zoom:67%;"></p><p>我们来看看Generative Model给出的结果。为了简单起见，我们不妨用Generative Model里的Naive Bayes</p><p>那么对于朴素贝叶斯来说，他假设input所有feature的Dimension之间都是independent的，因此一个input判断它是哪一个类，就分别判断每一个feature是不是这个类。即看所有的feature是不是都是由这个类的Distribution generate出来的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126190807382.png" alt="Naive Bayes" style="zoom: 80%;"></p><p>那么我们首先计算$C_1$和$C_2$的Prior，然后在分别计算从$C_1,C_2$中sample得到$x_1,x_2$的概率</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126191249932.png" alt="计算Naive Bayes" style="zoom:80%;"></p><p>然后我们把算到的这些概率都带入到Bayesian的公式里去，计算$x$来自class 1的概率</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126191942983.png" alt="计算x来自class 1的概率" style="zoom:67%;"></p><p>那么我们会发现，在human看来是来自于class 1的input，在Generative Model看来它是来自于class 2的。</p><p>那么为什么会出现这样的现象呢？这是因为在我们人看来，在training set中出现了$x^1,x^2$都是1的情况，所以这个input应该就是class 1。</p><p>可是对于Naive Bayes来说，他首先不会考虑不同feature之间的correlation。因此这两个feature是independent产生的。在Naive Bayes看来，在class 2中没有看到这样的example是因为我们对真实Distribution sample的此时不够多。我们如果sample的足够多，那么搞不好会有两个feature全是1的example。</p><p>因此，Generative Model和Discriminative Model的差别就在于Generative Model做出了一些假设，首先假设data都是来自于一些分布，其次根据具体的模型的不同还有一些额外的假设。</p><p>这个假设数据都是来自于某一个分布这件事就类似于脑补，即本来不一定有这件事，你自己想象出来这件事。例如动漫里男主女主没有在一起，但是我们却想象说两个人在一起了。</p><p>因此，对于上面的Naive Bayes来说，明明在training dataset里面明明没有观察到feature全是1的、属于class 2的example出现。但是它根据心中的Distribution，脑补出来它看到了这件事情。</p><p>因此Naive Bayes会做出和人类的直觉不一样的判断。</p><h3 id="3-Is-脑补-a-good-thing"><a href="#3-Is-脑补-a-good-thing" class="headerlink" title="3. Is 脑补 a good thing?"></a>3. Is 脑补 a good thing?</h3><p>既然Generative Model会根据他心中的Distribution（我们假设的先验分布）脑补出来没有看过的example，那么我们就会问这个脑补到底是不是一件好事情？</p><p>其实脑补这件事情是有利也有弊的，优点在于：</p><ul><li>因为以及假设了先验分布了，因此其实只需要用很少的数据来估计出这个先验分布的特征值，然后就可以自己generate出来其他的数据。而Discriminative Model在数据量比较少的时候，就会出现Overfitting这个现象</li><li>因为有了这个先验分布，因此对data中的噪声更加鲁棒</li><li>在Generative Model中，我们把Posterior拆成了Prior和class-dependent的概率，那么这样的好处就在于我们其实可以从不同的角度、来源来获得这个先验和class-dependent概率。例如在语音识别中，我们要识别出来一句话，然而同样的一段语音，识别出来的结果可能有很多个，那么这个时候我们其实需要的就是来获得每个识别出来的文本的概率。这个概率就是一个后验。那么我们拆成先验和class-dependent的概率之后，先验就是这句话被说出来的概率。那么要或者这个概率其实只需要从网络上爬虫爬取一下就行了。而这句话是某个class的概率（例如文本情感，那就是看从开心或者愤怒这两个class中generate出来的概率）就可以通过DNN来实现</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126193609067.png" alt="Generative Model的优点"></p><h2 id="7-Multi-class-Classification"><a href="#7-Multi-class-Classification" class="headerlink" title="7. Multi-class Classification"></a>7. Multi-class Classification</h2><p>我们上面讲的全部都是二分类下的操作，在真实情况下往往都是multi-class的Classification任务。因此我们接下来讲解一下multi-class的Classification是如何操作的。</p><p>我们这里以三个class为例进行讲解，其实也可以推广到多个class的Classification上去。而且这个推广的过程和二分类非常类似。</p><h3 id="1-Calculate-possibility-Softmax"><a href="#1-Calculate-possibility-Softmax" class="headerlink" title="1. Calculate possibility: Softmax"></a>1. Calculate possibility: Softmax</h3><p>在binary的Classification中，我们判断某一个input是不是这个类，那就只需要看它的Logistic Regression的输出结果即可。如果Logistic Regression上的输出大于0.5的话，那么就是这个class，如果小于0.5的话就不是这个class，因为是二分类，不是这个class就是另外一个class。而之所以要大于0.5的话，是因为Logistic Regression的输出是属于这个类的possibility。</p><p>而在multi-class的 Classification中，由于当这个class的概率小于0.5的时候还有两个class候选，因此其实没办法只用一个Logistic Regression来完成。因此使用Logistic函数得到的输出就不再是possibility了</p><p>为此我们用一个Logistic Regression的加强版，即使用一个softmax来得到概率，而此时因为是多分类，所以我们是选择概率最高的类作为Classification的结果。</p><p>下面我们就讲讲softmax计算的方法。</p><p>首先对于softmax来说，每个class都有一组参数$w^i,b_i$，这样的话，先让一个input通过三组$w^i,b_i$，就得到了三个$z_i$。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220126195157823.png" alt="一个input通过三组参数得到三个z"></p><p>在Logistic Regression中，我们最后是通过Logistic函数来实现将值转换为概率。而这个值则是与某一个input和Distribution对应。我们推导Logistic函数的时候是通过二分类的贝叶斯公式。</p><p>那么类比于二分类的贝叶斯公式，我们对多个class（原因）的贝叶斯公式写出来，然后除以分子的话，就得到了softmax函数。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127001932331.png" alt="Bishop的PRML书里softmax这一段" style="zoom:67%;"></p><p>因此，在计算得到三个$z_i$之后，我们接下来用softmax实现从值转换为概率。</p><p>softmax具体的计算的图示如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127000852686.png" alt="softmax计算的图示" style="zoom: 50%;"></p><p>即首先计算三个z的exponential，然后求和再除三个z的exponential，这样就得到了最终输出的概率。</p><p>我们举一个具体的例子，假如说现在计算得到的三个值是-3、1、3，带入之后计算的概率分别是0.88，0.12和约等于0。所以我们就说这个input $x$在分类的结果就是class 1</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127002630986.png" alt="softmax计算具体的例子" style="zoom: 67%;"></p><p>在通过softmax之后得到的是概率，因此最终输出的所有值均满足：求和为1，各自在0-1之间这个特点</p><h3 id="2-Loss-Function"><a href="#2-Loss-Function" class="headerlink" title="2. Loss Function"></a>2. Loss Function</h3><p>在binary的Classification中，计算Logistic Regression的参数好坏的Loss Function是cross-entropy，而推到得到cross-entropy是通过Maximum Likelihood得到的。</p><p>这个过程完全可以扩展到多个类上去。因此，multi-class的Logistic Regression的损失函数也是使用的交叉熵，其具体的计算如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127003554839.png" alt="多个类计算交叉熵" style="zoom:67%;"></p><p>考虑到我们的target都是one-hot向量，因此其实计算完Cross-Entropy之后得到的possibility名义上是三项的summation，其实只有一项。而在求梯度反向传播的时候，则在softmax这一层从一个Gradient传播到了三个方向去。因为softmax计算的时候有用到三个feature计算exponential的summation。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127003834803.png" alt="target/label都是one-hot向量" style="zoom:80%;"></p><h2 id="8-From-Logistic-Regression-to-Neural-Network"><a href="#8-From-Logistic-Regression-to-Neural-Network" class="headerlink" title="8. From Logistic Regression to Neural Network"></a>8. From Logistic Regression to Neural Network</h2><h3 id="1-Limitation-of-Logistic-Regression"><a href="#1-Limitation-of-Logistic-Regression" class="headerlink" title="1. Limitation of Logistic Regression"></a>1. Limitation of Logistic Regression</h3><p>实际上我们说Logistic Regression并不是万能的，而是有缺点的。例如下面的例子，我们现在的training data只有4个example。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127005606616.png" alt="只有4个example的training data" style="zoom:67%;"></p><p>我们现在就是要让Logistic Regression对这四个example进行二分类，即希望对class 1的两个example通过Logistic Regression后计算出来的概率大于0.5。</p><p>那么我们其实会发现，这件事其实是办不到的。因为对于Logistic Regression来说，他计算得到的boundary其实是一条直线，因此不管我们怎样的画这条直线，都是没有办法完成这个分类的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127005806977.png" alt="Logistic Regression无法完成这个简单的任务" style="zoom:67%;"></p><h3 id="2-feature-transformation"><a href="#2-feature-transformation" class="headerlink" title="2. feature transformation"></a>2. feature transformation</h3><p>为了解决上面这个Logistic Regression的limitation，我们可以通过特征变换来实现。我们想想我们之所以无法用Logistic Regression分出来的结果是因为我们的feature选的不好。因此我们可以先对feature进行变换，得到一个良好的feature之后就可以让Logistic Regression完成分类了。</p><p>举例来说，上面的例子中，我们原有的feature space中Logistic Regression是无法完成分类的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127010201753.png" alt="原有的feature space中Logistic Regression无法完成分类" style="zoom:67%;"></p><p>那么我们可以通过现有的feature来构造（transform）新的feature，例如我们这里构造出来新的feature $x_1’$和$x_2’$分别表示原来的点到$(0,0)$和$(1,1)$的距离。这样的话，Logistic Regression画一条线出来就可以实现分类</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127010321891.png" alt="通过构造新的feature实现Logistic Regression完成分类" style="zoom:67%;"></p><p>然而有一个问题就是这个feature transformation我们其实并不是每次都知道怎么做，或者说并不是所有的feature transform都是像我们这里进行的transform一样简单</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127010652182.png" alt="问题的关键在于如何进行transformation" style="zoom:67%;"></p><p>而我们如果花费太多的时间在寻找transformation的话，那么其实就不是机器学习了，反而是人的智慧了。因此相比于我们handcrafte出来这个transformation，我们更希望能够让机器去自己学到这个transformation</p><h3 id="3-Cascading-logistic-regression-models"><a href="#3-Cascading-logistic-regression-models" class="headerlink" title="3. Cascading logistic regression models"></a>3. Cascading logistic regression models</h3><p>我们如何实现让机器自己去学习到这个transformation呢？其实只需要把多个Logistic Regression的model cascade起来就行了</p><p>因为进行变换其实就相当于乘以一个矩阵进行基座标变换，而我们套上Logistic Regression把这个值放缩到0-1区间内。那么这样最后得到的输出我们就可以认为是新的feature</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127011015328.png" alt="通过Logistic Regression进行feature transformation" style="zoom: 67%;"></p><p>那么这样，在机器学习的时候（Gradient Descent的时候），其实就会学习前面参数$w<em>{11},w</em>{12},w<em>{21},w</em>{22}$。也就意味着，机器自己学习这个transformation。最后再接一个Logistic Regression进行分类即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127011418304.png" alt="后接一个Logistic Regression进行分类" style="zoom:67%;"></p><p>因此，我们这个cascade Logistic Regression中，三个Logistic Regression中前两个用于feature transformation，一个用于Classification</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127011524646.png" alt="三个Logistic Regression的作用不同" style="zoom:67%;"></p><h3 id="4-Cascade-Logistic-Regression-to-Neural-Network"><a href="#4-Cascade-Logistic-Regression-to-Neural-Network" class="headerlink" title="4. Cascade Logistic Regression to Neural Network"></a>4. Cascade Logistic Regression to Neural Network</h3><p>每一个Logistic Regression的input可以有多个数值，因此我们其实可以把多个Logistic Regression以一个复杂的形式连接起来。</p><p>然后称每一个Logistic Regression的unit为一个Neuron，然后很多个Neural 连接起来就是Neural Network。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220127011858117.png" alt="Neural Network" style="zoom: 80%;"></p><p>更进一步，既然前面是在transformation，那么其实没有必要要通过Logistic函数，我们可以给前面的feature transformation的地方通过relu等其他函数，只需要保持最后分类的地方的Logistic或者softmax函数不变即可。</p><p>这样的话就最终成为了我们标准的使用神经网络进行分类的模型。</p><h2 id="9-Summary"><a href="#9-Summary" class="headerlink" title="9. Summary"></a>9. Summary</h2><p>最后，我们进行一下总结。我们本节课的目的在于配合前面讲解神经网络分类的short version版本，我们完完整整的从Probability Model出发，一步步讲解，然后引出Logistic函数背后的意义是概率。进一步从概率的角度出发，讲解使用cross-entropy背后的原理是交叉熵。最后讲解多分类的时候使用softmax其实就是Logistic的二分类的贝叶斯公式的多分类推广。</p><p>我们为了讲解上面这段话，让其中的每一段都rationale，我们绕了不少弯路，特地的讲解完了Probability Model和Logistic Regression。</p><p>不过我却认为这些弯路并不是白费的，因为我们更加深刻了理解了分类为什么是使用softmax以及使用cross-entropy的原理。</p><p>16414个字，目前为止最长的文章了，辛苦我自己了~</p><p>继续加油<span class="github-emoji"><span>🐛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🐛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🐛</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-5: Classification (Short-Version)</title>
      <link href="/2022/01/20/li-hong-yi-ml2021-spring-5-classification-short-version/"/>
      <url>/2022/01/20/li-hong-yi-ml2021-spring-5-classification-short-version/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是Machine Learning 2021 Spring 第五节课的笔记，本节课主要讲解了如何利用深度学习进行分类。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120191508348.png" alt="第五节课：Classification (Short-Version)"></p><h1 id="李宏毅ML2021-Spring-5-Classification-Short-Version"><a href="#李宏毅ML2021-Spring-5-Classification-Short-Version" class="headerlink" title="李宏毅ML2021-Spring-5: Classification (Short Version)"></a>李宏毅ML2021-Spring-5: Classification (Short Version)</h1><p>在前面的课程中，我们在第二节课：Introduction of Machine/Deep Learning的时候就首先介绍了机器学习就是找一个函数，然后根据要找的函数的不同，机器学习的任务可以分为三种：</p><ul><li>Regression：机器需要寻找的函数的输出是一个（连续的）数值</li><li>Classification：机器的输出是多个选项中正确的一个（类别） ，这些选项都是人类提前给定的</li><li>Structured Learning：略</li></ul><p>我们在这些课中还通过YouTube观看人数预测这个任务，从Linear Model出发，从函数拟合的角度慢慢引入到Deep Learning。最后我们讲解了如何用Neural Network来解决YouTube观看人数预测这个任务。</p><p>那么其实YouTube人数预测这个问题中，它的输出人数就是一个连续的数字，因此其实那里的Neural Network解决的就是一个Regression的问题。而让网络解决Regression问题其实也很简单，就是让网络最后输出一个数值就行了，非常的简单。因此我们没有专门的讲解Regression问题。</p><p>对于Classification来说，因为要做选择，所以最后到底该怎么样的改变网络才能让网络输出一个选项呢？本节课将讲解Neural Network如何解决Classification任务</p><h2 id="1-Short-Version"><a href="#1-Short-Version" class="headerlink" title="1. Short Version"></a>1. Short Version</h2><p>在以往的课程中，关于如何使用深度学习来进行分类这节课会讲一个小时左右，但是因为今年这次课时间有限，所以会讲一个短版本的如何使用深度学习来进行分类。</p><p>具体来说，这个短版本会直接告诉你通过深度学习来进行分类的操作，更多的intuitive和insight都省略不讲，如果想学习的话得自己去看往年的课程。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120161348086.png" alt="往年关于分类的课程"></p><h2 id="1-About-Notations"><a href="#1-About-Notations" class="headerlink" title="1. About Notations"></a>1. About Notations</h2><p>在机器学习中，关于符号其实是没有统一的规定的。有的人用$(x,y)$表示example，用$\hat y$表示模型的输出，也有的人从函数的角度出发，将$y$定义为模型的输出，而$x$是input的example的feature，真实的label用$\hat y$来表示</p><p>本课程中，老师就是从第二个观点出发做给出的记号</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120162110511.png" alt="将模型视为函数给出的符号" style="zoom: 67%;"></p><h2 id="2-Classification-as-Regression"><a href="#2-Classification-as-Regression" class="headerlink" title="2. Classification as Regression"></a>2. Classification as Regression</h2><p>我们在前面讲了如何用神经网络来解决Regression问题。那么我们首先想，能不能让网络把分类问题当做一个回归问题来处理。具体来说就是我们现在把每个class和一个数字绑定。</p><p>然后我们训练的时候还是用MSE如果RMSE这样的损失函数让网络的输出越接近代表这个类的数字就行了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120164147826.png" alt="把Classification当做Regression来解"></p><p>但是这样做其实是有问题的，因为我们这样做，其实暗含了这样的假设：Class 1和Class 2更加相似，而Class 1 和 Class 3会比较不同。因此，这样做其实人为的引入了相似性</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120164944398.png" alt="用Regression求解Classification会导致人为的引入相似性" style="zoom: 50%;"></p><p>在有一些场景下，不同的class之前确实是有关系的，比如根据小学生的身高体重来判断这个学生是几年级的学生。那么一年级和二年级之前确实比一年级和三年级之间更加相似。因此这个时候这样去用Regression来解决Classification问题是OK的。</p><p>可是在很多情况下，不同的class之间是没有关系的，比如进行水果、汽车等几类物体的划分时候，不用的物体之间其实并没有特别的关系，因此这个时候给不同的类之间加上这个关系就会显得不是很正确</p><h2 id="3-Class-as-one-hot-vector"><a href="#3-Class-as-one-hot-vector" class="headerlink" title="3. Class as one-hot vector"></a>3. Class as one-hot vector</h2><p>那么其实在做分类的时候，更常见的做法是用one-hot vector来表示不同的类。</p><p>假设我们有三个类，那么我们就用一个长度为3的向量来表示这三个类，每一个维度上如果是这个类就是1，如果不是这个类就是0</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120170058108.png" alt="用one-hot vetor来处理类" style="zoom: 33%;"></p><p>那么现在有一个问题就是，我们的网络给出的输出都是一个数字，然而现在label变成了一个向量。可是我们的Label却是一个三维的向量。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120170428489.png" alt="Regression问题中网络的输出只有一个值" style="zoom: 33%;"></p><p>因此我们现在还需要对网络的结构进行修改，让它重复输出三个数字，也就是分别乘以三组不同的权重，最后就能够输出三个数字。所以修改其实也很简单，就是把Regression的输出层按照上面说的修改一下即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120170833665.png" alt="修改输出层之后的网络" style="zoom: 33%;"></p><p>所以我们现在给一个input（这里input）是有三个feature，然后期待网络输出的向量$(y_1,y_2,y_3)$和他真实的类越接近越好</p><h2 id="4-Softmax"><a href="#4-Softmax" class="headerlink" title="4. Softmax"></a>4. Softmax</h2><p>我们网络现在能够根据输入给出一个输出向量，但是和Regression不同的是，Regression最后直接用这个输出的值当做预测的值即可，而Classification其实不能直接用这个输出来直接作为预测。</p><p>一个原因就是我们输出的y的范围其实是从正无穷到负无穷的即$y$其实可以是任何值，而在我们上面的one-hot vector中，我们则是要求每个example的label的$\hat y$的值要么为0要么为1，因此在直接给出预测前还需要进行一步操作。</p><p>我们通过softmax把最终输出的$y$的值不改变相对大小放缩到0~1之间。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120171702797.png" alt="分类网络最后输出前要经过softmax" style="zoom: 33%;"></p><p>当前，上面这个所谓范围的这个解释只是骗小孩的，在他背后有更深层次的原因，不过在这里我们不进行深入的讲解，如果有需要的话得自己去看往年的长版本的课程。</p><p>而softmax具体的计算过程如下，首先对每个$y$去exponential，然后再做归一化</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120172720279.png" alt="softmax的计算方式" style="zoom: 33%;"></p><p>而Softmax的特点有两个：</p><ul><li>所有的值都是介于0~1之间的</li><li>所有的值的和是1</li><li>大的值和小的值差距更大</li></ul><p>下面是一个Softmax的计算的例子，我们通常把softmax的输入称为Logit</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120173558296.png" alt="Softmax计算的例子" style="zoom:50%;"></p><p>最后，对二分类来说的话，我们其实用Sigmoid就行，因为这个时候Sigmoid和softmax是等价的</p><h2 id="5-Loss-Function-of-Classification"><a href="#5-Loss-Function-of-Classification" class="headerlink" title="5. Loss Function of Classification"></a>5. Loss Function of Classification</h2><p>我们在定义了模型只有，接下来的一步就是要确定损失函数用什么。在Regression中我们直接用MSE计算得到的距离来衡量即可。</p><p>在Classification中我们当然也可以用MSE作为损失函数</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120174313179.png" alt="MSE作为损失函数" style="zoom: 33%;"></p><p>然而在Classification中，其实更常用的损失函数是Cross-Entropy</p><p>而交叉熵损失的表达式如下，summation of all i, yi hat dots yi prime natural log。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120174537961.png" alt="Cross-Entropy的表达式" style="zoom: 67%;"></p><p>那么为什么要minimize cross-entropy，其实我们也不讲，这个原因（故事）得去长版本的讲解里听。</p><p>不过这里简单的说一下，minimize cross-entropy就等价于maximize likelihood</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120175031908.png" alt="最小化交叉熵等价于最大化似然" style="zoom:50%;"></p><p>而对于分类任务来说，cross-entropy实在是太常用了，因此在Pytorch里面，softmax是和cross-entropy绑定在一起的，我们只需要调用cross-entropy就会自动的先计算softmax</p><p>下面我们从一个例子来讲解为什么cross-entropy要比mse要好。</p><p>假设我们现在做一个三分类的任务，下面是我们的模型图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120175536438.png" alt="模型图" style="zoom: 80%;"></p><p>我们现在假设$y_1$和$y_2$分别从-10-10变化，而$y_3$固定取-1000</p><p>那么我们就得到了下面的Error Surface</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120175813951.png" alt="使用两种损失函数得到的两个Error Surface"></p><p>那么能看到，在两种损失函数的曲面上，越靠进右下角损失就月小，而右下角就表示$y_1$很大而$y_2$很小，其实就表示预测的类别是$y_2$</p><p>同理，左上角loss大是因为直接预测错了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120180324395.png" alt="两个损失函数都是右下角小而左上角大"></p><p>那么假如说我们现在起点都在左上角，那么其实左边使用mse的话，是没有斜率的，因此就无法更新，而右边的使用cross-entropy则是因为有斜率，所以可以到达右下角。所以针对与分类任务来说，使用Cross-Entropy会更好</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120180530892.png" alt="分类任务用交叉熵更好"></p><p>最后，上面这个例子其实给了我们一个启发，就是我们针对不同的任务要使用不同的损失函数。</p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Research Skills Workshop 1</title>
      <link href="/2022/01/19/research-proposal-workshops-1/"/>
      <url>/2022/01/19/research-proposal-workshops-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是本文是CCSIT Research Skills Workshop 1的笔记。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220129005211245.png" alt="Research Skills Workshop 1"></p><p>密码：ResearchSkillsWorkshop-1</p><h2 id="Research-Proposal-Workshops-1"><a href="#Research-Proposal-Workshops-1" class="headerlink" title="Research Proposal Workshops 1"></a>Research Proposal Workshops 1</h2><p>本节课主要讲解以下内容：</p><ul><li>What is research proposal</li><li>Why is research proposal important</li><li>Types of research</li><li>Research topic</li><li>Research motivation and research gap identification（Research gap指目前研究的空白领域）</li><li>How to formulate research questions</li></ul><p>换而言之，本节课首先说明什么事Research Proposal，然后将为什么要写他（他的重要性），然后因为Research Proposal的核心是科研，因此会连带的讲解科研相关的内容。</p><h2 id="1-What-is-Research-Proposal"><a href="#1-What-is-Research-Proposal" class="headerlink" title="1. What is Research Proposal?"></a>1. What is Research Proposal?</h2><p><strong>Research Proposal是一种以科研为核心的，用于回答一系列问题的一种文章</strong>。通常，在一个Research Proposal中，需要回答：</p><ul><li>What do you intend to research？</li><li>How do you intend yo research it?</li><li>Where does it fit into the broader context of the subjects?</li><li>What is the significance of what you are proposing to do?</li></ul><p>即你准备研究些什么，你准备怎样研究，和你的研究对于整个这个学科的影响，以及你的研究的重要性</p><p>回答清楚这四个问题的Research Proposal才是一篇好的Research Proposal</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220121181633798.png" alt="What is research proposal" style="zoom: 80%;"></p><h2 id="2-Why-is-research-proposal-important"><a href="#2-Why-is-research-proposal-important" class="headerlink" title="2. Why is research proposal important?"></a>2. Why is research proposal important?</h2><p>一般来说，我们只有在有了足够的动力来做某件事情之后，才回去做这件事情。而我们要写Research Proposal的话，也是首先要明白为什么Research Proposal重要。然后我们才会有有足够的动力去写Research Proposal</p><h3 id="A-To-the-university"><a href="#A-To-the-university" class="headerlink" title="A. To the university"></a>A. To the university</h3><p>首先是在申请硕士或者博士的学位的时候，一般申请的学校都会要求在申请材料的基础上，附带你的Research Proposal。</p><ul><li>因为相同的标化成绩其实是无法衡量一个申请学生的优秀的程度的</li><li>大学需要更深入的去了解一个学生，因此具有差异化的Research Proposal就可以帮助大学在不同的学生中进行比较，看看谁做过得项目比较好，最后决定录取谁</li><li>录取学生后学校是要给fund的</li><li>因此，一个Research Proposal中需要表现出来自己好的一面，尽可能的去贴近目标学校的要求</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220121182053156.png" alt="原因一：申请的时候需要Research Proposal，因为他能帮助学校全面判断学生" style="zoom:67%;"></p><h3 id="B-To-yourself"><a href="#B-To-yourself" class="headerlink" title="B. To yourself"></a>B. To yourself</h3><p>其次，我们能够通过Research Proposal来更加全面、多元化的展示我们自己。我们通过Research Proposal，需要展示：</p><ul><li>我们有独立进行批判性思考的能力（Critical independent though and learning）</li><li>我们具备说能够清晰地表达（自己要做的事）的能力</li><li>我们对我们准备研究的领域有深入的理解</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220121182814191.png" alt="原因二：Research Proposal可以更好的展示我们" style="zoom: 67%;"></p><h2 id="3-Three-types-of-research"><a href="#3-Three-types-of-research" class="headerlink" title="3. Three types of research"></a>3. Three types of research</h2><p>上面我们明白了什么是Research Proposal和为什么要写Research Proposal（Research Proposal的重要性之后），因为Research Proposal的核心是Research，因此我们下面需要讲讲关于Research的一些内容</p><p>一般来说，科研可以分为三类：</p><ul><li>Applied Research：应用研究</li><li>Empirical Research：实证研究</li><li>Theoretical Research：理论研究</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220121203349507.png" alt="科研的三种类型" style="zoom: 67%;"></p><h3 id="A-Applied-Research"><a href="#A-Applied-Research" class="headerlink" title="A. Applied Research"></a>A. Applied Research</h3><p><strong>应用研究指的是用科学的方法探索解决实际问题的方法的研究</strong>。我们一般说的，Classification、Segmentation等等这些面向实际问题的研究都是Applied Research</p><ul><li>Applied Research所解决的问题可能对生活、工作、健康等等多种与我们息息相关的内容产生影响。</li><li>Applied Research研究的问题通常是倾向于解决人们当前真真确确面临的各种各样的问题</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220121203636441.png" alt="Applied Research" style="zoom:67%;"></p><p>此外，Applied Research在实际进行研究的过程中也会存在一些我们需要关注的问题</p><ul><li>首先是道德问题，例如隐私、收集数据时候的被测试人的知情权。例如我们要通过研究声音来推断患者的患病史，那么我们在收集数据的时候就需要注意，我们收集的声音是无关参与者的私人生活的，这样确保不会从某种程度上侵犯受测人的隐私</li><li>此外还需要关注可复现性（有效性），external validity指的是科学成果可以被他人复现</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220121204506337.png" alt="Applied Research可能面临的问题" style="zoom:67%;"></p><h3 id="B-Empirical-Research"><a href="#B-Empirical-Research" class="headerlink" title="B. Empirical Research"></a>B. Empirical Research</h3><p><strong>实证研究是指在通过对现存的现象进行观察和测量的基础上，从实际经验中而非理论或者信念（例如众所周知xxx）获取知识的研究</strong>。换而言之，是我们自己通过观察现象，然后总结规律，得到知识的研究</p><p>Empirical Research的一些关键特征如下：</p><ul><li>有具体的、需要通过研究来回答的问题：例如研究汤加火山爆发后形成的小岛上的种群变化</li><li>需要给出一些定义：例如定义种群的密度、行为或者现象等等</li><li>还需要描述进行研究的方法、流程，例如选择的标准，控制、测试的工具。也包括survey（调查）、interview采访</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220121210100680.png" alt="Empirical Research" style="zoom:67%;"></p><h3 id="C-Theoretical-Research"><a href="#C-Theoretical-Research" class="headerlink" title="C. Theoretical Research"></a>C. Theoretical Research</h3><p>理论研究指的是收集某个现象或者想法的知识，这些知识可能在当下并不会立即有实际的运用</p><ul><li>理论研究通常是用于解释已有的现象的，通过解释已有的现象从而获得更深层次的知识，即知识的知识</li><li>理论研究的成果通常是会得到一堆证明和定理</li><li>理论研究是对我们现在的认知和假设系统的逻辑上的探索</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220121210552931.png" alt="Theoretical Research" style="zoom:67%;"></p><h2 id="4-How-to-choose-a-research-topic"><a href="#4-How-to-choose-a-research-topic" class="headerlink" title="4. How to choose a research topic"></a>4. How to choose a research topic</h2><p>通常来说，为了能够找到一个研究的课题，需要注意以下的关键点：</p><ul><li>首先需要集思广益，想出来一些我们感兴趣的方向</li><li>其次，我们从这个方向中要选择我们可以读懂、理解文献的课题。例如学计算机的就不要去做医学专业的课题</li><li>我们还需要确保，这个课题是可以进行研究的，我们也能够获取进行研究相关的材料，包括文献、实验数据。例如我们现在要去研究生物大分子结构这种课题就不太现实，因为需要冷冻电镜这类设备我们买不起。</li><li>接下来在我们做文献总数/回顾（Literature Review，读文献）的时候要列一个关键字的列表</li><li>我们还要做好灵活应对的准备，因为我们一开始选的课题其实有可能是不可行的</li><li>最后，我们需要从我们研究的课题定义为一个或者多个正在被关注的问题。即从课题中抽出来具体需要解决的问题</li><li>然后对课题的文章进行更加广泛和大量的阅读</li><li>最后形成一个论文的陈述</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220121210957643.png" alt="Research topic"></p><h2 id="5-Research-motivation-and-research-gap-indentification"><a href="#5-Research-motivation-and-research-gap-indentification" class="headerlink" title="5. Research motivation and research gap indentification"></a>5. Research motivation and research gap indentification</h2><p>在确定了我们要研究的课题之后，我们接下来需要做的就是考虑清楚我们的研究动机是什么以及如何确定研究领域内的空白。</p><h3 id="A-Research-Motivation"><a href="#A-Research-Motivation" class="headerlink" title="A. Research Motivation"></a>A. Research Motivation</h3><p>研究东西需要包含两个方面：</p><ul><li>What are the problems and issuee are to be explored?</li><li>Why are they worth exploring?</li></ul><p>而对于Research Motivation而言，最好找出你的研究领域内没有被人研究过得问题。这样做的好处有：</p><ul><li>首先，我们可以把有限的精力和金钱投资在正确的项目上</li><li>其次还可以增加我们的研究成果的发表机会</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124135000981.png" alt="Research Motivation的关键点"></p><h3 id="B-Research-Gap"><a href="#B-Research-Gap" class="headerlink" title="B. Research Gap"></a>B. Research Gap</h3><p>为了要能够找到当前研究领域内的空白，可以通过：</p><ul><li>从现有的已经发表的文献中寻找灵感</li><li>向导师寻求帮助</li><li>用一些电子工具来寻找现在的研究热点领域或者高被引文章</li><li>查看有影响力的期刊的网站</li><li>把自己在读文章的时候的疑问记录下来</li><li>然后把自己的疑问的地方一个一个的进行调查</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124134243082.png" alt="找到研究邻域内空白的方法"></p><h2 id="6-How-to-formulate-research-questions"><a href="#6-How-to-formulate-research-questions" class="headerlink" title="6. How to formulate research questions"></a>6. How to formulate research questions</h2><p>在确定完自己的研究领域、研究的东西和领域内目前的空白之后，最后一步就是形成具体的研究问题。</p><p>而一个成功的研究问题需要满足以下的关键点：</p><ul><li><p><strong>清晰</strong>：问题中需要有足够的细节，可以让一个没有先验知识的人搞懂你的研究的目的，而不需要额外的解释</p><blockquote><p>例如：</p><p>某人研究的课题是社交网站，他研究的问题是：<strong>社交网站的应该如何解决他们造成的危害？</strong></p><p>可是，这个问题却并不是非常清晰，因为我们在问题中并不知道哪些社交网站造成了怎样的危害。</p><p>因此，我们可以把问题修改为（reword）：</p><p><strong>向MySpace和Facebook这样的社交网站应该采取怎样的行动来保护用户的个人信息和隐私？</strong></p></blockquote></li><li><p><strong>简洁</strong>：用最少的单词来表述你的问题</p></li><li><p><strong>复杂</strong>：问题的回答最好不要就是简单的是或不是。相反，得到问题的答案前需要复杂的综合分析</p><blockquote><p>例如：</p><p>某人的研究课题是糖尿病，他研究的问题是：<strong>在美国医生是怎样处理糖尿病的？</strong></p><p>可是这个问题太简单了，回答他只需要列出来步骤即可。因此为了要达到问题的复杂性，我们可以提出这样的问题：</p><p><strong>哪些主要的环境、行为和遗传因素可以预测美国人是否会患上糖尿病？以及如何利用这些因素来帮助医学界来预防疾病？</strong></p></blockquote></li><li><p><strong>有争论的</strong>：我们的问题应该是目前没有被人研究过的，或者说是还存在争论的问题，而非已经具有被广泛接受的答案的问题</p></li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124135236730.png" alt="一个成功的研究问题应该满足的关键点" style="zoom: 80%;"></p><h2 id="7-Some-tips-for-research-proposal"><a href="#7-Some-tips-for-research-proposal" class="headerlink" title="7. Some tips for research proposal"></a>7. Some tips for research proposal</h2><p>最后是关于一些Research Proposal的一些建议：</p><ul><li>首先要明白：<strong>这只是一份Research Proposal，只需要回答一些别人关注的问题，而不需要对你准备研究的问题进行回答，因此我们不需要知道所有问题的答案</strong>。而且在将来随着我们研究的深入，我们很有可能会意识到我们一开始的方法并不是最好的方法，我们很有可能会改变我们的methodology</li><li>其次，<strong>我们需要在Research Proposal中表现出来我们对课题的热爱</strong>。因为在未来我们申请成功后，这个课题可能会持续好几年。如果是申请英国的硕士的话，那就只有一年；如果是英国的博士的话，那么就会有三年，而美国的博士则至少5年。因此，研究这个课题的过程将会是非常长的一个过程，所以我们需要有对这个课题的热爱</li><li>接下来，<strong>一个成功的Research Proposal需要有4P</strong>。4P在后面会有所解释</li><li>最后，则是一个成功的Research Proposal需要能够说明你的研究中的创新</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124182800228.png" alt="关于Research Proposal的一些建议"></p><h2 id="8-What-is-4P"><a href="#8-What-is-4P" class="headerlink" title="8. What is 4P?"></a>8. What is 4P?</h2><p>上面说到，一个成功的Research Proposal需要说明4P。而4P指的是：</p><ul><li>Person：person指的人就是你，包括你的学术背景，你感兴趣的研究领域是什么，你是这个研究项目合适的候选人么？</li><li>Preparedness：preparedness指的是你是否做好了准备。你先前完成了什么样类型的学习？是否在这个领域有所了解？你是否具有完成项目所必需的技能，包括调查方法、代码能力……</li><li>Project：Research Proposal中的project指的是你的Research Proposal是否合理，进行你的研究是否有意义</li><li>Place：地点这个要素则是要说明你是否选择了正确的研究地点。你选择的地方是否有合适的学者或者对你的课题感兴趣的研究小组，此外，你选择大学里是否有能够支持你进行科研的设备 </li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124184032313.png" alt="成功的Research Proposal应该有4P" style="zoom:50%;"></p><h2 id="9-Summary"><a href="#9-Summary" class="headerlink" title="9. Summary"></a>9. Summary</h2><p>最后，总结一下Research Proposal的一些内容</p><ul><li>首先，Research Proposal用于帮助判断你申请的学校里是否有支持你的研究的专家</li><li>他是你在申请的时候用于评估你的一个因素</li><li>你申请中的Research Proposal只是你的一个起点，因为在未来随着你的想法的改变，你的Research Proposal可能也会发生改变</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124185051733.png" alt="Summary"></p><h2 id="10-Structure-of-Research-Proposal-To-be-continue…"><a href="#10-Structure-of-Research-Proposal-To-be-continue…" class="headerlink" title="10. Structure of Research Proposal (To be continue…)"></a>10. Structure of Research Proposal (To be continue…)</h2><p>最后是Research Proposal的结构，我们今天讨论了标题、研究问题。而研究的背景（原因）、方法、计划和时间表等这些内容将在后面的workshop中进行讲解</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220124185654379.png" alt="Structure of Research Proposal"></p>]]></content>
      
      
      <categories>
          
          <category> Cambridge CCISTC AI Research Programme 2022 Winter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Research Proposal Workshops </tag>
            
            <tag> CCISTC </tag>
            
            <tag> University of Cambridge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-4: When Training Fails</title>
      <link href="/2022/01/17/li-hong-yi-ml2021-spring-4-problem-in-training/"/>
      <url>/2022/01/17/li-hong-yi-ml2021-spring-4-problem-in-training/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是李宏毅Machine Learning 2021 Spring 第四节课的笔记，本节课主要讲解了深度学习训练过程中训练失败的一些情况以及对应的处理方法。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120154739046.png" alt="第三节课：When Training Fails"></p><h1 id="李宏毅ML2021-Spring-4-When-Training-Fails"><a href="#李宏毅ML2021-Spring-4-When-Training-Fails" class="headerlink" title="李宏毅ML2021-Spring-4: When Training Fails"></a>李宏毅ML2021-Spring-4: When Training Fails</h1><p>在前一节课中，我们首先介绍了ML的Framework，具体来说我们分两步介绍了ML Framework：</p><ul><li>我们首先定义，ML Framework中的第一步是数据集准备<ul><li>数据集中一部分用于训练我们的模型，称为训练集</li><li>数据集中剩下的一部分用于测试我们的模型，称为测试集</li></ul></li><li>然后我们介绍了ML Framework中的第二步是模型训练和测试<ul><li>首先用我们的训练集训练我们的模型</li><li>然后将训练好的模型在测试集上测试，来看看我们模型的效果</li></ul></li></ul><p>如果我们的模型在测试集上的表现也非常不错的话，那么我们其实就可以部署我们的模型了。</p><p>接下来我们由介绍了深度学习训练查错的指导，具体来说：</p><ul><li>当出错时候首先检查模型在训练集合上的loss<ul><li>如果训练集上的loss比较大，那么：<ul><li>有可能是model bias，即模型的能力太弱，导致模型学不起来，这个时候可以增加模型的复杂程度，即引入更多的可学习的参数。形象的表示：<strong>最优的模型不在我们模型的表示范围内</strong>。大海捞针——海里没有针</li><li>还有可能是我们的Optimization出了问题，导致没有对模型进行Optimization，这个时候就要更改Optimization的方法，使用其他的优化方法或者对当前优化方法进行改进。形象的表示：<strong>最优的模型在我们的模型的表示范围内，但是我们找不到它</strong>。大海捞针——针在海里，我们找不到</li></ul></li><li>如果在训练集上的loss比较小，那么：<ul><li>判断模型在测试集上的表现<ul><li>如果模型在测试集上的loss比较大，那么：<ul><li>可能是Overfitting，模型过度的拟合了训练数据。这个时候方法一是收集更多的数据，而方法二则是对模型进行正则化，即要么限制模型的学习能力，要么给模型添加惩罚项</li><li>还有可能是Mismatch，即模型学习到的训练集的分布和测试集的分布不同，针对Mismatch的方法在后面会专门讲解</li></ul></li><li>如果模型在测试集上的loss比较小，Happy Ending<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li></ul></li></ul></li></ul></li></ul><p>以上就是上节课讲的内容的一个复习。</p><p>然而在上节课，我们其实有两个地方没有展开讲，第一个就是Optimization失败的时候，我们没有讲如何提升Optimization的效果，即没有讲怎么样对Optimization的方法进行提高。第二个就是对于Mismatch，我们也没有讲处理方法。</p><p>其中，Mismatch将在后面讲解，本节课将讲解Optimization失败的几种原因及其处理方法。</p><h2 id="一、原因一：Critical-Point"><a href="#一、原因一：Critical-Point" class="headerlink" title="一、原因一：Critical Point"></a>一、原因一：Critical Point</h2><p>网络更新失败的第一种原因就是由于Critical Point。下面就将详细讲解Critical Point，然后在其基础上讲解处理Critical Pioint的办法以及和Critical Point有关的Batch Size的问题</p><h3 id="1-What-happened-when-Optimization-failed？"><a href="#1-What-happened-when-Optimization-failed？" class="headerlink" title="1. What happened when Optimization failed？"></a>1. What happened when Optimization failed？</h3><p>我们首先讲解Optimization失败的时候到底发生了什么，然后我们在从中总结规律，为后续的处理方法做好准备。</p><h4 id="A-Differential-of-parameters-is-0"><a href="#A-Differential-of-parameters-is-0" class="headerlink" title="A. Differential of parameters is 0"></a>A. Differential of parameters is 0</h4><p>我们说Optimization失败，通常是在训练阶段不管我们怎样的训练，模型在训练集上的表现一直都很差。</p><p>而就真实的情况而言，其实在训练集上的loss很大有两种表现：</p><ul><li>第一种是模型有在学习，但是最终学了一会学不动了，而且此时表现比较差</li><li>第二种是模型没有在学习</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118053204876.png" alt="Optimization失败的两种情况" style="zoom:67%;"></p><p>而根据我们前面讲过的Gradient Descent这个优化算法，我们只要能够根据loss算出来Gradient那么就一定够提升模型的表现。而想上面这两种情况，模型的loss最终收敛（稳定）到了一个值附近。这也就意味着我们的梯度中的大部分都成了0。</p><p>为什么我们认为大部分都成了0呢？其实我们反过来想，如果梯度全都不是0，那么我们的模型的表现一定还有所提升。如果全部都是0，那么我们模型的表现应该是一条直线。只有大部分是0而少部分不是0，我们的模型得到的梯度只能在几个方向上指导模型去梯度下降、探索Loss Surface。而在这几个方向上的loss其实都差不多，因此最终表现在图上就是模型在震荡。</p><p>因此，导致上面模型最终收敛的原因就是loss对模型中参数的微分是0（后面我们说的是0往往指近似为0）</p><h4 id="B-What-may-cause-this？"><a href="#B-What-may-cause-this？" class="headerlink" title="B. What may cause this？"></a>B. What may cause this？</h4><p>由于微分是根据loss对参数求微分得到，因此我们在loss space中可视化出来了话，有两种可能导致梯度为0：</p><ul><li>陷入了Local Minima</li><li>陷入了Saddle Point</li></ul><p>而我们统称Local Minima和Saddle Point为Critical Point</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117222822784.png" alt="Local Minia和Saddle Point" style="zoom: 67%;"></p><h4 id="C-Local-minima-or-saddle-point"><a href="#C-Local-minima-or-saddle-point" class="headerlink" title="C. Local minima or saddle point?"></a>C. Local minima or saddle point?</h4><p>那么我们在发现模型陷入到了Critical Point的时候，我们其实很有必要去知道模型到底是陷入了Local Minima还是Saddle Point。因为两者最重要的一个差别就是Local Minima意味着周围没有新的路了，而Saddle Point意味着其实模型的loss还可以继续降低</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117223551192.png" alt="我们需要鉴定到底是Saddle Point还是Local Minima" style="zoom: 67%;"></p><p>而对Local Minima和Saddle Point的判断其实需要一些数学的知识</p><p>泰勒定理告诉我们其实可以用一个多项式来在某一个区间内以一定的精度来逼近某个函数。而在全部范围（定义域）内逼近这个函数则需要无穷多项。</p><p>因此，对于损失函数$L=L(\theta)$，我们可以用一个无穷多项的多项式函数来进行逼近。但是我们其实不需要损失函数在全部范围内的值，因为我们现在的目的在于判断模型当前收敛到的参数的这个点到底是Local Minima 还是 Saddle Point。而要判断一个点是不是Saddle Point，我们其实只需要看这个点周围的值是否都比这个值大即可</p><p>因此我们其实只需要损失函数在$\theta’$这个值附近的值即可。因此对于泰勒定理来说，我们只需要在$\theta’$的一个邻域内，在一定程度上逼近$L$即可。</p><p>因此我们在$\theta’$这个地方展开第二项即可，即</p><script type="math/tex; mode=display">L(\theta)\approx L(\theta')+(\theta-\theta')g + \frac1 2 (\theta-\theta')^TH(\theta-\theta')</script><p>其中，$g$是$L$对$\theta$的在$\theta’$处的梯度，每个分量都是$L$对$\theta$中某个分量的偏导，即</p><script type="math/tex; mode=display">g=\nabla L(\theta'),\qquad g_i=\frac{\partial L(\theta')}{\partial \theta_i}</script><p>而H则是Hessian Matrix，可以理解为二阶导，H中的每个元素都是混合偏导数，即</p><script type="math/tex; mode=display">H_{ij}=\frac{\partial^2}{\partial \theta_i\partial \theta_j}L(\theta')</script><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117225659037.png" alt="用Taylor展开爱逼近Loss Function在Critical Point附近的值" style="zoom:50%;"></p><p>而我们现在在Critical Point的话，就意味着$L$对$\theta$的梯度为0，即上面的式子中的第二项没了，那么我们的二阶泰勒展开式就只有两项了</p><script type="math/tex; mode=display">L(\theta)\approx L(\theta') + \frac1 2 (\theta-\theta')^TH(\theta-\theta')</script><p>那么这个时候，我们就可以用$H$来估计$L(\theta’)$周围的值，有了这些值之后，我们就可以判断某个点周围的地貌，从而判断某个点周围是不是Saddle Point了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117230117690.png" alt="image-20220117230117690" style="zoom:50%;"></p><p>当然，对这个点周围的值进行穷举来获得Critical Point周围的地貌所需要的计算量太大了，因此不现实。我们下面从数学上来用$H$判断Critical Point是Saddle Point还是Local Minima</p><p>首先为了符号记录的方便，我们记</p><script type="math/tex; mode=display">v=v(\theta)=\theta-\theta'</script><p>则有</p><script type="math/tex; mode=display">L(\theta)\approx L(\theta') + \frac 1 2v^THv</script><p>那么如果对于所有的$v$，均有</p><script type="math/tex; mode=display">v^THv > 0</script><p>那就意味着</p><script type="math/tex; mode=display">\forall \theta \in \mathring U(\theta'), \qquad L(\theta) > L(\theta')</script><p>那么此时，$\theta’$就是Local Minima</p><p>反之，若</p><script type="math/tex; mode=display">\forall \theta \in \mathring U(\theta'), \qquad v^THv < =</script><p>则$\theta’$为Local Maxima</p><p>而如果有时候$v^THv&lt;0$而有时候$v^THv&gt;0$，这就意味着这个点是Saddle Point。</p><p>而要实现全部大于0或者全部小于0，我们只需要$L$对$\theta$的Hessian Matrix是正定或者负定或者不定的。如果是正定的话，那么所有的特征值全都是正的，负定的话全部都是负的，不定的话则有正也有负。</p><p>对应的我们只需要计算Hessian Matrix矩阵的Eigen Values即可。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117233219302.png" alt="利用Hessian来帮助我们判断" style="zoom:50%;"></p><p>​    </p><h4 id="D-Example"><a href="#D-Example" class="headerlink" title="D. Example"></a>D. Example</h4><p>下面我们真实的给出来一个Loss Function的曲面，然后来判断这个Surface上的Loss的情况。不过为了能够把Loss Surface绘制出来，我们的网络必须要简单，最多只能有两个参数。我们选下面这样的网络</p><p>训练集只有一个example，输入是一个数字，label也是一个数字，激活函数是$y=x$线性函数</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118101628489.png" alt="史上最废的网络"></p><p>那么，由于我们的Loss Function是$L=L(\theta)$中$\theta$只有两个参数（我们连Bias都没有加），因此我们就可以绘制出来Loss Surface</p><p>在此基础上我们找出来其中梯度为0的点，最后所有Critical Point和Error Surface的图如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118102815053.png" alt="Error Surface以及对于的Critical Point"></p><p>接下来，为了搞清楚这些Critical Point是Local Minia 还是 Saddle Point，我们需要求一下Hessian Matrix。因为这里我们的Loss Function我们其实是可以写出来的，即</p><script type="math/tex; mode=display">L(\theta)=L(w_1,w_2)=(\hat y-w_1w_2x)^2</script><p>而上式中的example是$(x,\hat y)$，而由于我们的example只有一个$(1,1)$，因此，Loss Function为</p><script type="math/tex; mode=display">L(\theta) = L(w_1,w_2) = (1-w_1w_2)^2</script><p>那么我们写下来$L(\theta)$对$w_1$和$w_2$写出来他们的梯度</p><script type="math/tex; mode=display">\begin{align}\frac {\partial L}{\partial w_1} &= 2(1-w_1w_2)(-w_2)\\\frac {\partial L}{\partial w_2} &= 2(1-w_1w_2)(-w_1)\\\end{align}</script><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118104737107.png" alt="算到的梯度" style="zoom:33%;"></p><p>然后我们再算出来二阶导数，就可以得到Hessian Matrix</p><script type="math/tex; mode=display">\begin{matrix}\frac{\partial^2L}{\partial w_1^2}  = 2(-w_2)(-w_2) & \frac{\partial ^2L}{\partial w_1w_2} = -2+4w_1w_2 \\\frac{\partial ^2L}{\partial w_2w_1} = -2+4w_1w_2 &\frac{\partial^2L}{\partial w_1^2}  = 2(-w_1)(-w_1) \end{matrix}</script><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118110632053.png" alt="Hessian Matrix"></p><p>然后我们把$(w_1,w_2)$的值带进去，就可以计算得到他的Hessian Matrix。然后在Hessian Matrix的基础上，计算Eigen Value</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118111011046.png" alt="image-20220118111011046"></p><p>那么由于特征值有正有负，因此$(0,0)$这个点就是一个Saddle Point。同理，我们计算完剩下的点，就可以得到这些Critical Point的类别了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118102228933.png" alt="上面网络的Error Surface" style="zoom:50%;"></p><p>其实Hessian Matrix其实不仅能够帮助我们去判断一个Critical Point是Saddle Point还是Local Minia，他还可以帮助我们去进一步指导网络的下降。</p><p>我们如果把$v$换成$u$，那么在损失函数中第二项的正负其实就由Eigen Value决定的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118112402386.png" alt="image-20220118112402386" style="zoom: 33%;"></p><p>所有这个时候，我们让参数沿着负特征值对应的特征向量$u$的方向前进即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118112622033.png" alt="image-20220118112622033" style="zoom:50%;"></p><p>所以利用Hessian，我们就可以逃离中间的原点。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118113721043.png" alt="利用Hessian逃离Saddle Point" style="zoom:50%;"></p><p>但是其实在现实中很少会用Hessian来帮助我们逃离Saddle Point，因为计算Hessian的话，要算二次微分，并且要算$len(\theta)^2$个二阶导数，而考虑到在真实的情景中，$\theta$中包含的参数的数列往往有几万个，计算量实在是太大了，即便是只算一次，开销都是无法接受的。</p><p>这还不包括计算特征向量的开销等等</p><p>上面讲的这些内容呢，其实是为了让我们明白，卡在Saddle Point的时候还是有办法的，只不过用的可能不是我们这里介绍的方法+</p><h4 id="E-Local-Minima-v-s-Saddle-Point-which-one-is-more"><a href="#E-Local-Minima-v-s-Saddle-Point-which-one-is-more" class="headerlink" title="E. Local Minima v.s. Saddle Point: which one is more?"></a>E. Local Minima v.s. Saddle Point: which one is more?</h4><p>上面我们介绍了Local Minima和Saddle Point，然后介绍了如何利用Hessian来逃离Saddle Point，其数学原理就是Taylor Series Approximation。</p><p>所以对于我们来说，Saddle Point不可怕，真正可怕的Local Minima。那么我们不禁要问，  在真实的情况中，我们的网络最终是在Local Minia还是Saddle Point？或者说有多少的比例，我们最后的网络是应为Local Minima导致无法进行训练的？</p><p>所以接下来，我们就要讲解这两个问题</p><p>在讲之前，我们先讲一个三体里的故事</p><blockquote><p><strong>君士坦丁堡的故事</strong></p><p>在公元1543年的时候，土耳其人进攻君士坦丁堡。那个时候君士坦丁堡本来是东罗马帝国的城堡，可是被土耳其奥斯曼帝国进攻，最后君士坦丁堡沦陷，东罗马帝国灭网</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118201706225.png" alt="君士坦丁堡沦陷"></p><p>这个故事就是，在土耳其人进攻的时候，君士坦丁堡的皇帝，君士坦丁一世不知道该怎么样抵挡土耳其人的进攻。</p><p>这个时候，就有人向君士坦丁一世推荐了魔法师地奥伦纳，地奥伦纳说自己有万军从中取敌军将领首级的能力。那么大家肯定就不相信，大家纷纷都要求地奥伦纳展示一下自己的能力。</p><p>于是地奥伦纳就拿出了一个圣杯。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118203843439.png" alt="地奥伦纳拿到的圣杯" style="zoom:33%;"></p><p>大家看到这个圣杯纷纷都大惊失色，因为这个圣杯本来是存放在圣索菲亚大教堂的地下室里的，而且是放在一个密封的石棺里的，没有人能够打开他。</p><p>地奥伦纳就说自己并不止是把圣杯拿出来了，还放了一串新鲜的葡萄进去。于是君士坦丁一世就命人打开了石棺，发现石棺里真的有一串葡萄。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118204017912.png" alt="圣索菲亚大教堂地下室的石棺" style="zoom:33%;"></p><p>那么为什么地奥伦纳真的可以拿到石棺中的圣杯、放葡萄进去呢？</p><p>其实是因为，在我们看来封闭的石棺只是在三维上是封闭的，而在高维空间，例如四位空间中，它不一定是封闭的。而地奥伦纳就可以进出四维空间。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118204745587.png" alt="高维空间里不一定封闭的石棺"></p></blockquote><p>上面这个故事的意义其实在于，三维空间没有路可以走的地方在高维空间中可能会有路能够进去。那么Error Surface会不会也是这样？</p><p>这样的猜想是合理的，因为我们很轻松就可以给出一个例子。在一维中我们看来的Local Minima在二维中可能只是一个Saddle Point，在一维中我们没有路径能够达到Global Minia但是在二维中我们却依然有路。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118205011681.png" alt="一维中的Local Minima可能只是二维中的Saddle Point" style="zoom:50%;"></p><p>所以，我们依次类推，而一个崎岖的二维平面上的Local Minia有没有可能是高维平面上的Saddle Point？</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118205635810.png" alt="崎岖的Loss Surface"></p><p>那么我们在真实的网络训练中，参数是百万千万的，那么我们其实就会想，这么多的参数，会不会真真的Local Minima会比较稀少？</p><p>那么我们自己做实验的结果其实也支持这个假说。我们自己训练一个网络，然后等网络收敛。这个时候我们来看一下此时网络的Hessian Matrix，看看到底是不是Local Minia。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118211115881.png" alt="真实的实验"></p><p>所以说，上面的图片中，每一个点就表示网络训练一次，直到网络停在了Critical Point</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118211801282.png" alt="每个点都表示训练一次"></p><p>上面这个图的纵轴表示最终收敛的时候的Training Loss而横轴表示Minimum Ratio。Minia Ratio的定义如下图，我们计算Hessian Matrix的所有特征值，然后用其中正特征值的数量除以所有特征值的数量。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118211942902.png" alt="Minima Ratio" style="zoom: 50%;"></p><p>因此，横轴实际上反应了Critical Point接近Local Minima的程度，越向右越接近Local Minima。可是在实践中，从来没有见过所有的特征值都是正的的情况，最多只有接近0.6，即60%的Eigen Value是正的。</p><p>因此从经验上来看，我们训练不下去了往往不是因为到了Local Minia，而是卡在了Saddle Point</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118212328772.png" alt="Empirical Study" style="zoom:50%;"></p><h3 id="2-Batch"><a href="#2-Batch" class="headerlink" title="2. Batch"></a>2. Batch</h3><p>我们在前面第二节课：Introduction to ML的时候讲解了ML的Framework，其实就三步：</p><ol><li>根据我们对任务的认识，设计一个含参的函数</li><li>根据我们对任务的认识，设计一个用于衡量参数表现好坏的损失函数</li><li>接下来通过方法（对于神经网络而言就是Gradient Descent）对函数的参数进行优化，以实现在损失函数上表现良好的参数</li></ol><p>其中，对于参数进行优化的时候，我们说了我们在真真通过Gradient Descent的时候，我们不是计算了所有的example的loss再求Gradient，而是只看一部分example，然后求出来其梯度，然后进行计算，求出Gradient。</p><p>所以我们其实是把数据分成不同个Batch，然后每个Batch进行计算的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118213506444.png" alt="分Batch进行计算" style="zoom:50%;"></p><p>我们下面就将对Batch进行一下讨论，然后给出通过Batch来减少由于Gradient下降的方式导致Optimization失败的解决方法</p><h4 id="A-Small-Batch-v-s-Large-Batch"><a href="#A-Small-Batch-v-s-Large-Batch" class="headerlink" title="A. Small Batch v.s. Large Batch"></a>A. Small Batch v.s. Large Batch</h4><p>我们现在假设我们的训练集只有20个example（N=20）。然后我们分别通过大Batch和小Batch两种方式计算一个epoch。</p><ul><li>对于大Batch，我们取Batch Size为20，即Full Batch</li><li>对于小Batch，我们取Batch Size为1</li></ul><p>然后我们对这两种Batch都计算一遍整个Training Set，得到的结果如下</p><p>注意，由于我们是每个Batch之后都会计算一个Gradient然后下降，所以Batch Size为1的时候为了看完整个Training Set，其实已经梯度下降了20次了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118214301307.png" alt="Large Batch v.s. Small Batch"></p><p>那么我们其实可以看到，对于Large Batch而言，其非常的稳定，而对于Small Batch而言，他的Gradient非常不稳定，因此我们可以看到右边的Small Batch的Gradient指导下的参数的更新路径，非常的曲折。</p><p>我们如果从Gradient Update的角度来进行比喻，Large Batch Size就是冷却时间比较长，但是威力比较大的技能，而Small Batch Size就是冷却时间比较短，但是威力比较小的技能。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118214857035.png" alt="对Large/Small Batch的形象的比喻" style="zoom:50%;"></p><h4 id="B-Is-larger-really-slower"><a href="#B-Is-larger-really-slower" class="headerlink" title="B. Is larger really slower?"></a>B. Is larger really slower?</h4><p>我们上面很自然就会想到，如果是Large Batch Size的话，每次我们因为要计算多个example的值，所以速度会比Smaller的Batch计算的要慢。</p><p>那其实，我们如果考虑了GPU的平行计算的话并不一定是越大的Batch计算就越慢。使用英伟达的Tesla V100 GPU对一个Batch进行一个Update需要的时间的实验结果如下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118220651050.png" alt="Tesla V100上的不同Batch Size计算需要的时间"></p><p>那么我们其实可以看到，在Batch小于1000的时候，其实计算一个Batch花费的时间并没有差很多。这其实就是GPU并行计算带来的提升。</p><p>最后，GPU的能力当然不是无穷的，因此，最终当Batch Size大于一定程度之后，计算一个Batch所需要的事件就会很长了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118221146150.png" alt="GPU也是有Limitation的"></p><p>我们如果从看完整个epoch来说的话，那情况其实就反过来了，小的GPU需要更长的时间跑完一个epoch而大的GPU则需要一个Batch即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118221524339.png" alt="Large Batch计算完一个Epoch更快" style="zoom:50%;"></p><p>因此我们在综合考虑的情况下，会发现其实我们前面说的两者的区别并不成立。一般来说，总的计算时间会随着Batch的变大而先升高、后降低</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118221924489.png" alt="大的Batch不一定比小的Batch慢" style="zoom:50%;"></p><h4 id="C-Is-the-larger-the-better"><a href="#C-Is-the-larger-the-better" class="headerlink" title="C. Is the larger the better?"></a>C. Is the larger the better?</h4><p>我们上面说了，对于总时间来说，其实是越大的Batch计算完一个epoch的时间就越短。那么我们考虑到大的Batch的梯度稳定，我们就会想是不是越大的Batch就越好呢？</p><p>其实事情也不是这样的。我们下面做一个实验，针对相同的任务，以相同的网络不同的Batch Size来训练，看看最终收敛到的Accuracy是多少。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118222504244.png" alt="不同Batch Size的最终结果的实验"></p><p>那么我们其实会发现，大的Batch反而导致最终的精度有所下降。这个就比较神奇了，因为我们用的是同一种Network，这就意味着其实大的Batch和小的Batch训练的网络应该能够表示的Function Set的范围是一样的。可是最终训练得到的结果就是两者不同。</p><p>那么为什么小的Batch会要好一点呢？其实一种原因就是如果用Full Batch，那么遇到Critical Point那就真完蛋了。但是对于Small Batch而言，因为每个Batch计算都会由于example的不完全而引入noise，而这个noise可以冲破这个Critical Point，帮助模型进行更多的探索。所以小的Batch会更好一点。</p><p>不从引入noise的角度来理解的话，另外一种理解就是我们在计算梯度的时候，其实梯度是依赖于输入的，因此输入的不同，梯度就不同，对应的损失函数反向传播到这里的值就不同，因此我们对于其中一个是Critical Point，但是对其他输入的损失函数来说不一定是Critical Point。那么只要这个Critical Point能够更新就行了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118231935524.png" alt="第二种理解"></p><h4 id="D-Smaller-Batch-Better-Generation"><a href="#D-Smaller-Batch-Better-Generation" class="headerlink" title="D. Smaller Batch, Better Generation"></a>D. Smaller Batch, Better Generation</h4><p>我们上面给出的小的batch的性能要更好只是训练阶段的效果，那么我们就会想，看看大的batch和小的batch训练得到的模型在测试集上的表示如何？换而言之，就是大的Batch和小的Batch谁的泛化能力更强。</p><p>因此，在进行这个实验的时候就需要排除其他的因素的影响，因此我们需要通过各种方法，例如调参，让大的batch训练得到的网络在测试阶段的性能和小的batch得到的性能近似的时候，然后再在测试数据上测试两种的泛化能力。</p><p>那么实验一共对五种网络在几个不同的数据集上进行了测试，发现哪怕是测试集上的表现差不多一样了，在测试集上的表现依旧是小的Batch得到的模型的泛化能力比较强</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118233234945.png" alt="小Batch训练的模型泛化能力更强" style="zoom:50%;"></p><p>那么这个现象就非常有意思了，而在上面提出这个现象的文章里的解释是Sharp Minima。</p><p>具体来说，如果想让小Batch训练的模型卡在Local Minima上，那么就需要Loss Function在这个点周围的Loss都比较小，这样的才能够Cover掉noise带来的随机的波动。即小的Batch Size训练的网络最后会卡在flat的Local Minia；而Large Batch Size训练出来的网络就没有这样的性质了，容易卡在Sharp的Local Minima。</p><p>配合图像来说，我们的Loss Surface上可能有不止一个Local Minima能够达到差不多的Training Loss。如下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118233915972.png" alt="不同的Local Minima能达到差不多的性能"></p><p>然而，由于Testing的数据和Training的distribution不同或者说我们sample的时候会存在偏差，所以导致了测试数据的Loss Surface会存在一点点的偏差。</p><p>那么对于左边的Minima，偏差了一点他的Testing Loss差的不多。而右边的Minima则是偏差了一点可能Testing Loss就会差很多。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118234143048.png" alt="两种不同的Minima的好坏不同"></p><p>而就像前面很多，Flat的Local Minia其实更容易让Small Batch训练得到的网络陷进入。</p><h4 id="E-Summary-of-Batch-Size"><a href="#E-Summary-of-Batch-Size" class="headerlink" title="E. Summary of Batch Size"></a>E. Summary of Batch Size</h4><p>最后我们对不同的大小的Batch Size训练的特点进行一个总结，结果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118235020935.png" alt="Small Batch v.s. Large Batch" style="zoom:50%;"></p><p>最后是一些进一步讨论Batch Size的文章</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118235326973.png" alt="进一步讨论的文章"></p><h3 id="3-Momentum"><a href="#3-Momentum" class="headerlink" title="3. Momentum"></a>3. Momentum</h3><p>我们在前面讲过用Hessian Matrix计算Eigen Vector的方式来对抗Saddle Point，但是这个方法其实是没有人会去用的，因为开销太大了，我们通常的处理就是使用动量来处理。</p><p>下面我们就将讲讲Momentum这个技术。</p><h4 id="A-Idea-of-Momentum"><a href="#A-Idea-of-Momentum" class="headerlink" title="A. Idea of Momentum"></a>A. Idea of Momentum</h4><p>动量的这个技术的想法其实是来自于物理。我们想象参数在Loss Surface上的Update其实就可以类比于小球从山顶上滚到山脚下。而对于前面的朴素的Gradient Descent来说，是以跳跃的形式下降的。那么Gradient Descent在Saddle Point就会停下来</p><p>可是现实世界中的球并不会在Saddle Point停下来，这是因为现实世界中的球其实是有动量的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119000312188.png" alt="动量帮助真实世界中的球下降" style="zoom: 50%;"></p><p>甚至有可能我们的Momentum足够的大，那么这个球就会冲破Local Minima，到更小的地方去。</p><p>所以类似的，我们就想在真实的Gradient Descent中实现一下Momentum</p><p>我们先看看Vanilla的Gradient Descent是什么样的。正如下图，Vanilla的Gradient Descent是每算一次Gradient就向反方向Update一次。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119000938835.png" alt="Vanilla Gradient Descent" style="zoom:50%;"></p><p>现在我们考虑Momentum的话，Momentum其实可以理解为物体对上一个状态的记忆，因此类似的，我们在进行当前的更新的时候，可以参考一下上一次的Gradient。具体而言，就是我们在这一次的梯度反方向的基础上，稍微偏向一点上一次的梯度方向。在实践上就是上一次的Gradient减去这一次的Gradient。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119001300828.png" alt="参考之前的Gradient"></p><p>所以此时，最终整个的更新如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119001546090.png" alt="带有Momentum的更新" style="zoom: 50%;"></p><h3 id="4-Summary"><a href="#4-Summary" class="headerlink" title="4. Summary"></a>4. Summary</h3><p>最后我们对上面的内容进行一下总结</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120012124802.png" alt="Summary" style="zoom:50%;"></p><h2 id="二、原因二：Rugged-Error-Surface"><a href="#二、原因二：Rugged-Error-Surface" class="headerlink" title="二、原因二：Rugged Error Surface"></a>二、原因二：Rugged Error Surface</h2><p>前面我们讲了Critical Point可能是导致Optimization失败的原因，那其实还有另外一种可能就是由于崎岖的损失曲面造成的。针对由于崎岖的损失曲面造成Optimization（Naive Gradient Descent）失败的问题，我们可以通过不同的梯度下降的策略来解决。因此，我们下面将：</p><ul><li>首先讲解Rugged Loss Surface造成的问题</li><li>然后再讲解处理崎岖的曲面造成的Optimization失败的处理方法，即不同的Optimization</li></ul><h3 id="1-What-happen-when-pptimization-fail？"><a href="#1-What-happen-when-pptimization-fail？" class="headerlink" title="1. What happen when pptimization fail？"></a>1. What happen when pptimization fail？</h3><h4 id="A-It’s-actually-not-critical-points"><a href="#A-It’s-actually-not-critical-points" class="headerlink" title="A. It’s actually not critical points"></a>A. It’s actually not critical points</h4><p>我们前面说当模型在Optimization失败的时候，一种可能的情况是卡在了Critical Point上，这个时候Gradient大部分都是0，因此导致无法训练。</p><p>但是真的是这样吗？我们做一个实验来看看，当网络最后训练不动的时候，我们来看看参数的梯度的平均值</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119003347952.png" alt="一开始人们认为是卡在Critical Point上" style="zoom:50%;"></p><p>可是Gradient的平均数看下来，每个参数的平均Gradient并不是一直都是零，有的时候还会很大，正如图中圈起来的部分</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119003605165.png" alt="image-20220119003605165" style="zoom:50%;"></p><p>这个时候Gradient有翻天覆地的变化，但是体现在Loss的Curve上，却一直保持不变。</p><p>那么这就意味着其实并不是卡在了Local Minima上，一定存在别的原因，这个原因就直接给出来了，就是下面这种，参数一直在山谷间跳跃。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119003947196.png" alt="image-20220119003947196"></p><h3 id="2-Optimizer"><a href="#2-Optimizer" class="headerlink" title="2. Optimizer"></a>2. Optimizer</h3><p>针对Rugged Loss Surface，使用原始的Gradient Descent显然就不行了，我们需要对Gradient进行修改，让他带有策略。<strong>而（不同的/带有策略的）梯度下降算法又称为Optimizer</strong>，</p><p>因此，我们可以通过不同的Optimizer来解决上面的在峡谷中跳跃的问题，下面就将讲讲不同的Optimizer</p><h4 id="A-What’s-the-problem-of-vanilla-Gradient-Descent"><a href="#A-What’s-the-problem-of-vanilla-Gradient-Descent" class="headerlink" title="A. What’s the problem of vanilla Gradient Descent?"></a>A. What’s the problem of vanilla Gradient Descent?</h4><p>我们为了更加直观的理解这个问题，举下面的例子</p><p>这个例子中，我们的Loss Surface是一个凸的椭圆抛物线，叉叉的地方是最小的地方，我们的模型从黑色的地方开始更新</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119004526912.png" alt="Case Study"></p><p>虽然这个Loss Surface非常的简单，可是即便是这样的Loss Surface用Gradient Descent都不一定能够找到最小值</p><p>我们第一次把学习率设为0.01，结果模型就一直在山谷两边跳来跳去</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119005056610.png" alt="Learning Rate过大" style="zoom: 67%;"></p><p>那这个时候有人就会说，是我把学习率设的太大了，我们把学习率设小一点肯定就没问题了。可是事实却是，我们把Learning Rate设小了，还是没有办法学习到全局最优。而且到了后面基本上十万次Update都才只能前进一点点。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119005242974.png" alt="小的Learning Rate也没有用" style="zoom: 67%;"></p><p>我们深究这个问题就会发现，这个其实是由于我们的Learning Rate的锅。</p><p>我们每次把Learning Rate设成一样的参数，导致在梯度小的时候难以前进，而在梯度大的时候有前进的过多，所以我们自然就会想，能不能对Learning Rate进行改进，让他不必每次都是一个常数</p><p>我们自然而然的就会想让Learning Rate在梯度大的地方比较小而在梯度小的地方比较大</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119010647775.png" alt="可以根据梯度调整的Learning Rate" style="zoom:67%;"></p><p>那么为了实现这样的效果，我们就可以再额外的引入一个在真正进行更新时候控制Learning Rate的参数。这个参数是依赖于模型的参数的，此外还依赖于更新的次数，因此我们的记号中会有表示参数和更新次数的符号，即$\sigma_i^t$。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119010848038.png" alt="为Learning Rate引入参数" style="zoom:67%;"></p><h4 id="B-Rooted-Mean-Square（RMS）-Adagrad"><a href="#B-Rooted-Mean-Square（RMS）-Adagrad" class="headerlink" title="B. Rooted Mean Square（RMS）/Adagrad"></a>B. Rooted Mean Square（RMS）/Adagrad</h4><p>Rooted Mean Square表示的是方均根。而RMS在这里的意思其实就是让这个参数$\sigma$是梯度的方均根即可，即</p><script type="math/tex; mode=display">\sigma^t_i=\sqrt {\frac{1}{1+t}\sum_{i=0}^t(g_i^t)^2}</script><p>上面这个式子展开的话，就是下面这样的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119011558380.png" alt="RMS的计算" style="zoom: 33%;"></p><p><strong>RMS被用在了Adagrad这个优化器中</strong></p><p>我们不经会问，为什么RMS可以实现我们上面说的，在梯度大的时候控制前进的step小而在梯度小的时候控制前进的step大？这个其实非常好理解，因为方均根的参数$\sigma$是和梯度的大小成正比的，梯度越大Sigma就越大，除下来就越小，反之亦然</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119214018994.png" alt="RMS可以在小梯度的地方迈大Step" style="zoom:67%;"></p><h4 id="C-RMSprop"><a href="#C-RMSprop" class="headerlink" title="C. RMSprop"></a>C. RMSprop</h4><p>我们上面将了RMS这个方法，然而RMS这个方法其实有一个问题，就是在计算参数$\sigma$的时候是考虑了之前所有的梯度的。假如说现在在某个方向上更新了1000次，前9000次的得到的梯度都很大，但是到了9000次以后的梯度就很小了。可是如果使用RMS的，9001次及以后都不会更新了，因为计算出来的$\sigma$太大了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119221601829.png" alt="同一个方向上的Gradient可能不同" style="zoom:50%;"></p><p>其实造成这个现象的根本原因就在于RMS这个方法是记忆性的，他计算RMS的时候会把所有之前的Gradient拿来用。因此导致了这个问题。所以我们想要进行修改的话其实就让RMS遗忘掉之前的梯度就行了。具体实现遗忘的方法有很多，可以固定只使用前面的几项，也可以给前面的项不同的权重等等。</p><p>RMSprop就是一种实现遗忘的方法。</p><blockquote><p><strong>RMSprop的一些故事</strong></p><p>其实RMSprop这个方法有一点传奇，因为这个方法是找不到论文的。在很多年以前，大概是十年前，2010年左右，Hinton在Coursera上开过一门Deep Learning的课，在这门课上Hinton讲解了RMSprop这个方法，所以大家要cite的话，其实都是cite那个视频的链接。</p></blockquote><p>RMSprop中实现遗忘的方法就是我们自己设置一个记忆率，决定要把之前的梯度记忆多少到当前的梯度里来</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119223005686.png" alt="RMSprop的计算" style="zoom:50%;"></p><p>使用RMSprop的好处之一，就是可以实现上面说的，根据局部的梯度来动态调整。<strong>RMSprop算法就是RMSprop这个优化器实现的</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220119230431379.png" alt="RMSprop可以动态的调整Step的大小" style="zoom:50%;"></p><h4 id="D-Adam：RMSprop-Momentum"><a href="#D-Adam：RMSprop-Momentum" class="headerlink" title="D. Adam：RMSprop + Momentum"></a>D. Adam：RMSprop + Momentum</h4><p>今天其实最常用的Optimizer并不是RMSprop，而是Adam。Adam优化器其实就是RMSprop+Momentum。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120001959299.png" alt="Adam的伪算法" style="zoom: 67%;"></p><h3 id="3-Learning-Rate-Scheduling"><a href="#3-Learning-Rate-Scheduling" class="headerlink" title="3. Learning Rate Scheduling"></a>3. Learning Rate Scheduling</h3><p>我们上面介绍了崎岖的曲面导致原始的梯度下降其实是不行的，因此我们又讲解了其他对梯度下降进行修改了的算法，即其他的Optimizer。</p><p>但是其实上面的Optimizer本身是有问题的，我们下面会首先通过一个案例来进行讲解，然后再讲解处理这个问题的方法，即Learning Rate Schedule</p><h4 id="A-What’s-the-problem-of-Optimizers"><a href="#A-What’s-the-problem-of-Optimizers" class="headerlink" title="A. What’s the problem of Optimizers?"></a>A. What’s the problem of Optimizers?</h4><p>我们现在随便从上面的三个优化器取出来一个，因为这个问题对三个Optimizer是共性的，和遗忘、动量都无关，因此我们为了简单起见，就以Adagrad进行讲解</p><p>还是上面的例子，我们这次试验一下Adagrad的表现</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120004537809.png" alt="先前过大的学习率和过小的学习率的实验"></p><p>我们进行时候之后发现，在开始阶段确实Adagrad避免了Vanilla的Gradient Descent的结果，可是到了后面，就会出现<strong>暴走</strong>。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120004732601.png" alt="自适应学习率会有暴走"></p><p>那么这个暴走发生的原因其实是，我们在Optimizer帮助模型完成了竖着走之后，开始横着走了一段时间，在这段时间里竖向的梯度都很小，因此在过了一段时间之后，当更新的次数一多（t一大），那么就导致横向的梯度就很小，所以sigma就会很小。那么就会在这些方向上除完以后，梯度直接起飞。</p><p>不过由于梯度下降的原因，虽然横向的梯度起飞导致Loss爆炸了，我们等一会之后其实模型还是会回到正轨，继续向左走，然后再走了一段时间之后继续暴走（同样的原因）。然后如此往复，直到Local Minima（当然如果假设参数的取值只有这些的话，那其实就是Global Minima）。</p><p>所以我们其实会发现，使用这些自适应的Optimizer的一个问题就是，我们如果保持在某些方向上的梯度一直都很小，那么在累积一段时间之后就会暴走。</p><p>而暴走虽然进行了更多的exploration，但是却浪费了很多的Update。这就是自适应的Optimizer的问题。</p><h4 id="B-Learning-Rate-Decay"><a href="#B-Learning-Rate-Decay" class="headerlink" title="B. Learning Rate Decay"></a>B. Learning Rate Decay</h4><p>我们发现，自适应的Optimizer造成的问题其实是由于$\sigma$在某些情况下会过小，而这个时候$\eta$保持不变，所以除下来的值就很大了。</p><p>那么为此，我们想要减轻这个问题，就让$\sigma$变小的同时$\eta$也变小，那么就实现了减小震荡的范围</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120005926061.png" alt="Learning Rate Decay" style="zoom:50%;"></p><p>因为我们这个Learning Rate Scheduling的方式就是让学习率不断减小，因此这种Learning Rate Scheduling的方法其实又称为Learning Rate Decay。</p><p>Learning Rate Decay的效果如下，可以看得出来非常不错</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120010136747.png" alt="Learning Rate Decay的效果" style="zoom:50%;"></p><h4 id="C-Warm-Up"><a href="#C-Warm-Up" class="headerlink" title="C. Warm Up"></a>C. Warm Up</h4><p>我们说Learning Rate Decay，就是说要求学习率随着时间下降。而Warm Up则是说要首先从0开始增加学习率然后再减小学习率</p><p>这个想法一开始听着可能匪夷所思，但其实也是合理的，因为在初始阶段，一开始求得的梯度是有非常大的偏差的。因为一开始随机初始化的参数表现肯定烂，然而我们又是一个Batch一个Batch的进行训练的，所以一开始计算的时候，模型本身Loss就大，大了还不算什么，我们的Batch又会引入偏差，所以就导致一开始的梯度会有问题。</p><p>而在进行了一段时间的学习之后，$\sigma$所表达的过往的梯度其实以及比较平均了，因此这种Variance就会被Cover掉，所以后面给大的权重。而一开始的阶段给小的权重其实就是为了让模型先在Loss Surface上进行一下探索，在探索的比较准确之后再开始迈大步</p><p>不过上面的这个说法只是一种可能的解释，目前对Warm Up还并没有一个统一的、公认的解释。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120010406958.png" alt="Warm Up" style="zoom:50%;"></p><p>而类似于Warm Up这样的Learning Rate Scheduling的方法其实并不是最近才出现的，在远古时代就已经出现了</p><p>例如何凯明2015年的ResNet就已经Reference到了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120011142082.png" alt="25年就提到了 Warm Up了" style="zoom:50%;"></p><p>类似的，其实在Transformer里面也用了Warm Up，只不过是以数学形式表达的形式，这个函数画出来就是Warm Up，先升高后减小</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120011333984.png" alt="Transformer中也用了Warm Up" style="zoom:50%;"></p><p>关于Warm Up的更多内容，参考RAdam</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120011835129.png" alt="RAdam" style="zoom:50%;"></p><h4 id="4-Summary-of-Optimizer"><a href="#4-Summary-of-Optimizer" class="headerlink" title="4. Summary of Optimizer"></a>4. Summary of Optimizer</h4><p>最后我们对Optimizer进行一下总结，我们对原始的梯度下降从两个不同的角度对他进行了提升：方向和幅度</p><p>然后针对幅度可能导致的新的问题，我们又讲解了处理这个问题的Optimizer Warm Up</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120011931140.png" alt="Summary of Optimizer" style="zoom:50%;"></p><p>最后就是更多关于Optimizer的内容</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120012437250.png" alt="More about Optimizer" style="zoom:50%;"></p><h2 id="三、Batch-Normalization"><a href="#三、Batch-Normalization" class="headerlink" title="三、Batch Normalization"></a>三、Batch Normalization</h2><p>上面我们说到，当Loss Surface比较崎岖的时候其实就会非常难Train。为此，我们会利用不同的Optimizer和Learning Rate Scheduling来处理这个问题</p><p>然而，针对崎岖的Loss Surface带来的问题，另外一种处理思路就是，我们其实没有必要为了陡峭的山峰来设计让模型能够来回绕路的算法，我们能不能用神罗天征直接把山炸平</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120084218880.png" alt="神罗天征把崎岖的Loss Surface炸平" style="zoom: 67%;"></p><p>答案当然是可以的，通过Batch Normalization就可以实现这个效果</p><h3 id="1-Rethinking-rugged-loss-surface"><a href="#1-Rethinking-rugged-loss-surface" class="headerlink" title="1. Rethinking rugged loss surface"></a>1. Rethinking rugged loss surface</h3><p>我们在上面讲Optimizer的时候说过，Vanilla Gradient Descent其实Optimization的能力是有限的，即便是一些简单的Error Surface都不一定能够Train好</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120085350701.png" alt="简单的碗型的Loss Surface都学不好" style="zoom:50%;"></p><p>而原始的Gradient Descent在开始变横向移动之后就很难走动了。针对这个问题，我们上面是对Gradient Descent的方法进行了修改。导致这个问题的根本原因是在Loss Surface上，一个方向梯度大，一个方向梯度小。</p><p>那么我们就不禁要问问，为什么会导致上面这个问题？</p><p>我们从模型入手，产生上面这个Error Surface的模型其实非常简单，就是下面这个模型</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120085836885.png" alt="产生上面的Loss Surface的模型" style="zoom:50%;"></p><p>而梯度则衡量的是输入的变化对输出的影响，因此为了看看梯度，我们给Loss Surface的两个变量$w_1$和$w_2$进行一下适当的改变</p><p>我们现在给$w_1$增加一个$\Delta w_1$，那么$\Delta w_1$对$L$的影响是首先对$y$产生一个影响$\Delta y$，然后$\Delta y$又对$e$产生一个影响$\Delta e$，最后$\Delta e$再对$L$产生影响$\Delta L$。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120090109987.png" alt="变化w1对L产生影响的过程" style="zoom:50%;"></p><p>那么在什么时候，$w_1$的变化对$L$的影响（梯度）会很小呢？那么只有当和$w_1$相乘的$x_1$比较小的时候，这个影响才会很小。</p><p>原因的解释当然可以从数学的角度出发，给出来上游梯度和局部梯度。不过我们不准备那样讲解，因为太抽象了。</p><p>我们想，如果$\Delta w_1$保持不变的话，那么如果$x_1$比较小，乘下来的$y’$就等于</p><script type="math/tex; mode=display">y'=y+\Delta y = b + w_2x_2 + (w_1+\Delta w_1)x_1</script><p>对应的，</p><script type="math/tex; mode=display">\Delta y = \Delta w_1x_1</script><p>因此，在保持$\Delta w_1$不变的情况下，让x$_1$变小就可以对应的，让$\Delta y$变小。同理，这个反应是链式的，因此最终$\Delta L$也会变小</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120090806394.png" alt="让x1变小就可以让L的变化变小" style="zoom: 50%;"></p><p>所以这个时候就会出现Loss Surface中在水平方向梯度很小的情况，也就是Loss Surface非常平滑</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120091503623.png" alt="x1小导致w1方向上Loss Surface平滑" style="zoom: 80%;"></p><p>同理，如果$x_2$很大，那么就会导致在$w_2$方向上的梯度非常陡峭</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120091823130.png" alt="x2很大导致w2方向上梯度很大" style="zoom:80%;"></p><p>因此，我们就会想，如果让一个input里不同的feature具有同样的range的话，我们的Error Surface是不是就会平坦很多？</p><p>换而言之，我们可以通过对输入输出的范围进行修改，即通过归一化的方式让输入不同的feature的范围到一起去，那么我们的Error Surface就会变的非常平坦，而这个操作其实就是Feature Normalization</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120092305189.png" alt="Error Surface变得非常平坦" style="zoom: 67%;"></p><h3 id="2-Feature-Normalization-For-Single-Layer"><a href="#2-Feature-Normalization-For-Single-Layer" class="headerlink" title="2. Feature Normalization (For Single Layer)"></a>2. Feature Normalization (For Single Layer)</h3><p>我们基于前面Rethinking得到的结果，下面就将更加具体的讲讲Feature Normalization的方法</p><p>假设我们现在有下面这么多的训练数据</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120092803446.png" alt="所有的训练数据" style="zoom:50%;"></p><p>上图中每一个橘黄色的圆圈表示一个Feature。那么Feature Normalization的步骤是首先把不同个example的同一个Dimension（假设是第$i$个Dimension）的Feature取出来计算他的mean，得到$m_i$。然后我们计算这些Feature的Standard Deviation得到$\sigma_i$</p><p>然后我们对其中每一个example的这一个Dimension的Feature进行下面的计算，即减去均值除以标准差。最后就得到了Normalize之后的结果</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120093624256.png" alt="Normalize之后的结果"></p><p>这样，当我们在昨晚Feature Normalization之后，对于每一个Feature，他的Mean是0而Variance是1。这样其实就会比较好Train</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120094103094.png" alt="Normalization之后的结果" style="zoom: 80%;"></p><h3 id="3-Normalization-For-Deep-Learning"><a href="#3-Normalization-For-Deep-Learning" class="headerlink" title="3. Normalization For Deep Learning"></a>3. Normalization For Deep Learning</h3><p>我们上面讲解的Feature Normalization其实是针对一层的模型，我们下面来讨论一下在深度网络中Feature Normalization是怎么实现的</p><p>首先对于第一层输入层来说，我们可以直接对每个输入数据$x$的每一个Feature 进行Normalization之后得到$\tilde x$，然后后面接$W^1$，Activation Function得到这一层的输出，然后后面继续想接几层就看我们自己。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120094351483.png" alt="再输入层对原始数据进行Normalization" style="zoom:33%;"></p><p>可是，我们仔细想想的话，就会发现有一个问题，就是对于第二层$W^2$来说，它的输入是a。而我们知道给向量（每个example就是一个向量）乘以矩阵$W^1$其实就是对这个向量进行线性变换。在进行线性变换之后，输出的$z$的值不一定是均值为0，标准差为1的了。然后通过了一个非线性的激活函数，那么就更不知道了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120095229075.png" alt="W的线性变换作用导致第二层非常难Train" style="zoom: 33%;"></p><p>因此在进过$W^1$进行变换之后，进入到下一个层的$W^2$之前，我们还需要再进行一次Feature Normalization</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120101831956.png" alt="在进入下一层前还需要进行一次Feature Normalization"></p><p>而进行Feature Normalization的位置的话在激活函数前还是激活函数后其实都可以，因为在实践上两者是差不多的。我们这里的讲解以对z进行Feature Normalization为例，具体的计算步骤如下</p><p>首先计算出来一个均值向量和方差向量</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120102643131.png" alt="对z进行Feature Normalization"></p><p>然后让每个example和均值向量相减之后除以方差向量（按位计算）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120102853462.png" alt="计算得到第二层的输入"></p><p>然后继续把结果丢给后面的网络即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120110132022.png" alt="继续后面的计算"></p><p>然而，正是因为我们在做Normalization的过程中需要计算均值和方差，因此我们现在网络其实一次是要吃一批example进去的。所以站着输入的角度上来看，现在的Network变大了，成为了一个同时接受N的输入的大网络，这个大网络中不同的输入是共享同一套参数的</p><p>从另外一个角度来理解为什么成了一个大网络的话，我们如果给$\tilde x^1$一个扰动的话，那么对应的$z^1$就会产生一个$\Delta$，进而会影响$\mu$和$\sigma$，最后反过来，影响所有的$\tilde z^i$。所以这一批输入其实是作为一个整体，只要有一个变化其他的全部都会变化，因此我们就会看到，网络变成了一个非常大的网络</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120112745028.png" alt="网络现在一次要吃一个Batch进去"></p><h3 id="4-Batch-Normalization"><a href="#4-Batch-Normalization" class="headerlink" title="4. Batch Normalization"></a>4. Batch Normalization</h3><p>我们需要计算均值和方差，因此我们就需要把example读入到内存中去，然而由于GPU的显存通常是有限的，因此一次只能读取一些example，即读入一个batch。而我们每次也就是对这个batch计算均值和方差。</p><p>所以我们上面讲的Normalization这招其实叫做Batch Normalization</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120112848690.png" alt="Batch Normalization" style="zoom:50%;"></p><p>此外，关于Batch Normalization有一个问题就是我们在实践中其实还是让计算得到的$\tilde z$和一个向量$\gamma$进行哈达玛积，然后再加上另外一个向量$\beta$。</p><p>这样做的原因就是我们进行Batch Normalization的话其实是强制让输入的均值和方差变成了0和1，对应的，这就有可能给网络的训练带来限制，因此我们乘以一个$\gamma$再加上一个$\beta$，让网络自己去学一下这个需要的均值和方差    </p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120113247935.png" alt="让网络自己去学均值和方差" style="zoom:50%;"></p><h3 id="5-Batch-Normalization-for-Testing"><a href="#5-Batch-Normalization-for-Testing" class="headerlink" title="5. Batch Normalization for Testing"></a>5. Batch Normalization for Testing</h3><p>接下来我们就要讲一讲在测试阶段的Batch Normalization了</p><p>Batch Normalization在Testing的时候有一个问题。就是我们上面说的，因为要计算均值，所以我们是需要有一个Batch的数据才能计算。</p><p>可是在测试场景中，我们其实是没有办法一次获得一个Batch的，我们一次获得一个Batch的测试数据只是在测试集的基础上的。当模型真正上线之后数据往往是流式的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120114026177.png" alt="测试时候Batch Normalization是有问题的" style="zoom:50%;"></p><p>因此在实践中是不能用$\mu$和$\sigma$的，得用别的计算方法来近似这里的均值和方差。而在Pytorch中，均值和方差是用Moving Average来估计的。具体来说，就是在训练的时候每一个Batch都会计算自己的平均数和方差。然后利用每一个Batch的平均数和方差都会更新移动平均数。$p$是一个超参数，在Pytorch中取0.1</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120133907237.png" alt="计算移动平均数" style="zoom: 33%;"></p><p>我们在计算了移动平均数之后，在测试阶段，我们就用移动平均数来代替均值和方差</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120142240505.png" alt="移动平均数来代表均值和方差" style="zoom: 33%;"></p><h3 id="6-Effectiveness-of-Batch-Normalization"><a href="#6-Effectiveness-of-Batch-Normalization" class="headerlink" title="6. Effectiveness of Batch Normalization"></a>6. Effectiveness of Batch Normalization</h3><p>最后是关于Batch Normalization的效果。下面是在原论文中的图片</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120143337334.png" alt="原论文中的实验图" style="zoom: 67%;"></p><p>这个图横轴表示更新次数，纵轴表示accuracy。图例中的Inception是Baseline的模型，而BN表示使用了BN，$\times*$表示学习率放大几倍，蓝菱形表示达到Baseline需要的更新的次数。</p><p>那么从图里其实可以看出来，要达到相同的准确度，使用了Batch Normalization之后需要更新的次数远少于没有用Batch Normalization的次数</p><p>然而关于放大了学习率反而导致性能更好，论文里作者说他们也没有搞懂为什么，不过对于DL来说有的时候就是会有这种怪怪的、不知道该怎么解释的现象。但是因为实验的严谨性，因此在论文里还是要呈现原始的数据</p><h3 id="7-Internal-Covariate-Shift"><a href="#7-Internal-Covariate-Shift" class="headerlink" title="7. Internal Covariate Shift?"></a>7. Internal Covariate Shift?</h3><p>Covariate Shift这个概念本来说的是测试集的数据分布和训练集的数据分布不同，这种分布的漂移导致了模型的Generalization能力不行的问题。这个概念其实最早是出现在Machine Learning中的。</p><p>而对于Batch Normalization来说，原作者认为Batch Normalization解决了模型内部的数据漂移问题，即Internal Covariate Shift。</p><p>Internal Covariate Shift指的是下面图中的这个问题，就是一开始针对一批example，$A$对$x$计算得到了一个$a$，并且稍后通过反向传播得到了一个Gradient。同理，$B$对$a$计算得到了一个$b$然后计算得到了一个Gradient。</p><p>可是问题是，现在在利用从第一个$x$上计算得到的Gradient去更新$A$和$B$之后，$A$和$B$都是更加适应了第一批example。因此针对第二批$x$，通过$A’$之后计算得到的是$a’$，因为第一次层变了，因此第二层的输入的分布也变了，可是第二层的Gradient适应的是$a$，即原先的数据分布而非更新后新的分布，因此$B$又会耗费大量的开销去适应由$A$的更新所导致的中间的Feature Map的漂移</p><p>因此在Batch Normalization的论文中，原作者创造了一个词Internal Covariate Shift来描述这个现象</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120151239114.png" alt="Internal Covariate Shift" style="zoom: 33%;"></p><p>而Batch Normalization能够让前面的层变化了之后的输出还是保持类似的分布，因此能够加快训练。这个就是原作者认为的Batch Normalization的作用。</p><p>那Batch Normalization效果好真的是因为这样的吗？答案是否定的，因为后面有一篇文章，设计了各种各样的实验来反驳原作者认为的解释</p><p>首先，这篇文章首先说明了Internal Covariate Shift不一定是Training Neural Network时候的一个问题，然后又说了Batch Normalization比较好不一定是Internal Covariate Shift的问题。</p><p>具体来说，这个文章里研究了不同的step下$a$的分布的变化，发现分布的变化其实并不大。然后又通过巧妙地构造，让$a$的分布变化很大，发现分布差别很大对Training并没有很大的伤害。最后又研究了一下分布差别很大的$a$和$a’$，发现方向都差不多。</p><p>所以这篇文章最后就打脸了原作者的这个观点，指出Internal Covariate Shift不一定是Train网络时候的主要问题，Batch Normalization也不一定是Batch Normalization解决的问题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120152907190.png" alt="打脸了Internal Covariate Shift的文章"></p><p>最后，打脸原文的文章中从数学上和理论上给出了证明，Batch Normalization是通过改变了损失曲边，让其变得更加光滑从而加速了训练。并且从平滑损失曲面来说，作者还设计了其他的几种方法。并且发现这些方法的表现和Batch Normalization差不多，有的表现甚至更好。</p><p>因此在最后作者感叹说Batch Normalization的巨大的效果的的发现是非常偶然（serendipitous）的，就像发现青霉素一样</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120153835534.png" alt="image-20220120153835534" style="zoom: 33%;"></p><h3 id="8-More-About-Batch-Normalization"><a href="#8-More-About-Batch-Normalization" class="headerlink" title="8. More About Batch Normalization"></a>8. More About Batch Normalization</h3><p>最后，关于Normalization的方法其实有一大把，不同的Batch Normalization的方法的效果也不同。具体参考这些文章。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120154428580.png" alt="其他的Normalization方法"></p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Latex基础：Overleaf本地安装</title>
      <link href="/2022/01/16/latex-ji-chu-overleaf-ben-di-an-zhuang/"/>
      <url>/2022/01/16/latex-ji-chu-overleaf-ben-di-an-zhuang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了如何在本地搭建一个Overleaf写作环境</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/screenshot.png" alt="最终效果图"></p><h1 id="Latex基础：Overleaf本地安装"><a href="#Latex基础：Overleaf本地安装" class="headerlink" title="Latex基础：Overleaf本地安装"></a>Latex基础：Overleaf本地安装</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>对于我个人而言，我经常用Markdown拿来快速的记录文档、书写内容，因为对格式要求不高的时候，使用Markdown记录文件非常方便。</p><p>可是当需要进行论文写作的时候，由于需要对三线表、图片的Caption、位置、大小、交叉引用等等因素进行设置，此外还需要进行参考文献的引用等等。此时Markdown就显得力不从心了，我们需要用更加强大的Latex排版系统。关于Latex的介绍，请看我的其他文章，本文不会进行介绍。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117143121996.png" alt="OveaLeaf的控制台"></p><p>然而，现在很多的Latex编辑器没有做到开箱即用，最开始使用Latex的时候经常一编译就是一堆bug，此外由于Latex诞生的很早，不像Python一样有pip、conda这样好用的包管理器，Latex包的本地安装繁琐而且复杂。上面这些因素让本来简单、便捷的Latex变成了需要折腾的工具，让人望而却步。</p><p>直到后来，遇到了Overleaf。</p><p>Overleaf是开源的在线Latex编辑器软件，个人用户可以在Overleaf官网注册并免费使用Overleaf，Overleaf官网还具有Review等团队协作功能。但是Overleaf官方提供的网站在国内的访问速度不佳，<strong>科学上网后速度才满足日常需求</strong>。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117143845940.png" alt="Overleaf的Github项目主页"></p><p>而对于我来说，平时使用的是校园网，科学上网之后速度确实提升上去了，但是会时不时的掉线、重连，非常烦人。因此我决定在本地搭建一个Overleaf的环境出来方便我自己的写作</p><p>因此，对于科研团队来说，在自己的服务器上部署Overleaf，从此为整个团队都省去了安装Latex各种包的繁琐，多么幸福的事。需要说明的事，目前开源的个人版本的Overleaf功能没有Overleaf官网齐全，也许还有些小bug，但是就我目前的使用来说，足够日常使用了。</p><h2 id="2-Overleaf本地安装"><a href="#2-Overleaf本地安装" class="headerlink" title="2. Overleaf本地安装"></a>2. Overleaf本地安装</h2><p>就像在前面所说的，Overleaf本身是一个开源的项目，Overleaf官方则是在Overleaf的基础上提供了团队协作、云文件存储等云服务功能。因此我们在本地完全可以搭建出来一个Overleaf环境出来。只不过我们自己搭建的Overleaf只能给自己用，没有办法和别人协作。</p><p>Overleaf程序本身是运行在docker里的，然后通过docker的端口映射提供了浏览器的localhost访问。因此首先需要安装docker</p><h3 id="1-Docker安装"><a href="#1-Docker安装" class="headerlink" title="1. Docker安装"></a>1. Docker安装</h3><p>本地机器首先卸载一下老版本的docker</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get remove docker docker-engine docker.io containerd runc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后从apt的仓库里安装依赖</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get updatesudo apt-get install \    ca-certificates \    curl \    gnupg \    lsb-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来添加Docker官方的GPG Key</p><pre class="line-numbers language-shell"><code class="language-shell">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设定下载稳定版本的Docker</p><pre class="line-numbers language-shell"><code class="language-shell">echo \  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后安装即可</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117145809738.png" alt="docker安装过程"></p><p>安装完了之后运行一下helloword验证一下安装</p><pre class="line-numbers language-shell"><code class="language-shell">sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117145921325.png" alt="验证的结果"></p><p>出现上面的信息就表示安装成功</p><h3 id="2-把当前用户加入到docker组里"><a href="#2-把当前用户加入到docker组里" class="headerlink" title="2. 把当前用户加入到docker组里"></a>2. 把当前用户加入到docker组里</h3><p>在安装完docker后，默认会创建一个docker组，只有组内的用户才可以有权限使用docker的命令，因此还需要把当前用户加入到docker组里去</p><pre class="line-numbers language-shell"><code class="language-shell">sudo tail -n 5 /etc/group<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117151049856.png" alt="可以看到新创建的docker组"></p><p>把当前登录用户加入到docker组里去</p><pre class="line-numbers language-shell"><code class="language-shell">sudo gpasswd -a $USER docker# 更新一下docker组的信息newgrp docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们不用sudo运行一下上面的docker命令看看</p><pre class="line-numbers language-shell"><code class="language-shell">docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117151603677.png" alt="运行结果"></p><h3 id="3-安装以及配置Overleaf项目"><a href="#3-安装以及配置Overleaf项目" class="headerlink" title="3. 安装以及配置Overleaf项目"></a>3. 安装以及配置Overleaf项目</h3><p>Overleaf项目被打包成了docker的一个镜像，我们把Overleaf的镜像从dockerhub里拉下来然后在本地创建容器运行即可</p><pre class="line-numbers language-shell"><code class="language-shell">docker pull sharelatex/sharelatex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为docker的文件系统是分层的，因此等待一段时间等所有层下载完之后就ok了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117153754354.png" alt="正在拉去镜像"></p><p>接下来拉取一下官方的Overleaf配置文件</p><pre class="line-numbers language-shell"><code class="language-shell">cd ~/projectsmkdir overleafcd overleafwget https://raw.githubusercontent.com/sharelatex/sharelatex/master/docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们下载配置文件后，可以根据需要修改一下启动Overleaf的容器的时候的配置，例如：因为默认的启动端口是80往往有Apache或者Nginx，因此把Overleaf容器的80端口改到本机的其他端口，例如改到本机的8000上去</p><pre class="line-numbers language-shell"><code class="language-shell">sudo vim docker-compose.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117154606461.png" alt="修改容器的端口映射"></p><h3 id="4-初次启动Overleaf容器以及texlive安装"><a href="#4-初次启动Overleaf容器以及texlive安装" class="headerlink" title="4. 初次启动Overleaf容器以及texlive安装"></a>4. 初次启动Overleaf容器以及texlive安装</h3><p>启动Overleaf需要在配置文件在的文件夹下启动。</p><pre class="line-numbers language-shell"><code class="language-shell">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初次启动需要下载一下数据库之类的东西</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117155148568.png" alt="等待下载"></p><p>然后进入容器即可</p><pre class="line-numbers language-shell"><code class="language-shell">docker exec -it sharelatex bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意进入容器后命令行的提示符会发生改变</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117155315366.png" alt="进入容器"></p><p>接下来在容器内安装编译所需要的完整的texlive，包含大概4000个常用包。考虑到速度可能会比较慢，所以走清华源</p><pre class="line-numbers language-shell"><code class="language-shell"># 换源tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/# 更新tlmgr update --self --all# 下载包tlmgr install scheme-full<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117155828288.png" alt="4183个包，慢慢等吧" style="zoom: 67%;"></p><p>最后，等了一个半小时左右，总算是把4138个包全部下载好了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117173418961.png" alt="下载成功的结果"></p><p>这里下载好了之后，我们对下载了包的镜像进行一下提交，这样我们后面换了机器之后也可以随时部署，不需要再去下载一遍这些包</p><pre class="line-numbers language-shell"><code class="language-shell">docker commit sharelatex sharelatex/sharelatex:with-texlive-full<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-Overleaf的使用"><a href="#3-Overleaf的使用" class="headerlink" title="3. Overleaf的使用"></a>3. Overleaf的使用</h2><p>接下来我们直接访问<code>http://ip:端口/</code>就可以使用Overleaf了，不过在此之前，我们先创建一下管理员账户</p><h3 id="1-创建管理员账户"><a href="#1-创建管理员账户" class="headerlink" title="1. 创建管理员账户"></a>1. 创建管理员账户</h3><p>管理员（后台）登录在<code>http://ip:端口/launchpad</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117175418366.png" alt="后台登录"></p><p>我们注册之后就可以进入后台的控制面板了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117175758402.png" alt="后台的控制面板"></p><h3 id="2-普通用户登录"><a href="#2-普通用户登录" class="headerlink" title="2. 普通用户登录"></a>2. 普通用户登录</h3><p>普通用户登录直接访问<code>http://ip:端口</code>即可，会自动重定向到<code>http://ip:端口/login</code>界面，然后register 或者 login即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117180153749.png" alt="登录界面"></p><p>登录之后就可以正常使用了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117180311035.png" alt="熟悉的感觉又回来了"></p><p>最后写作的体验就是很流畅~，完全不会断线，编译、展示速度快到飞起！</p><p>开始快乐的写作<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="4-后记"><a href="#4-后记" class="headerlink" title="4. 后记"></a>4. 后记</h2><p>下面是我在后面的日常使用中发现的一些问题、对应的解决方案以及一些建议</p><h3 id="1-关于模板"><a href="#1-关于模板" class="headerlink" title="1. 关于模板"></a>1. 关于模板</h3><p>我们在新建项目的时候，本地是没有网页版的template中的各种模板可以用的，所以这个时候我们可以先从官网上下载下来temple然后在本地上传即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220117180513493.png" alt="从本地上传新项目"></p><h3 id="2-关于镜像"><a href="#2-关于镜像" class="headerlink" title="2. 关于镜像"></a>2. 关于镜像</h3><p>我们前面在下载好了各种latex的包之后，通过<code>docker commit</code>命令把我们的修改提交到了镜像上。然而有的时候我们可能需要在新的机器上，例如课题组的服务器上跑一个私有Overleaf。那么这个时候我们就需要把下载好包的镜像复制到服务器上。所以我们还需要把镜像打包出来方便迁移。</p><p>当然，关于docker更多的内容，这里不会介绍，在我的后面的docker专栏会有所介绍</p><h4 id="A-打包镜像"><a href="#A-打包镜像" class="headerlink" title="A. 打包镜像"></a>A. 打包镜像</h4><p>因为docker的文件系统是分层存储的，而直接以分层文件形式迁移镜像的话就很不方便，所以我们需要首先把镜像打包为一个tarball包</p><pre class="line-numbers language-shell"><code class="language-shell">docker save -o ./OverLeaf.tar sharelatex/sharelatex:with-texlive-full<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打包时间会比较长，因为下载了所有的包之后会比较大高达7.6G，打包之后就会得到一个镜像，未来我们只需要把这个镜像复制到目标计算机上然后完成下面的步骤就可以了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220118192015987.png" alt="打包之后的文件非常大"></p><h4 id="B-导入镜像"><a href="#B-导入镜像" class="headerlink" title="B. 导入镜像"></a>B. 导入镜像</h4><p>我们上面是通过docker把分层的image打包为了tarball文件，然后我们把tarball文件复制到目标计算机上后，其实是没有办法直接解压tarball文件然后直接使用的，我们还需要通过docker把这个文件通过docker还原为一个镜像。</p><p>主语，下面这条命令要在目标机器（没有Overleaf的机器）上运行</p><pre class="line-numbers language-shell"><code class="language-shell">docker load -i OverLeaf.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，由于我们在提交镜像后可能有新写了文章，这个时候打包的镜像里其实是没有你写的文章的，因此文章还是需要另外保存的</p>]]></content>
      
      
      <categories>
          
          <category> Latex基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Latex </tag>
            
            <tag> Overleaf </tag>
            
            <tag> paper writing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021计算机科学技术导论期末大作业网页</title>
      <link href="/2022/01/12/2021-ji-suan-ji-ke-xue-ji-zhu-dao-lun-qi-mo-da-zuo-ye-part2/"/>
      <url>/2022/01/12/2021-ji-suan-ji-ke-xue-ji-zhu-dao-lun-qi-mo-da-zuo-ye-part2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是XJTU 2021秋季 计算机科学导论期末大作业——Part 2的在线网页</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220121100119989.png" alt="西安交通大学计算机科学与技术学院"></p><h1 id="2021计算机科学技术导论期末大作业网页"><a href="#2021计算机科学技术导论期末大作业网页" class="headerlink" title="2021计算机科学技术导论期末大作业网页"></a>2021计算机科学技术导论期末大作业网页</h1><h4 id="姓名：王仕鸿"><a href="#姓名：王仕鸿" class="headerlink" title="姓名：王仕鸿"></a>姓名：王仕鸿</h4><h4 id="班级：计算机003"><a href="#班级：计算机003" class="headerlink" title="班级：计算机003"></a>班级：计算机003</h4><h4 id="学号：2196113760"><a href="#学号：2196113760" class="headerlink" title="学号：2196113760"></a>学号：2196113760</h4><p>本文发布于我的<a href="http://jackwang.cafe/">个人网站</a>：<a href="http://jackwang.cafe/">http://jackwang.cafe/</a></p><p><a href="http://jackwang.cafe/2022/01/12/2021-ji-suan-ji-ke-xue-ji-zhu-dao-lun-qi-mo-da-zuo-ye-part2/">文章链接</a>：<a href="http://jackwang.cafe/2022/01/12/2021-ji-suan-ji-ke-xue-ji-zhu-dao-lun-qi-mo-da-zuo-ye-part2/">http://jackwang.cafe/2022/01/12/2021-ji-suan-ji-ke-xue-ji-zhu-dao-lun-qi-mo-da-zuo-ye-part2/</a></p><p>文章阅读密码：2021XJTU计算机科学技术导论</p><p>SHA256加密后密码: 105d7b38d15ecaf4074288814b6cd6dac999373972a0b825579b0bc89549f809</p><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>用超文本标记语言（HTML页面）、或窗口化程序、微信小程序、手机APP等（表现形式不限），组织如下内容进行展示：（30分）</p><ol><li>你画出的计算机学科各课程之间的关系图。</li><li>收集计算机学科各课程有用的参考资料，并使用超链接等集成（包括但不限于外部网页链接，可供下载的ppt、工程文件等）。</li><li>你对计算机专业的认识。</li><li>你的学业规划。</li></ol><h2 id="二、回答"><a href="#二、回答" class="headerlink" title="二、回答"></a>二、回答</h2><h3 id="1-计算机学科各个课程之间的关系图"><a href="#1-计算机学科各个课程之间的关系图" class="headerlink" title="1. 计算机学科各个课程之间的关系图"></a>1. 计算机学科各个课程之间的关系图</h3><h4 id="A-计算机学科有哪些课程？"><a href="#A-计算机学科有哪些课程？" class="headerlink" title="A. 计算机学科有哪些课程？"></a>A. 计算机学科有哪些课程？</h4><p><strong>为绘制计算机学科各个课程之间的关系图，首先需要清楚计算机学科有哪些课程</strong></p><p>参考西安交通大学计算机科学与技术专业2019版培养方案[1]，计算机科学与技术专业课程体系设置如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120204105964.png" alt="计算机科学与技术专业课程体系设置" style="zoom:50%;"></p><p>其中，专业课程包括：</p><ul><li>专业核心课程：<ul><li>COMP450105 计算机组成 4 学分</li><li>COMP000105 计算机科学技术导论 1 学分</li><li>COMP450205 操作系统原理 I 3 学分</li><li>COMP450305 形式语言与编译 3.5 学分</li><li>COMP450505 计算机网络原理 3 学分</li><li>COMP462105 数据库系统 2.5 学分</li><li>COMP462205 算法分析与设计 2.5 学分</li><li>COMP460405 数据结构与程序设计专题实验 1 学分</li><li>COMP450905 计算机组成与结构专题实验 1 学分</li><li>COMP451005 操作系统设计专题实验 1 学分</li><li>COMP451105 编译器设计专题实验 1 学分</li><li>COMP460605 计算机网络专题实验 1 学分</li><li>COMP460705 计算机系统综合设计实验 1 学分</li></ul></li><li>专业选修课程：<ul><li>计算机软件与理论模块</li><li>计算机系统结构模块</li><li>大数据与人工智能模块</li><li>计算机网络模块</li><li>跨方向选修课程</li></ul></li></ul><p>由于计算机科学与技术专业培养方案中要求计算机专业必修课程较多，因此<strong>本文认为：“计算机专业各个课程“指计算机科学与技术专业核心课程</strong></p><h4 id="B-计算机专业各个课程的内容"><a href="#B-计算机专业各个课程的内容" class="headerlink" title="B. 计算机专业各个课程的内容"></a>B. 计算机专业各个课程的内容</h4><p>为了能够绘制出计算机学科各课程之间的关系图，<strong>其次还需要清楚各个课程教授的的内容</strong>。因此下面是各个核心课程的主要内容如下：</p><ul><li><strong>计算机组成</strong>：组成原理是计算机其他核心课程的一个“导引”。学习组成原理之后，向下，你可以学习数字电路相关的课程，向上，你可以学习编译原理、操作系统这些核心课程。因此，<strong>计算机组成原理能够告诉我们软硬件的边界，学习这门课程能帮助我们完成从硬件门电路到软件的过渡</strong>。参考：[2, 3, 4]</li><li><strong>计算机科学技术导论</strong>：计算机导论是计算机专业学生进入大学学习的第一门专业基础课程，其目的在于用统一的思想认识计算机学科的本质，对计算机学科的系统化和科学化进行阐述，以PBL的教学方式给学生提供一个对计算机科学范畴漫游的丰富而易懂的“思维导图”，了解计算机科学与技术领域的概貌、学术范畴、专业词汇和计算机应用的发展，用逻辑严密的方式将学生引入计算机理论与技术的领域中。参考：[5]</li><li><strong>操作系统原理 I</strong>：任何计算机都必须在加载相应的操作系统之后，才能构成一个可以运转的、完整的计算机系统。操作系统的功能是否强大，决定了计算机系统的综合能力；操作系统的性能高低，决定了整个计算机系统的性能；操作系统本身的安全可靠程度，决定了整个计算机系统的安全性和可靠性。操作系统是软件技术的核心和基础运行平台。因此，计算机科学技术专业的学生需要学习和掌握操作系统的基本原理和专业知识。参考：[6]</li><li><strong>形式语言与编译</strong>：形式语言与编译介绍形式语言、自动机、文法、词法分析、语法分析和语义分析，既包括系统的正则语言理论和上下文无关语言理论，也有强调原理性的程序分析和转换方法。同学通过本课程学习，认识基础性计算规律，掌握通用的形式语言理论和编译方法，不仅具备设计编译器前端的能力，也为解决广泛的计算问题打下理论基础。参考：[7]</li><li><strong>计算机网络原理</strong>：计算机网络原理”是一门理论与实践并重的专业课程，通过课程学习，可以掌握计算机网络工作原理、典型网络协议和网络互联网设备工作原理，更好地理解互联网技术和应用。参考：[8]</li><li><strong>数据库系统</strong>：现代信息社会离不开数据库，计算机应用绕不过数据库。如何开发数据库应用？数据库应用的系统支撑软件，即数据库管理系统（DBMS），数据库系统就是讲解数据库相关内容的课程。参考：[9]</li><li><strong>算法分析与设计</strong>：算法分析与设计针对实际问题需求，进行数学建模并选择高效求解算法的训练。主要内容涉及：面对实际问题建立数学模型、设计正确的求解算法、算法的效率估计、改进算法的途径、问题计算复杂度的估计、难解问题的确定和应对策略等等。算法分析与设计是算法课程的基础部分，主要涉及算法的设计、分析与改进途径，其他有关计算复杂性的内容则在后续课程中加以介绍。参考：[10]</li></ul><h4 id="C-计算机各个课程之间的关系图"><a href="#C-计算机各个课程之间的关系图" class="headerlink" title="C. 计算机各个课程之间的关系图"></a>C. 计算机各个课程之间的关系图</h4><p>根据上述内容，绘制如下的计算机各个课程之间的关系图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220120220757364.png" alt="计算机各个课程间关系图"></p><h3 id="2-收集计算机学科各课程有用的参考资料"><a href="#2-收集计算机学科各课程有用的参考资料" class="headerlink" title="2. 收集计算机学科各课程有用的参考资料"></a>2. 收集计算机学科各课程有用的参考资料</h3><p>我认为计算机学科有用的资料有：</p><ul><li>在你自学计算机的路上，哪些书籍对你的帮助最大?：<a href="https://www.zhihu.com/question/421913237/answer/1882385602">https://www.zhihu.com/question/421913237/answer/1882385602</a></li><li>一个几乎没有计算机知识的人，怎样入门计算机？：<a href="https://zhuanlan.zhihu.com/p/448071180">https://zhuanlan.zhihu.com/p/448071180</a></li><li>你当初是如何学会操作系统这门课程的？：<a href="https://www.zhihu.com/question/270998611/answer/1866650533">https://www.zhihu.com/question/270998611/answer/1866650533</a></li><li>如何学好操作系统原理这门课？：<a href="https://www.zhihu.com/question/22874344/answer/1158044965">https://www.zhihu.com/question/22874344/answer/1158044965</a></li><li><p>大学四年自学走来，关于怎么学「操作系统」和「计算机网络」我贡献出来了！：<a href="https://zhuanlan.zhihu.com/p/260189203">https://zhuanlan.zhihu.com/p/260189203</a></p></li><li><p>形式语言与编译：<a href="https://www.bilibili.com/video/BV1w741177Uv/">https://www.bilibili.com/video/BV1w741177Uv/</a></p></li></ul><h3 id="3-你对计算机专业的认识"><a href="#3-你对计算机专业的认识" class="headerlink" title="3. 你对计算机专业的认识"></a>3. 你对计算机专业的认识</h3><p>我对计算机专业的认识是：</p><ul><li>计算机首先是构建在硬件系统上的物理机器：从基础的的电路开始，有了模拟电路和数字电路。在由门电路组成的电路的基础上，数字电路系统具有了保存信息、处理信息的能力。因此在基础的数字电路系统的基础上，CPU通过ALU、控制器等完成运算，存储器以磁、点信号等方式将指令、数据保存在内部，I/O设备以光（显示器）、位移（鼠标）、按键（键盘）、声音（麦克风/喇叭）等形式输入、输出……因此计算机就是在一套又一套的硬件系统上构建出来的复杂的、庞大的硬件系统。计算机专业研究、学习的对象是计算机，因此，<strong>学习这些硬件知识非常必要</strong>。学习硬件知识，能够帮助我们更深入的理解计算机。计算机专业首先就意味着我们熟知硬件知识。</li><li>其次，计算机是一系列软件程序的集合：为了方便用户使用硬件以及硬件设备的管理和，就出现了操作系统，操作系统作为中间层向用户提供硬件的抽象来方便用户操作。而为了能够让两台物理机器上的两个进程之间进行通信，就有了计算机网络，还有从完成动高级语言到二进制机器码的编译器……诸多这些软件在一起，构成了计算机系统。完成了从硬件到软件的过度，最终使得用户在使用时完全感受不到硬件。因此对于计算机专业的学生来说，<strong>学习这些计算机软件知识是必要的</strong>，因为这知识能够帮助我们更好的理解计算机系统。</li></ul><h3 id="4-你的学业规划"><a href="#4-你的学业规划" class="headerlink" title="4. 你的学业规划"></a>4. 你的学业规划</h3><p>我的学业规划：</p><ul><li>首先好好学习，把感兴趣的专业选修课全部学完</li><li>然后在学完专业课的基础上学习网络上的其他学校的一些感兴趣的课程，例如机器学习、深度学习</li><li>希望能够在本科期间独立完成科研工作、发表文章</li></ul><h2 id="三、Reference"><a href="#三、Reference" class="headerlink" title="三、Reference"></a>三、Reference</h2><p>[1]    西安交通大学计算机科学与技术学院,“计算机科学与技术专业2019版培养方案,”[EB/OL],<a href="http://www.cs.xjtu.edu.cn/local/6/BF/72/F3B7CBE5AC68D0F8D34951D38C9690DEE098E91C.pdf?e=.pdf.3">http://www.cs.xjtu.edu.cn/local/6/BF/72/F3B7CBE5AC68D0F8D34951D38C9690DEE098E91C.pdf?e=.pdf.3</a>.</p><p>[2]    一路带飞,  “学了半天，计算机组成原理，到底有啥用？,”  [EB/OL],  <a href="https://www.eet-china.com/mp/a79426.html">https://www.eet-china.com/mp/a79426.html</a>.</p><p>[3]    徐文浩,  “深入浅出计算机组成原理,”  [EB/OL],  <a href="https://time.geekbang.org/column/intro/100026001">https://time.geekbang.org/column/intro/100026001</a>.</p><p>[4]    知乎,  “怎样学习和理解计算机组成原理？,”   [EB/OL],  <a href="https://www.zhihu.com/question/20706264.3">https://www.zhihu.com/question/20706264.3</a>.</p><p>[5]    华南师范大学,  “计算机科学技术导论,”  [EB/OL], <a href="https://moodle.scnu.edu.cn/course/view.php?id=4906.3">https://moodle.scnu.edu.cn/course/view.php?id=4906.3</a>.</p><p>[6]    X.  Chen,  “操作系统原理（operating  systems）,”  [EB/OL],  <a href="https://zh.coursera.org/learn/os-pku.3">https://zh.coursera.org/learn/os-pku.3</a>.</p><p>[7]    BobLee-XJTU,    “形 式语言与编译,”    [EB/OL],    <a href="https://www.bilibili.com/video/BV1w741177Uv/.3">https://www.bilibili.com/video/BV1w741177Uv/.3</a>.</p><p>[8]    青岛大学, “玩转计算机网络-计算机网络原理,” [EB/OL], <a href="https://www.icourse163.org/course/QDU-1206901804?tid=1450727466.3">https://www.icourse163.org/course/QDU-1206901804?tid=1450727466.3</a>.</p><p>[9]    浙江大学,    “数据库系统原理,”    [EB/OL],   <a href="https://mooc.study.163.com/course/1000031000?tracecpk2=51ff5f4a61d34c3ba1c0a0404842a5b5#/info.3">https://mooc.study.163.com/course/1000031000?tracecpk2=51ff5f4a61d34c3ba1c0a0404842a5b5#/info.3</a>.</p><p>[10]  W.Qu,“算法设计与分析designand analysis of algorithms,”[EB/OL],<a href="https://mooc.study.163.com/course/1000031000?tracecpk2=51ff5f4a61d34c3ba1c0a0404842a5b5#/info.3">https://mooc.study.163.com/course/1000031000?tracecpk2=51ff5f4a61d34c3ba1c0a0404842a5b5#/info.3</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 作业 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模备赛：美赛基础入门及历年出题点分析</title>
      <link href="/2022/01/12/shu-xue-jian-mo-bei-sai-mei-sai-ji-chu-ru-men-ji-li-nian-chu-ti-dian-fen-xi/"/>
      <url>/2022/01/12/shu-xue-jian-mo-bei-sai-mei-sai-ji-chu-ru-men-ji-li-nian-chu-ti-dian-fen-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了数学建模美赛并分析了数模美赛历年的出题点</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112183134553.png" alt="2022美赛宣传海报" style="zoom:50%;"></p><h1 id="数学建模备赛：美赛基础入门及历年出题点分析"><a href="#数学建模备赛：美赛基础入门及历年出题点分析" class="headerlink" title="数学建模备赛：美赛基础入门及历年出题点分析"></a>数学建模备赛：美赛基础入门及历年出题点分析</h1><h1 id="一、美赛基础入门"><a href="#一、美赛基础入门" class="headerlink" title="一、美赛基础入门"></a>一、美赛基础入门</h1><h2 id="1-数模美赛入门"><a href="#1-数模美赛入门" class="headerlink" title="1. 数模美赛入门"></a>1. 数模美赛入门</h2><blockquote><p>对于零基础的人来说，还是先直观的认识一下数模美赛</p></blockquote><h3 id="A-2020-MCM-A-题目"><a href="#A-2020-MCM-A-题目" class="headerlink" title="A. 2020 MCM-A 题目"></a>A. 2020 MCM-A 题目</h3><p>在到点（比赛开始）之后，美赛官方会在官网上公布题目，即下面的PDF文件</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112103650809.png" alt="赛题-1"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112103715739.png" alt="赛题-2"></p><p>英文看起来不太方便，所以翻译成中文来看看</p><blockquote><p><strong>2020MCM        A题：向北迁徙</strong></p><p>全球海洋温度影响某些海洋生物的生境质量。当温度变化太大，无法继续繁衍时， 这些物种就会迁移到其他更适合它们现在和未来生活和繁殖的生境。这方面的一个例 子是美国缅因州的龙虾种群,它们正在慢慢向北迁移到加拿大，那里较低的海洋温度提 供了更合适的栖息地。这种地理种群的变化会严重扰乱那些依赖生物稳定性的种群的 生计。</p><p>你的团队已被苏格兰北大西洋渔业管理财团聘请为顾问。该财团希望更好地了解， 如果全球海洋温度上升，苏格兰鲱鱼和鲭鱼可能从苏格兰附近的现有栖息地迁移的相 关问题。这两个鱼种对苏格兰渔业的经济贡献很大。鲱鱼和鲭鱼种群位置的变化，可 能会使以苏格兰为基地的小型渔业公司在经济上无法生存。因为这些公司使用的渔船 上没有冷藏设备，而他们需要收获新鲜鱼并将其运往苏格兰渔港的市场。</p><p>要求：</p><ol><li>建立一个数学模型，确定这两种鱼在未来50年内最可能迁徙到的位置，假设水温 会发生足够导致种群移动的变化。</li><li>根据海洋水温变化的速度，用你的模型预测最佳情况、最坏情况和最有可能的时 间：如果小型捕鱼公司继续在目前的地点作业，这些种群将太远，直到小型捕鱼公司 无法捕捞。</li></ol></blockquote><h3 id="B-最终解决方案"><a href="#B-最终解决方案" class="headerlink" title="B. 最终解决方案"></a>B. 最终解决方案</h3><p>经过四天的比赛，美赛要求参赛队伍最终提交一个PDF文件作为最终解决方案，其中包括Summary、论文、附录等等内容</p><p>下面是上面这道题的O奖文章之一</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112104017921.png" alt="最终论文"></p><p>这是论文里的部分内容</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112104359345.png" alt="部分论文内容" style="zoom: 67%;"></p><h3 id="C-美赛到底是什么？"><a href="#C-美赛到底是什么？" class="headerlink" title="C. 美赛到底是什么？"></a>C. 美赛到底是什么？</h3><p>在直观的认识了美赛之后，我们不禁想要问，什么是美赛？</p><blockquote><p><strong>美赛（美国大学生数学建模竞赛）是什么？</strong></p><ul><li>美赛=微型的科研项目</li><li>美赛=设计和策划方案</li><li>美赛=模型思路+程序+论文</li></ul></blockquote><p>下面我们就开始正式的介绍美赛</p><h2 id="2-美赛的发展及规模"><a href="#2-美赛的发展及规模" class="headerlink" title="2. 美赛的发展及规模"></a>2. 美赛的发展及规模</h2><p><strong>Mathematical Contest in Modeling（MCM）</strong>是一项由美国数学及其应用联合会(<strong>COMAP</strong>)发起组织的国际级竞赛项目，自1985年开始举办 ，每年一次。由美国自然基金协会和美国数学及其应用联合会共同主办 ，美国运筹学学会、工业与应用数学学会、数学学会等多家机构协办。 </p><p>1999年起，美国数学及其应用联合会又同时推出<strong>交叉学科竞赛（ Interdisciplinary Contest in Modeling ），简称 ICM</strong>（涉及数学、环境 科学、生物学、化学、资源管理等交叉学科）。</p><ul><li>MCM是国际大学生各类竞赛中级别最高的一项赛事，每年吸引世界 著名高校参赛，很多国内外著名科研机构和企业将其作为衡量学生素 质和水平的重要依据</li><li>美赛对国内大部分高校可以保研加分（虽然欲我无瓜<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</li><li>美赛成绩国外的认可度要高一些（出国留学）</li><li>国内高校对美赛的热情略低于国赛，大部分学校没有常规的的赛前集训</li></ul><p>美赛历年参加的人数在不断的增加：</p><ul><li>2015年，MCM近8000队，ICM近2000队</li><li>2016年，MCM近9000队，ICM近2000队</li><li>2017年，MCM 11000队，ICM6000多队</li><li>2018年，MCM 12000队，ICM7000多队</li><li>2019年，MCM14000多队，ICM11000多队</li><li><strong>人数逐年增加，选择MCM的人数多于ICM。</strong></li></ul><p>和国内一等奖最高不一样，美赛最高的奖项是特等奖。各个奖项以及获奖比利如下：</p><ul><li>特等奖（O奖）每题18、19队，&lt;1%</li><li>特等奖提名（F奖）每题180，234队，3%</li><li>一等奖（M奖） 5-6%，二等奖（H奖）22－26％</li><li>S奖（Successful Participant）</li></ul><p><strong>从2019年开始，严查违规问题（DQ），10%-20%被判违规，以前只有少量被判违规。</strong></p><h2 id="3-美赛的比赛形式及流程"><a href="#3-美赛的比赛形式及流程" class="headerlink" title="3. 美赛的比赛形式及流程"></a>3. 美赛的比赛形式及流程</h2><ul><li><strong>题目</strong>：各领域简化的应用问题<ul><li>MCM 3 题（A， B ，C，连续，离散，数据分析）</li><li>ICM 3 题（D，E，F，计算机网络，环境，政策措施）</li></ul></li><li><strong>提交成果</strong>：一篇包含<strong>问题分析、模型假设、建立、求解(数学软件)、 结果分析</strong>等的全英文论文。</li><li><strong>形式</strong>：3名大学生组队，在4天内完成通讯比赛</li><li><strong>标准</strong>：<ul><li>假设的合理性</li><li><strong>建模的创造性</strong></li><li>结果的正确性</li><li>表述的清晰性</li></ul></li></ul><p>2022年美赛的流程如下：</p><ul><li><strong>注册（报名）截至时间</strong>：比赛开始前两小时<ul><li><strong>2022年2月18日早上4点前</strong></li></ul></li><li><p><strong>比赛时间</strong>：一般美赛都在每年2-3月（过年前后，开学前）</p><ul><li><strong>2022年2月18日早上6点——2月22日早上9点</strong></li></ul></li><li><p>3月完成评审，4月30日之前COMAP网站发布结果</p></li><li>注册报名：<ul><li><strong>美赛官网注册报名</strong></li></ul></li></ul><p>COMAP官网：<a href="https://www.comap.com/，第二个就是数模美赛">https://www.comap.com/，第二个就是数模美赛</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112110317316.png" alt="COMAP官网以及美赛"></p><h2 id="4-美赛的能力要求与准备"><a href="#4-美赛的能力要求与准备" class="headerlink" title="4. 美赛的能力要求与准备"></a>4. 美赛的能力要求与准备</h2><p>首先，美赛对能力的要求如下：</p><ul><li>良好的数理知识（高等数学、概率论、线性代数）</li><li>编程及软件使用能力（Matlab、Python)</li><li>英语写作能力</li><li>资料搜集能力：一般除了C题其他的题目不会给数据，然而自己的模型是需要数据验证的，因此还要自己根据题目的暗示找数据</li><li>文献阅读能力</li></ul><p>接下来是美赛的准备方法：</p><ul><li>基础模型算法/编程</li><li>实战真题（3-5年）</li><li>阅读真题O奖论文：因为O奖论文是最接近评委心中的满分答案的论文</li></ul><p>而为了准备美赛，推荐的资料如下：</p><ul><li>数理知识：<ul><li>《数学建模算法与应用》司守奎等</li><li>历年美赛真题与O奖论文集合</li></ul></li><li>常用软件：<ul><li>Matlab, SPSS, Excel, PPT制图，Latex（必备）</li><li>Lingo，ArcGIS, Python，Origin, SAS, R语言（推荐）</li></ul></li><li>英语：<ul><li>雅思、托福写作词组+句式</li></ul></li></ul><h2 id="5-美赛的特点"><a href="#5-美赛的特点" class="headerlink" title="5. 美赛的特点"></a>5. 美赛的特点</h2><p>相对于国赛，美赛的特点如下：</p><ul><li>赛题灵活度高，内容广泛，开放性强</li><li><strong>对算法难度和准确度要求低于国赛</strong>，基本上合理即可</li><li><strong>注重方法的创新</strong></li><li>英文写作水平要求较高</li><li>注重论文的完整度与丰富度</li></ul><h2 id="6-美赛的组队与分工"><a href="#6-美赛的组队与分工" class="headerlink" title="6. 美赛的组队与分工"></a>6. 美赛的组队与分工</h2><p>大体来说，完成美赛需要团队具有下面三个模块的能力</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112111608785.png" alt="美赛需要的三个能力"></p><p>在细节上，建议：</p><ul><li>至少一位擅长英语写作</li><li>至少一位擅长编程</li><li>建模知识都需要入门</li><li>根据你们的特长调整分工及选题</li><li><strong>最终决策权</strong></li><li>沟通、负责</li></ul><h1 id="二、美赛出题点分析"><a href="#二、美赛出题点分析" class="headerlink" title="二、美赛出题点分析"></a>二、美赛出题点分析</h1><p>本文只是对美赛的出题点进行了简要的介绍，跟多内容请参考其他文字</p><h2 id="1-美赛出题领域"><a href="#1-美赛出题领域" class="headerlink" title="1. 美赛出题领域"></a>1. 美赛出题领域</h2><p>从10年开始，历年美赛出题的领域如下：</p><ul><li><strong>工程</strong>：<ul><li>2018A多跳HF无限电传播</li><li>2016A浴缸的水温模型</li></ul></li><li><strong>交通</strong>：<ul><li>卢浮宫疏散</li><li>2017B高速收费站合并</li><li>2018D机场安检站优化</li></ul></li><li><strong>生态环境</strong>： <ul><li>2020A向北迁徙</li><li>2019A饲养一条龙</li><li>2019E环境恶化的代价 是什么？</li></ul></li><li><strong>金融</strong>：<ul><li>2016C优质基金挑战</li></ul></li><li><strong>新能源</strong>：<ul><li>2011C电动汽车</li></ul></li><li><strong>犯罪</strong>：<ul><li>毒品危机</li></ul></li><li><strong>疾病医学</strong>：<ul><li>2015A 根除埃博拉病毒</li></ul></li><li><strong>人文社科</strong>：<ul><li>2020F难民危机，2019B语言传播趋势, 2018F隐私成本问题</li></ul></li></ul><h2 id="2-美赛常见题型"><a href="#2-美赛常见题型" class="headerlink" title="2. 美赛常见题型"></a>2. 美赛常见题型</h2><p>其实不光是美赛，整个数学建模常见的题型如下：</p><ul><li><strong>运筹优化类问题</strong><ul><li>规划模型</li><li>排队论</li><li>神经网络</li><li>启发式算法</li></ul></li><li><strong>评价类问题</strong><ul><li>层次分析法</li><li>聚类分析法</li><li>主成分分析评价法</li></ul></li><li><strong>预测类问题</strong><ul><li>灰色预测</li><li>回归预测</li><li>神经网络</li><li>马尔科夫链</li></ul></li><li><strong>机理分析类问题</strong>：其实涵盖的面更广<ul><li>回归</li><li>拟合</li><li>微分方程</li></ul></li></ul><h2 id="3-美赛必备算法模型"><a href="#3-美赛必备算法模型" class="headerlink" title="3. 美赛必备算法模型"></a>3. 美赛必备算法模型</h2><p>为了应对美赛，每一小问都能划归到上面的四类题型。因此我们需要掌握下面的算法模型：</p><ol><li><strong>蒙特卡罗/计算机仿真算法</strong><ul><li>该算法又称随机性模拟算法，是通过计算机仿真来解决问题的算法， 同时可以通过模拟可以来检验自己模型的正确性，比较好用的算法</li></ul></li><li>数据拟合、参数估计、插值等数据处理算法<ul><li>比赛中通常会遇到大量的数据需要处理，而处理数据的关键就在于这 些算法，通常使用Matlab作为工具</li></ul></li><li>线性规划、整数规划、多元规划、二次规划等规划类问题<ul><li>建模竞赛大多数问题属于最优化问题，很多时候这些问题可以用数学 规划算法来描述，使用Matlab或Lingo软件实现</li></ul></li><li>网格算法和穷举法<ul><li>当重点讨论模型本身而轻视算法的时候，可以使用这种暴力方案，最 好使用一些高级语言作为编程工具</li></ul></li><li>最优化理论的三大非经典算法：模拟退火法、神经网络、遗传算 法<ul><li>这些问题是用来解决一些较困难的最优化问题的算法，对于有些 问题非常有帮助，但是算法的实现比较困难，需慎重使用</li></ul></li><li>排队论<ul><li>对算法要求高，如元胞自动机</li></ul></li><li>评价类算法<ol><li>层次分析法（AHP）（必掌握）<ul><li>作决策，去哪旅游，通过指标，综合考虑作决策</li></ul></li><li>主成分分析（必掌握）<ul><li>评价多个对象的水平并排序，指标间关联性很强</li></ul></li><li>其他<ul><li>熵权法（客观）、模糊综合评判（简单）、秩和比综合评价 法、TOPSIS法)、数据包络（DEA）、投影寻踪综合评价法、或者揉 和多种算法，比如遗传算法、最优化理论</li></ul></li></ol></li><li>预测算法<ol><li>灰色预测模型（灰箱模型）<ul><li>适合数据样本点个数少，数据呈现指数或曲线的形式</li></ul></li><li>回归分析预测（必掌握）<ul><li>求一个因变量与若干自变量之间的关系，若自变量变化后，求因变量 如何变化； 对样本点的个数、分布有要求</li></ul></li><li>其他<ul><li>微分方程预测、马尔科夫预测、时间序列预测、小波分析 预测、神经网络预测</li></ul></li></ol></li><li>多元分析与关联分析<ol><li>聚类分析（必掌握，参考19）</li><li>主成分分析（必掌握）</li><li>因子分析（必掌握）</li><li>典型相关分析</li><li>灰色关联分析法</li><li>方差分析、协方差分析</li><li>Person相关（样本点的个数比较多）</li></ol></li></ol><h2 id="4-美赛考察点"><a href="#4-美赛考察点" class="headerlink" title="4. 美赛考察点"></a>4. 美赛考察点</h2><p>美赛的考察点，或者说评判时候裁判看中的点，有下面几个：</p><ol><li>运筹优化、机理分析类问题（重难点）：相对于预测类问题，这两类问题能够处理的问题、包含的算法很广，因此是考察的重点</li><li>评价类问题常规要突出新意：因为现在评价模型已经非常完备了，因此使用评价类算法进行评价的时候要突出新意</li><li>模型的完整性和叙述的逻辑性：论文要好好写</li><li>数据分析、挖掘</li><li>方法迁移：把其他学科的研究方法、算法迁移过来，比如Word Embedding</li><li>创新：有理有据，打破常规</li><li>画图美观很重要</li><li>使用专业的软件</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数学建模备赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math Modeling </tag>
            
            <tag> COMAP </tag>
            
            <tag> 数学建模美赛 </tag>
            
            <tag> MCM </tag>
            
            <tag> ICM </tag>
            
            <tag> Mathematical Contest in Modeling </tag>
            
            <tag> The Interdisciplinary Contest in Modeling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模备赛：数学建模题型划分、常用算法分类及其适用场景</title>
      <link href="/2022/01/11/shu-xue-jian-mo-bei-sai-shu-xue-jian-mo-ti-xing-hua-fen-chang-yong-suan-fa-fen-lei-ji-qi-gua-yong-chang-jing/"/>
      <url>/2022/01/11/shu-xue-jian-mo-bei-sai-shu-xue-jian-mo-ti-xing-hua-fen-chang-yong-suan-fa-fen-lei-ji-qi-gua-yong-chang-jing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解了数学建模的题型划分、常用算法分类以及常用算法的适用场景</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112134606210.png" alt="本文内容" style="zoom:50%;"></p><h1 id="数学建模备赛：数学建模题型划分、常用算法分类及其适用场景"><a href="#数学建模备赛：数学建模题型划分、常用算法分类及其适用场景" class="headerlink" title="数学建模备赛：数学建模题型划分、常用算法分类及其适用场景"></a>数学建模备赛：数学建模题型划分、常用算法分类及其适用场景</h1><h2 id="一、数学建模常见的赛题类型"><a href="#一、数学建模常见的赛题类型" class="headerlink" title="一、数学建模常见的赛题类型"></a>一、数学建模常见的赛题类型</h2><p>数学建模常见的赛题类型一般可以分为四种：</p><ul><li>优化类</li><li>机理分析类</li><li>评价类</li><li>预测类</li></ul><p>严格来说，数学建模比赛的赛题变化莫测，上到卫星变轨，下到捕鱼摸虾应有尽有，虽然题目各种各样，但经过分析探究发现主要集 中在上面这四大类，其中</p><ul><li><strong>优化类赛题是考察的最多的，不管是美赛还是国赛，每年都会有题目涉及优化问题</strong>，如国赛2016B：风电场运行状况分析、2015B：出租车资源合理配 置等</li><li><strong>其次是机理分析类</strong>，如2016B：小区开放对道路通行的影响分 析、2011A：城市表层土壤重金属污染分析等</li><li><strong>评价和预测类赛题由于解题较为简单，出的相对不多。</strong></li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112134917871.png" alt="常见的四种题型"></p><p>具体对于美赛来说，数模美赛MCM和ICM各自有三道题，然而这六道题的每一小问其实都可以划归为上面的四类问题。</p><h3 id="A-预测类问题"><a href="#A-预测类问题" class="headerlink" title="A. 预测类问题"></a>A. 预测类问题</h3><blockquote><p><strong>所谓的预测类问题，指的是通过分析已有数据或现象，找出其 内在发展规律，然后对未来情形做出预测的过程。</strong></p></blockquote><p>例如：</p><ul><li>国赛2007A：中国人口增长预测问题</li><li>国赛2016C：电池 剩余放电时间预测等</li><li>美赛2013ICM：地球健康的网络模型</li></ul><p>而根据已知条件和求解目的，往往将预测类问题分为：</p><ul><li><strong>小样本内部预测</strong></li><li><strong>大样本内部预测</strong></li><li><strong>小样本未来预测</strong></li><li><strong>大样本随机因素</strong></li><li><strong>周期特征的未来预测</strong></li><li><strong>大样本的未来预测</strong></li></ul><p>此外，预测类问题可以是以一个大题的形式出现，也可以是以一个大题中的某一小问的形式出现。但是，预测问题主要是以某个 小问的形式出现，很少有整个赛题所有小问全是预测要求的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112140456945.png" alt="国赛中的预测问题" style="zoom:67%;"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112140645115.png" alt="美赛中的预测类问题" style="zoom: 67%;"></p><h3 id="B-评价类问题"><a href="#B-评价类问题" class="headerlink" title="B. 评价类问题"></a>B. 评价类问题</h3><p><strong>所谓的评价类问题，指的是按照一定的标准对事物的发展或现状进行划分的过程</strong>。在数学建模中<strong>出题点可体现在对生态环境、社会建设、方案策略等进行评价</strong>。</p><p><strong>评价类赛题往往没有明确的指标体系和评价标准，往往是需要同学们查阅各类资料进行构建的，因此评价类赛题也没有明确的答案</strong>。 过去的评价类问题：</p><ul><li>2010国赛B题：2010年上海世博会影响力的定量评估</li><li>2012国赛A题： 葡萄酒的评价</li><li>2014年美赛MCM B题：大学运动教练挑选</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112140958579.png" alt="评价类问题案例"></p><p>注意：<strong>评价类问题近些年在美赛赛题中频繁出现</strong>。解决<strong>评价类赛题的关键是指标体系的构建，构建完评价体系后在选择合适的评价方法即可，体系建立应秉持全面、准确、 独立的三要素</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112141112842.png" alt="美赛中的评价类问题" style="zoom: 67%;"></p><h3 id="C-机理分析类"><a href="#C-机理分析类" class="headerlink" title="C. 机理分析类"></a>C. 机理分析类</h3><p><strong>所机理分析是根据对现实对象特性的认识，分析其因果关系， 找出反映内部机理的规律</strong>。</p><ol><li>在求解机理分析类问题时首先需要探寻与问题相关的物理、化学、经济等相关的知识</li><li>然后通过对已知数据或现象的分析对事物的内在规律做出必要的假设</li><li>最后通过构建合适的方程或关系式对其内在规律进行数值表达。 </li></ol><p>机理分析在国赛美赛中的出题点较多，如:</p><ul><li>2014年国赛A题：嫦娥三号软着陆轨道设计与控制策略</li><li>2016国赛B题：小区开放对道路通行的影响</li><li>2013美赛MCM(A)：车辆右行问题</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112142119426.png" alt="国赛机理分析题目"></p><p>机理分析立足于建立事物内部的规律，相对于其他类型的赛题均有章可循。<strong>机理分析类赛题往往需要结合众多关联知识才可以进行求解，如空气动力学、流体力学、 热力学等</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112142213358.png" alt="美赛机理分析题目" style="zoom: 67%;"></p><h3 id="D-优化类问题"><a href="#D-优化类问题" class="headerlink" title="D. 优化类问题"></a>D. 优化类问题</h3><p>优化类问题时数学建模中最为常见的赛题，<strong>所谓的优化指在现有条件固定的情况下，如何使目标效果达到最佳</strong>。如在一座城市公交车公司拥有的公交车数量是固定的，问如何安排线路能够使盈利达到最高</p><p><strong>优化类问题往往需要分析三个关键因素： 目标函数、决策变量和约束条件，三者往往缺一不可</strong>。不管是国赛还是美赛，对于优化类赛题每年都会出，如：</p><ul><li>2019年国赛C 题：机场的出租车问题</li><li>2020国赛C题：中小微企业的信贷决策</li><li>2020年美赛E题：淹死在塑料的海洋中</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112142349244.png" alt="国赛中的优化类问题"></p><p><strong>优化类问题是当前美赛最常见的赛题，解决优化类赛题必须知道优化的目的、约束的条件和所求解的关键变量，需要有较强的编程能力和赛题分析挖掘能力</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112142450522.png" alt="美赛中的优化类问题" style="zoom: 67%;"></p><h2 id="二、数学建模算法体系分类"><a href="#二、数学建模算法体系分类" class="headerlink" title="二、数学建模算法体系分类"></a>二、数学建模算法体系分类</h2><p>数学建模中的算法大致可以分为下面的几类：</p><ul><li>数据预处理模型</li><li>优化模型</li><li>预测模型</li><li>评价模型</li><li>聚类分析模型</li></ul><p>每类模型中又会有很多的算法，常见算法的分类如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220112143108652.png" alt="数学建模算法体系"></p><p>上面的这些算法都是基础的算法，因此要全部掌握。</p><p>而在实际比赛的时候是不限制模型的使用的，以实用为准，而每种模型均有其实用的场景，因此切勿盲目追逐较为复杂繁琐的模型。</p><p>下面就将讲解各类模型及其运用场景</p><h3 id="A-数据预处理模型及应用场景"><a href="#A-数据预处理模型及应用场景" class="headerlink" title="A. 数据预处理模型及应用场景"></a>A. 数据预处理模型及应用场景</h3><h4 id="1-插值拟合"><a href="#1-插值拟合" class="headerlink" title="1) 插值拟合"></a>1) 插值拟合</h4><ul><li>主要用于对数据的补全处理</li><li>其中样本点较少时（泛指样本点小于30个）采用插值方法，主要有<strong>拉格朗日插值算法、牛顿插值、双线性内插和双三次插值</strong></li><li><strong>当样本点较多时（泛指样本点大于30个）则采用拟合函数</strong>，即考虑随机误差</li></ul><h4 id="2-小波分析，聚类分析（高斯混合聚类，K-均值聚类等等）"><a href="#2-小波分析，聚类分析（高斯混合聚类，K-均值聚类等等）" class="headerlink" title="2) 小波分析，聚类分析（高斯混合聚类，K-均值聚类等等）"></a>2) 小波分析，聚类分析（高斯混合聚类，K-均值聚类等等）</h4><ul><li>主要用于分析诊断数据异常值并进行剔除</li><li>小波分析：适用于时域范围的大样本异常值监测</li><li>聚类分析：适用于空间分布的大样本/小样本异常值监测</li></ul><h4 id="3-主成分分析、线性判别分析、局部保留投影"><a href="#3-主成分分析、线性判别分析、局部保留投影" class="headerlink" title="3) 主成分分析、线性判别分析、局部保留投影"></a>3) 主成分分析、线性判别分析、局部保留投影</h4><ul><li>主要用于多维数据的降维处理，减少数据冗余等</li></ul><h4 id="4-均值、方差分析、协方差分析等统计方法"><a href="#4-均值、方差分析、协方差分析等统计方法" class="headerlink" title="4) 均值、方差分析、协方差分析等统计方法"></a>4) 均值、方差分析、协方差分析等统计方法</h4><ul><li>主要用于数据的截取或者特征选择等</li></ul><h3 id="B-优化类模型及应用场景"><a href="#B-优化类模型及应用场景" class="headerlink" title="B. 优化类模型及应用场景"></a>B. 优化类模型及应用场景</h3><p>优化问题的三要素：</p><ul><li><strong>决策变量</strong>：通过变量的改变，获得更好的结果。 它可以理解为控制变量，或者是一些决定性的参数。</li><li><strong>目标函数</strong>：评价是否向着好的方向发展，用来评测的标准。</li><li><strong>约束</strong>：它限定了决策变量的具体的设置范围一个定义域限定。</li></ul><h4 id="1-单目标优化"><a href="#1-单目标优化" class="headerlink" title="1) 单目标优化"></a>1) 单目标优化</h4><ul><li>所评测目标只有一个，只需要根据具体的满足函数条件， 求得最值</li><li>适用场景：针对问题所建立的优化目标函数有且仅有一个</li></ul><h4 id="2-多目标优化"><a href="#2-多目标优化" class="headerlink" title="2) 多目标优化"></a>2) 多目标优化</h4><ul><li>多个评测函数的存在，而且使用不同的评测函数的解，也是不同的。也即是说：多目标优化问题中，同时存在多个最大化或是最小化 的目标函数，并且，这些目标函数并不是相互独立的，也不是相互和谐融洽 的，他们之间会存在或多或少的冲突，使得不能同时满足所有的目标函数。例如金融投资中，风险小这个优化目标和收益大这个优化目标其实是冲突的</li><li>适用场景：基于问题所构建的优化目标函数不唯一，常出现在金融投资领域， 往往要求风险更小，收益更大</li></ul><h4 id="3-线性规划"><a href="#3-线性规划" class="headerlink" title="3) 线性规划"></a>3) 线性规划</h4><ul><li>线性规划问题是要最小化或最大化一个受限于一组有限的线性 约束的线性函数</li><li>适用场景：所建立的目标函数和约束条件均为线性函数</li></ul><h4 id="4-非线性规划"><a href="#4-非线性规划" class="headerlink" title="4) 非线性规划"></a>4) 非线性规划</h4><ul><li>如果目标函数或者约束条件中至少有一个是非线性函数时，最优化问题叫做非线性规划问题 </li><li>适用场景：所建立的目标函数或约束条件存在非线性函数</li></ul><h4 id="5-整数规划"><a href="#5-整数规划" class="headerlink" title="5) 整数规划"></a>5) 整数规划</h4><ul><li>整数规划是指规划中的变量（全部或部分）限制为整数</li><li>适用场景：决策变量的取值只能为整数的情形</li></ul><h4 id="6-二次规划"><a href="#6-二次规划" class="headerlink" title="6) 二次规划"></a>6) 二次规划</h4><ul><li>二次规划问题是目标函数是二次的，而约束条件是线性的</li><li>适用场景：所建立的目标函数或约束条件均为二次函数</li></ul><h4 id="7-动态规划"><a href="#7-动态规划" class="headerlink" title="7) 动态规划"></a>7) 动态规划</h4><ul><li>基本思想是将待求解问题分解成若干个子问题，先求解子问题，然后从这 些子问题的解得到原问题的解<ul><li>背包问题：对于背包的类型，这边就做个简单的描述：<code>n</code>个物品要放 到一个背包里，背包有个总容量<code>m</code>，每个物品都有一个体积<code>w[i]</code>和价值<code>v[i]</code>， 问如何装这些物品,使得背包里放的物品价值最大。</li><li>运输问题：给定<code>m</code>个资源，分配给<code>n</code>个部门，第<code>i</code>个部门获得<code>j</code>个资源<code>a</code>有个盈利值，问如何分配这<code>m</code>个资源能使获得的盈利最大，求最大盈利</li><li>分割问题：给定一个具有$n$（$n&lt;50$）个顶点（从$1$到$n$编号）的凸多边 形，每个顶点的权均已知。问如何把这个凸多边形划分成$n-2$个互不相交的三角形，使得这些三角形顶点的权的乘积之和最小？</li></ul></li></ul><h4 id="8-图论模型"><a href="#8-图论模型" class="headerlink" title="8) 图论模型"></a>8) 图论模型</h4><ul><li>最短路模型：主要包括Dijkstra算法和Floyd算法两种，用于求解两点间的最短距离<ul><li>适用场景：路径规划问题，如修建道路、设定救援路线等</li></ul></li><li>最大流模型：通常可以把这些边想象成道路，流量就是这条道 路的车流量，容量就是道路可承受的最大的车流量<ul><li>适用场景：企业生产运输问题、交通拥堵优化问题等</li></ul></li><li>最小生成树：图的生成树是它的一颗含有其所有顶点的无环连通子图,一 幅加权图的最小生成树(MST)是它的一颗权值(树中的所有边的权值之和) 最小的生成树<ul><li>适用场景：道路规划、通讯网络规划、管道铺设、电线布设等</li></ul></li><li>排队论模型：排队论也称随机服务系统理论。它涉及的是建立一些数学模 型，以对随机发生的需求提供服务的系统预测其行为；排队论主要是对服 务系统建立数学模型，研究诸如单位时间内服务系统能够服务的顾客的平 均数、顾客平均的排队时间、排队顾客的平均数等数量规律<ul><li>适用场景：商店购货、轮船进港、病人就诊、机器等待修理等等    </li></ul></li></ul><h3 id="C-聚类模型及应用场景"><a href="#C-聚类模型及应用场景" class="headerlink" title="C. 聚类模型及应用场景"></a>C. 聚类模型及应用场景</h3><h4 id="1-K-means聚类"><a href="#1-K-means聚类" class="headerlink" title="1) K-means聚类"></a>1) K-means聚类</h4><ul><li><p>针对每个点，计算这个点距离所有中心点最近的那个中心点， 然后将这个点归为这个中心点代表的簇。一次迭代结束之后，针对每个簇类， 重新计算中心点，然后针对每个点，重新寻找距离自己最近的中心点。如此循环，直到前后两次迭代的簇类没有变化。</p></li><li><p>适用场景：与地理位置有关的分类情形，如地物类别划分、村落划区、语言分 布位置划分等</p></li></ul><h4 id="2-层次（系统）聚类"><a href="#2-层次（系统）聚类" class="headerlink" title="2) 层次（系统）聚类"></a>2) 层次（系统）聚类</h4><ul><li>层次聚类也称系统聚类法，是根据个体间距离将个体向上两两聚合，再将聚合的小群体两两聚合一直到聚为一个整体。计算所有个 体之间的距离，最相近距离的个体合体，不断合体。</li><li>适用场景：通常用于行政区域的划分或分级处理等，如根据城市经济指标划分城市发展等级、根据各类综合指标进行文明城市建设评选等</li></ul><h4 id="3-模糊聚类"><a href="#3-模糊聚类" class="headerlink" title="3) 模糊聚类"></a>3) 模糊聚类</h4><ul><li>基于模糊关系的分类法<ul><li>其中包括谱系聚类算法(又称系统聚类法)、基于等价 关系的聚类算法、基于相似关系的聚类算法和图论聚类算法等等。它是研究比较早 的一种方法，它不能适用于大数据量的情况，所以在实际中的应用并不广泛</li></ul></li><li>基于目标函数的模糊聚类算法<ul><li>该方法把聚类分析归结成一个带约束的非线性规划问题，通过优化求解获得数据集的最优模糊划分和聚类。该方法设计简单、解决问题的范围广，还可以转化为优化问题而借助经典数学的非线性规划理论求解， 并易于计算机实现。</li></ul></li><li>基于神经网络的模糊聚类算法<ul><li>它是兴起比较晚的一种算法，主要是采用竞争学习算法来指导网络的聚类过程</li></ul></li></ul><h4 id="4-神经网络分类"><a href="#4-神经网络分类" class="headerlink" title="4) 神经网络分类"></a>4) 神经网络分类</h4><ul><li>常用的分类模型为BP神经网络模型，指通过多层神经元系统建立 输入与输出间的非线性映射关系</li><li>适用场景：适合样本数量较多时的分类问题，常被用于图像地物类别划分</li></ul><h3 id="D-评价模型及应用场景"><a href="#D-评价模型及应用场景" class="headerlink" title="D. 评价模型及应用场景"></a>D. 评价模型及应用场景</h3><h4 id="1-模糊综合评价法"><a href="#1-模糊综合评价法" class="headerlink" title="1) 模糊综合评价法"></a>1) 模糊综合评价法</h4><ul><li>模糊综合评判是一种基于模糊数学的综合评价方法。该综合评价法根据模糊数学的隶属度理论把定性评价转化为定量评价，即用模糊-数学 对受到多种因素制约的事物或对象做出一个总体的评价。它具有结果清 晰，系统性强的特点，能较好地解决模糊的、难以量化的问题，适合各种非确定性问题的解决</li><li>适用场景：无具体的评价标准，通过统计问卷等形式进行的评价问题</li></ul><h4 id="2-层次分析法"><a href="#2-层次分析法" class="headerlink" title="2) 层次分析法"></a>2) 层次分析法</h4><ul><li>是指将与决策总是有关的元素分解成目标、准则、方案 等层次，在此基础之上进行定性和定量分析的决策方法</li><li>适用场景：比较适合于具有分层交错评价指标的目标系统，而且目标值 又难于定量描述的决策问题，但常用于计算指标的权重</li></ul><p>层次分析法是一种计算权重的方法，而模糊综合评价法是一种对问题进行综 合性评价的方法。进行模糊综合评价时，可使用层次分析法（AHP）对各个 因素进行权重赋值</p><h4 id="3-数据包络-DEA-分析法"><a href="#3-数据包络-DEA-分析法" class="headerlink" title="3) 数据包络(DEA)分析法"></a>3) 数据包络(DEA)分析法</h4><ul><li>它是根据多项投入指标和多项产出指标，利用线性规 划的方法，对具有可比性的同类型单位进行相对有效性评价的一种数量分析方法</li><li>适用场景：该方法一般用于评价生产效率或者综合竞争力水平等</li></ul><h4 id="4-Topsis综合评价法"><a href="#4-Topsis综合评价法" class="headerlink" title="4) Topsis综合评价法"></a>4) Topsis综合评价法</h4><ul><li>TOPSIS法根据有限个评价对象与理想化目标的接近程度进 行排序的方法，是在现有的对象中进行相对优劣的评价。TOPSIS法是一种逼近 于理想解的排序法，该方法只要求各效用函数具有单调递增（或递减）性就行。 TOPSIS法是多目标决策分析中一种常用的有效方法，又称为优劣解距离法。</li><li>适用场景：尝试用于大体系的综合评价，要求有理想化指标数据，如环境质量评价、医疗质量综合评价、国家综合实力评价等</li></ul><h4 id="5-神经网络评价"><a href="#5-神经网络评价" class="headerlink" title="5) 神经网络评价"></a>5) 神经网络评价</h4><ul><li>与前面介绍的分类较为类似，事先将各项输入样本数据与其对 应的输出评价结果建立非线性映射关系，然后对未知样本进行类别划分即可</li><li>适用场景：同样适用于大样本的综合评价，不要求指标具有理想化情形</li></ul><h3 id="E-预测类模型及应用场景"><a href="#E-预测类模型及应用场景" class="headerlink" title="E. 预测类模型及应用场景"></a>E. 预测类模型及应用场景</h3><h4 id="1-灰色预测模型"><a href="#1-灰色预测模型" class="headerlink" title="1) 灰色预测模型"></a>1) 灰色预测模型</h4><ul><li>是通过少量的、不完全的信息，建立数学模型并做出预 测的一种预测方法。是处理小样本（4个就可以）预测问题的有效工具， 而对于小样本预测问题回归和神经网络的效果都不太理想</li><li>适用条件：适用于小样本情况下的发展预测问题</li></ul><h4 id="2-微分方程预测"><a href="#2-微分方程预测" class="headerlink" title="2) 微分方程预测"></a>2) 微分方程预测</h4><ul><li>无法直接找到原始数据之间的关系，但可以找到原始数据 变化速度之间的关系，通过公式推导转化为原始数据之间的关系。微分方 程建模是数学建模的重要方法，因为许多实际问题的数学描述将导致求解 微分方程的定解问题。把形形色色的实际问题化成微分方程的定解问题</li><li>常用到的模型有：传染病模型、理想火箭模型、人口模型（Malthus模型 和Logistic模型）</li></ul><h4 id="3-回归分析预测"><a href="#3-回归分析预测" class="headerlink" title="3) 回归分析预测"></a>3) 回归分析预测</h4><ul><li>是在分析自变量和因变量之间相关关系的基础上，建立 变量之间的回归方程，并将回归方程作为预测模型</li><li>适用场景：样本数量较少，自变量与因变量间的变化具有明显的逻辑关系</li></ul><h4 id="4-马尔科夫预测"><a href="#4-马尔科夫预测" class="headerlink" title="4) 马尔科夫预测"></a>4) 马尔科夫预测</h4><ul><li>对事件的全面预测，不仅要能够指出事件发生的各种可 能结果，而且还必须给出每一种结果出现的概率，说明被预测的事件在预 测期内出现每一种结果的可能性程度。这就是关于事件发生的概率预测。 马尔可夫（Markov)预测法，就是一种关于事件发生的概率预测方法。它 是根据事件的目前状况来预测其将来各个时刻（或时期)变动状况的一种 预测方法。马尔可夫预测法是地理预测研究中重要的预测方法之一</li><li>适用场景：主要用于市场占有率的预测和销售期望利润的预测以及其他商 业领域的预测等</li></ul><h4 id="5-时间序列预测（必须掌握）"><a href="#5-时间序列预测（必须掌握）" class="headerlink" title="5) 时间序列预测（必须掌握）"></a>5) 时间序列预测（必须掌握）</h4><ul><li>时间序列是按时间顺序排列的、随时间变化且相互关联的数据序列。分析时间序 列的方法构 成数据分析的一个重要领域，即时间序列分析</li><li>时间序列预测法是一种定量分析方法，它是在时间序列变量分析的基础上，运用一定的数学 方法建立预测模型，使时间趋势向外延伸，从而预测未来市场的发展变化趋势，确定变量预 测值</li><li>常用到的模型：移动平均法、指数平滑法、差分指数平滑法、平稳时间序列模型 ：自回归 AR 、移动平均 MA 、ARMA 模型等</li><li>适用场景：常用在国民经济市场潜量预测、气象预报、水文预报、地震前兆预报、农作物病 虫灾害预报、环境污染控制、生态平衡、天文学和海洋学等方面。</li></ul><h4 id="5-神经网络预测"><a href="#5-神经网络预测" class="headerlink" title="5) 神经网络预测"></a>5) 神经网络预测</h4><ul><li>大部分时间序列预测方法均假设各变量之间是一种线性关系，这种局限性 使其在实际应用过程中很难准确地进行分析和预测，而神经网络作为一种非线性模型被用来 研究预测问题效果会更好</li><li>常使用的方法：利用前i年的数据预测第i+1年的数据</li><li>适用场景：同样适用于大样本的预测问题</li></ul><h2 id="三、数学建模常用解题方法"><a href="#三、数学建模常用解题方法" class="headerlink" title="三、数学建模常用解题方法"></a>三、数学建模常用解题方法</h2><p>数学建模常用解题方法分为三类：</p><ul><li>关键词标定匹配法</li><li>案例等效替代法</li><li>逐步推理分析法</li></ul><h3 id="A-关键词标定匹配法"><a href="#A-关键词标定匹配法" class="headerlink" title="A. 关键词标定匹配法"></a>A. 关键词标定匹配法</h3><p>将赛题对应的关键词勾画出来，然后根据其机理去匹配对应的算法</p><ul><li>数据处理：补全、剔除、选取数据、分析数据、分析走势等……</li><li>关联与分析：原因、为什么？推测、两者关系、提出方案等……</li><li>分类与判别：分类、分级、判定、隶属、划分、异常值、识别等……</li><li>评价与决策：评价、评判、提出方案、选择方案、择优、后果等……</li><li>预测与预报：未来形势、走势、预测、变化、效果、未来、影响等……</li><li>优化与控制：调度、合理安排、选址、调整、优化、最优等……</li></ul><h3 id="B-案例等效替代法简介"><a href="#B-案例等效替代法简介" class="headerlink" title="B. 案例等效替代法简介"></a>B. 案例等效替代法简介</h3><p>这类赛题主要针对工程性很强的赛题，案例等效替代法指的是 我们在进行赛题分析的时候，遇到含有关键字赛题无法找到能 够选用的模型，及模型应用条件无法嵌套，则可采用案例等效 替代法，及按照题干要求采取两种方法进行案例搜索，一种是 直接按照问题搜寻，另一种是排除问题主体的关键点搜索。通 过找寻类似的案例得到启发进行案例的延伸推广，将别人的解 题过程应用于自己的建模过程。</p><h3 id="C-逐步推理分析法"><a href="#C-逐步推理分析法" class="headerlink" title="C. 逐步推理分析法"></a>C. 逐步推理分析法</h3><p>这类赛题主要针对数学物理较强的赛题，即给出的问题非常笼 统，含有较多的物理和数学知识，常用于美赛的A题，解决这类 题目一般无固定的常用模型可以套用，也没有类似的案例进行 比对，往往需要复杂的微分方程和物理学知识来解答。逐步推 理分析法的本质就是找到问题的关键点所在，对待求结果进行 一步步反推，将题目已知条件进行量化，利用复杂的数学或物 理学知识构建相应的关系式进行求解。</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模备赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学建模题型 </tag>
            
            <tag> 数学建模算法体系 </tag>
            
            <tag> 数学建模常用解题方法 </tag>
            
            <tag> Math Modeling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-3: Neural Network Training Guidance</title>
      <link href="/2022/01/10/li-hong-yi-ml2021-spring-3-neural-network-training-manual/"/>
      <url>/2022/01/10/li-hong-yi-ml2021-spring-3-neural-network-training-manual/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是李宏毅Machine Learning 2021 Spring 第三节课General Guidance的笔记，本节课主要讲解了深度学习的训练攻略</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110183944100.png" alt="第二节课：Neural Network Training Manual"></p><h1 id="李宏毅ML2021-Spring-3-Neural-Network-Training-Guidance"><a href="#李宏毅ML2021-Spring-3-Neural-Network-Training-Guidance" class="headerlink" title="李宏毅ML2021-Spring-3: Neural Network Training Guidance"></a>李宏毅ML2021-Spring-3: Neural Network Training Guidance</h1><p>我们在前面的一节课以Youtube人数预测这个案例贯穿始终，在介绍Machine Learning / Deep Learning基础概念的同时，从线性模型入手，讲解了神经网络模型。</p><p>此外，我们还讲解了Machine Learning中训练一个模型的流程（Procedure）。我们复习一下，这三步分别是：</p><ol><li>定义模型（含参函数）</li><li>定义损失函数（根据我们的数据）</li><li>优化（训练）模型（神经网络是通过梯度下降）</li></ol><p>然而其实神经网络中进行训练的时候，直接使用梯度下降往往会出现很多的问题，导致模型训练不出来。除此以外，我们上节课其实海遗留了不少问题，例如为什么神经网络要用Deep的而不是Fat的。这些内容在本节课都会进行讲解。</p><h2 id="1-Framework-of-ML"><a href="#1-Framework-of-ML" class="headerlink" title="1. Framework of ML"></a>1. Framework of ML</h2><p>我们首先规范化一下我们的（训练）模型（神经网络）时候整体的框架。</p><p>首先，我们根据我们需要完成的任务来收集数据，所有的数据被分为两部分，<strong>一部分是包含label的训练数据</strong>，而<strong>另外一部分是不包含label的测试数据</strong>：</p><ul><li><strong>Training Data</strong>：${(x^1,\hat y^1),(x^2,\hat y^2),(x^3,\hat y^3),\cdots,(x^N,\hat y^N)}$</li><li><strong>Testing Data</strong>：${x^{N+1},x^{N+2},x^{N+3},\cdots,x^{N+M}}$</li></ul><blockquote><p>PS：其实，我们在手机数据的时候是不会划分测试数据和训练数据的，换而言之我们收集数据的时候都是$(x,\hat y)$这样的键值对。然后我们收集完数据之后再对数据进行拆分，其中一部分分为训练数据，而另外一部分分为测试数据。</p><p><strong>这就意味我们其实是有测试数据的label的</strong>。但是注意，我们要当做没有，原因会在本文的后面讲解</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110212204164.png" alt="训练和测试数据"></p><p>而具体每一个具有label的数据，我们称为一个示例（example），即$(x^i,\hat y^i),i=1,\cdots,N$。在不同的问题中，$x^i$和$y^i$的表现形式不同。例如：</p><ul><li>在语音辨识（Speech Recognition）问题中，$x^i$是输入的音频，而输出的$\hat y$是音素(Phoneme，类似于音标)</li><li>在图像识别（Image Recognition）问题中，$x^i$是输入的图片，而输出的$\hat y$是图片中的物品的名称/类别(Class)</li><li>在语者辨识（Speaker Recognition）问题中，$x^i$是输入的音频，而输出的$\hat y$是说话的人的名字</li><li>在机器翻译（Machine Translation）问题中，$x^i$是带翻译的文本，而输出的$\hat y$是目标语言的文本</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110214031998.png" alt="不通问题中x和y的形式不同"></p><p>接下来，有了训练数据和测试数据之后，我们就能够训练、测试我们的模型</p><ul><li><p>首先是训练阶段</p><ol><li>训练阶段的第一件事，就是定义出来一个含有位置参数的函数$y=f_\theta(x)$，注意，以后我们用$\theta$表示模型中的参数</li><li>接下来，我们要定义一个loss，loss是一个函数，因此有的时候又被称为loss function。Loss function的输入是模型中的参数，用于判定这组参数是好还是不好</li><li>最后一步就是求解一个Optimization的问题，即找一个$\theta^*$，能够让$L(\theta)$最小</li></ol><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110214209790.png" alt="训练阶段"></p></li><li><p>在训练阶段之后，就是测试阶段</p><ol><li><p>我们用得到的$\theta^*$来对所有的测试数据中的数据进行预测，即</p><script type="math/tex; mode=display">y^i=f_{\theta^*}(x^i), \qquad\qquad i=N+1,N+2,\cdots,N+M</script></li><li><p>接下来就可以用我们预测得到的${y^{N+1},y^{N+2},\cdots,y^{N+M}}$，例如把预测得到的结果上传到Kaggle上去（后面的课程的作业的要求）</p></li></ol></li></ul><h2 id="2-General-Guide"><a href="#2-General-Guide" class="headerlink" title="2. General Guide"></a>2. General Guide</h2><p>下面的这张图就是神经网络训练的攻略手册，可以帮助我们训练出来高精度的模型。当然适用于我们前期训练模型</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110223158424.png" alt="模型训练攻略"></p><p>整个攻略是从上到下的，因此当我们发现模型得到的精度不高，或者是模型根本没有训练起来的时候，第一步就是先检查模型在训练数据上的损失。</p><p>有人可能会问，为什么模型在测试集上的表现不好反而要先去检查训练集上的损失呢？</p><p>其实检查训练集上的损失是为了先检查模型有没有学习到东西。虽然说模型可能表现很差，但是通过这一步能看到模型训练时候的loss有没有下降，如果没有下降，那么就意味着很可能代码写错了</p><h3 id="A-Large-Loss-on-Training-Data"><a href="#A-Large-Loss-on-Training-Data" class="headerlink" title="A. Large Loss on Training Data"></a>A. Large Loss on Training Data</h3><p>我们如果检查发现，在训练集上模型的表现确实有提升，但是最终模型收敛到的loss却很大，那么此时就有两个可能，第一个是Model Bias，第二个就是Optimization的问题</p><h4 id="1-Model-Bias"><a href="#1-Model-Bias" class="headerlink" title="1. Model Bias"></a>1. Model Bias</h4><p>对于Model Bias而言，其实在上周就已经讲过了。具体而言就是我们的模型太简单，其学习能力太弱难以充分的学习当前的任务。或者说模型的潜力太小，最终开发/学习到极致的模型也无法胜任当前的任务。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110221632640.png" alt="模型训练攻略" style="zoom: 33%;"></p><p>那么到底什么是模型的学习能力/潜力呢？</p><p>举例来说，我们现在设计了一个含有参数$\theta$的模型$f_\theta(x)$，即</p><script type="math/tex; mode=display">y=f_\theta(x)</script><p>由于模型中的参数是可以变化的，而一个参数就对应一个具体的模型，例如$y=2x^2$和$y=3x^3$，这两个模型都平方模型这一类模型，但是却是两个不同的模型。</p><p>因此，我们让模型$f<em>\theta(x)$中的参数$\theta$取不同的值，就有了不同的具体的模型，例如：$f</em>\theta^1(x)$、$f<em>\theta^2(x)$、$f</em>\theta^3(x)$、$\cdots$、$f_\theta^N(x)$、$\cdots$</p><p>那么我们把这些模型当做高维（维数大于等于$len(\theta)$，因为可能存在参数更多的模型）空间中的一个点，那么我们把所有的模型集合起来，就可以得到一个模型的Set。</p><p>然而当前模型所构成Function Set太小了，无法包含到让模型损失最小的模型。换而言之，可以让Model表现最好的模型（模型由参数描述）是无法用当前模型来描述的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110224645545.png" alt="当前模型的Function Set不包含最佳的Function" style="zoom:50%;"></p><p>那么这个时候，即便是当前模型所能够描述的Function Set中最好的模型，他的Loss依然很高。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110225130533.png" alt="image-20220110225130533"></p><p>这个时候问题就类似于我们是在大海里捞针（表现最好的参数），然而大海里并没有针（当前模型并不存在全局/全模型最佳的参数）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110225344433.png" alt="大海捞针却没有针" style="zoom:50%;"></p><p>那么这个时候，我们要做的就是重新设计我们的模型，让他具有更大的潜力/更加可塑（more flexible）。所谓更加可塑，其实指的就是结构更加复杂、参数更加多、能够表达更多的模型。</p><p>这样的事情其实我们在上一节课就已经做过了，我们发现线性模型只看一天前的数据不太行，那么就让他看前56天的数据，然后觉得模型还是不太行，那么就引入Sigmoid、ReLu等函数为模型添加非线性、构成深度网络、神经网络</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110230559512.png" alt="Model Bias的解决方案：重新设计模型" style="zoom:50%;"></p><h4 id="2-Optimization"><a href="#2-Optimization" class="headerlink" title="2. Optimization"></a>2. Optimization</h4><p>在训练数据上loss大可能是由于Model Bias造成的，但并不是说所有的在训练数据上loss大就是由于Model Bias造成的，还有一种可能就是Optimization的问题。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110231923155.png" alt="Optimization的问题" style="zoom: 33%;"></p><p>所谓Optimization的问题，其实指的就是我们没有做好Optimization这一步。在我们的预期里，我们通过Optimization就能够让模型的表现得到提升，然而这都是建立在我们做好了Optimization这一步的基础山的，因此如果我们没有做好Optimization，模型的表现也是上不去的。</p><p>Optimization这一步出问题，其实由很多种可能，例如我们的学习率设的太大或者太小等等。当然，我们在上一节课其实也讲了一种Optimization中可能出现的问题，就是Local Minima的问题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110231450099.png" alt="梯度下降卡在了Local Minima上" style="zoom:33%;"></p><p>同样，用图像来形象的表示的话，就是问题的最佳的模型的参数确实可能由我们的模型来描述，然而在Gradient Descent的时候，由于某些原因（例如局部最优点），我们无法得到这个全局最优点。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110231557891.png" alt="无法得到最优值，只能得到次优值" style="zoom: 50%;"></p><p>形象的比喻，我们这个时候面临的问题就是针确实在海里，只是我们没有办法找到这根针</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110232047999.png" alt="大海捞针找不到针" style="zoom:50%;"></p><p>而对于Optimization做的不好的话，到底该怎么解决呢？</p><p>Optimization问题的Solution我们下节课再说。</p><h4 id="3-Diagnosis-between-Model-Bias-and-Optimization"><a href="#3-Diagnosis-between-Model-Bias-and-Optimization" class="headerlink" title="3. Diagnosis between Model Bias and Optimization"></a>3. Diagnosis between Model Bias and Optimization</h4><p>那么这个时候问题来了，既然模型在训练数据上的表现糟糕可能是由Model Bias造成的，也有可能是由Optimization造成的。那么在当我们真实遇到了模型在训练数据集上的表现糟糕的情况的时候，到底那个才是我们的处境？</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110232503590.png" alt="到底哪个才是我们现在所处的问题呢？" style="zoom: 33%;"></p><p>那么这个时候，判断我们所处的情况的关键就是我们的模型到底有没有足够的潜力，或者说我们的模型到底够不够flexible（可塑）？</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110233144866.png" alt="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110233055346.png" style="zoom: 33%;"></p><p>那么这个时候我们可以通过下面的几个方法来进行判断：</p><ul><li><p>通过不同的模型之间的比较来获得insight，即我们的模型是否足够的flexible</p><blockquote><p><strong>举一个通过比较或者insight的例子</strong></p><p>这个例子是来自与2015年的Paper：Residual Network中的例子。这个Paper在一开头就讲了一个故事。这个故事是说，现在针对同一个任务，训练两个基本的结构相同而层数不同的Network。一个Network是20层网络，而另外一个是56层的模型。然后把这两个模型随着训练的进行，在测试集的表现记录了下来：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110234234395.png" alt="两个模型随着训练的进行在测试数据上的表现" style="zoom: 33%;"></p><p>在2015年的时候，大家对Deep Learning了解的还不是非常透彻。人们往往都认为，模型是越深越好的。一旦出现了上面的问题，就是Overfitting的问题（关于Overfitting后面会讲）。</p><p>但是这个问题到底真的是由Overfitting造成的吗？这个不是由Overfitting造成的。虽然我们现在知道，Overfitting还要检查在训练集上的表现。</p><p>可是在2015年ResNet的文章发现，如果发生了过拟合那么就应该是56层的模型的性能应该要优于20层的模型，因为56层毕竟都已经发生了过拟合（后面会介绍Overfitting，我们这里只需要知道Overfitting的一个特征就是在训练数据上表现超乎寻常的好而在测试数据上格外的烂）</p><p>可以检查在训练数据上的表现发现即便是在训练数据上，深层的模型的表现也不好。因此，这个问题其实是20层的模型Optimization比56层的模型Optimization要容易。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110234459938.png" alt="两个模型在训练和测试数据上的表现" style="zoom: 33%;"></p><p>因此当时认为这个是Overfitting的现象，其实是由于Optimization没有做好导致的。</p><p>我们可能还有一个疑问，就是，诶，为什么说是Optimization没有做好而不是Model的Bias呢？</p><p>其实我们在上面就已经说过了，一般来说，模型的参数越多，模型就越复杂，模型就更加的flexible。</p><p>而且对于20层的模型来说，它能够做到的事情56层一定也能做到，就让前20层保持一样，后面的层全部复制前一层的输出就行了呀。因此56层的模型一定比20层的模型更加flexible。这就意味着，如果56层的模型Optimization成功的话，他的表现一定是比20层的模型要好的。</p><p>因此，这个现象不是Overfitting，也不是Model Bias，而是Optimization做的不好</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111000827744.png" alt="Optimization做的不好才是原因" style="zoom:33%;"></p></blockquote><p>所以上面这个例子给我们的启示就是（上面这个例子教会我们这样去判断是否是Optimization的问题）：</p><ol><li><p>我们首先训练一个浅层的网络，因为浅层的网络不容易Optimization失败，或者我们可以用一些其他易于训练的机器学习的模型而不是神经网络，例如决策树或者支持向量机（Support Vector Machine）。</p><p><strong>用这些比较简单的模型训练得到的结果可以作为我们的下界</strong></p></li><li><p>接下来训练一个比较深的Model、更加Flexible的Model。如果更加Flexible的Model的表现没有第一步简单的Model的表现好，那么就很有可能是发生了Optimization的问题。那么这个时候我们就需要通过一些手段来进行更加有效的Optimization。例如使用带有策略的Gradient Descent或者直接换一种优化的算法。</p><p>举例来说，之前讲的YouTube观看人数预测问题。明明四层都能做到的事情五层却做不到，那肯定就是Optimization的问题了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111002524007.png" alt="不同层网络在训练集上的表现" style="zoom: 33%;"></p></li></ol></li></ul><h3 id="B-Small-on-Training-Data-Large-on-Training-Data"><a href="#B-Small-on-Training-Data-Large-on-Training-Data" class="headerlink" title="B. Small on Training Data, Large on Training Data"></a>B. Small on Training Data, Large on Training Data</h3><p>那么接下来，假设我们通过努力，已经成功的让模型在训练数据上的表现变小了，那么我们接下来需要关注的就是模型在测试数据上的表现</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111003035078.png" alt="关注模型在测试数据上的表现" style="zoom: 33%;"></p><h4 id="1-Happy-Ending"><a href="#1-Happy-Ending" class="headerlink" title="1. Happy Ending"></a>1. Happy Ending</h4><p>如果模型在测试数据上的表现也很小，那么其实就表明我们的模型已经很OK了，可以直接用于下一步了，所以这样就是Happy Ending</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111003447758.png" alt="Happy Ending" style="zoom: 33%;"></p><h4 id="2-Small-on-Training-Data-Large-on-Testing"><a href="#2-Small-on-Training-Data-Large-on-Testing" class="headerlink" title="2. Small on Training Data, Large on Testing"></a>2. Small on Training Data, Large on Testing</h4><h5 id="A-Overfitting"><a href="#A-Overfitting" class="headerlink" title="A. Overfitting"></a>A. Overfitting</h5><p>在遇到了训练数据上loss小而测试数据上loss大，那确实有可能是遇到了Overfitting的问题。</p><p>但是要注意，Overfitting是在训练数据上的loss小而在测试数据上的loss大才可能会发生的，因此在判断发生了Overfitting这个现象之前，要先排除掉Model Bias和Optimization这两个问题。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111003930645.png" alt="遇到1Overfitting的问题" style="zoom:33%;"></p><p>那么为什么会发生Overfitting（在训练集上表现好而在测试集上表现差的）问题呢？</p><p>我们下面通过举一个极端的例子来进行说明。</p><blockquote><p><strong>极端的例子</strong></p><p>假设我们现在的训练集是${(x^1,{\hat y}^1),(x^2,{\hat y}^2),(x^3,{\hat y}^3),\cdots,(x^N,{\hat y}^N)}$</p><p>而我们通过训练之后找到了一个很废的模型，这个模型做的就是单纯记住见过的example。然后当见过的输入进来了知乎就能够给出正确的label作为预测，而没见过的输入进来了之后直接随便给答案，即</p><script type="math/tex; mode=display">y=f(x)=\begin{cases}\hat y^i, &\exist x^i = x\\random, & otherwise\end{cases}</script><p>那么这个模型其实一点用处都没有，因为完全不能用于帮助我们进行预测。可是即便是在测试数据上的loss很大，可是这个模型在测试数据上的loss却是0</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111005639000.png" alt="极端的例子" style="zoom:33%;"></p></blockquote><p>当然，上面例子是非常极端的，一般是不会存在这样的模型的。我们下面举一个更加常见的例子</p><blockquote><p><strong>常见的例子</strong></p><p>假设我们现在所有的example都是从一个二次曲线上获得的，那么我们现在的任务就是根据这有限个已知的点来预测未来给一个$x$，对应的$y$会在哪里。</p><p>那么对于我们来说，我们其实是通过有限次观测从曲线上采集得到的点，因此这个曲线的全体对于我们来说是不可见的。我们可见的只有这有限个数据点。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111005859570.png" alt="真实数据的分布" style="zoom:33%;"></p><p>那么如果我们的模型非常的Flexible，那么就可以逼近更加复杂的函数。而为了让loss最小，我们Flexible的模型其实是有可能学成下面这样的模型。在我们有观察到的地方，模型还是好好的进行了拟合，而在没有采集到的地方，模型就有FreeStyle了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111010430501.png" alt="学的太用功以至于出现了FreeStyle" style="zoom: 33%;"></p><p>而我们的测试数据也是从真实数据的分布上观测得到的，而且往往和我们的训练数据不同，那么可想而知，学出FreeStyle的模型的表现肯定不好</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111010613893.png" alt="学出了Freestyle的模型在面临Testing数据时候的表现很烂" style="zoom: 33%;"></p></blockquote><p>那么该如何解决Overfitting的问题呢？</p><p>其实有两个解决的思路：</p><ol><li><p>第一个方向就是受到上面的例子的启发，Overfitting的发生是由于我们对原始数据分布的观测存在没有观测到的区域造成的。那么很简单，我们直接对其进行观测即可。<strong>换而言之，我们收集更多的数据来限制模型发挥它的Freestyle</strong>。那么这样模型能够发挥Freestyle的地方比较少，最后还是会很接近我们数据的原始分布</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111011141469.png" alt="收集更多的数据" style="zoom:50%;"></p><p>为了要收集更多的数据，我们确实可以真的去收集数据然后来进行训练。可是这样的问题就是费时费力。</p><p>一个替代的方案就是，我们根据我们对问题、对数据的认识来创造出来一些新的数据。例如对于图像识别问题来说，我们把图像水平翻转过来，或者把猫放大，那他都是猫。这一招叫做数据增强（Data Augmentation）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111011711883.png" alt="数据增强" style="zoom:33%;"></p><p>但是我们在做Data Augmentation的时候要注意，不能随便乱进行数据增强，我们数据增强一定要有道理的。例如我们把一只猫翻过来。那么机器并不知道这只猫反过来了，反而认为猫有可能是浮在空中（毕竟机器没有学习背景、周围的环境，因此他没法发现周围的环境也反过来了），那么机器在学习的时候就会感到困惑，因为之前他学习的内容并没有说明猫可以浮在空中。因此用这样的数据来进行训练其实会降低模型的准确率，因为让他学到了错误的知识</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111011820991.png" alt="image-20220111011820991" style="zoom: 50%;"></p></li><li><p>第二个方向就是从源头探究一下为什么会发生Overfitting。Overfitting发生的原因其实是模型的太大，模型能够学习到非常复杂的函数。而在损失函数的强迫下，模型不得不学习到更加复杂的、能够拟合所有训练数据的函数。因此，另外一种方式就是通过给模型增加限制，，限制模型的潜力，避免模型学习到复杂的函数。</p><p>例如，对于上面的例子，我们somehow，通过某种方式（例如通灵），得知了模型是一个二次的曲线，即$y=a+bx+cx^2$。那么这个时候，模型能够学到的函数其实来来回回也就那么多种，因此我们的模型很有可能就会学到正确的函数</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111163712808.png" alt="在限制的作用下模型可以学到正确的函数"></p><p>而我们具体是怎么样知道这个模型就是一个二次函数的呢？其实这就依靠于我们的Domain Knowledge，或者说是先验知识。</p><p>具体来说，有哪些方法来给模型添加限制呢？具体有下面的几种：</p><ol><li>更少的参数（共享参数），对于神经网络来说就是更少的神经元</li><li>更少的feature</li><li>Early Stopping</li><li>Regularization</li><li>Dropout</li></ol><p>关于3、4、5我们下节课再讲。不过关于更少的参数我们其实可以先简单的介绍一个例子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111164307226.png" alt="对模型添加限制的手段" style="zoom:50%;"></p><blockquote><p><strong>对模型进行限制从而提升了模型表现的例子</strong></p><p>我们之前讲的网络的架构其实称为Fully-Connected Neural Network，即全连接神经网络</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110131017180.png" alt="全连接神经网络" style="zoom: 80%;"></p><p>而全连接网络其实是一个比较Flexible的model，这就意味这全连接网络的学习能力很强。与此同时带来的问题就是对全连接进行Optimization比较困难。或者说通过Optimization让全连接网络在任务上表现出色是一件比较难的事情，例如让全连接去进行图像识别就很难训练的好。</p><p>而另外一种架构的网络称为卷积神经网络（Convolutional Neural Network，CNN），这种网络非常善于图像识别。但在实际上，卷积神经网络是一种限制非常大的网络，我们后面会具体讲到，对全连接网络添加参数共享，就成为了卷积神经网络。然而卷积神经网络这种限制是针对图像的特性进行的限制。换而言之，为卷积神经网络添加的这种限制限制了全连接神经网络学习到其他任务（例如语音辨识、文本翻译等任务）对应的函数。</p><p>因此，CNN这个架构的网络能够表达的模型的集合其实是比较小的，是包含在全连接网络所能表示的集合的，如下图。然而，正是我们对全连接进行了这样的限制，提升了模型（在特定任务上）的表现。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111171451812.png" alt="CNN表示的模型包含在全连接表示的模型内" style="zoom:50%;"></p></blockquote></li></ol><p>但是要注意，我们给模型的限制并不是越多越好，如果我们给模型的限制过多，就会导致模型的能力不足，从而出现Model Bias的问题。例如对于上面的问题，我们假设Model是一个Linear的Model，那么模型其实无法学习到一个非常满意的Model，因此最终极限的loss（最优的loss）还是会很大</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111173106046.png" alt="太强的限制导致模型出现了Model Bias"></p><p>那么其实到了这里，我们会发现有一个有点矛盾的地方，那就是我们让模型边的越来越复杂，越来越Flexible，那么模型Training时候的loss其实就会变低，但是模型在Testing时候的loss反而会变高，因此我们其实是需要在模型的能力和当前任务上的精度之间做一个取舍，选择一个中庸的模型</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111173803782.png" alt="选择中庸的模型"></p><p>那么要怎么样去选择中庸的模型呢？这点我们在本文的后面：Cross Validation部分进行讲解</p><h5 id="B-Mismatch"><a href="#B-Mismatch" class="headerlink" title="B. Mismatch"></a>B. Mismatch</h5><p>另外一种导致模型在训练时候的loss小而在测试的时候loss大的情况就是mismatch。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111205023454.png" alt="Mismatch" style="zoom:33%;"></p><p>Mismatch指的就是训练和测试的数据是来自于不同的分布。例如我们训练的数据是从二次曲线上采集到的，而我们测试的数据是从三次曲线上来的。</p><p>在Mismatch的情况下，不管训练数据怎样的增加其实都没有用，因为要预测的数据的函数和学到的函数就是两码事。因此，Overfitting和Mismatch最大的区别就是对于Mismatch而言，单纯的增加训练数据没有办法提升模型的表现。</p><p>在这个时候我们就要注意我们的测试数据和训练数据的来源。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111205326197.png" alt="处理Mismatch：关注数据的来源" style="zoom: 33%;"></p><p>在绝大多数的情况下其实我们也并不会遇到Mismatch的情况。当然，现在也有不少的研究是关于如何处理Mismatch的情况。我们在未来的作业11就会专门的讲解处理Mismatch的方法。</p><p>作业11里面我们的训练图片是正常的图片，但是测试数据确实简笔画，那么模型其实不论怎么学其实都是学不好的。</p><p>当然除了作业11的情况，在作业一预测Covid19的确诊病例的时候我们如果用2020年的数据进行训练，而用2021年的数据作为预测，那么也会发生Mismatch的问题。原因也很好想，因为2020年的Covid19刚出来，人们还不是很有经验来应对Covid19，但是到了2021年，人们就有经验多了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111205751538.png" alt="作业11的Mismatch问题"></p><h2 id="3-Cross-Validation"><a href="#3-Cross-Validation" class="headerlink" title="3. Cross Validation"></a>3. Cross Validation</h2><h3 id="A-Why-not-fine-tuning-Model-on-Testing-Set"><a href="#A-Why-not-fine-tuning-Model-on-Testing-Set" class="headerlink" title="A. Why not fine-tuning Model on Testing Set?"></a>A. Why not fine-tuning Model on Testing Set?</h3><p>接上面Overfitting部分，我们说道要选出来一个中庸的模型</p><p>其实选择中庸的模型的根本目的还是选出来在Testing数据上表现最好的模型。那我们其实可能想到的一个方法，就是不断地做在Testing上跑模型、计算分数，然后选择出来在Testing上表现最好的模型。例如在Kaggle上（老师的作业有一部分是以Kaggle），计算分数是根据在Testing的数据上计算得到的。而所有的Testing的数据又被分为两部分，一部分是Private的Testing数据，另外一部分是Public的Testing数据。</p><p>对应到我们真实的场景中，我们收集的数据被分成了两部分，一部分是Training Set，另外一部分就是测试数据，对影Public的Testing Set。而在我们的模型部署上线后见到的真实的业务数据就是Private的Testing Set。</p><p>那么假设我们现在有三个模型，这三个模型我们并不知道用哪个好，然后我们就在Public的Testing上来进行挑选。将选好的模型用于Private的测试，得到最终的分数，那么最终的分数其实有可能会更低。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111174712562.png" alt="用Private的测试数据来选择模型" style="zoom: 33%;"></p><p>具体的原因，我们同样用一个非常极限的例子来阐述。模型同样只是记住数据，而对没有见过的数据随机给出结果。那么由于所有的模型都没有见过Testing的数据，而有可能编号56789的模型给出的Random的结果更好，然后我们用这个模型选为最终的模型，在Public Testing上测试。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111175123278.png" alt="一个极限的例子" style="zoom:33%;"></p><p>而由于在Private的测试数据上计算最终分数是在ddl结束之后，因此很有可能发生的事情在Public上表现好的模型在Private上表现糟糕</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111175506687.png" alt="模型提交截止日期后心态崩了" style="zoom: 33%;"></p><p>那么这个原因又是为什么呢？</p><p>这个原因其实就是我们过拟合了测试数据。因为测试数据毕竟也是我们收集到的有限数据，因此我们不断地用测试数据来进行测试的话，那么其实就相当于我们在不选选择在我们收集到的Testing的数据上表现良好的模型。然而真实的数据是无穷的，我们只看模型在Testing数据上的表现，就和我们在训练阶段只看Training数据上的表现一样，发生了过拟合。</p><p>因此我们其实是不能够用Testing的数据来帮助我们选择模型的。</p><h3 id="B-Fine-tuning-on-Validation-Set"><a href="#B-Fine-tuning-on-Validation-Set" class="headerlink" title="B. Fine-tuning on Validation Set"></a>B. Fine-tuning on Validation Set</h3><p>那么我们既然不能够用Testing Set来进行调试，那么我们该怎么样来挑选模型呢？这个方法就是进行Validation，即对模型进行验证。</p><p>具体而言，就是我们把训练数据再拆成两部分，随机取其中的10%作为Validation Set，剩余的90%作为Training Set。然后我们所有的模型用Validation Set来测试其好坏。我们根据在Validation Set上的表现，选出最好的模型，然后在Testing Set上进行验证。这样做的话，我们如果进行大量的调试的话，过拟合的其实是Validation Set。那么这个时候，使用Testing Set就可以真实的测试出来我们模型的好坏了。此时，对于我们采集的Testing Set还是我们模型部署上线后业务中真实的数据对于模型来说都是没有见过的数据，因此表现会非常稳定。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111201016255.png" alt="使用Validation数据来测试模型" style="zoom: 33%;"></p><p>当然，由于我们还是有Public的Testing数据因此我们在见到在Public的Testing Set上的表现后还是忍不住的会去调试。这个时候就建议不要调试太多次，否则最终还是会过拟合Public Testing Set。最好的其实就是只看Validation Set的结果，而不去理会Public上的数据</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111201734188.png" alt="不建议用Public Testing Set来调参" style="zoom:33%;"></p><h3 id="C-N-fold-Cross-Validation"><a href="#C-N-fold-Cross-Validation" class="headerlink" title="C. N-fold Cross Validation"></a>C. N-fold Cross Validation</h3><p>我们上面介绍了为什么要做Cross Validation以及怎么做Cross Validation。那么就存在一个问题，因为Validation Set的选取是依赖于我们的选法的。因此我们如果在选在Validation Set的时候存在偏差，那么就有可能导致我们Validation的结果是偏低或者偏高的。</p><p>换而言之，可能会由于我们的选法导致选出来了奇怪的Validation Set，进而导致无法真实的反映模型的性能，因此模型最后的性能可能很差。因此，为了处理这种问题，我们就可以用N-fold Cross Validation。</p><p>N-fold Cross Validation指的是把训练集切成N等份。然后取其中的一份作为Validation Set，剩下的作为Training Set，然后训练得到结果。然后更换Validation Set，继续训练然后得到结果，这个过程重复N次，得到N个结果。最后N个结果平均就得到了最终的结果。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111202859393.png" alt="使用N-fold Cross Validation" style="zoom:33%;"></p><h2 id="4-上周的结果"><a href="#4-上周的结果" class="headerlink" title="4. 上周的结果"></a>4. 上周的结果</h2><p>最后在上节课结束的时候，老师让同学们选择模型来预测这个周的视频的观看人数。最后大家选择了三层的模型。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111203303645.png" alt="预测这周的视频观看人数" style="zoom: 33%;"></p><p>那么最后的结果如下，可以看到，大家上周猛点老师的YouTube，让模型的表现烂掉<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220111203825585.png" alt="机器预测的很烂" style="zoom:50%;"></p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-2: Introduction of Machine/Deep Learning</title>
      <link href="/2022/01/08/li-hong-yi-ml2021-spring-2-introduction-of-deeplearning-machinelearning/"/>
      <url>/2022/01/08/li-hong-yi-ml2021-spring-2-introduction-of-deeplearning-machinelearning/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是李宏毅Machine Learning 2021 Spring 第二节课Introduction of Machine / Deep Learning的笔记，本节课主要结合案例讲解了机器学习/深度学习的基本概念</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109135954313.png" alt="第二节课：Introduction of Machine/Deep Learning"></p><h1 id="李宏毅ML2021-Spring-2-Introduction-of-Machine-Deep-Learning"><a href="#李宏毅ML2021-Spring-2-Introduction-of-Machine-Deep-Learning" class="headerlink" title="李宏毅ML2021-Spring-2: Introduction of Machine/Deep Learning"></a>李宏毅ML2021-Spring-2: Introduction of Machine/Deep Learning</h1><h2 id="1-What-is-Machine-Learning"><a href="#1-What-is-Machine-Learning" class="headerlink" title="1. What is Machine Learning"></a>1. What is Machine Learning</h2><p>到底什么是机器学习呢？</p><p>从一个角度来说，机器学习其实就是让机器去找函数，例如：</p><ul><li>对于语音识别来说，函数的输入是一段语音信号而输出是这段语音信号对应的文本</li><li>对于图像识别来说，输入是一张图片，而输出是一段描述图片类别的文本</li><li>对于下围棋来说，函数的输入是当前棋盘上的状态，输出是机器下一步落子的位置</li></ul><p>从上面的例子我们能够想象得到这些函数会非常非常复杂，人类没有办法写出他们的解析式，因此我们预期希望机器能够自动寻找这个函数</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109140806853.png" alt="机器学习等价于寻找函数" style="zoom:50%;"></p><h2 id="2-Different-types-of-Functions"><a href="#2-Different-types-of-Functions" class="headerlink" title="2. Different types of Functions"></a>2. Different types of Functions</h2><p>  因为要找的函数不同，机器学习可以分为不同的类别。下面就是一些专有的名词：</p><ul><li><p>Regression: 机器需要寻找的函数的输出是一个（连续的）数值</p><p>例如，让机器预测未来的PM2.5的数值。函数的输出是明天中午的PM2.5的指数，而输入则是今天可能影响到明天PM2.5数值的因素的值，例如今天的PM2.5、今天的问题、今天的臭氧浓度等等。像这样，寻找输出是一个连续数值的函数的任务就是Regression的任务</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109141428084.png" alt="Regression任务" style="zoom:50%;"></p></li><li><p>Classification: 机器的输出是多个选项中正确的一个（类别） ，这些选项都是人类提前给定的</p><p>例如，让机器判断一封邮件是不是垃圾邮件。那么机器的输入就是这封电子邮件，而输出就是Yes或者No两个选项中的一个。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109142452666.png" alt="Classification任务" style="zoom:50%;"></p><p>当然，Classification任务的选线可以不止有两个，像上面这样只有两个选项的Classification任务是Binary的。而对于下围棋来说，我们如果把棋盘上$19\times19$个可以落子的位置当做$19\times19$个类的话，那么让机器下围棋这个任务就是一个有$19\times19$的选择题，让机器从$19\times19$个选项中选出正确的选项（下一步要下的位置）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109142920372.png" alt="Classification任务：多分类" style="zoom:50%;"></p></li></ul><p>然而Classification和Regression都只是机器学习任务中的一小部分，还有一类很大的问题，即Structure Learning</p><ul><li>Structured Learning: 机器不只需要做选择题、产生一个数字，还要去产生一个有结构的物体。例如让机器去画一张画、写一篇文章。形象的理解就是让机器学会创造</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109143127219.png" alt="Classification和Regression都只是巨大世界的一小部分" style="zoom: 80%;"></p><h2 id="3-Case-Study-How-does-machine-find-a-function"><a href="#3-Case-Study-How-does-machine-find-a-function" class="headerlink" title="3. Case Study: How does machine find a function?"></a>3. Case Study: How does machine find a function?</h2><h3 id="A-Background"><a href="#A-Background" class="headerlink" title="A. Background"></a>A. Background</h3><p>自从2014年开始上课以来，李宏毅老师就会把自己的课程视频上传到YouTube频道上。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109143614678.png" alt="李宏毅老师的YouTube频道" style="zoom:50%;"></p><p>而对于一个YouTuber来说，他最在意的就是这个频道的流量有多少。因为对于一个全职Youtuber来说，流量决定了一个YouTuber的收益有多少。</p><p>那么我们就想，能否找到一个函数输入是YouTub后台的数据，而输出是未来的点阅率</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109144001795.png" alt="希望找到的函数" style="zoom:50%;"></p><h3 id="B-How-to-find-the-function"><a href="#B-How-to-find-the-function" class="headerlink" title="B. How to find the function?"></a>B. How to find the function?</h3><p>接下来我们就要问该怎么样寻找这个输入是今天的数据，输出是未来数据的函数呢？</p><p>那么对于机器学习来说，整个过程分为三步</p><ol><li><p><strong>第一个步骤就是写出一个带有未知参数的函数解析式</strong>。简单来说就是我们先猜测一下这个函数$f$的到底长什么样子。</p><p>那么我们先猜测一下，这个函数可能是下面这样</p><script type="math/tex; mode=display">y=b+wx_1</script><p>其中$y$是明天的观看人数，例如2月26号的观看人数，而$x_1$是今天的观看人数，例如2月25号的观看人数；$b$和$w$都是未知的参数，后面我们准备让机器学习的就是这两个未知的参数</p><p>那么我们为什么猜测这个函数会是$y=b+wx_1$这个样子呢？其实这个猜测是来自于我们先前对这个问题的理解，即我们的<strong>domain knowledge</strong>。而常听有人会说做机器学习需要一些domain knowledge，那其实domain knowledge的左右就是帮助我们写出来这个函数解析式。考虑到在真实的一个神经网络中，模型就是我们需要找的一个函数，因此domain knowledge的作用就是指导我们该如何设计网络。</p><p>对于上面的问题来说，我们的domain knowledge就是明天的观看人数应该会和昨天的人数有关。虽然有关但又不是相同，因此我们就乘以一个数字在加上一个数字 。而<strong>我们猜测得到的带有未知参数的函数就称为我们的Model</strong></p><p>我们的猜测是基于我们现有的认识（现有的Domain Knowledge）提出的，而由于我们的认知是受限的，我们的模型又是在当下的认知下提出的，因此可能不对，或者说表现不佳。那么未来随着我们对问题研究的深入，我们对问题的认识越发深刻，我们就可以根绝我们更加完善、正确的Domain Knowledge来指导我们修改模型。</p><p>例如明天的观看次数是不是有可能和过去几天都有关系？也即今天一天的观看人数无法完全决定明天的观看人数。当然这需要我们对问题进行探索，验证当前的Domain Knowledge才行。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109144812145.png" alt="第一步：根据Domain Knowledge写出含参函数解析式" style="zoom:50%;"></p></li><li><p>定义一个Loss。Loss其实也是一个函数，这个函数的输入是我们函数的参数，即</p><script type="math/tex; mode=display">L=L(b,w)</script><p>而Loss这个函数输出的值就是值当前的参数的好坏，好坏的衡量可以用一个数值来描述（有点模糊数学隶属度的意思）。</p><p>这样说比较抽象，我们举一个具体的例子。假设，我们现在让上模型中的参数$b=0.5k,w=1$，那么我们的模型就变成了</p><script type="math/tex; mode=display">b=0.5k,w=1 \rightarrow y=0.5k+x_1</script><p>那么上面$y=0.5k+x_1$这个模型到底有多好呢？这就是Loss来衡量的。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109151732346.png" alt="Loss衡量模型有多好" style="zoom:50%;"></p><p>而要衡量Loss就要从训练资料来入手。假设我们现在的输入的数据是从2017年1月1日到2020年12月31日的观看数据。那么我们就可以通过下面的方式来计算Loss。</p><p>我们把2017年1月1日的观看人数带入到模型中去，计算得到模型预测的2017年1月2日观看的人数为5.3k，接下来我们用模型预测的结果和真实的值来进行比较，计算得到一个误差$e_1$。<strong>这个真实的值就称为label</strong>。当然误差计算的方式不止一种，我们这里就去绝对值，即$e_1=|y-\hat y|=0.4k$</p><p>当然，我们现在有的数据不止有1月1日这一天，我们也可以用1月2日的值预测1月3日的值，然后计算$e_2$。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109151755049.png" alt="Loss衡量模型的好坏-1" style="zoom:50%;"></p><p>同样的方法，为我们可以算到三年来每一天预测的误差。然后我们把这三年的误差加起来取平均，就得到的了模型在所有数据上的表现。而这个平均的Loss越大，就表明模型的表现越差。</p><p>此外，计算Loss的方法不止一种，我们上面是对绝对值取平均，因此称为Mean Absolute Error（MAE），此外还有Mean Square Error（MSE）的Loss</p><p>我们这个任务很明显是一个Regression的任务，而对于Classification的任务，我们的loss function就可以取Cross-Ectropy Loss</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109152002306.png" alt="Loss衡量模型的好坏-2" style="zoom:50%;"></p><p>对于$y=b+wx_1$这个模型，我们可以取不同的$w$和$b$计算得到一个loss surface，下面就是这个模型用真实的数据计算得到的Error Surface。越偏红色系Loss就越大，而越偏蓝色系Loss就越小。绘制的线是等高线。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109152855407.png" alt="image-20220109152855407" style="zoom:50%;"></p></li><li><p>机器学习的第三步就是Optimization问题，即找到让模型的Loss最小的参数。对于上面的问题，我们要找的就是让模型loss最小的$w$和$b$，将其记为$w^*$和$b^*$，那么优化这一步就是</p><script type="math/tex; mode=display">w^*,b^*=arg\min_{w,b} L</script><p>在数学上求解优化问题有很多方法，我们这里只讲Gradient Descent这一种方法。为了简单起见，我们线假设$b$不动的情况下，寻找让Loss最小的$w$</p><p>那么$w$取不同的值的时候，就会得到一条Loss曲线。那么我们的目的就是找到这个loss曲线中最低的那一个点。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109153602769.png" alt="b不变的情况下w的loss曲线" style="zoom:50%;"></p><p>Gradient Descent的步骤如下：</p><ol><li><p>（随机）选择一个初始值$w^0$。注意，现在确实有研究怎么样选择这个初始值会更好，但是我们这里先不关注这些，即假装不存在这些选择初始值的方法，我们就是随机选择一个初始值。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109154027659.png" alt="随机初始一个值" style="zoom:50%;"></p></li><li><p>接下来我们计算Loss对w的微分$\frac{\partial L}{\partial w}|_{w=w^0}$ ，即曲线的斜率</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109153945061.png" alt="计算微分" style="zoom:50%;"></p></li><li><p>如果曲线的斜率是负的，那就表示Loss曲线左边高右边低；反之如果曲线的斜率是正的，那就表示Loss曲线右边高左边低。为了能够达到较低的Loss，我们的模型就应该往Loss曲线上低的地方去。 </p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109155244574.png" alt="向梯度较小的方向前进" style="zoom: 33%;"></p><p>那在前进的时候就会有一个问题，就是到底该前进（下降）多少。由于我们无法控制求导得到的值的大小，因此我们引入一个参数$\eta$来控制下降的多少。这个参数$\eta$称为学习率。由于$\eta$使我们事先设定的，机器没有办法学习这样的参数，因此我们称这些需要自己设定的参数为<strong>超参数</strong>，Hyperparameter</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109161600158.png" alt="梯度下降" style="zoom: 33%;"></p><p>接下来我们要做的事情，就是重复梯度下降的过程，不断地更新$w$的值。直到最后求到的梯度为0，这样无论$\eta$怎样的变都没有办法继续下降。</p><p>然而使用梯度下降有一个很大的问题就是我们没有找到真正最好的解。我们只会找到一次次好的值。我们称全局最好的值为global minima而局部最小的值为local minima。</p><p>因此就会有人说，深度学习使用梯度下降的一个缺点就是会卡在Local Minima。当然，现在有一些研究就是对梯度下降进行了优化，使得其具有避免卡在local minima的能力</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109161732671.png" alt="Gradient Descent卡在local minima" style="zoom:33%;"></p><p>上面我们是只给出了单变量$w$的优化，下面我们给出两个变量的优化</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109162311503.png" alt="两个变量的优化" style="zoom: 33%;"></p><p>在刚才的loss surface上，我们整个的优化过程为</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109162523548.png" alt="Loss Surface上的优化"></p></li></ol></li></ol><p>最后通过上面的三步：</p><ol><li>根据Domain Knowledge猜测函数的形式（构建模型）</li><li>定义loss function</li><li>利用Gradient Descent进行优化</li></ol><p>我们就找到了最佳的函数。这三步就像把大象放进冰箱里去一样。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109163001969.png" alt="image-20220109163001969"></p><p>最后我们需要注意的是，在上面的这个case中，我们的loss的最佳值是0，而模型其实训练到最后都没有达到最佳的loss，这个时候其实就是我们的模型的极限只能到这里了，这就是我们 $y=b+wx_1$这个model 的 bias。想要进一步的提升我们的模型，就需要通过我们的Domain Knowledge来设计更好地和函数。</p><h3 id="C-Training-and-Testing"><a href="#C-Training-and-Testing" class="headerlink" title="C. Training and Testing"></a>C. Training and Testing</h3><p>我们前面的三步加在一起，称为Training。在Training阶段我们通过训练得到了最优的解。</p><p>然而有一个问题就是这些解真的是最优解么？答案其实并不是。因为我们现在的阶段是Training阶段，我们其实是在已经知道答案的数据上计算loss。我们这里只是在自嗨而已，我们假装不知道第二天的观看次数然后预测完了之后进行计算。</p><p>而我们真正关心的，应该是在我们不知道答案的数据上，模型也能给出这么好的结果。因此我们接下来要做的，就是用这个函数真的来进行预测。即我们在2020年末用新的数据来预测2021年的观看人数。最后，真实带入进去计算之后得到的在真实的不知道答案的数据上，跑下来的结果是Loss等于0.58</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109163417888.png" alt="Training阶段"></p><h2 id="4-Linear-Models"><a href="#4-Linear-Models" class="headerlink" title="4. Linear Models"></a>4. Linear Models</h2><p>正如前面所说，我们的模型在训练阶段得到了模型之后要在测试阶段用从来没有见过的数据（不在测试集中的数据）验证一下看看模型的效果如何。那么上面的线性模型跑下来的结果就如下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109164043776.png" alt="线性模型的预测额真实值"></p><p>每天观看的矢量基本上就在4~5k左右，而预测的误差达到了0.58k，即平均每天差了600多人次，误差大概20%左右。</p><p>此外，我们可以看到，蓝色的线基本上就是红色的线向右平移过去了而已。这就意味着机器的预测基本上就是把前一天的拿来作为第二天的预测。</p><p>此外，从红色的真实曲线上，我们其实也能够从中得到一些新的“知识“：</p><ul><li>观看的人数的涨跌具有周期性。每个七天都会有两天观看人数很低。这两天对应的就是周五和周六。周末毕竟大家都不想学习，所以已能够理解</li></ul><p>因此在我们通过对原始数据的观察之后，我们有了新的Domain Knowledge，因此根据新的Domain Knowledge，我们向能不能让模型每次预测下一天的时候都会看看前面几天的数据？这样的话模型就有可能学到当前是周几，然后就会有更好的表现。</p><p>退一万步来讲，模型直接把前七天的数据复制过来作为预测也是未尝不可的，也许会预测的更准说不定。</p><p>因此，我们现在新的模型如下</p><script type="math/tex; mode=display">y=b+\sum_{j=1}^7w_jx_j</script><p>其中，$j$表示几天前。</p><p>那么新的模型训练之后在预测集上进行预测，确实发现我们的性能有了不错的提升</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109185737315.png" alt="考虑前7天和前1天的模型性能对比" style="zoom:50%;"></p><p>由于我们考虑了前七天的数据，因此我们会有七个$w_j$的值，计算下来具体的结果如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109190112726.png" alt="7天模型的所有参数的值" style="zoom:50%;"></p><p>类似的，我们就想模型既然看了前七天的数据，他的性能有所提升，那么如果模型看了前一个月的数据呢？因此，我们可以修改我们的模型为</p><script type="math/tex; mode=display">y=b+\sum_{j=1}^{28}w_jx_j</script><p>最后训练下来的结果，确实看了前一个月数据的模型的性能还会有所提升</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109190621320.png" alt="看了一个月数据的模型" style="zoom:50%;"></p><p>我们更进一步，让模型看一下前两个月的数据，即</p><script type="math/tex; mode=display">y=b+\sum_{j=1}^{56}w_jx_j</script><p>可是这个时候尽管在训练集上模型的精度有所提升，但是在没有见过的数据（测试集）上，模型的精度并没有提升</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109211728804.png" alt="看了两个月数据的模型" style="zoom:50%;"></p><p>那么这就意味着，考虑天数的这个模型已经到了其极限了。</p><p>上面的，给feature直接乘以一个数值然后再加上一个数值的模型，我们称为Linear Model</p><h2 id="5-From-Linear-Model-to-New-Model"><a href="#5-From-Linear-Model-to-New-Model" class="headerlink" title="5. From Linear Model to New Model"></a>5. From Linear Model to New Model</h2><h3 id="A-Limited-Linear-Model"><a href="#A-Limited-Linear-Model" class="headerlink" title="A. Limited Linear Model"></a>A. Limited Linear Model</h3><p>在上面，我们其实已经将Linear的Model发挥到了极限。然而即便如此，每天还是有500多人数的预测的误差，因此我们就像能不能进一步提升我们的模型。</p><p>一个合理的质疑就是Linear的Model是不是太简单了？</p><p>为什么这样说呢？我们其实可以想象得到，$x_1$和$y$之间可能具有复杂的关系，例如下图的红线。而Linear的Model不管怎么样的改变$w$和$b$，都只能改变直线的倾斜程度和与$y$轴的截距，无法从根本上改变线型。即第二天的观看人数一定前一天的观看人数越多，第二天的观看人数越多/少。</p><p>然而就像红色的线，有可能前一天看得人多过了某一个程度之后，第二天看的人就越少。然而对于Linear的Model而言，不管怎么样的改变$w$和$b$，都无法产生红色的线。</p><p><strong>因此Linear的Model有很大的limitation</strong>。这种<strong>来自于Model的限制，称为Model的Bias</strong>。即Model能力的上限。</p><p>为此，我们就需要一个更加有弹性的，上限更高的一个Model。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109212237817.png" alt="Linear Model具有非常大的Model Bias" style="zoom:50%;"></p><h3 id="B-Synthesis-of-Piecewise-Curve"><a href="#B-Synthesis-of-Piecewise-Curve" class="headerlink" title="B. Synthesis of Piecewise-Curve"></a>B. Synthesis of Piecewise-Curve</h3><p>为了产生红色这样的曲线，我们其实可以用一个常数再加上一群不同的蓝色的函数来得到上面红色的曲线。蓝色的函数在输入的值很大或者很小的时候都是一个常数，只有值在中间恰好的时候是Slope。</p><p>下面蓝色的函数其实有自己专有的名字，但是我们现在先称呼他为一个“蓝方 ”</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109213739995.png" alt="使用蓝方来合成红方" style="zoom:50%;"></p><p>那么首先这个常数项，我们可以通过红方和$y$轴的交点获得</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109214104095.png" alt="获得常数项" style="zoom:50%;"></p><p>那么要怎么样加上蓝方才能够得到红方呢？我们首先可以这样加：我们让1号蓝方的slope的起点设在红方的第一个拐点，终点设在红方的第二个拐点，并且保持坡度一样。那么这样，1号、2号蓝方相加，就可以得到红方第二个拐点前的部分</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109214211825.png" alt="合成第一段红方" style="zoom:50%;"></p><p>接下来如法炮制，加上第二个蓝方，就可以得到红方的第二段曲线</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109214525965.png" alt="合成红方第二段曲线" style="zoom:50%;"></p><p>接下来，红方的最后一段，就用第三个蓝方来合成</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109214634948.png" alt="合成整个红方" style="zoom:50%;"></p><p>最后，我们把0、1、2、3个蓝方相加，就可以得到红方。</p><p>其实对于所有的Piecewise的Cureve，都能够通过蓝方来合成，例如下面的一些Piecewise的红方，只是不同的Piecewise的红方需要不同的数量、不同形状的蓝方。通常而言，越复杂的Piecewise的红方需要的蓝方就越多</p><blockquote><p>Piecewise的curve指的是由线段所组成的Curve</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109215345481.png" alt="不同数量、形状的蓝方可以合成任意的Piecewise的红方" style="zoom:50%;"></p><h3 id="C-Beyond-Piecewise-Curve"><a href="#C-Beyond-Piecewise-Curve" class="headerlink" title="C. Beyond Piecewise Curve"></a>C. Beyond Piecewise Curve</h3><p>在我们日常中，我们其实更常见的函数并不是Piecewise的曲线，而是光滑的、没有间断点的函数，例如下面的函数。但是我们的蓝方函数都是合成有间断点的Piecewise的曲线。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109220451867.png" alt="更常见的函数" style="zoom: 80%;"></p><p>其实问题也不大，我们主需要在连续的光滑曲线上取有点即可，只要我们取的点越多，就越接近原来的光滑函数，拟合的结果就越好。</p><p>因此，只要我们取的点够多、取的点位置适当，我们就可以逼近这条不是Piecewise的曲线。因此，我们实际上可以用足够多的蓝方来拟合任意的曲线</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110002728915.png" alt="在不是Piecewise的曲线上取点" style="zoom: 50%;"></p><h3 id="D-From-Hard-to-Soft"><a href="#D-From-Hard-to-Soft" class="headerlink" title="D. From Hard to Soft"></a>D. From Hard to Soft</h3><p>我们就是要写出来蓝方的表达式。因为上面的蓝方我们给的是分段的函数，并且由于在拟合的时候不同的蓝方需要的开始转折的$x$的不同，因此比较难写出来蓝方的表达式。而且在计算的时候由于分段会导致条件比较，因此就是用一条曲线来逼近、表示蓝方。</p><p>用于逼近蓝方的曲线就叫做$Sigmoid$函数，其表达式如下</p><script type="math/tex; mode=display">y=c\frac 1{1+e^{-(b+wx_1)}}=csigmoid(b+wx_1)</script><p>Sigmoid和蓝方非常相近，在$x$很大或者很小的时候，$y$都是常数，在中间是非线性的上升。</p><p>Sigmoid如果要翻译中文，可以是S型曲线。</p><p>其实在历史上，是先出现了Sigmoid函数才出现了我们上面的蓝方，不过为了方便讲解，因此我们先介绍的蓝方再介绍的Sigmoid函数。所以上面一直再说的蓝方，其实称为Hard Sigmoid</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110101912902.png" alt="用Sigmoid拟合蓝方" style="zoom:67%;"></p><p>那么还有一个问题，就是我们上面的蓝方的slope是可以左右平移的，那么Sigmoid又该如何去平移呢？</p><p>事实上，我们改变Sigmoid中的$c$、$b$、$w$即可制造出不同的Sigmoid函数。而有了不同的Sigmoid函数之后，我们叠加起来就可以去逼近不同的Piecewise的曲线，而Piecewise的曲线又可以去逼近各种各样光滑的曲线</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110103006819.png" alt="不同的Sigmoid函数" style="zoom:50%;"></p><p>所以对于上面的红方，我们就可以用几个Sigmoid来逼近</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110103451654.png" alt="使用Sigmoid逼近红方" style="zoom:50%;"></p><h3 id="E-From-Linear-to-New-Model"><a href="#E-From-Linear-to-New-Model" class="headerlink" title="E. From Linear to New Model"></a>E. From Linear to New Model</h3><p>总结一下上面，由于Linear Model存在非常大的Model Bias，而我们首先通过Hard Sigmoid来拟合任意的函数，最后用Sigmoid来拟合Hard Sigmoid。所以我们现在就获得了一个更加flexible的model </p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110103722736.png" alt="从Linear到Sigmoid"></p><p>那么其实，$y=b+wx_1$这个并不是我们表现最好的Linear Model，上面我们的最好的Linear Model是看多个feature的Linear Model，即</p><script type="math/tex; mode=display">y=b+\sum_{j=1}^nw_jx_j</script><p>那么我们现在要把这个Linear的Model扩展成Sigmoid这种Model的话，只需要把Sigmoid里面的东西换掉即可，则式子如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110105012755.png" alt="扩展看多个Feature的Linear Model"></p><p>上面的这个如果看起来头痛的话，我们用更直观的方式把他来画出来。我们现在先假设$j=1,2,3$，即只有三个Feature，模型只会看前三天的观看人数。我们还假设$i=1,2,3$，即我们用三个Sigmoid Function来拟合曲线。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110105431002.png" alt="Model的表达式"></p><p>那么我们首先先画出来输入</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110105307581.png" alt="输入只有前三天的人数"></p><p>然后我们再画出来三个Sigmoid函数，一个黑色的圆圈表示一个Sigmoid函数，由于我们有三个Sigmoid函数，因此就有三个黑色的圆圈</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110105909018.png" alt="三个Sigmoid函数"></p><p>画完了基础的元素之后，我们就开始画出来运算的步骤。</p><p>我们首先看要怎么样画出来Sigmoid内部括号里的东西。括号里的东西就是给每个$x$乘以一个数字$w$，然后再把三者相加，最后加一个$b$，所以我们下面这样画括号内部的东西</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110110548596.png" alt="画出括号内的东西"></p><p>同理，我们画出来第二个、第三个Sigmoid函数，我们就不写出来所有的$w$了，那么最后画下来的结果如下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110111044131.png" alt="画完三个Sigmoid之后的函数"></p><p>为了简单期间，我们把每个括号内计算的结果记为$r$，那么最后的结果就是</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110111305968.png" alt="最终的计算结果"></p><p>我们把上面三个括号的式子向量化，用矩阵乘法的形式来表达，就有向量$\vec x$乘以一个矩阵$W$在加上一个向量$\vec b$就得到了一个向量$\vec r$</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110111423642.png" alt="矩阵乘法表示的括号内的运算" style="zoom:50%;"></p><p>所以括号里干事事情就是下面的图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110111758709.png" alt="三个Sigmoid括号内计算的示意" style="zoom:67%;"></p><p>接下来，赛算完括号里的东西后，要通过Sigmoid函数，所以三个$r$要分别通过三个Sigmoid函数。我们同样简写一下，用一个小写的希腊字母sigma来表示Sigmoid函数，即</p><script type="math/tex; mode=display">\begin{cases}a_1=sigmiod(r_1)\\a_2=sigmiod(r_2)\\a_3=sigmiod(r_3)\end{cases}\Leftrightarrow\vec a = \sigma(\vec r)</script><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110112031971.png" alt="通过三个Sigmoid函数" style="zoom:50%;"></p><p>我们最后一步，就是把三个$a$再用一个Linear Model，即乘以权重再相加，用矩阵表示，就是</p><script type="math/tex; mode=display">y=\vec b + {\vec c^T} \vec a</script><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110113027230.png" alt="最后一步" style="zoom:50%;"></p><p>所以我们上面一连串的运算，用矩阵表示出来就是</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110113246168.png" alt="矩阵运算表示的模型" style="zoom:50%;"></p><p>最后，我们用一个式子表示就是</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110113410265.png" alt="矩阵表示的模型" style="zoom:50%;"></p><p>上面就是我们得到的New Model</p><h2 id="6-New-Model"><a href="#6-New-Model" class="headerlink" title="6. New Model"></a>6. New Model</h2><p>上面我们通过Linear的Model不断深入，得到了New Model。那么我们下面就将聚焦于New Model的优化</p><h3 id="A-Model-Parameter-Function-with-Unknow-Parameter"><a href="#A-Model-Parameter-Function-with-Unknow-Parameter" class="headerlink" title="A. Model Parameter / Function with Unknow Parameter"></a>A. Model Parameter / Function with Unknow Parameter</h3><p>我们在前面说过，机器学习的模型其实都是带有参数的函数，New Model也不例外，例如我们上边的New Model</p><script type="math/tex; mode=display">y=b+c^T\sigma(b+Wx)</script><p>我们先重新定义一下符号。</p><p>在上式中，$x$称为feature，而所有未知的参数是$W$、$b$、$c$、$b$。注意我们有两个$b$，一个$b$是向量，另外一个是标量</p><p>由于$x$是feature，是一开始就给定的，因此我们实际上需要让机器去寻找的参数就是$W$、$b$、$c$、$b$</p><p>我们把这四个未知的参数拿出来，拉直，拼成一个很长的向量，我们用$\theta$来表示这个向量，如下图。</p><p>那么$\theta$中有一些值来自于W，有一些值来自于$b$，还有一些来自于$c$，我们这里就不去管他们了，把模型中所有未知的参数统称为模型的参数$\theta$</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110114652967.png" alt="定义模型的参数" style="zoom:50%;"></p><h3 id="B-Back-to-ML-Framework-Define-Loss"><a href="#B-Back-to-ML-Framework-Define-Loss" class="headerlink" title="B. Back to ML Framework: Define Loss"></a>B. Back to ML Framework: Define Loss</h3><p>我们在前面讲Linear Model的时候，说道：模型就是函数，而机器学习就是让机器去找函数的最佳参数。我们找这个函数的过程包括三步：</p><ol><li>定义模型 / 定义参数</li><li>定义Loss</li><li>使用Gradient Descent来优化参数，找到最佳的参数</li></ol><p>那么对于New Model来说，我们上面定义了New Model的含参函数表达式（function with unknown parameter），接下来就到了第二步骤，要定义Loss</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110115348831.png" alt="ML Framework第二步：定义Loss" style="zoom:50%;"></p><p>我们前面说过，loss function是模型参数的函数，对于Linear的Model来说，$L=L(w,b)$，而对于New Model来说，我们上面已经定义了模型的参数为$\theta$，所以对于神经网络来说，$L=L(\theta)$</p><p>而对于Loss具体的计算来说，由于Loss的计算是根据数据定义的，而我们的数据其实没有变，只是变了模型，所以loss function的计算其实没有变，只是符号改变了一下。</p><p>我们给定一组参数的值$b,c,b,W$，然后让模型用这套参数给出预测$y$，再和真实的label $\hat y$作比较，计算一个error $e$，最后做平均即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110115944808.png" alt="神经网络模型计算Loss" style="zoom:50%;"></p><h3 id="C-Back-to-ML-Framework-Optimize"><a href="#C-Back-to-ML-Framework-Optimize" class="headerlink" title="C. Back to ML Framework: Optimize"></a>C. Back to ML Framework: Optimize</h3><p>在定义完模型和损失函数之后，接下来的一步就是对模型进行优化了。</p><p>而对New Model进行Optimization和对Linear的Model进行Optimization的算法是一模一样的，就是Gradient Descent</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110120242698.png" alt="ML Framework第三步：优化模型" style="zoom:50%;"></p><p>我们这里的目标就是</p><script type="math/tex; mode=display">\theta^* = arg\min_\theta L</script><p>而</p><script type="math/tex; mode=display">\theta = \begin{bmatrix}\theta_1\\\theta_2\\\theta_3\\\vdots\end{bmatrix}</script><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110120608012.png" alt="优化模型" style="zoom:50%;"></p><p>那么同样的，我们还是三步走：</p><ol><li><p>首先随机初始化一个$\theta$的初始值$\theta^0$</p></li><li><p>接下来根据损失函数得到的Loss计算参数的微分，得到g。因为我们的参数是一个向量，所以计算得到的微分也是一个向量，这个微分向量称为Gradient</p><script type="math/tex; mode=display">g=\begin{bmatrix}\frac{\partial L}{\partial \theta_1}|_{\theta=\theta^0}\\\frac{\partial L}{\partial \theta_2}|_{\theta=\theta^0}\\\frac{\partial L}{\partial \theta_3}|_{\theta=\theta^0}\\\frac{\partial L}{\partial \theta_4}|_{\theta=\theta^0}\\\vdots\end{bmatrix}</script><p>上面的式子可以简写为</p><script type="math/tex; mode=display">g=\nabla L(\theta^0)</script></li><li><p>第三步就是利用计算得到的Gradient来更新我们的参数，即</p><script type="math/tex; mode=display">\begin{bmatrix}\theta_1^1\\\theta_2^1\\\theta_3^1\\\vdots\end{bmatrix}\leftarrow\begin{bmatrix}\theta_1^0\\\theta_2^0\\\theta_3^0\\\vdots\end{bmatrix}-\begin{bmatrix}\eta \frac{\partial L}{\partial \theta_1}|_{\theta=\theta^0}\\\eta \frac{\partial L}{\partial \theta_2}|_{\theta=\theta^0}\\\eta \frac{\partial L}{\partial \theta_3}|_{\theta=\theta^0}\\\vdots\end{bmatrix}</script><p>简写上面的式子就是</p><script type="math/tex; mode=display">\theta^1\leftarrow \theta^0-\eta g</script></li><li><p>然后重复上面的步骤，不断计算梯度、进行优化，直到我们不想继续算下去或者算出来的Gradient全是0.</p><p>当然在实际上，基本上都是我们不想继续算了，很少会有算到的Gradient全是0</p><script type="math/tex; mode=display">\theta^2\leftarrow \theta^1-\eta g\\\theta^3\leftarrow \theta^2-\eta g\\\theta^4\leftarrow \theta^3-\eta g\\\vdots</script></li></ol><h3 id="D-Mini-Batch"><a href="#D-Mini-Batch" class="headerlink" title="D. Mini-Batch"></a>D. Mini-Batch</h3><p>上面其实已经介绍完了New Mode的训练。其实在训练过程中还有一个小问题，就是在实际的计算的过程中，我们每次计算梯度并不是直接用所有的数据，而是用所有的数据中的一小部分。</p><p>我们用这一小部分数据在一起算一个Loss，然后用这一小部分的数据算到一个Loss $L^1$。然后用这个Loss去算一个梯度$g=\nabla L^1(\theta^0)$</p><p>这一小部分数据就称为一个<strong>Batch</strong>。一个Batch里的数据直接随机抽样就可以得到</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110123138076.png" alt="Mini-Batch"></p><p>然后我们继续取第二个Batch计算、第三个Batch计算……</p><p>直到我们用完所有的数据。把所有的Batch都计算过一遍就称为一个<strong>epoch</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110123426817.png" alt="Update with different Batches" style="zoom:50%;"></p><p>至于为什么要使用Batch？下个文章再说（下节课老师才讲），毕竟这个文章以及有8500字了。</p><p>为了加深影响，举两个例子来说，</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110123625439.png" alt="两个例子" style="zoom:50%;"></p><p>此外，由于Batch的大小也是我们自己定的，因此一个Batch有多少个数据，即Batch Size也是一个由我们决定的Hyper-Parameter</p><h3 id="E-ReLu-Rectified-Linear-Unit-ReLU"><a href="#E-ReLu-Rectified-Linear-Unit-ReLU" class="headerlink" title="E. ReLu: Rectified Linear Unit (ReLU)"></a>E. ReLu: Rectified Linear Unit (ReLU)</h3><p>我们其实还可以对模型做更多的变形。例如上面我们是用Sigmoid来替换Hard的Sigmoid。其实我们也可以用别的来代替Sigmoid</p><p>例如用下面的函数</p><script type="math/tex; mode=display">y=\begin{cases}x, & x> 0\\0, & x <0\end{cases}</script><p>简写为</p><script type="math/tex; mode=display">y=c\max(0, b+wx_1)</script><p>我们只需要改变$0$、w、$w$、$b$就同样可以实现线的平移。</p><p>其实用两个ReLu就可以合成Hard Sigmoid，例如下面的图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110124230269.png" alt="从Sigmoid到ReLu" style="zoom:50%;"></p><p>所以如果想在模型中使用Hard Sigmoid而非Sigmoid的话，每个Sigmoid用两个Relu代替就行。</p><p>类似的，Sigmoid、ReLu、Hard Sigmoid这些函数在神经网络中，我们称其为<strong>Activation Function</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110124446031.png" alt="两个ReLu代替Sigmoid" style="zoom:50%;"></p><p>当然，还有其他的Activation Function。至于哪种激活函数比较好呢？下次再讲（写），这里快写不下了</p><h2 id="7-Case-Study-Neural-Network-Application"><a href="#7-Case-Study-Neural-Network-Application" class="headerlink" title="7. Case Study: Neural Network Application"></a>7. Case Study: Neural Network Application</h2><p>我们上面讲解了新模型的训练，那么接下来就把神经网络运用到上面YouTube观看次数预测的案例中去</p><h3 id="A-单层"><a href="#A-单层" class="headerlink" title="A. 单层"></a>A. 单层</h3><p>我们首先用上面的New Model，表达式如下，然后选用不同的ReLu的数量。</p><p>我们可以看到使用了新的模型的性能确实相比于Linear的Model有所提升，但是到了1000个ReLu之后，性能又到了瓶颈</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110125607587.png" alt="单层网络实验结果"></p><h3 id="B-多层"><a href="#B-多层" class="headerlink" title="B. 多层"></a>B. 多层</h3><p>我们上面都是只用了一层的新模型，即只有一层Activation Function。我们其实可以把第一层输出的$a$当做输入的$x$丢给下一层继续去计算</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110125940383.png" alt="Deeper Network"></p><p>那么通过这样不断地重复，我们就可以获得更深的模型。这里到底要叠多深，也是一个超参数。</p><p>我们继续进行实验，每一层用100个ReLu，实验的结果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110130241302.png" alt="深层网络的实验结果"></p><p>下面就是真实的通过三层ReLu的实验结果</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110130440493.png" alt="三层ReLu的结果"></p><p>我们能够看到，不断叠深的模型确实学到了周期这个规律，并且大部分时间预测的都很准。</p><p>但是还是有一个问题，就在最右边出现了一个低谷，当天机器并没有预测到低谷，而是在第二天才出现了低谷。</p><p>那么这一天其实就是过年，这一天是除夕，没人会在除夕学机器学习吧？<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110130633256.png" alt="机器没有预测到低谷" style="zoom:50%;"></p><h2 id="8-Origin-of-Name"><a href="#8-Origin-of-Name" class="headerlink" title="8. Origin of Name"></a>8. Origin of Name</h2><p>就像Linear Model一样，我们上面的模型也要有一个名字，毕竟有了一个Fancy的名字才能够吸引人 </p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110130908501.png" alt="给模型一个Fancy的名字"></p><p>对于每一个激活函数，我们把他们称为一个Neural，那么整个模型就成为Neural Network</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110131017180.png" alt="Neural Network"></p><p>然而Neural Network这个名词在80、90年代其实就已经被玩烂了。那时候的人们对Neural Network的预期很高。可是最后受到当时技术的限制，Neural Network的表现让人大跌眼镜。所以Neural Network的名字就被搞臭掉了。</p><p>基本上Paper里有Neural Network，Paper就会被据掉。所以后来，为了重振Neural Network的雄风，就给了Neural Network新的名字。</p><p>我们把每一层称为一个Hidden Layer，很多层在一起那就是一个Deep的Network，那么就把这个技术称为Deep Learning。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110131425996.png" alt="Deep Learning"></p><h2 id="9-Deep-Network"><a href="#9-Deep-Network" class="headerlink" title="9. Deep Network"></a>9. Deep Network</h2><p>后来随着深度学习技术的发展，人们把网络越叠越深，2012年AlexNet有8层，在图像分类上的错误率为16.4%。到了2014年，牛津的VGG叠了19层，错误率为7.3%。在同一年谷歌的GoogleNet叠了22层，错误率降到了6.7%。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110131545131.png" alt="网络在逐渐变深"></p><p>然而他们都不是最深的模型，到了2015年，何凯明的Residual Network有152层，比台湾最高的楼台北101还要高</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110132028268.png" alt="ResNet非常深"></p><p> 当然，ResNet能训练的这么深其实是由于他用了特殊的结构，这个结构以后再讲</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110132212409.png" alt="ResNet特殊的结构"></p><p>到这里，我们其实就已经讲完了深度学习</p><h2 id="10-Why-Deep-Nor-Fat？"><a href="#10-Why-Deep-Nor-Fat？" class="headerlink" title="10. Why Deep Nor Fat？"></a>10. Why Deep Nor Fat？</h2><p>最后，其实有一个微妙的问题，就是我们前面说所有曲线都可以用Piecewise的曲线来逼近，因此对于Neural Network来说，只要有足够多的Neural就可以逼近任意的函数了</p><p>那么有一个问题，我们为什么要把网络叠深而不是把所有的神经元放到同一层，即为什么不是把网络变宽而不是变深？</p><p>这个留着下节课讲</p><h2 id="11-Why-don’t-we-go-deeper"><a href="#11-Why-don’t-we-go-deeper" class="headerlink" title="11. Why don’t we go deeper?"></a>11. Why don’t we go deeper?</h2><p>同样是上面的例子，我们可能觉得越深的网络越好，可是事实却是四层的模型不如三层的模型。</p><p>这其实是由于出现了Overfitting，即在训练数据上的表现变好而在没看过的数据上的表现变差。</p><p>关于Overfitting，我们下次再讲</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110133856191.png" alt="Overfitting"></p><h2 id="12-To-learn-More"><a href="#12-To-learn-More" class="headerlink" title="12. To learn More"></a>12. To learn More</h2><p>最后，是关于这节课一些没有讲到，未来也不一定会用，但是很有用的知识，由于本次课程完全关注深度学习，因此并不会讲解。这是之前的课程的讲解</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220110134223640.png" alt="image-20220110134223640"></p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-1: Introduction</title>
      <link href="/2022/01/08/li-hong-yi-ml2021-spring-1-introduction/"/>
      <url>/2022/01/08/li-hong-yi-ml2021-spring-1-introduction/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是李宏毅Machine Learning 2021 Spring 第一节课Introduction的笔记，记录了课程相关的要求</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109122555074.png" alt="第一节课：Introduction"></p><h1 id="李宏毅ML2021-Spring-1-Introduction"><a href="#李宏毅ML2021-Spring-1-Introduction" class="headerlink" title="李宏毅ML2021-Spring-1: Introduction"></a>李宏毅ML2021-Spring-1: Introduction</h1><p>李宏毅老师2021年的Machine Learning课程是完全可以通过线上上课的方式来学习的，因为所有的资料，包括课程、作业等等都可以通过线上的方式来完成。因此我们通过线上上课完全可以实现在教室里同等的听课效果</p><h2 id="1-Prerequisite"><a href="#1-Prerequisite" class="headerlink" title="1. Prerequisite"></a>1. Prerequisite</h2><p>2021年春季的课程没有考试也没有前置的要求、先修课等要求。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109123003194.png" alt="课程没有先修课的要求" style="zoom: 33%;"></p><p>虽然这样说，但是其实还是需要一些基础的能力，因为想要听懂、想要能够完成作业这些能力都是必须的：</p><ul><li><strong>数学知识</strong>：<ul><li>微积分</li><li>线性代数</li><li>概率论</li></ul></li><li><strong>编程能力</strong>：<ul><li>所有的作业都是基于Python的，并且所有的作业都有助教提供的例程。其实只需要运行助教的例程就能够完成作业。但是想要高分的话还是需要自己能够写</li><li>所有的作业都会用到Pytorch这个框架</li></ul></li><li><strong>硬件要求</strong>：<ul><li>除了前几个作业，后面的作业是需要真实训练模型的，因此会有硬件（GPU）的要求。但是所有的作业都可以通过谷歌的Colab云平台来完成，因此硬件其实不是问题。当然我自己是有机器的，因此就懒得花费时间去学习Google的colab了</li></ul></li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109123452250.png" alt="要求具有的出能力" style="zoom:50%;"></p><h2 id="2-Orientation"><a href="#2-Orientation" class="headerlink" title="2. Orientation"></a>2. Orientation</h2><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109124302620.png" alt="课程的方向"></p><ul><li>虽然名字叫做Machine Learning，但是2021年Spring的课程完全关注于Deep Learning。<ul><li>虽然在知识的划分上，DL是ML中的进阶知识。然而其实在李宏毅老师的讲解下，并不需要要ML的基础知识就能够听懂。</li><li>因此，本课程其实可以作为机器学习的第一堂课，从中我们可以学习到机器学习的基础知识，熟悉机器学习</li><li>此外，这门课和林轩田老师的机器学习技法的课程的重叠会很少，因为林老师的课程主要关注于传统的机器学习，只在最后会将到关于深度学习的内容</li></ul></li><li>此外，本课程还会讲解机器学习中最新、最前沿的技术。<ul><li>本课程会从最基础的知识讲到最新的知识</li></ul></li></ul><p>因此，在学完这门课程之后，完全可以：</p><ul><li>继续深入的学习机器学习的相关知识</li><li>将学习到的知识用于其他领域</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109125213775.png" alt="写完课程后可以干的事"></p><h2 id="3-Assignment"><a href="#3-Assignment" class="headerlink" title="3. Assignment"></a>3. Assignment</h2><p>本课程作业有两种形式：</p><ul><li>多选题：多选题的结果需要通过国立台湾大学的NTU COOL网站来提交</li><li>编程题（排行榜）：在kaggle或者JudgeBoi上根据模型性能排名的排行榜</li></ul><p>最后，关于编程题的代码需要在NTU COOL上提交。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109125410367.png" alt="课程的作业"></p><h2 id="4-Grading-Criterion"><a href="#4-Grading-Criterion" class="headerlink" title="4. Grading Criterion"></a>4. Grading Criterion</h2><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109125727983.png" alt="成绩的评判"></p><p>首先是关于作业分数的评判：</p><ul><li>课程一共有15次作业，每个作业都有十分。只会记录15个作业中的10个最高的来记录分数。<ul><li>PS：在老师看来，想要涵盖机器学习（深度学习）所有内容至少需要15个作业</li></ul></li><li>不强制要求完成所有的作业，选择自己感兴趣的作业完成即可</li><li>非常鼓励学生完成所有的15个作业<ul><li>PS：15个作业全部完成老师会送一件T恤<span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li></ul></li></ul><p>下面是所有作业的时间表</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109130152524.png" alt="作业安排"></p><p>最后课程成绩的评判如下：</p><ul><li>C-：这门课不会挂人，因此单纯的跑完了助教的例程就可以及格。</li><li>A-：根据每个作业的提示对助教的例程进行改进、提升，完成这些作业就可以是A-，大多数同学都是A-。</li><li>A+：每个作业其实都设置了一些难关，如果克服了他们就可以得到A+，而完成这些挑战需要通过自己的思考以及阅读文章</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109130415174.png" alt="课程成绩的评判"></p><h2 id="5-Rules"><a href="#5-Rules" class="headerlink" title="5. Rules"></a>5. Rules</h2><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109132756818.png" alt="基础的规则"></p><p>课程的一些规定如下：</p><ul><li>不允许抄袭别人的代码或者直接上传别人的代码<ul><li>别人包括宇宙中所有的生物</li><li>修改别人的代码里的变量名也是没有用的</li></ul></li><li>不要让把自己的代码分享给别人。<ul><li>如果分享代码、结果给别人那么自己也会受到同样的惩罚</li></ul></li></ul><p>此外，因为部分作业是在Kaggle上提交的，因此对于Kaggle也会有一些规定：</p><ul><li>每天的上传次数是有限制的<ul><li>不允许使用多个账号</li><li>不要相互借账号</li><li>因为有的作业在之前的几个学期也有布置，因此不要提交之前学习公开的代码</li><li>不要试图通过任何方式提高提交的次数</li></ul></li><li>所有的结果应该是由机器产生的<ul><li>不要试图手动打label的方式得到答案</li></ul></li><li>作业中使用的数据集都是开源的。因此他们的测试集和训练集都是公开的。因此不要把测试集用于训练<ul><li>此外包括但不仅仅是一下行为是禁止的：<ul><li>把测试数据加入到训练集中</li><li>使用测试数据来调参</li></ul></li><li>注意<ul><li>不要使用其他的第三方数据，例如在imagenet上训练好了跑到mnist上finetune</li><li>只使用作业中提供的数据集</li></ul></li></ul></li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109133332643.png" alt="Kaggle的规则-1"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109133527767.png" alt="Kaggle的规则-2"></p><p>最后是关于代码的一些规则</p><ul><li><p>作业的代码需要上传到NTU COOL上</p></li><li><p>上传的代码应该能够产生和你在leaderboard上的结果相近的模型</p><ul><li>如果没法产生，那么就会被视为作弊</li><li>助教会抽查代码、运行检查</li><li>如果你的作业拿到了10分，那么就会向全班展示</li><li>助教和老师有权判断是否作弊</li></ul></li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109134233249.png" alt="代码的规则"></p><h2 id="6-Punishment"><a href="#6-Punishment" class="headerlink" title="6. Punishment"></a>6. Punishment</h2><p>如果违反了上面的规则，那么乘法如下：</p><ul><li>第一次违反规则，那么期末总成绩打九折</li><li>第二次违反规则，直接零分，下学期再见</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109134637455.png" alt="惩罚"></p><h2 id="7-Information"><a href="#7-Information" class="headerlink" title="7. Information"></a>7. Information</h2><p>最后是关于课程的一些信息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109134751615.png" alt="课程的主页"></p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-0:Before Begin</title>
      <link href="/2022/01/08/li-hong-yi-ml2021-spring-0-before-begin/"/>
      <url>/2022/01/08/li-hong-yi-ml2021-spring-0-before-begin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文讲解李宏毅ML2021 Spring Notes系列文章的写作原因以及系列文章的写作目的</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207145714311.png" alt="课程官网"></p><h1 id="李宏毅ML2021-Spring-0-Before-Begin"><a href="#李宏毅ML2021-Spring-0-Before-Begin" class="headerlink" title="李宏毅ML2021-Spring-0: Before Begin"></a>李宏毅ML2021-Spring-0: Before Begin</h1><p>李宏毅老师的Machine Learning 2021 Spring的课程李宏毅老师以及上传到他的Youtube上了，并且系列作业也已经经过整理向公众开放。今年的ML课程完全关注Deep Learning，此外结合了Kaggle的许多实战。<strong>因此本系列文章作为我听课时候的笔记，记录了我在听课时候的心得与体会。</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/44fe603d253c2586def6d0e832b5efd6_r.jpg" alt="ML与DL的关系"></p><h2 id="1-Why-write-this-series-of-blogs"><a href="#1-Why-write-this-series-of-blogs" class="headerlink" title="1. Why write this series of blogs?"></a>1. Why write this series of blogs?</h2><p>之所以决定动笔写李宏毅2021 Spring机器学习课程的笔记，是有多方面的原因：</p><ul><li>最近西安疫情比较严重，被封在了学校里，那么刚好就在这个时候写一写笔记，这样让封闭的日子显得更加有意义</li><li>其实我之前就已经把这个课程学了一半左右了，然而对于学生来说考试是必不可少的，当长达半个月过去之后听过的课在记忆里的印象也逐渐淡去，因此写下笔记能够让未来自己再度阅读的时候能够快速的回忆</li><li>作为曾经学习过DL的记录，未来可以有所证明</li></ul><p>其实也正如我在<code>李宏毅ML2021 Spring Homework</code>专栏中所说的</p><blockquote><p>在2019年我刚进入大学的时候，那个时候深度学习已经火热起来了。在那个时候我就通过观看李宏毅老师的Machine Learning的系列课程从而对机器学习和深度学习入门了。</p><p>然而可惜的是，由于种种原因，在2019年的时候，李宏毅老师的ML系列课程我最终没有坚持下来全部看完。</p><p>一方面是受到了当时学识的限制。在那时候刚刚进入大学，刚刚开始学习线性代数，对概率论、图论、凸优化、计算机、多元高等数学等内容完全没有接触过。</p><p>另外一方面当时更加关注与计算机底层LInux等内容的学习；最后是大一时候的课是真的多。</p><p>因此最终没有听完2019年的课程，非常的可惜。</p><p>现在因为降级转入计算机专业的原因，有了很多的时间；此外自己在业余时间也已经把许多计算机的课程、深度学习的数学原理课程都已经学过了，编程能力也有了非常大的提升。</p><p>又恰逢2021年李宏毅老师的课程上架。因此决定这一次详细的学完所有课程并完成对应的作业。</p><p>所有的作业都以博客的形式来记录我炼丹的点滴。希望能够见证我这一段时间的投入和付出。</p></blockquote><p>因此希望这个系列的笔记能够作为我坚持学习的记录和动力。</p><h2 id="2-Who-is-Hung-yi-Lee"><a href="#2-Who-is-Hung-yi-Lee" class="headerlink" title="2. Who is Hung-yi Lee"></a>2. Who is Hung-yi Lee</h2><p>As now we are going to have classes of Hung-yi Lee, we’d better have some knowledge of him.</p><p>首先是<code>Wikipedia</code>的介绍</p><blockquote><p><strong>From wikipedia</strong></p><p>李宏毅（1985年或1986年－），台湾地区计算机科学家，国立台湾大学电机工程学系副教授，研究领域包括语意理解、语音辨识、机器学习、深度学习等。</p><p>李宏毅在大学二年级时，因对电机系许多课程感到困惑，曾一度非常沮丧迷惘，甚至萌生了退学的念头。他当时选了一门“数字通信处理”课程，发现自己难以听懂，但他并未放弃，不弃选不退修，最终豁然开朗，“原来用手机拨电话给别人时，中间发生的事就是这些信号处理。”找到学习的兴趣后，李宏毅开始跟随中央研究院李琳山院士做项目，随后于2010年从国立台湾大学取得硕士学位，2012年取得博士学位。2012年9月至2013年8月间，李宏毅于中央研究院资讯科技创新研究中心担任博士后研究员。2013年9月以客座科学家身份前往麻省理工学院计算机科学暨人工智能实验室。2014年返台，担任台湾大学电机工程学系教师至今。</p><p>2015年，李宏毅开始在台湾大学讲授机器学习课程，选课人数通常爆满，有400多人来修。于是，李宏毅将学生分在两间教室，一间现场看老师上课，另一间同步看直播。由于直播上课的诸多限制，李宏毅养成了录制课程影片的习惯。一开始李宏毅将影片上传至个人主页，后来由于萤幕侧录软件的序号过期，无法导出MP4，但有导出至YouTube的选项，于是李宏毅开始将课程影片上传至YouTube。此举不仅帮助了台湾大学的学生，还意外嘉惠台湾大学以外的学生。在其影片下方，还有中国大陆的学生留言感谢，表示已经听完全部课程，并留下笔记连结。截至2021年9月30日，李宏毅的YouTube频道有8.99万位订阅者，最热门的影片有56万次观看。</p><p>李宏毅擅长用浅显易懂的语言，以学生喜爱的精灵宝可梦、凉宫春日等动漫来讲解复杂的机器学习技术，因此被亲切地称为“精灵宝可梦大师”。中华民国电脑学会称李宏毅为“第一个公开有系统地完整深入讲解深度学习技术的学者，使得华文的深度学习教学与英文世界并驾齐驱。”</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207143939983.png" alt="维基百科对老师的介绍"></p><p>从维基百科的介绍中能够看出来，李宏毅老师讲解机器学习的课程非常的有趣和生动，因此广受欢迎。我在当初也是受到了李宏毅老师早年的课程的熏陶，才进入了ML/DL的大门。</p><h2 id="3-Why-is-Hung-yi-Lee"><a href="#3-Why-is-Hung-yi-Lee" class="headerlink" title="3. Why is Hung-yi Lee"></a>3. Why is Hung-yi Lee</h2><p>为什么选择李宏毅老师的课程而非其他老师的课程？</p><p>首先是因为李宏毅老师的课程非常的通俗易懂，在讲课的时候老师会举各种各样的例子，宝可梦、全职猎人、凉宫春日等等，贴近与学生的距离。</p><p>其次是因为老师的ML的课程从16年到现在以及过去了5年时间了，在这五年中老师的课程已经经过了长久的打磨，因此会具备丰富的经验，所以学起来的时候体验会好很多。</p><p>最后就是关于我个人的原因，因为先前没有学完老师2019年的课程，感到非常遗憾，所想要在2021年完成老师的课程，弥补当年的遗憾。</p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模算法9-相关性分析</title>
      <link href="/2022/01/08/shu-xue-jian-mo-suan-fa-9-xiang-guan-xing-fen-xi/"/>
      <url>/2022/01/08/shu-xue-jian-mo-suan-fa-9-xiang-guan-xing-fen-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了数学建模中的一类知识：相关性分析</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/v2-df840824b0adc9a637a2ce10d5d52ceb_r.jpg" alt="相关性分析"></p><h1 id="数学建模算法9-相关性分析"><a href="#数学建模算法9-相关性分析" class="headerlink" title="数学建模算法9-相关性分析"></a>数学建模算法9-相关性分析</h1><p><strong>相关性，是指两个变量的关联程度</strong>。一般地，从散点图上可以观察到两个变量有以下三种关系之一：两变量<strong>正相关</strong>、<strong>负相关</strong>、<strong>不相关</strong>。</p><ul><li>如果一个变量高的值对应于另一个变量高的值，相似地，低的值对应低的值，那么这两个变量正相关。在土壤中，孔隙率和渗透度就具有典型的正相关。</li><li>反之，如果一个变量高的值对应于另一个变量低的值，那么这两个变量负相关。</li><li>如果两个变量间没有关系，即一个变量的变化对另一变量没有明显影响，那么这两个变量不相关。</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/v2-6d544d2fe7ff1daa2cab78f0ba2ed3c8_1440w.jpg" alt="两个变量间的关系"></p><p>而<strong>相关性分析是指对两个或多个具备相关性的变量元素进行分析，从而衡量两个变量因素的相关密切程度</strong>。</p><p>之所以要进行相关性分析，是因为在数学建模中经常会遇到一类题目，会评价两个指标（变量）之间的关系/联系。因此，本文就将介绍相关性分析的相关知识。</p><h2 id="1-变量间的相关性"><a href="#1-变量间的相关性" class="headerlink" title="1. 变量间的相关性"></a>1. 变量间的相关性</h2><p>在统计学上，我们通常这样判断变量之间是否有关：</p><ul><li><strong>如果一个变量的取值发生变化，另外一个变量的取值也相应发生变化，则这两个变量有关</strong>。</li><li><strong>如果一个变量的变化不引起另一个变量的变化则二者无关</strong>。</li></ul><p>在变量相关的基础上，我们又会有两个变量的相关程度到底如何，即一个变量变化多少另外一个变量对应的会变化多少？</p><p>因此我们定义<strong>变量关系强度</strong>，即<strong>两个变量相关程度的高低</strong>。统计学中是以准实验的思想来分析变量相关的。通常从以下的角度分析：</p><ul><li>两变量是否相互独立</li><li>两变量是否有共变趋势</li><li>一变量的变化多大程度上能由另一变量的变化来解释</li></ul><h2 id="2-四种基本变量"><a href="#2-四种基本变量" class="headerlink" title="2. 四种基本变量"></a>2. 四种基本变量</h2><p>根据变量的类型，现实中的变量可以分为下面四种：</p><ul><li><strong>定类变量</strong>：根据定性的原则区分总体各个案类别的变量，变量间没有大小关系。例如：性别，民族、婚姻状况</li><li><strong>定序变量</strong>：区别同一类别个案中等级次序的变量，变量间具有大小关系，但是没有数值关系。例如：文化程度、工厂规模、年龄大小</li><li><strong>定距变量</strong>：区别同一类别个案中等级次序及其距离的变量，变量间具有大小关系且具有数值关系（可以用数值描述的变量），例如：摄氏温度、比率、智力水平。此外，定距变量是没有零点的，零只是其中的一个值。而且，加减得到的差值有意义而乘除后的值没有意义。</li><li><strong>定比变量</strong>：也是区别同一类别个案中等级次序及其距离的变量，除了具有定距变量的特点外，还具有零点，即零点相比于其他值有意义，例如：收入、价格、市场占有率</li></ul><h2 id="3-两变量的相关分析"><a href="#3-两变量的相关分析" class="headerlink" title="3. 两变量的相关分析"></a>3. 两变量的相关分析</h2><h3 id="A-Pearson相关系数"><a href="#A-Pearson相关系数" class="headerlink" title="A. Pearson相关系数"></a>A. Pearson相关系数</h3><h4 id="1-Pearson相关系数的计算"><a href="#1-Pearson相关系数的计算" class="headerlink" title="1. Pearson相关系数的计算"></a>1. Pearson相关系数的计算</h4><p>适用于定距、定比类型的变量。 是运用最广的一种相关程度统计量。例如可以用皮尔逊系数分析收入和商品价格的相关性。</p><p>皮尔逊系数$r$的计算如下：</p><script type="math/tex; mode=display">r= \frac{\sum_{i=1}^n (x_i-\bar x)(y_i-\bar y)}{\sqrt {\sum_{i=1}^n (x_i-\bar x)^2\sum_{i=1}^n (y_i-\bar y)^2}}</script><p>Pearson系数的相关性检验用$t$检验，其统计量$t$服从自由度($n-2$)的分布，其中n表示数据的维度</p><script type="math/tex; mode=display">t=  \frac{r}{1-\frac{r^2}{n-2}}</script><p>之所以需要对皮尔逊系数进行检验，原因在于我们对一个变量的值的采集是通过有限次的观测。因此就会存在偶然性的问题，所以需要进行相关性检验</p><ul><li>若计算得到$t\ge t_{a/2}$或$p\ge a$，则认为$r$统计显著。例如变量十六个维度（$n-2=14$），且$a$取0.05，若计算得到$t\ge2.145$，则有95%的概率认为两个变量相关这一结果不是偶然造成的，或者说有95%的把握认为两个变量相关。</li><li>若计算得到$t\leq t_{a/2}$或$p\leq a$，则认为$r$统计不显著，即非常有可能是偶然因素造成的</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108200212772.png" alt="t检验的表"></p><h4 id="2-Pearson相关系数的意义"><a href="#2-Pearson相关系数的意义" class="headerlink" title="2. Pearson相关系数的意义"></a>2. Pearson相关系数的意义</h4><p>对于皮尔逊系数而言，其越接近一，表示计算该皮尔逊系数的两个变量之间相关性越高</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108200533348.png" alt="皮尔逊系数与相关程度" style="zoom:67%;"></p><h4 id="3-Pearson相关系数的使用条件"><a href="#3-Pearson相关系数的使用条件" class="headerlink" title="3. Pearson相关系数的使用条件"></a>3. Pearson相关系数的使用条件</h4><ol><li>两变量均应由测量得到的连续变量。</li><li>两变量所来自的总体都应是正态分布，或接近正态的单峰对称分布</li><li>变量必须是成对的数据</li><li>两变量间为线性关系，因此计算前需要先画散点图查看一下</li></ol><h3 id="B-Spearman相关系数"><a href="#B-Spearman相关系数" class="headerlink" title="B. Spearman相关系数"></a>B. Spearman相关系数</h3><h4 id="1-Spearman系数的计算"><a href="#1-Spearman系数的计算" class="headerlink" title="1. Spearman系数的计算"></a>1. Spearman系数的计算</h4><p>Spearman系数是用于计算度量定序变量与定序变量之间的相关系数。</p><p>斯皮尔曼系数计算如下</p><script type="math/tex; mode=display">r_s=1-\frac{6\sum(x_i-y_i)^2}{n(n^2-1)}</script><p>其中，$x_i$，$y_i$是两个变量按照大小排序的等级，$n$为样本容量。在$n\ge 20$之后，可以用$t$统计量进行检验。</p><script type="math/tex; mode=display">t=r_s\sqrt {\frac{n-2}{1-r_s^2}}</script><p>同样，</p><ul><li>若计算得到$t\ge t_{a/2}$或$p\ge a$，则认为$r$统计显著。例如变量十六个维度（$n-2=14$），且$a$取0.05，若计算得到$t\ge2.145$，则有95%的概率认为两个变量相关这一结果不是偶然造成的，或者说有95%的把握认为两个变量相关。</li><li>若计算得到$t\leq t_{a/2}$或$p\leq a$，则认为$r$统计不显著，即非常有可能是偶然因素造成的</li></ul><h3 id="C-双变量关系强度测量的主要指标"><a href="#C-双变量关系强度测量的主要指标" class="headerlink" title="C. 双变量关系强度测量的主要指标"></a>C. 双变量关系强度测量的主要指标</h3><p>双变量关系强度测量的主要指标如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108203130288.png" alt="双变量关系强度测量的主要指标"></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Math Modeling </tag>
            
            <tag> 相关性分析 </tag>
            
            <tag> 皮尔逊系数 </tag>
            
            <tag> Correlation Analysis </tag>
            
            <tag> Pearson Correlation Coefficient </tag>
            
            <tag> Spearman&#39;s rank correlation coefficient </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模算法10-主成分分析</title>
      <link href="/2022/01/08/shu-xue-jian-mo-suan-fa-10-zhu-cheng-fen-fen-xi/"/>
      <url>/2022/01/08/shu-xue-jian-mo-suan-fa-10-zhu-cheng-fen-fen-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解了数模中帮助进行数据压缩的算法：主成分分析，PCA</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/pca.png" alt="主成分分析" style="zoom:150%;"></p><h1 id="数学建模算法10-主成分分析"><a href="#数学建模算法10-主成分分析" class="headerlink" title="数学建模算法10-主成分分析"></a>数学建模算法10-主成分分析</h1><p>在前面的一节我们讲解了相关性分析。相关性分析用于判断两个变量之间的相关性。那么就存在一个问题，假设现在我们需要建模的数据有上万行，而每一样的一个example都有二十多个维度。那么要对这样的数据进行分析就会非常占用内存，甚至在数模的这几天里面跑出来这些数据就会占用大部分时间。</p><p>因此，为了简化分析、节约时间，在数模中可以使用主成分分析这一方法(Priciple Component Analysis)。</p><p>其基本思想就是通过一些手段，实现对<strong>数据信息的压缩</strong>，从而在损失一部分信息量的前提下实现需要分析的数据的压缩，从而帮助加速分析。</p><p>而如何实现损失部分信息带来数据的压缩呢？一个简单的思路其实就可以通过我们前面说的相关性分析，若两个变量$A,B$之间是强相关的（皮尔逊系数大于0.9），那么我们其实可以认为变量$B$的绝大部分信息都蕴含在$A$，我们通过一些方法就可以从A中获得$B$的信息（例如拟合得到的曲线）。那么通过这样，我们其实就没有必要存储$B$的所有的值了，我们只需要存储$A$的值即可。这样做虽然丢失了部分B的信息，但是我们却能够节省内存。</p><p>类似的，主成分分析就是同类型的用于进行数据压缩的算法。</p><p>数模中常用的数据降维的方法有两种：<strong>主成分分析法</strong>和<strong>因子分析法</strong>。两种方法其实差别不大大，而主成分分析得到的指标数量和原来的指标数量，我们选择前几个就行，而因子分析法则是生成我们指定数量的指标数量。</p><h2 id="1-主成分分析的介绍"><a href="#1-主成分分析的介绍" class="headerlink" title="1. 主成分分析的介绍"></a>1. 主成分分析的介绍</h2><p>主成分的概念由Karl Pearson在1901年提出的。他是考察多个变量间相关性一种多元统计方法。</p><p><strong>主成分分析研究如何通过少数几个主成分(principal component)来解释多个变量间的内部结构</strong>，即从原始变量中导出少数几个主分量，使它们尽可能多地保留原始变量的信息，且彼此间互不相关。</p><p>主成分分析的目的：</p><ul><li><p>数据的压缩</p></li><li><p>数据的解释</p></li></ul><p>其常被用来寻找判断事物或现象的综合指标，并对综合指标所包含的信息进行适当的解释</p><p>若直接对原有的指标进行删除，那么存在的一个问题就是一定会丢失掉信息。因此相比于直接简单的删除，需要先对原始数据进行一定的变换，以实现信息的重组，从而保留蕴含更多信息的指标而丢弃蕴含信息较少的指标。</p><h2 id="2-主成分分析的基本思想"><a href="#2-主成分分析的基本思想" class="headerlink" title="2. 主成分分析的基本思想"></a>2. 主成分分析的基本思想</h2><p>主成分分析的主要思想就是：对这相关变量（为便于理解，先以两个为例）所携带的信息(在统计上信息往往是指数据的变异)进行浓缩处理。假定只有两个变量$x_1$和$x_2$，从散点图可见两个变量存在相关关系，这意味着两个变量提供的信息有重叠。</p><p>那么如果把两个变量用一个变量来表示，同时这一个新的变量又尽可能包含原来的两个变量的信息，这就是降维的过程</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108232921556.png" alt="主成分分析的例子"></p><p>例如，$x_1,x_2$分别表示身高和体重。那么身高和体重确实具有一定的关联，因为身高越高体重一般都会越重。</p><p>我们通过坐标轴的旋转，例如旋转到$y_1$和$y_2$，则此时，我们的数据在$y_1$这个轴上的分布越广泛，则其方差相比于原来就会大了很多。而方差在某种意义上可以表达信息的丰富和匮乏程度。方差非常小的一组数据，由于不同的数据间的同质化严重，因此其信息含量非常的匮乏，而方差大的一组数据则由于数据的多样新，因此其中蕴含的信息会更加丰富。</p><p>从上面的角度来理解，方差越大的维度其表达能力其实就越强，因为其中蕴含了更多的信息。因此我们其实可以仅仅保存所有数据点的$y_1$的值，那么就可以实现数据的有损压缩。</p><p>旋转坐标轴用可以有旋转矩阵来表示，即</p><script type="math/tex; mode=display">\begin{cases}y_1=a_{11}x_1+a_{12}x_2\\y_2=a_{21}x_1+a_{22}x_2\end{cases}</script><p>则我们的关键其实就是找到参数（旋转矩阵）</p><script type="math/tex; mode=display">A=\begin{bmatrix}a_{11} & a_{12}\\a_{21} & a_{22}\end{bmatrix}</script><p>那么对于高维数据，其实也是一样的思想，只不过在高维空间中是一个高维椭球，无法直观地观察。</p><p>每个变量都有一个坐标轴，所以有几个变量就有几个主轴。首先把椭球的各个主轴都找出来，再用代表大多数数据信息的最长的几个轴作为新变量，这样，降维过程也就完成了。</p><p>找出的这些新变量是原来变量的线性组合，叫做<strong>主成分</strong>。</p><p>上面是比较口语化的描述，下面是比较数学一点的描述。</p><blockquote><p>主成分分析就是设法将原来众多具有一定相关性的变量(如$p$个变量)，重新组合成一组新的相互无关的综合变量来代替原来变量。如何处理？</p><p>通常数学上的处理就是将原来$p$个变量作线性组合作为新的综合变量。如何选择？</p><p>如果将选取的第一个线性组合即第一个综合变量记为$F_1$，自然希望$F_1$尽可能多的反映原来变量的信息。怎样反映?</p><p>最经典的方法就是用方差来表达，即$var(F_1)$越大，表示$F_1$包含的信息越多。因此在所有的线性组合中所选取的$F_1$应该是方差最大的，故称之为<strong>第一主成分（Principal  Component I）</strong>。</p><p>如果第一主成分不足以代表原来$p$个变量的信息，再考虑选取$F_2$即第二个线性组合。$F_2$称为<strong>第二主成分（Principal  cComponent II）</strong>。 F1和F2的关系？</p><p>为了有效地反映原来信息，F1已有的信息就不再出现在F2中，即$cov(F1,F2)＝0$。依此类推，可以获得$p$个主成分。因此，这些主成分之间是互不相关的，而且方差依次递减。在实际中，挑选前几个最大主成分来表征。标准？</p><p> 各主成分的累积方差贡献率&gt;80%或特征根&gt;1。</p></blockquote><h2 id="3-主成分分析的数学模型"><a href="#3-主成分分析的数学模型" class="headerlink" title="3. 主成分分析的数学模型"></a>3. 主成分分析的数学模型</h2><p>假定有$n$个样本，每个样本共有$p$个维度，构成一个$n\times p$   阶的数据阵。</p><script type="math/tex; mode=display">X=\begin{bmatrix}x_{11} & x_{12} & \cdots & x_{1p}\\x_{21} & x_{22} & \cdots & x_{2p}\\\vdots & \vdots & \ddots & \vdots\\x_{n1} & x_{n1} & \cdots & x_{np}\\\end{bmatrix}</script><p>当p较大时，在p维空间中考察问题比较麻烦。为了克服这一困难，就需要进行降维处理，即用较少的几个综合变量代替原来较多的<br>变量变量，而且使这些较少的综合变量既能尽量多地反映原来较多变量变量所反映的信息。</p><p>要从原来的所有变量得到新的综合变量，一种较为简单的方法是作线性变换，使新的综合变量为原变量的线性组合，即</p><script type="math/tex; mode=display">\begin{cases}F_1=a_{11}x_1+a_{21}x_2+\cdots+a_{p1}x_p\\F_2=a_{12}x_1+a_{22}x_2+\cdots+a_{p2}x_p\\\qquad\qquad\qquad\vdots\\F_p=a_{1p}x_1+a_{2p}x_2+\cdots+a_{pp}x_p\\\end{cases}</script><p>此外，由于要求所有的主成分之间是没有信息重叠的，因此需要满足规范化条件，即</p><script type="math/tex; mode=display">a_{i1}^2+a_{i2}^2+\cdots+a_{ip}^2=1</script><p>此外，主成分分析要求：</p><ul><li>原始变量之间存在一定的相关性：如果多个变量相互独立或相关性很小，就不能进行主成分分析。<ul><li>首先可以使用Kaiser-Meyer-Olkin（KMO)检验（检验变量之间的偏相关系数是否过小）来进行判断，<strong>要求检验的值大于0.5为可以做，小于0.3为不建议做，0.3~0.5之间是可以做，但是不保证效果</strong></li><li>其次也可以用Bartlett’s 检验。该检验的原假设是相关矩阵为单位阵（不相关），如果不能拒绝原假设，则不适合进行主成分分析，<strong>要求检验的值小于0.05</strong></li><li>上面两个检验有一个就行</li></ul></li><li>各个综合变量间互不相关，即协方差为0</li><li>为了消除变量数量级/分布不同对方差的影响，通常对数据进行标准化处理，变量之间的协方差即为相关系数。</li></ul><p>将原有数据案列拆分为</p><script type="math/tex; mode=display">X=\begin{bmatrix}X_1 & X_2 & \cdots & X_p\end{bmatrix}=\begin{bmatrix}x_{11} & x_{12} & \cdots & x_{1p}\\x_{21} & x_{22} & \cdots & x_{2p}\\\vdots & \vdots & \ddots & \vdots\\x_{n1} & x_{n1} & \cdots & x_{np}\\\end{bmatrix}</script><p>则求</p><script type="math/tex; mode=display">\max_{\vec a} Var(F)， \quad F=\begin{bmatrix}a_1 & a_2 & \cdots & a_p\end{bmatrix} \times\begin{bmatrix}X_1 & X_2 & \cdots & X_p\end{bmatrix}^T</script><p>则将$F$的表达式展开，带入方差的计算式之后即可得到解</p><h2 id="4-PCA的Python求解"><a href="#4-PCA的Python求解" class="headerlink" title="4. PCA的Python求解"></a>4. PCA的Python求解</h2><p>Python中的scikit-learn中其实已经有了非常成熟的PCA的实现，因此我们直接用即可。</p><p>在sklearn中，PCA算法主要是由<code>sklearn.decomposition.PCA</code>类完成。该类的签名如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">sklearn</span><span class="token punctuation">.</span>decomposition<span class="token punctuation">.</span>PCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> copy<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> whiten<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> svd_solver<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span> tol<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> iterated_power<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，我们需要关注的参数有：</p><ul><li><strong>n_components</strong>：PCA算法中所要保留的主成分个数n，也即保留下来的特征个数n。int 或者 string，缺省时默认为None，所有成分被保留。赋值为int，比如n_components=1，将把原始数据降到一个维度。赋值为string，比如n_components=’mle’，将自动选取特征个数n，使得满足所要求的方差百分比。</li><li><strong>copy</strong>：bool，True或者False，缺省时默认为True。表示是否在运行算法时，将原始训练数据复制一份。若为True，则运行PCA算法后，原始训练数据的值不会有任何改变，因为是在原始数据的副本上进行运算；若为False，则运行PCA算法后，原始训练数据的值会改，因为是在原始数据上进行降维计算。</li><li><strong>whiten</strong>：bool，缺省时默认为False。白化，使得每个特征具有相同的方差</li></ul><p>其常用的属性如下：</p><ul><li>components_ ：返回具有最大方差的成分。</li><li>explained_variance_ratio<em>：返回 所保留的n个成分各自的方差百分比。</em></li><li>n_components_：返回所保留的成分个数n。</li></ul><p>其常用的方法如下：</p><ul><li><p>fit(X,y=None)</p><p>fit()可以说是scikit-learn中通用的方法，每个需要训练的算法都会有fit()方法，它其实就是算法中的“训练”这一步骤。因为PCA是无监督学习算法，此处y自然等于None。</p></li><li><p>fit(X)，表示用数据X来训练PCA模型。</p><p>函数返回值：调用fit方法的对象本身。比如pca.fit(X)，表示用X对pca这个对象进行训练。</p></li><li><p>fit_transform(X)</p><p>用X来训练PCA模型，同时返回降维后的数据。newX=pca.fit_transform(X)，newX就是降维后的数据。</p></li><li><p>inverse_transform()</p><p>将降维后的数据转换成原始数据，X=pca.inverse_transform(newX)</p></li><li><p>transform(X)</p><p>将数据X转换成降维后的数据。当模型训练好后，对于新输入的数据，都可以用transform方法来降维。</p></li></ul><p>此外，还有get_covariance()、get_precision()、get_params(deep=True)、score(X, y=None)等方法，以后用到再补充吧。</p><h2 id="5-PCA案例"><a href="#5-PCA案例" class="headerlink" title="5. PCA案例"></a>5. PCA案例</h2><blockquote><p><strong>根据我国31个省市自治区2006年的6项主要经济指标数据，进行主成分分析，找出主成分并进行适当的解释</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109004849578.png" alt="主要经济指标"></p></blockquote><p>Python直接求解即可</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>decomposition <span class="token keyword">as</span> skdecomposedf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"test1.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>pca <span class="token operator">=</span> skdecompose<span class="token punctuation">.</span>PCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>new <span class="token operator">=</span> pca<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>df<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>new<span class="token punctuation">,</span> index<span class="token operator">=</span>df<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pca<span class="token punctuation">.</span>explained_variance_ratio_<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220109010518417.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Math Modeling </tag>
            
            <tag> 主成分分析 </tag>
            
            <tag> Principal Components Analysis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模算法8-模糊综合评价模型</title>
      <link href="/2022/01/07/shu-xue-jian-mo-suan-fa-8-mo-hu-zong-he-ping-jie-mo-xing/"/>
      <url>/2022/01/07/shu-xue-jian-mo-suan-fa-8-mo-hu-zong-he-ping-jie-mo-xing/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了数学建模中常见的评价算法（模型）：模糊综合评价</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/v2-368fd890e8f6524b341b070804782bd2_1440w.jpg" alt="模糊综合评价法"></p><h1 id="数学建模算法8-模糊综合评价模型"><a href="#数学建模算法8-模糊综合评价模型" class="headerlink" title="数学建模算法8-模糊综合评价模型"></a>数学建模算法8-模糊综合评价模型</h1><p>在数学建模中，很多问题都涉及到评价类问题。而针对评价类问题，我们在前面介绍了层次分析法、灰色综合分析两种用于评价的方法/模型。本文将介绍第三种评价模型：模糊综合评价模型。</p><p>层次分析法适合于对指标这类主观性较强、数据量较少的问题进行评价，而灰色综合分析适合于少量数据并且已知标准（参考向量）的这类评价问题。</p><p>然而在生活中还有一类评价问题：即评价的等级之间是模糊的这一类评价问题。例如现在对一群人的身高进行评价，那么高和矮就是我们可以给出的评价的等级。然而这样的评价等级是模糊的，例如什么样的身高算高、什么算矮、高矮之间的分界线是什么？</p><p>因此针对这类评价等级是模糊的问题，就有了模糊综合评价模型。</p><h2 id="1-模糊数学介绍"><a href="#1-模糊数学介绍" class="headerlink" title="1. 模糊数学介绍"></a>1. 模糊数学介绍</h2><p>现实世界中的许多现象和关系具有不确定性。 这些不确定性的表现形式多种多样，如随机性、 灰色性、模糊性和粗糙性等。</p><p>模糊数学正是利用模糊集及其运算研究、处理模糊不确定现象和关系的数学分支学科。许多数学建模问题包括模糊现象和关系，这类 问题往往可以用模糊数学方法处理。</p><p>下面是百度百科和维基百科上对其的介绍</p><blockquote><p><strong>From BaiduBaike</strong>：</p><p>模糊数学又称Fuzzy 数学，是研究和处理模糊性现象的一种数学理论和方法。模糊性数学发展的主流是在它的应用方面。<br>由于模糊性概念已经找到了模糊集的描述方式，人们运用概念进行判断、评价、推理、决策和控制的过程也可以用模糊性数学的方法来描述。例如模糊聚类分析、模糊模式识别、模糊综合评判、模糊决策与模糊预测、模糊控制、模糊信息处理等。这些方法构成了一种模糊性系统理论，构成了一种思辨数学的雏形，它已经在医学、气象、心理、经济管理、石油、地质、环境、生物、农业、林业、化工、语言、控制、遥感、教育、体育等方面取得具体的研究成果。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107222908877.png" alt="百度百科上模糊数学的介绍"></p><p><strong>From Wikipedia</strong>：</p><p>模糊数学，亦称弗晰数学或模糊性数学。1965年以后，在模糊集合、模糊逻辑的基础上发展起来的模糊拓扑、模糊测度论等数学领域的统称。是研究现实世界中许多界限不分明甚至是很模糊的问题的数学工具。在模式识别、人工智能等方面有广泛的应用。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107222951369.png" alt="维基百科上对模糊数学的介绍"></p></blockquote><p>正如介绍中所指出的，现代数学是建立在集合论基础之上的。</p><p><strong>集合论的重要意义就在于它能将数学的抽象能力延伸到人类认识过程的深处：用集合来描述概念，用集合的关系和运算表达判断和推理，从而将一切现实的理论系统都纳入集合描述的数学框架中</strong>。毫无疑问，以经典集合论为基础的精确数学和随机数学在描述自然界多种客观现象的内在规律中，获得了显著的效果。</p><p>但是，和随机现象一样，在自然界和人们的日常生活中普遍存在着大量的模糊现象，如多云、阴灭、小雨、大雨、贫困、温饱等。<strong>由于经典集合论只能把自己的表现力限制在那些有明确外延的现象和概念上，它要求元素对集合的隶属关系必须是明确的，不能模棱两可</strong>，因而对于那些经典集合无法反映的外延不分明的概念，以前人们都是尽量回避它们。</p><p>然而，随着现代科技的发展，我们所面对的系统日益复杂，模糊性总是伴随着复杂性出现；此外人文、社会学科及其他“软科学”的数学化、定量化趋向，也把模糊性的数学处理问题推向中心地位；更重要的是，计算机科学、控制理论、系统科学的迅速发展，要求计算机要像人脑那样具备模糊逻辑思维和形象思维的功能。凡此种种，迫使人们再也无法回避模糊性，必须寻求途径去描述和处理客观现象中非清晰、非绝对化的一面。</p><p>1965年，美国控制论专家扎德Zadeh(Lotfi A．Zadeh)教授在Information and Control杂志上发表了题为Fuzzy Sets的论文，<strong>提出用“隶属函数”来描述现象差异的中间过渡，从而突破了经典集合论中属于或不属于的绝对关系</strong>。Zadeh教授这一开创性的工作，标志着数学的一个新分支——模糊数学的诞生。</p><h2 id="2-基础概念"><a href="#2-基础概念" class="headerlink" title="2. 基础概念"></a>2. 基础概念</h2><p>在介绍模糊综合评价模型前，需要介绍模糊数学中的一些基础概念</p><h3 id="A-模糊集、隶属度、隶属函数"><a href="#A-模糊集、隶属度、隶属函数" class="headerlink" title="A. 模糊集、隶属度、隶属函数"></a>A. 模糊集、隶属度、隶属函数</h3><p>给定论域$U$，定义$U$上的一个<strong>模糊集</strong>$A$为：</p><script type="math/tex; mode=display">\exists \mu_A(x), s.t. \forall x\in U \rightarrow\mu_A(x)\in[0,1]</script><p>称映射$\mu_A(x)$为模糊集$A$的<strong>隶属函数</strong>，而函数值$\mu_A(x)$称为元素$x$对模糊集$A$的<strong>隶属度</strong>。</p><p>因此，<strong>模糊集就是每个元素都有隶属度的集合</strong>。一个模糊集和一个隶属函数相关。</p><p>类比于概率，隶属度描述了一个元素属于这个模糊集的程度/概率</p><blockquote><p>例题：</p><p>从下列30条线段中选出长线段。设长度从1~30分别为30~1cm</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108104418258.png" alt="30条线段"></p><p>解：由题意得</p><p>“长”是模糊概念，因此可以用模糊集来描述。设$A$表示“长线段”的集合，$x<em>i,i=1,\cdots,30$表示第$i$条线段，则论域为$U={x_1,x_2,\cdots,x</em>{30}}$。</p><p>则线段$x_i$作为集合$A$的成员的资格即为$x_i$对$A$的隶属度。因此建立集合$A$的一种隶属函数如下：</p><p>因为线段越长，则其属于$A$的程度越大，因此线段$A$的长短可以用于作为表示A的隶属度。</p><p>从而，令$A(x_1)=1,A(x_2)=0$，作直线：</p><script type="math/tex; mode=display">A(x_i)-0=\frac{1-0}{1-30}(i-30)</script><p>故得到第$i$条线段$x_i$属于长线段集合$A$的隶属函数为：</p><script type="math/tex; mode=display">A(x_i)=\frac{1}{29}(30-i),\qquad i=1,2,\cdots,30</script></blockquote><h3 id="B-隶属函数"><a href="#B-隶属函数" class="headerlink" title="B. 隶属函数"></a>B. 隶属函数</h3><p><strong>隶属函数是将元素映射到隶属度的函数</strong>，其建立了元素和模糊评价之间的联系例如，身高175cm和高之间，假设在当前人群中高个子人群构成的模糊集$A$的隶属函数为$\mu_A$，那么若$\mu_A(175)=0.87$，那么我们就可以认为175cm的身高在当前人群中是高的，即175cm的人属于模糊集$A$。我们也可以理解为175cm的身高在当前人群中有87%的概率是高的。</p><h3 id="C-模糊集的运算"><a href="#C-模糊集的运算" class="headerlink" title="C. 模糊集的运算"></a>C. 模糊集的运算</h3><p>由于模糊集中没有元素和集合间的绝对隶属关系，所以模糊集的运算是通过隶属函数完成的。</p><p>设集合$A$、$B$为两个模糊集，其隶属函数分别为$\mu_A(x),\mu_B(x)$，则集合$A$与$B$常见的运算为：</p><ol><li><strong>包含</strong>：$A\subseteq B \Leftrightarrow \forall x \in A, \mu_A(x)\leq \mu_B(x)$</li><li><strong>相等</strong>：$A= B \Leftrightarrow \forall x \ in A, \mu_A(x) = \mu_B(x)$</li><li><strong>交</strong>：$C=A\cap B \Leftrightarrow \mu_C(x) = \mu_A(x)\land \mu_B(x)$</li><li><strong>并</strong>：$C=A\cup B \Leftrightarrow \mu_C(x) = \mu_A(x)\lor \mu_B(x)$</li><li><strong>补</strong>：$A^c\Leftrightarrow\mu<em>{A^C}(x)=1-\mu</em>{A}(x)$</li><li><strong>内积</strong>：$A\times B=\lor_{x\in U}(A(x)\land B(x))$</li><li><strong>外积</strong>：$A\otimes B=\land_{x\in U}(A(x)\lor B(x))$</li></ol><h2 id="3-隶属函数的确定"><a href="#3-隶属函数的确定" class="headerlink" title="3. 隶属函数的确定"></a>3. 隶属函数的确定</h2><p>由模糊集的概念可知，<strong>模糊数学的基本思想是用隶属度代替绝对的属于还是不属于</strong>，所以<strong>应用模糊数学方法建立数学模型的关键是建立符合实际的隶属函数</strong>。然而，如何确定一个模糊集的隶属函数至今还是尚未完全解决的问题。</p><p>目前，<strong>确定隶属度的常用方法是模糊分布法</strong>。模糊分布法将隶属函数看成一种模糊 分布，首先根据问题性质选取适当的模 糊分布，然后再依据相关数据确定分布中的参数。</p><p>模糊分布中常用的梯形分布如下</p><h3 id="A-偏小型"><a href="#A-偏小型" class="headerlink" title="A. 偏小型"></a>A. 偏小型</h3><p>偏小型指值越小越属于这个模糊集，对应的，其隶属函数如下：</p><script type="math/tex; mode=display">\begin{cases}1, & x< a\\\frac{b-x}{b-a}, & a \leq x \leq b\\0, & b < x\end{cases}</script><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108132351591.png" alt="偏小型隶属函数"></p><h3 id="B-偏大型"><a href="#B-偏大型" class="headerlink" title="B. 偏大型"></a>B. 偏大型</h3><p>偏大型指值越大越属于这个模糊集，对应的，其隶属函数如下</p><script type="math/tex; mode=display">\begin{cases}0, & x< a\\\frac{x-a}{b-a}, & a \leq x \leq b\\1, & b < x\end{cases}</script><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108132706169.png" alt="偏大型隶属函数"></p><h3 id="C-中间型"><a href="#C-中间型" class="headerlink" title="C. 中间型"></a>C. 中间型</h3><p>中间型指值越大和越小都不属于这个模糊集，只有在中间的时候才属于这个模糊集，例如人群中不高不矮的人群。其隶属函数如下</p><script type="math/tex; mode=display">\begin{cases}0, & x< a\\\frac{x-a}{b-a}, & a \leq x < b\\1, & b \leq x < c\\\frac{d-x}{d-c}, &c\leq x < d\\0, & d \leq x\end{cases}</script><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108133025758.png" alt="中间型隶属函数"></p><h2 id="4-模糊综合评价法"><a href="#4-模糊综合评价法" class="headerlink" title="4. 模糊综合评价法"></a>4. 模糊综合评价法</h2><p>评价是人类社会中经常性的、极为重要的认识活动。 <strong>对一个事物的评价通常要涉及多个因素或多个指标</strong>，评价是在多因素相互作用下的一种综合评判。</p><p>综合评价是数学建模竞赛中较为常见的问题， 如</p><ul><li>长江水质的评价与预测(2005A)</li><li>艾滋病疗法的 评价及疗效的预测(2006B)</li><li>2010上海世博会影 响力的定量评估(2010B)</li></ul><p>综合评价的方法众多，常用的有<strong>灰色评价法</strong>、 <strong>层次分析法</strong>、<strong>模糊综合评价法</strong>、<strong>数据包络分析法</strong>、 <strong>人工神经网络评价法</strong>、<strong>理想解法</strong>等。有时，还可将两种评价方法集成为组合评价方法。</p><p>各种评价方法出发点不同，解决问题的思路不同，适用对象不同，各有优缺点。不同的评价方法会产生不同的评价结论，有时甚至结论相左，即综合评价的结果不是唯一的。</p><p>而下面就将讲解其中的模糊综合评价法</p><h3 id="A-模糊综合评价法介绍"><a href="#A-模糊综合评价法介绍" class="headerlink" title="A. 模糊综合评价法介绍"></a>A. 模糊综合评价法介绍</h3><p>模糊综合评价作为模糊数学的一种具体应用，最早由我国学者汪培庄提出。基本思想是：<strong>以模糊数学为基础， 应用模糊关系合成原理，将一些边界不清、不易定量的因素定量化，从多个因素对被评价事物隶属等级状况进行综合评价</strong>。</p><p>具体步骤为：</p><ul><li>首先确定被评价对象的<strong>因素集</strong>和<strong>评价集</strong>（例如对成绩进行评价，那么语文、数学、英语就是因素集，而优、良和几个是评价集）</li><li>然后再分别确定各因素的权重及它们的隶属度向量，获得模糊评价矩阵</li><li>最后将模糊评价矩阵与因素的权向量进行模糊运算并归一化，从而得到模糊评价综合结果。</li></ul><p>模糊综合评价法简单易掌握，对多因素、多层次的复杂问题评价效果较好，很难为其它评价方法所替代。</p><h3 id="B-模糊综合评价法的步骤"><a href="#B-模糊综合评价法的步骤" class="headerlink" title="B. 模糊综合评价法的步骤"></a>B. 模糊综合评价法的步骤</h3><h4 id="1-确定评价指标和评价等级（因素集和评价集）"><a href="#1-确定评价指标和评价等级（因素集和评价集）" class="headerlink" title="1. 确定评价指标和评价等级（因素集和评价集）"></a>1. 确定评价指标和评价等级（因素集和评价集）</h4><p>设$U={u_1,u_2,\cdots,u_m}$为刻画被评价对象的$m$中因素（评价指标），$V={v_1,v_2,\cdots,v_n}$为刻画所有因素所处的状态的$n$种评语（评价等级）。</p><p>这里，$m$为评价因素的个数，通常由具体指标体系决定；$n$为评语的个数， 一般划分为3～5个等级。</p><blockquote><p><strong>某服装厂欲采用模糊综合评价法来了解顾客对某种服装的欢迎程度</strong>：</p><ol><li><p><strong>确定评价指标和评价等级</strong></p><p>顾客是否喜欢某种服装，通常与这种服装的花色、样式、价格、耐用度和舒适度等因素有关，故确定评价服装的因素集为</p><script type="math/tex; mode=display">U=\{花色, 样式, 价格, 耐用度，舒适度\}</script><p>综合评价的目的是弄清楚顾客对衣服各方面的欢迎程度，因此每个因素都可能受欢迎、不受欢迎等等。因此，评价集应为 </p><script type="math/tex; mode=display">V=\{很欢迎, 欢迎, 一般, 不欢迎\}</script></li></ol></blockquote><h4 id="2-构造模糊综合评价矩阵"><a href="#2-构造模糊综合评价矩阵" class="headerlink" title="2. 构造模糊综合评价矩阵"></a>2. 构造模糊综合评价矩阵</h4><p>在确定了评价指标和评价等级后，接着就要对每个评价指标$u_i(i=1,\cdots,m)$ 逐一进行模糊评价。</p><p>具体评价方法是：</p><ol><li><p>对评价指标$u<em>i$给出其能被评为等级$v_j$的隶属度$r</em>{ij}$。$r<em>{ij}$可理解为指标$u_i$对于等级$v_j$的隶属度，通常要将$r</em>{ij}$归一化以便于使用</p></li><li><p>设指标$u<em>i$的模糊评价为$r_i = ( r</em>{i1} , r<em>{i2} , \cdots, r</em>{in})$，则对所有评价指标$u_i(i=1,\cdots, m)$ 进行的模糊评价构成的<strong>矩阵$R$称为各指标的模糊综合评价矩阵</strong>。其中，</p><script type="math/tex; mode=display">R=(r_{ij})_{m\times n}\begin{bmatrix}r_{11} & r_{12} & \cdots & r_{1n}\\r_{21} & r_{22} & \cdots & r_{2n}\\\vdots & \vdots & \ddots & \vdots \\r_{m1} & r_{m2} & \cdots & r_{mn}\\\end{bmatrix}</script></li><li><p><strong>一般在真实问题中，隶属度$r_{ij}$可以通过频率法确定</strong></p></li></ol><blockquote><p><strong>某服装厂欲采用模糊综合评价法来了解顾客对某种服装的欢迎程度</strong>：</p><ol><li><p><strong>构造模糊综合评价矩阵</strong></p><p>服装厂通过问卷调查，对该服装的花色进行调查，众多被调查者中有20%认为“很欢迎”, 50%认为“欢迎”，30%认为“一般” ， 没有人认为“不欢迎”，则$u_1=花色$的评价向量为$R_1=(0.2, 0.5, 0.3, 0)$。同理，得到$R_2,R_3,R_4,R_5$，那么得到的模糊综合评价矩阵为</p><script type="math/tex; mode=display">R=\begin{bmatrix}R_1\\R_2\\R_3\\R_4\\R_5\\\end{bmatrix}=\begin{bmatrix}0.2 & 0.5 & 0.3 & 0\\0.1 & 0.3 & 0.5 & 0.1\\0 & 0.1 & 0.6 & 0.3\\0 & 0.4 & 0.5 & 0.1\\0.5 & 0.3 & 0.2 & 0\\\end{bmatrix}</script></li></ol></blockquote><h4 id="3-评价指标权重的确定"><a href="#3-评价指标权重的确定" class="headerlink" title="3. 评价指标权重的确定"></a>3. 评价指标权重的确定</h4><p>确定了模糊综合评价矩阵，尚不足以对事物做出评价。<strong>原因在于，各评价指标在评价目标中有不同的地位和作用，即各评价指标在综合评价中占有不同的权重</strong>。</p><p>为此，通常引入一个<strong>模糊向量</strong>$A=(a_1 , a_2 ,\cdots,a_n)$ 来表示各评价指标在目标中所占权重，称之为$权重向量$。其中$a_i$为$u_i$的权重，$\sum a_i=1, a_i\ge 0$。</p><p><strong>确定权重通常有主观和客观两类方法</strong>：</p><ul><li>主观法的代表是层次分析法，即通过因素（层次分析法中的指标）的比较矩阵判断得出来一个权重向量</li><li>客观法是根据各指标间的联系，利用数学方法计算出各指标的权重，如质量分数法、变异系数法等。</li></ul><blockquote><p><strong>变异系数法</strong></p><p>变异系数法的设计原理是：<strong>若某项指标的数值差异较大，能明确区分开各被评价对象，说明该指标的分辨信息丰富，因而应给该指标以较大的权重；反之，若各个被评价对象在某项指标上的数值差异较小，那么这项指标区分各评价对象的能力较弱，因而应给该指标较小的权重</strong></p><p>因为方差可以描述取值的离散程度，即某指标的方差反映了该指标的的分辨能力， 所以可用方差定义指标的权重。由于方差的大小是相对的，还需考虑指标取值的大小、量级，故指标的分辨能力可定义为</p><script type="math/tex; mode=display">v_i=\frac{s_i}{|\bar x_i|}</script><p>例：已知5个投资方案如下表，试确定4个评价指标的权重</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108141518205.png" alt="五个投资方案" style="zoom: 50%;"></p><p>解：根据变异系数法，可按照下列步骤 确定各指标的权重</p><ol><li><p><strong>计算第$i$项指标的均值与方差</strong>：</p><script type="math/tex; mode=display">\bar x_i=\frac 1 n \sum_{j=1}^na_{ij}\\s_i^2=\frac 1{n-1} \sum_{j=1}^n (a_{ij}-\bar x_i)^2</script></li><li><p>计算每个指标的分辨能力，取归一化后的分辨能力为各指标的权重</p><script type="math/tex; mode=display">v_i = \frac {s_i} {|\bar x_i|}\\w_i = \frac {v_i}{\sum v_i}</script></li><li><p>最终解得，四个指标的权重为：$w=(0.244, 0.172, 0.173, 0.412)$</p></li></ol><p>需要指出的是，<strong>用变异系数法求出的某指标的权重与该指标在评价体系中的重要性是两个概念，变异系数法的作用只是提高指标的分辨能力，利于排序</strong>。因为变异系数法的权重计算是根据指标的分辨能力计算的。</p><p>其实，<strong>使用变异系数法的前提恰恰是所有指标在评价体系中的重要性相当</strong>。 也就是说，当<strong>指标在评价体系中的重要性相差较大时，使用变异系数法确定权重并不一定合适</strong></p></blockquote><h4 id="4-模糊合成与综合评价"><a href="#4-模糊合成与综合评价" class="headerlink" title="4. 模糊合成与综合评价"></a>4. 模糊合成与综合评价</h4><p>模糊综合评价矩阵R中的不同行反映了被评价事物从不同的指标评价对各等级的隶属程度。<strong>用权向量A将不同的行进行综合，就可得到被评价事物从总体上对各等级的隶属程度，即模糊综合评价结果</strong>。</p><p>通常采用所谓的<strong>模糊合成</strong>来实现上述的综合。</p><p>模糊合成的基本思想是：<strong>对评价矩阵$R$和权向量$A$进行某种适当的模糊运算, 将两者合成为一个模糊向量$B={b_1,b_2,\cdots,b_n}$， 即$B=A M R$，$M$为模糊合成算子然后对B按照一定法则进行综合分析后即可得出最终的模糊综合评价结果</strong>。</p><p>常见的模糊合成算子有：</p><ul><li>主因素突出型：$M(\land, \lor):b<em>j=\lor</em>{i=1}^m(a<em>i\land r</em>{ij})$</li><li>主因素突出型：$M(\cdot, \lor):b<em>j=\lor</em>{i=1}^m(a<em>i\cdot r</em>{ij})$</li><li>加权平均型：$M(\land, \oplus):b<em>j=\sum</em>{i=1}^m(a<em>i\land r</em>{ij})$</li><li>加权平均型：$M(\cdot, \oplus):b<em>j=\sum</em>{i=1}^m(a<em>i\cdot r</em>{ij})$</li></ul><p>注意，算子是对矩阵沿列计算的，相当于A右乘R，同时使用算子。即<code>np.apply_along_axis(axis=1)</code></p><p>上述模糊合成算子的特点如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108143220851.png" alt="模糊合成算子的特点" style="zoom:67%;"></p><p>此外，也可以取M为普通的矩阵乘法， 此时合成即为加权平均。至于到底取何种算子取决于问题的性质和算子的特点。</p><p>通常而言，采用<strong>主因素突出型</strong>和<strong>加权平均型算法</strong>的结果大同小异。但在实际中还是要注意这两类算法的特点：</p><ul><li>主因素突出型适用于模糊矩阵中数据相差很悬殊的情形</li><li>加权平均型则常用于因素很多的情形，可以避免信息丢失</li></ul><p>此外，上面的$B$全称为<strong>模糊综合评价向量</strong>，满足$0\leq b_j \leq 1$，且$b_j$需要进行归一化。$b_j$可以理解为被评价对象对第$j$等级的隶属度。</p><p>对$B$分析处理后即可获得综合评价结果。分析处理$B$的常用方法有：</p><ol><li><p><strong>最大隶属度法</strong>：即认定被评价对象的等级为最大隶属度对应的等级, 适用于某隶属度明显大于其它隶属度的情形</p></li><li><p><strong>加权平均法</strong>：具体方法是，给定评价集$V={v_1 ,v_2 ,\cdots,v_n}$中的各等级赋以适当的分值$C={c_1,c_2,\cdots,c_n}$，用归一化的综合评价向量$B={b_1,b_2,\cdots,b_n}$对C的加权平均，得到的值就是模糊综合评价的结果，即：</p><script type="math/tex; mode=display">最终评价=\sum_{i=1}^nc_ib_i</script></li></ol><blockquote><p>例如, 设评价等级集为${很好, 好, 一 般, 差}$，综合评价向量$B=[0.4, 0.3, 0.2, 0 . 1 ]$。</p><ul><li>按最大隶属度法，评价等级为 “很好”。</li><li>若给评价集分别赋值$[4, 3, 2, 1]$，则加权平均值为4 * 0.4 + 3 * 0.3 + 2 * 0.2 + 1 * 0.1 = 3.0，评价为好</li></ul></blockquote><h3 id="C-模糊综合评价法的案例"><a href="#C-模糊综合评价法的案例" class="headerlink" title="C. 模糊综合评价法的案例"></a>C. 模糊综合评价法的案例</h3><blockquote><p><strong>教师教学评价</strong></p><p>在教学过程的综合评价中，取因素集$U={清楚易懂, 教材熟悉, 生动有趣, 板书整齐清晰}$，评价集 $V={很好, 较好, 一般,不好}$。设某班学生对教师的教学评价矩阵为</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108150003732.png" alt="评价矩阵" style="zoom:67%;"></p><p>若考虑评价集的权重$A=(0.5, 0.2, 0.2, 0.1)$，试求学生对这位教师的综合评价。</p><p>解：</p><p>根据A和R，利用四种合成算子， 编程计算得</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108151125965.png" alt="模糊综合评价矩阵" style="zoom:50%;"></p><p>可以看出，第二列较大而第三列较小，因此就认为老师0.3左右是很好的老师，0.4左右是较好的老师，0.2左右是不好的老师，0.06左右是不好的老师</p></blockquote><h3 id="D-模糊综合评价矩阵的获得"><a href="#D-模糊综合评价矩阵的获得" class="headerlink" title="D. 模糊综合评价矩阵的获得"></a>D. 模糊综合评价矩阵的获得</h3><p>上面举得例子简单明了，然而上面的例子实在是太过于简单，因为不仅给出了模糊综合评价矩阵$R$，而且还直接给出了权重向量$A$。实际问题往往只提供了一系列的评价对象以及每个对象的若干评价指标，并且这些指标可能数值差异很大，性质也不同。</p><p>此时，不仅指标的权重向量$A$需要根据适当的方法确定，就连评价矩阵$R$也要按照某种方法对评价指标进行处理后才能获得。</p><ul><li>确定权重向量$A$的常用方法是前面介绍的<strong>变异系数法</strong></li><li>而处理评价指标获取评价矩阵$R$的常用方法除了前面的评论法以外，还有：<strong>相对偏差法</strong>和<strong>相对优属度法</strong></li></ul><h4 id="1-相对偏差模糊矩阵评价法"><a href="#1-相对偏差模糊矩阵评价法" class="headerlink" title="1.  相对偏差模糊矩阵评价法"></a>1.  相对偏差模糊矩阵评价法</h4><p>相对偏差模糊矩阵评价法与灰色关联分析有点类似。首先虚拟一个理想方案$u$，然后按照某种方法建立各方案与$u$的偏差矩阵$R$，再确定各评价指标的权重$A$，最后用$A$对$R$加权平均得各方案与$u$的综合距离$F$，则根据$F$即可对方案进行排序即可。</p><p>相对偏差法评价法的基本步骤如下：</p><ol><li><p><strong>虚拟理想方案</strong>：</p><script type="math/tex; mode=display">u=(u_1, u_2,\cdots, u_n)</script><p>其中，即越多越好的取最大值，越少越好的取最小值</p><script type="math/tex; mode=display">u_i=\begin{cases}\max_j{a_{ij}}, & a_{ij}为效益型指标，即越大越好\\\min_i{a_{ij}}, & a_{ij}为成本型指标，即越小越好\end{cases}</script></li><li><p><strong>建立相对偏差模糊矩阵$R$</strong></p><script type="math/tex; mode=display">R=\begin{bmatrix}r_{11} & r_{12} & \cdots & r_{1n}\\r_{21} & r_{22} & \cdots & r_{2n}\\\vdots & \vdots & \ddots & \vdots \\r_{m1} & r_{m2} & \cdots & r_{mn}\\\end{bmatrix}</script><p>其中，$a_{ij}$为收集得到的数值</p><script type="math/tex; mode=display">r_{ij}=\frac{|a_{ij}-u_i|}{\max_j a_{ij} - \min_j a_{ij}}</script></li><li><p>确定各评价指标权重$w_i$</p></li><li><p>对各方案的偏差加权平均</p><script type="math/tex; mode=display">F_j=\sum_{i=1}^mw_ir_{ij},\qquad j=1,2,\cdots,n</script></li><li><p>根据$F_j$值进行综合评价：若$F_t$&lt;$F_s$，则第$t$个方案排在第$s$个方案之前</p></li></ol><blockquote><p><strong>技术方案评价</strong></p><p>现有下列5个农业技术经济方案，试评价各方案的优劣。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108153619522.png" alt="五个技术方案" style="zoom: 50%;"></p><p>解：</p><p>上述评价指标中，产量、肥力是效益型，而其余均为成本型。</p><ol><li><p>理想方案为:</p><script type="math/tex; mode=display">u=[1000, 60, 4000, 1, 30, 0.5, 1]</script></li><li><p>根据前述方法求出相对偏差模糊矩阵</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108153803418.png" alt="五个技术方案的相对偏差矩阵" style="zoom:50%;"></p></li><li><p>由变异系数法求出指标权重</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108153841727.png" alt="求指标权重" style="zoom:50%;"></p><p>得到指标权重为</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108153907216.png" alt="指标权重" style="zoom:50%;"></p></li><li><p>求加权平均偏差并排序</p><script type="math/tex; mode=display">加权平均偏差为=[0.3525, 0.4558, 0.4505, 0.5206, 0.5864]</script><p>故方案的优劣次序为1、3、2、4、5。</p></li></ol></blockquote><h4 id="2-相对优属度模糊矩阵评价法"><a href="#2-相对优属度模糊矩阵评价法" class="headerlink" title="2. 相对优属度模糊矩阵评价法"></a>2. 相对优属度模糊矩阵评价法</h4><p>相对偏差法的评价依据是各方案与理想方案的偏差，而<strong>相对优属度评价法的基本思想是：首先用适当的方法将所有指标(效益型、 成本型、固定型)转化为效益型(成本型)，得到优属度矩阵$R$，再确定各评价指标的权重$A$，最后用$A$对$R$加权平均得各方案的综合优属度$F$, 则根据$F$即可对方案进行排序</strong></p><p>相对优属度评价法步骤如下：</p><ol><li><p>建立模糊效益矩阵$R_{ij}$    ，其中$\alpha_j$是第$j$个指标的适度值</p><script type="math/tex; mode=display">r_{ij}=\begin{cases}\frac {a_{ij}}{\max_j a_{ij}}, & a_{ij}为效益型\\\frac {\min_j a_{ij}}{a_{ij}}，& a_{ij}为成本型\\\frac {\min_j |a_{ij}-\alpha_j|}{a_{ij}-\alpha_j}, & a_{ij}为固定型\end{cases}</script></li><li><p>确定各评价指标权重$w_i$</p></li><li><p>对各方案的偏差加权平均</p><script type="math/tex; mode=display">F_j=\sum_{i=1}^mw_ir_{ij},\qquad j=1,2,\cdots,n</script></li><li><p>根据$F_j$值进行综合评价：若$F_t&gt;F_s$，则第$t$个方案排在第$s$个方案之前</p></li></ol><blockquote><p><strong>投资方案评价</strong></p><p>已知5个投资方案如下表，试确定4个评价指标的权重</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108141518205.png" alt="五个投资方案" style="zoom: 50%;"></p><p>解：</p><p>4个指标中，投资额、风险损失为成本型，期望净现值、风险盈利值为效益型</p><ol><li><p>按前述方法建立相对优属度模糊矩阵</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108155736847.png" alt="相对优属度模糊矩阵"></p></li><li><p>由变异系数法求出指标权重</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108155807607.png" alt="指标权重"></p></li><li><p>各方案的加权平均优属度</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220108155831023.png" alt="加权平均优属度"></p></li></ol><p>故方案排序为1, 3, 5, 2, 4</p></blockquote><h2 id="5-灰色关联分析、相对偏差法以及相对优属度法的讨论"><a href="#5-灰色关联分析、相对偏差法以及相对优属度法的讨论" class="headerlink" title="5. 灰色关联分析、相对偏差法以及相对优属度法的讨论"></a>5. 灰色关联分析、相对偏差法以及相对优属度法的讨论</h2><p>我们在前面介绍了灰色关联分析，这里又介绍了相对偏差法和相对优属度法。三者尽管具体的步骤不同，但是其核心思想都是一致的，即：找出当前评价体系下最优的方案，然后将现有的方案和最优的方案进行比较，以偏差最小的方案作为最佳方案。</p><p>因此，我们自然就会有一个问题：这三种方法评价同一问题的结论完全一致吗？</p><blockquote><p><strong>针对上面的投资方案</strong></p><ul><li>相对偏差法的方案排序为：1、3、5、4、2</li><li>相对优属度法的排序为：1、3、5、2、4</li><li>灰色关联分析：1、3、2、4、5</li></ul><p><strong>针对上面的农业技术方案</strong>：</p><ul><li>相对偏差法的方案排序为：1、4、2、3、5</li><li>相对优属度法的排序为：1、3、2、4、5</li><li>灰色关联分析：1、3、2、5、4</li></ul></blockquote><p>对于相对偏差法和相对优属度法而言，两者的因素（指标）的权重的计算是依靠变异系数法求得的，而灰色关联分析中我们最后实际上没有乘以权重矩阵，而是把每个指标当做同等重要对待，因此会存在不同</p><p>此外，三者中间得到评价矩阵的方式不同，灰色关联分析是用最大和最小的偏差来描述的，而相对偏差则是偏差，相对优属度法通过函数（等效优属度）。</p><p>因此上述两个原因就是导致三个方法排序得到的指标并不相同的结果，因此：</p><ul><li>灰色关联分析法、相对偏差法和相对优属度法对同一问题的评价、排序结果不尽相同；</li><li>当各指标在评价体系重要性相当时，用变异系数法确定指标权重，可提高上述方法排序的分辨率</li><li>当各指标在评价体系重要性差异较大时，可考虑用层次分析法确定指 标权重</li><li>在实际中, 对于评价类问题，应同时应用上述几种方法进行综合评价， 以提高评价的可靠性</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学建模算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Math Modeling </tag>
            
            <tag> 模糊数学 </tag>
            
            <tag> 模糊综合评价 </tag>
            
            <tag> Fuzzy Comprehension Evaluation Method </tag>
            
            <tag> fuzzy mathematics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模算法7-一维二维插值以及拟合</title>
      <link href="/2022/01/07/shu-xue-jian-mo-suan-fa-7-yi-wei-er-wei-cha-zhi-yi-ji-ni-he/"/>
      <url>/2022/01/07/shu-xue-jian-mo-suan-fa-7-yi-wei-er-wei-cha-zhi-yi-ji-ni-he/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了数学建模中常见的算法（数据处理方法）：插值以及拟合</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/300px-Splined_epitrochoid.svg.png" alt="插值" style="zoom:150%;"></p><p>PS：图的含义一组离散数据点在一个外延的插值。曲线中实际已知数据点是红色的；连接它们的蓝色曲线即为插值。</p><h1 id="数学建模算法7-一维二维插值以及拟合"><a href="#数学建模算法7-一维二维插值以及拟合" class="headerlink" title="数学建模算法7-一维二维插值以及拟合"></a>数学建模算法7-一维二维插值以及拟合</h1><p>严格意义上来说，和前面介绍的各种算法不同，插值和拟合都是数据处理的手段。而由于这个系列介绍的就是数学建模中常用的知识，包括了常用算法、常用问题和常用技巧，因此也一并介绍。</p><p>在数学建模的过程中，经常出现的一类操作就是需要对数据进行补全以及外推。例如下面的例子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107154114356.png" alt="数据补全的例子" style="zoom: 50%;"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107154218906.png" alt="数据外推的例子" style="zoom: 67%;"></p><p>从表象上来看，第一个例子中，我们需要的数据在已有的数据范围内，而第二个例子中我们需要的数据并不在已有的数据范围内，两个问题分别对应<strong>插值</strong>问题和<strong>拟合</strong>问题。其实更一般的，<strong>插值寻求得到函数解析式</strong>而<strong>拟合寻求得到趋势的解析式</strong>。之间的规律。</p><p>插值和拟合最大的区别在于，<strong>插值那就一定得过数据点</strong>。拟合，就是要得到<strong>最接近的结果，是要看总体效果，因此不一定过所有的数据点</strong>。例如下面的图中，左边一列是插值而右边的一列是拟合。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/v2-2d00103d6c2813e686caba5917d184c6_r.jpg" alt="插值和拟合的区别"></p><p>借用知乎上的回答:</p><blockquote><p>最小二乘意义下的拟合，是要求拟合函数与原始数据的均方误差达到极小，是一种整体意义的逼近，对局部性质没有要求。而所谓“插值”，就是要在原有离散数据之间“插入”一些值，这就要求插值函数必须通过所有的离散点，插值函数在离散点之外的那些点都相当于“插入”的值。插值有全局插值，也有局部插值（比如分段线性插值），插值误差通常考虑的是逐点误差或最大模误差，插值的好坏往往通过某些局部的性质来体现，比如龙格现象或吉布斯振荡。</p><p>作者：李晓<br>链接：<a href="https://www.zhihu.com/question/24276013/answer/32942153">https://www.zhihu.com/question/24276013/answer/32942153</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h1 id="一、插值"><a href="#一、插值" class="headerlink" title="一、插值"></a>一、插值</h1><p>先来看看一些插值的问题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107161744700.png" alt="问题一" style="zoom: 67%;"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107161815987.png" alt="问题二" style="zoom: 67%;"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107161844996.png" alt="问题三" style="zoom: 67%;"></p><p>这些问题可归结为：已知函数在某区间 (域)内若干点处的值，求函数在该区间（域）内其它点处的值。这种问题适宜用插值方法解决。</p><p>因此，将一维插值问题描述为：</p><script type="math/tex; mode=display">已知函数在x_0,x_1,\cdots,x_n处的值y_0,y_1,\cdots,y_n。求简单函数p(x)，使得p(x_i)=y_i</script><p>由于泰勒定理，对于一个足够光滑的函数，可以用一个多项式函数来表示。因此一般将$p(x)$取为多项式。</p><p>此外，由范德蒙行列式和克莱姆法则可以证明，使得在$x_0,x_1,\cdots,x_n$处取值$y_0,y_1,\cdots,y_n$的多项式存在且唯一。因此插值问题一定有解，因为至少有一个多项式的解。</p><h2 id="1-插值的介绍"><a href="#1-插值的介绍" class="headerlink" title="1. 插值的介绍"></a>1. 插值的介绍</h2><p>关于插值，形象的理解就是在前面所说的，根据已有的数据生成得到已经采集到的数据域内的未采集的数据点。更加严谨的定义见下面百度百科和维基百科的介绍</p><blockquote><p><strong>From BaiduBaike</strong>：</p><p>在离散数据的基础上补插连续函数，使得这条连续曲线通过全部给定的离散数据点。 插值是离散函数逼近的重要方法，利用它可通过函数在有限个点处的取值状况，估算出函数在其他点处的近似值。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107160225083.png" alt="百度百科行对插值的介绍"></p><p><strong>From Wikipedia</strong>：</p><p>在数学的数值分析领域中，内插，或称插值（英语：Interpolation），是一种通过已知的、离散的数据点，在范围内推求新数据点的过程或方法。求解科学和工程的问题时，通常有许多数据点借由采样、实验等方法获得，这些数据可能代表了有限个数值函数，其中自变量的值。而根据这些数据，我们往往希望得到一个连续的函数（也就是曲线）；或者更密集的离散方程与已知数据互相吻合，这个过程叫做拟合。</p><p>与插值密切相关的另一个问题是通过简单函数逼近复杂函数。假设给定函数的公式是已知的，但是太复杂以至于不能有效地进行评估。来自原始函数的一些已知数据点，或许会使用较简单的函数来产生插值。当然，若使用一个简单的函数来估计原始数据点时，通常会出现插值误差；然而，取决于该问题领域和所使用的插值方法，以简单函数推得的插值数据，可能会比所导致的精度损失更大。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107160316529.png" alt="维基百科上对插值的介绍"></p></blockquote><h2 id="2-常见的插值方法"><a href="#2-常见的插值方法" class="headerlink" title="2. 常见的插值方法"></a>2. 常见的插值方法</h2><h3 id="A-最邻近插值"><a href="#A-最邻近插值" class="headerlink" title="A. 最邻近插值"></a>A. 最邻近插值</h3><p>最邻近插值即指使用最邻近的已采集的数据的值作为需要的点处的值</p><h3 id="B-线性插值"><a href="#B-线性插值" class="headerlink" title="B. 线性插值"></a>B. 线性插值</h3><p>线性插值通过已知点计算得到一个线性函数，从而通过线性函数来获得未知点的值</p><h3 id="C-样条插值"><a href="#C-样条插值" class="headerlink" title="C. 样条插值"></a>C. 样条插值</h3><p>样条函数指一种特殊的函数，由分段的多项式定义。样条插值即指分区间用多个低次多项式进行拟合</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/55/Parametic_Cubic_Spline.svg/400px-Parametic_Cubic_Spline.svg.png" alt="样条函数的例子"></p><h3 id="D-多项式插值"><a href="#D-多项式插值" class="headerlink" title="D. 多项式插值"></a>D. 多项式插值</h3><p>对于$n$个点，选择一个高次的多项式来经过所有点。二次插值、三次差值都是多项式插值的特例。</p><h3 id="E-拉格朗日插值（Lagrange-Interpolation）"><a href="#E-拉格朗日插值（Lagrange-Interpolation）" class="headerlink" title="E. 拉格朗日插值（Lagrange Interpolation）"></a>E. 拉格朗日插值（Lagrange Interpolation）</h3><p>拉格朗日插值法（Lagrange Interpolation） 指的是在节点上给出节点基函数，然后通过基函数的线性组合，组合系数为节点函数值的一种插值方法。</p><p>例如现在需要对下面的三个点进行插值</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107163405396.png" alt="插值的例子"></p><p>虽然我们可以写一个多项式$f(x)=ax^2+bx+c$，然后去通过$(x_1,y_1),(x_2,y_2),(x_3,y_3)$这三个点获得三个式子，然后求解出来$a,b,c$三个系数即可。</p><p>然而这样做比较麻烦，因此拉格朗日插值法找到了分别通过$(x_1,y_1),(x_2,y_2),(x_3,y_3)$三个点的基函数，而基函数在其他点处的值为0。例如，通过$(x_1,y_1)$的基函数$f_1(x)$满足$f_1(x_1)=y\land f_1(x_2)=0 \land f_1(x_3)=0$。然后将三个基函数叠加即可。</p><p>在具体实操作上则找的是$f_1(x_1)=1\land f_1(x_2)=0 \land f_1(x_3)=0$，这样就可以设表达式是$f_1(x)=a(x-x_2)(x-x_3)$，然后带入$x_1,y_1)$求出$a$即可。</p><p>因此对于上面的例子，找到的基函数分别为下面三个：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107163925815.png" alt="三个基函数"></p><p>那么最终通过插值得到的表达式为</p><script type="math/tex; mode=display">f(x)=y_1f_1(x)+y_2f_2(x)+y_3f_3(x)</script><p>进一步，对于$n$个点进行拉格朗日插值法得到的表达式为</p><script type="math/tex; mode=display">f(x)=\sum_{i=0}^n y_i\prod_{j\neq i}\frac{x-x_j}{x_i-x_j}</script><h2 id="3-高次差值的Runge现象"><a href="#3-高次差值的Runge现象" class="headerlink" title="3. 高次差值的Runge现象"></a>3. 高次差值的Runge现象</h2><p>在研究插值问题的初期，所有人都想当然地认为（使用多项式插值的时候）插值多项式的次数越高，插值精度越高。然而Runge 通过对一个例子的研究发现， 上述结论仅仅在插值多项式的次数不超过七时成立；<strong>插值多项式的次数超过七时， 插值多项式会出现严重的振荡现象，称之为Runge现象</strong>。</p><p>例如我们下面对$f(x)=\frac 1 {1+25x^2}$从-1到1均匀的采点，然后用一个10次的多项式去拟合的结果。可以看到在中间（-0.2~0.2）拟合的还不错，可是越往两边越离谱，甚至只能保证曲线一定过这个点。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107165257557.png" alt="Runge现象的例子" style="zoom: 67%;"></p><p>然而若使用多项式插值，那么由于需要插值的点越来越多，多项式的次数一定会越来越高。因此为了解决龙格现象，使用分段的方式进行插值。即将所有的点分成多个区间，每个区间内用低次多项式进行插值，然后在区间的交界处通过二阶导连续等手段使得多个区间得到的多项式之间连续。例如上面介绍的样条插值。一般来说，为了所取得多项式次数最好少于7。</p><p>对上面的式子进行样条插值得到的结果如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107170128557.png" alt="样条插值的结果" style="zoom: 67%;"></p><h2 id="4-Python中的插值"><a href="#4-Python中的插值" class="headerlink" title="4. Python中的插值"></a>4. Python中的插值</h2><p>Python中的插值使用SciPy中的interpolate模块完成。</p><p>下面的内容主要参考<a href="https://zhuanlan.zhihu.com/p/136700122">博客</a>：<a href="https://zhuanlan.zhihu.com/p/136700122">https://zhuanlan.zhihu.com/p/136700122</a></p><h3 id="A-一维插值"><a href="#A-一维插值" class="headerlink" title="A. 一维插值"></a>A. 一维插值</h3><p>一维插值指的是自变量是一个标量，我们前面举得例子都是一维插值。</p><p>一维插值主要使用<code>scipy.interpolate.interp1d</code>类实现，其签名如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">scipy</span><span class="token punctuation">.</span>interpolate<span class="token punctuation">.</span>interp1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> kind<span class="token operator">=</span><span class="token string">'linear'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> copy<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> bounds_error<span class="token operator">=</span>None<span class="token punctuation">,</span> fill_value<span class="token operator">=</span>nan<span class="token punctuation">,</span> assume_sorted<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，我们需要关注的有：</p><ul><li>x，y：需要插值的x和y的值</li><li>kind：插值方式，所有可选项为：‘linear’, ‘nearest’, ‘nearest-up’, ‘zero’, ‘slinear’, ‘quadratic’, ‘cubic’, ‘previous’, or ‘next’。默认为线性插值</li></ul><p>注意，该类实现了call方法，因此直接call即可</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>interpolate <span class="token keyword">as</span> scinterp<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>x<span class="token punctuation">)</span>x_a <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>f <span class="token operator">=</span> scinterp<span class="token punctuation">.</span>interp1d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>y_a <span class="token operator">=</span> f<span class="token punctuation">(</span>x_a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_a<span class="token punctuation">,</span> y_a<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B-二维插值"><a href="#B-二维插值" class="headerlink" title="B. 二维插值"></a>B. 二维插值</h3><p>二维插值指的是自变量是一个具有两个分量的向量。虽然我们前面讲的都是一维插值的方法，其实对于二维插值，只需要对两个分量分别进行插值即可，即双xxx插值，例如双线性插值。</p><p>Python中实现二维插值主要使用<code>scipy.interpolate.interp2d</code>类实现，其签名如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">scipy</span><span class="token punctuation">.</span>interpolate<span class="token punctuation">.</span>interp2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> kind<span class="token operator">=</span><span class="token string">'linear'</span><span class="token punctuation">,</span> copy<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> bounds_error<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> fill_value<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，需要关注的参数为：</p><ul><li>x, y：二维的点，要么是类似MATLAB的mesh一样的网格点，要么是两个等长的Numpy数组表示点的x，y坐标。</li><li>z：二维点对应的值</li><li>kind：插值方法，可选的选项有：‘linear’, ‘cubic’, ‘quintic’</li></ul><p>最后，一般来说一维插值用样条插值而二维插值用立方插值</p><h1 id="二、拟合"><a href="#二、拟合" class="headerlink" title="二、拟合"></a>二、拟合</h1><p>在插值问题中要求得到的函数解析式过所有数据点。然而再很多时候，数据量一大，这个时候插值得到的函数解析式无论怎么样都会很复杂。还有很多时候数据是没有解析式的。而且通过插值得到的函数的龙格现象和吉布斯震荡导致在数值域外的震荡非常大，往往使用插值得到的函数只能确保在数值域内的值可信而对数值域外的值不是非常可信。因此针对这种情况，我们就通过拟合来完成。</p><p>拟合的目的在于找出数据间的近似函数，其：</p><ol><li>拟合函数不一定过所有数据点</li><li>插值主要求函数值，而拟合主要求函数关系，从而进行进一步的预测</li></ol><p>拟合的难点在于两个关键点：</p><ol><li>拟合曲线的线型选择</li><li>线型中参数的计算</li></ol><p>通常而言，线型的选择依靠专业知识（先验知识）和散点图；而参数的计算，若为线性拟合则用最小二乘法，非线性拟合则用Gauss-Newton迭代法。</p><h2 id="1-Python中的拟合"><a href="#1-Python中的拟合" class="headerlink" title="1. Python中的拟合"></a>1. Python中的拟合</h2><p>Python中的拟合主要依靠Numpy、Scipy中的函数</p><h3 id="A-多项式拟合"><a href="#A-多项式拟合" class="headerlink" title="A. 多项式拟合"></a>A. 多项式拟合</h3><p>多项式拟合主要使用Numpy中的<code>polyfit</code>函数，其函数签名如下</p><pre class="line-numbers language-python"><code class="language-python">numpy<span class="token punctuation">.</span>polyfit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> deg<span class="token punctuation">,</span> rcond<span class="token operator">=</span>None<span class="token punctuation">,</span> full<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> w<span class="token operator">=</span>None<span class="token punctuation">,</span> cov<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，我们需要关注的为：</p><ul><li>x, y: 需要拟合的数据的x和y的值</li><li>deg：拟合的多项式次数</li></ul><p>返回值为Numpy中的ndarray，分比为从高到低次的项的系数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltx <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>pi<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token number">1.5</span> <span class="token operator">*</span> xy_noise <span class="token operator">=</span> y <span class="token operator">+</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>coeff <span class="token operator">=</span> np<span class="token punctuation">.</span>polyfit<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token operator">=</span>y_noise<span class="token punctuation">,</span> deg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_noise<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x <span class="token operator">*</span> coeff<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> coeff<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107220729119.png" alt="拟合的结果"></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Math Modeling </tag>
            
            <tag> 一维二维插值 </tag>
            
            <tag> 拟合 </tag>
            
            <tag> Interpolation </tag>
            
            <tag> Fitting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模算法6-灰色关联分析与预测</title>
      <link href="/2022/01/06/shu-xue-jian-mo-suan-fa-6-hui-se-guan-lian-fen-xi-yu-yu-ce/"/>
      <url>/2022/01/06/shu-xue-jian-mo-suan-fa-6-hui-se-guan-lian-fen-xi-yu-yu-ce/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了数学建模中常见的分析与预测算法：灰色关联分析和灰色预测</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/Steps-for-inscribed-cored-grey-relational-analysis-model-IC-GRA-model-calculations.png" alt="灰色关联分析"></p><h1 id="数学建模算法6-灰色关联分析与预测"><a href="#数学建模算法6-灰色关联分析与预测" class="headerlink" title="数学建模算法6-灰色关联分析与预测"></a>数学建模算法6-灰色关联分析与预测</h1><p>灰色关联分析法主要解决对一个系统中多个变量进行分析，从而得出哪些变量和目标变量之间是正相关，哪些是负相关。而灰色预测模型则是在灰色关联分析的基础上，对目标变量未来的发展趋势进行预测的算法。两者都属于灰色系统理论。</p><p>因此，灰色系统理论处理的问题为：<strong>相关性分析</strong>以及<strong>预测</strong>两类问题</p><p>灰色关联分析是数学建模中非常常用的一系列算法，例如：</p><ul><li>CUMCM2003A SARS的传播问题</li><li>CUMCM2005A 长江水质的评价和预测</li><li>CUMCM2006A 出版社的资源配置</li><li>CUMCM2006B 艾滋病疗法的评价及疗效的预测问题</li><li>CUMCM2007A 中国人口增长预测</li></ul><p>我们可以更详细的看一下其中的两个问题:</p><blockquote><p><strong>问题一：SARS传播问题</strong></p><p>SARS（Severe Acute Respiratory Syndrome，严重急 性呼吸道综合症, 俗称：非典型肺炎）是21世纪第一 个在世界范围内传播的传染病。SARS的爆发和蔓延 给我国的经济发展和人民生活带来了很大影响，我们 从中得到许多重要的经验和教训，认识到定量地研究 传染病的传播规律、为预测和控制传染病蔓延创造条 件的重要性。请你们对SARS 的传播建立数学模型， 具体要求如下：</p><ol><li>对附件1所提供的一个早期的模型，评价其合理性和实用性</li><li>建立你们自己的模型，说明为什么优于附件1中 的模型；特别要说明怎样才能建立一个真正能够预测 以及能为预防和控制提供可靠、足够的信息的模型， 这样做的困难在哪里？对于卫生部门所采取的措施做 出评论，如：提前或延后5天采取严格的隔离措施， 对疫情传播所造成的影响做出估计。附件2提供的数据供参考。</li><li>收集SARS对经济某个方面影响的数据，建立相应的数学模型并进行预测。附件3提供的数据供参考</li></ol><p><strong>问题二：长江水质的评价和预测</strong></p><p>水是人类赖以生存的资源，保护水资源就是保护我们自己，对 于我国大江大河水资源的保护和治理应是重中之重。专家们呼吁 ：“以人为本，建设文明和谐社会，改善人与自然的环境，减少 污染。” 长江是我国第一、世界第三大河流，长江水质的污染程度日趋 严重，已引起了相关政府部门和专家们的高度重视。2004年10月 ，由全国政协与中国发展研究院联合组成“保护长江万里行”考 察团，从长江上游宜宾到下游上海，对沿线21个重点城市做了实 地考察，揭示了一幅长江污染的真实画面，其污染程度让人触目 惊心。为此，专家们提出“若不及时拯救，长江生态10年内将濒 临崩溃”（附件１），并发出了“拿什么拯救癌变长江”的呼唤 （附件2）。</p><p>附件3给出了长江沿线17个观测站（地区）近两年多主要水质指标 的检测数据，以及干流上７个观测站近一年多的基本数据（站点距离 、水流量和水流速）。通常认为一个观测站（地区）的水质污染主要 来自于本地区的排污和上游的污水。 一般说来，江河自身对污染物都有一定的自然净化能力，即污染 物在水环境中通过物理降解、化学降解和生物降解等使水中污染物的 浓度降低。反映江河自然净化能力的指标称为降解系数。 事实上，长江干流的自然净化能力可以认为是近似均匀的，根据 检测可知，主要污染物高锰酸盐指数和氨氮的降解系数通常介于 0 . 1 ~ 0 . 5之间，比如可以考虑取0 . 2　(单位：1 /天)。附件4是 “1995~2004年长江流域水质报告”给出的主要统计数据。下面的附 表是国标(GB3838-2002) 给出的《地表水环境质量标准》中4个主要项 目标准限值，其中Ⅰ、Ⅱ、Ⅲ类为可饮用水</p><p>请你们研究下列问题：</p><ol><li>对长江近两年多的水质情况做出定量的综合评价，并分析各地区水质的污染状况。</li><li>研究、分析长江干流近一年多主要污染物高锰酸盐指数和氨氮的污染源主要在哪些地区?</li><li>假如不采取更有效的治理措施，依照过去10年的主要统计数据， 对长江未来水质污染的发展趋势做出预测分析，比如研究未来10年的 情况</li><li>根据你的预测分析，如果未来10年内每年都要求长江干流的Ⅳ类 和Ⅴ类水的比例控制在20%以内，且没有劣Ⅴ类水,那么每年需要处理 多少污水？</li><li>你对解决长江水质污染问题有什么切实可行的建议和意见</li></ol></blockquote><p>可以看出来，对于SARS问题，第二、三问都涉及了预测，因此可以用灰色模型求解。而对于长江水质，三、四问同样是需要进行预测的。</p><p>此外，数学建模中常用的预测方法用：</p><ul><li>微分方程模型</li><li>灰色预测模型</li><li>差分方程模型</li><li>马尔可夫预测</li><li>时间序列</li><li>差值拟合</li><li>神经网络</li></ul><p>不同的预测问题适合不同的预测方法，本文就将讲解其中的灰色关联分析以及灰色预测模型 。</p><h2 id="1-灰色系统理论的介绍"><a href="#1-灰色系统理论的介绍" class="headerlink" title="1. 灰色系统理论的介绍"></a>1. 灰色系统理论的介绍</h2><p>灰色系统理论由华中科技大学控制科学与工程系教授，博士生导师邓聚龙于1982年提出的。它是用来解决信息不完备系统的数学方法，它把控制论的观点和方法延伸到复杂的大系统中，将自动控制与运筹学的数学方法相结合，用独树一帜的方法和手段，研究了广泛存在于客观世界中具有灰色性的问题。在短短的时间里，灰色系统理论有了飞速的发展，它的应用已渗透到自然科学和社会经济等许多领域，显示出这门学科的强大生命力，具有广阔的发展前景。</p><p><strong>系统分析的经典方法是将系统的行为看做是随机变化的过程，用概率统计方法，从大量历史数据中寻找统计规律，这对于统计数据量较大情况下的处理较为有效，但对于数据量少的贫信息系统的分析则较为棘手。</strong></p><p><strong>灰色系统理论研究的是贫信息建模，它提供了贫信息情况下解决系统问题的新途径</strong>。<strong>它把一切随机过程看做是在一定范围内变化的、与时间有关的灰色过程，对灰色量不是从寻找统计规律的角度，通过大样本进行研究，而是用数据生成的方法，将杂乱无章的原始数据整理成规律性较强的生成数列后再作研究</strong>。灰色理论认为系统的行为现象尽管是朦胧的，数据是杂乱无章的，但它毕竟是有序的，有整体功能的，在杂乱无章的数据后面，必然潜藏着某种规律，灰数的生成是从杂乱无章的原始数据中去开拓、发现、寻找这种内在规律。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106152800248.png" alt="维基百科上的介绍"></p><p>1989海洋出版社出版英文版《灰色系统论文集》，同年， 英文版国际刊物《灰色系统》杂志正式创刊。目前，国际、 国内200多种期刊发表灰色系统论文，许多国际会议把灰 色系统列为讨论专题。国际著名检索网站已检索我国学者 的灰色系统论著500多次。灰色系统理论应用范围已拓展 到工业、农业、社会、经济、能源、地质、石油等众多科 学领域，成功地解决了生产、生活和科学研究中的大量实 际问题，取得了显著成果。</p><p>灰色系统的应用范畴大致分为以下几方面：</p><ul><li>灰色关联分析</li><li>灰色预测（人口预测；灾变预测….等等）</li><li>灰色决策</li><li>灰色预测控制</li></ul><h2 id="2-灰色理论的基本概念"><a href="#2-灰色理论的基本概念" class="headerlink" title="2. 灰色理论的基本概念"></a>2. 灰色理论的基本概念</h2><h3 id="1-白色、黑色和灰色系统"><a href="#1-白色、黑色和灰色系统" class="headerlink" title="1. 白色、黑色和灰色系统"></a>1. 白色、黑色和灰色系统</h3><ul><li><strong>白色系统</strong>：白色系统是指一个系统的内部特征是完全已知的，即系统的信息是完全充分的。以一个函数为例，我们完全知道这个函数的解析式，因此我们完全知道函数（系统）内部的特征，并且能够给定一个输入，预测其输出。</li><li><strong>黑色系统</strong>：黑色系统是指一个系统的内部信息对外界来说是一无所知的，只能通过它与外界的联系来加以观测研究。同样，以函数为例，黑色系统即我们完全不知道解析式的函数，我们完全不知道这个函数（系统）的内部特征，只能通过<strong>大量的数据</strong>，利用插值等方法获得近似的函数解析式（利用统计获得系统的信息），然后给定新的输入，给出的预测不一定对。</li><li><strong>灰色系统</strong>：灰色系统内的一部分信息是已知的，另一部分信息是未知的，系统内各因素间有不确定的关系。同样，以函数为例，灰色系统是我们直到部分项的函数，即系统一部分信息是已知的，而另外一部分信息是未知的。</li></ul><h3 id="2-灰色预测法"><a href="#2-灰色预测法" class="headerlink" title="2. 灰色预测法"></a>2. 灰色预测法</h3><ul><li>灰色预测法是一种对含有不确定因素的系统，即灰色系统进行预测的方法</li><li>灰色预测是对既含有已知信息又含有不确定信息的系统进行预则，就是对在一定范围内变化的、与时间有关的灰色过程进行预测的过程</li></ul><p>大体上来说，灰色预测通过鉴别系统因素之间发展趋势的相异程度，即进行关联分析，并可对原始数据进行生成处 理来寻找系统变动的规律，生成有较强规律性的数 据序列,然后建立相应的微分方程模型，从而预测 事物未来发展趋势的状况</p><p>即灰色预测首先判断目标量和哪些量之间是有关系的。例如预测人口增长，那么受限通过灰色关联分析分析得到人口增长是和经济增长有关系、交通发达等等因素有关系。</p><p>接下来对原始数据进行生成处理，例如累加或者累减操作生成一个原始数据的序列。而后对该序列建立一个微分方程的模型，最后进行预测</p><p>注意，<strong>灰色预测法要求对预测对象的值的观测是等时距的</strong>。从而利用等时距观测到的反映预测对象特征的一系列数量值构造灰色预测模型，预测未来某一时刻的预测对象的特征量，或预测对象达到某一特征量的时间。</p><h3 id="3-灰色预测的四种常见类型"><a href="#3-灰色预测的四种常见类型" class="headerlink" title="3. 灰色预测的四种常见类型"></a>3. 灰色预测的四种常见类型</h3><h4 id="A-灰色时间序列预测"><a href="#A-灰色时间序列预测" class="headerlink" title="A. 灰色时间序列预测"></a>A. 灰色时间序列预测</h4><p>用观察到的反映预测对象特征的时间序 列来构造灰色预测模型，预测未来某一时刻 的特征量，或达到某一特征量的时间。比如股市分析</p><h4 id="B-畸变预测"><a href="#B-畸变预测" class="headerlink" title="B. 畸变预测"></a>B. 畸变预测</h4><p>通过灰色模型预测异常值出现的时刻， 预测异常值什么时候出现在特定时区内。例如地震预测、异常气候预测、设备异常分析</p><h4 id="C-系统预测"><a href="#C-系统预测" class="headerlink" title="C. 系统预测"></a>C. 系统预测</h4><p>通过对系统行为特征指标建立一组相互 关联的灰色预测模型，预测系统中众多 变量间的相互协调关系的变化。</p><h4 id="D-拓扑预测"><a href="#D-拓扑预测" class="headerlink" title="D. 拓扑预测"></a>D. 拓扑预测</h4><p>将原始数据做曲线，在曲线上按定值寻 找该定值发生的所有时点，并以该定值 为框架构成时点数列，然后建立模型预 测该定值所发生的时点。例如对寻找系统中某个变量等于定值时候的时间点。例如温度控制，温度为27度的时候要升温到30度。那么找到所有温度为27度的时间即拓扑预测。</p><h3 id="4-灰色关联度"><a href="#4-灰色关联度" class="headerlink" title="4. 灰色关联度"></a>4. 灰色关联度</h3><p>大千世界里的客观事物往往现象复杂，因素繁多。我们经常要对系统进行因素分析，这些<strong>因素中哪些对系统来讲是主要的，哪些是次要的，哪些需要发展，哪些需要抑制，哪些是潜在的，哪些是明显的？一般来讲，这些都是我们极为关心的问题</strong>。事实上，<strong>因素间关联性如何、关联程度如何量化等问题是系统分析的关键</strong>。</p><ul><li><strong>例如人口问题</strong>。人和社会在一起构成一个系统，影响人口发展变化的因素有社会方面的诸如计划生育、社会治安、社会生活方式等；有经济方面的诸如国民收入、社会福利、社会保险等；还有医疗方面的诸如医疗条件、医疗水平等.……也就是说，人口是多种因素互相关联、互相制约的系统，对这些因素进行分析将有有助于人们对人口的未来预测及人口控制工作。</li></ul><p>灰色关联度就是衡量因素间的关联性，对关联性进行量化的指标。</p><p><strong>因素分析的基本方法过去主要是采用回归分析（即在大量的数据的基础上，通过回归等手段获得因变量和自变量的解析式的这类方法）等办法</strong>，但回归分析的办法有很多欠缺，如要求大量数据、计算量大以及可能出现反常情况等。为克服以上弊病，就产生了灰色关联度分析</p><p><strong>灰色关联度是分析向量与向量之间以及矩阵与矩阵之间的关联度</strong>。既然计算关联度，一定是计算某一个待比较的数列与参照物（参考数列）之间的相关程度。</p><h2 id="3-灰色关系分析"><a href="#3-灰色关系分析" class="headerlink" title="3. 灰色关系分析"></a>3. 灰色关系分析</h2><h3 id="A-灰色关联度的计算"><a href="#A-灰色关联度的计算" class="headerlink" title="A. 灰色关联度的计算"></a>A. 灰色关联度的计算</h3><p>灰色关联其实计算的是对比数列和参考数列之间的相似程序/离散程度</p><ol><li><p>选取参考数列</p><script type="math/tex; mode=display">X_0=\{X_0(k)|k=1,2,\cdots,n\}=(X_0(1), X_0(2),\cdots, X_0(n))</script><p>上式中，$k$表示时刻</p></li><li><p>假设存在$m$个比较数列</p><script type="math/tex; mode=display">X_i=\{X_i(k)|k=1,\cdots,n\}=(X_i(1), X_i(2),\cdots, x_i(n)),\qquad i=1,2,\cdots,m</script><p>则称</p><script type="math/tex; mode=display">\zeta_i(k)=\frac{\min_{i}\min_k|X_0(k)-x_i(k)|+\rho\max_i\max_k|X_0(k)-X_i(k)|} {|X_0(k)-X_i(k)|+\rho \max_i\max_k|X_0(k)-X_i(k)|}</script><p>为比较数列$X_i$对参考数列$X_0$在$k$时刻的<strong>关联系数</strong>。其中$\rho\in[0,\infin)$为<strong>分辨系数</strong>，一般而言，$\rho\in[0,1]$。$\rho$越大，分辨率越大；$\rho$越小，分辨率越小，$\rho$一般取0.5。直观的理解即$m$个比较数列全局的最小差距和最大差距的和与当前数列的第$k$项和全局的最大和。描述了当前项的分散度。</p></li><li><p>关联系数描述了比较数列和参考数列在某一时刻上的关联度，而对于数列整体而言，定义</p><script type="math/tex; mode=display">r_i=\frac 1 n\sum_{k=1}^n\zeta_i(k)</script><p>为比较数列$X_i$相对于参考数列$X_0$的关联度。</p></li><li><p>此外，由于计算关联系数的时候取了绝对值，因此无法通过关联度判断是正相关还是负相关，为此，引入下面的式子进行判断</p><script type="math/tex; mode=display">\begin {aligned}\sigma_i &= \sum_{k=1}^nkX_i(k)-\sum_{k=1}^nX_i(k)\sum_{k=1}^n\frac{k}{n}\\\sigma_n &= \sum_{k=1}^nk^2-(\sum_{k=1}^nk)2/n\end {aligned}</script><p>则有</p><script type="math/tex; mode=display">\begin{cases}sign(\frac{\sigma_i}{\sigma_n})=sign(\frac{\sigma_j}{\sigma_n}), & 则X_i和X_j正相关\\sign(\frac{\sigma_i}{\sigma_n})=-sign(\frac{\sigma_j}{\sigma_n}), & 则X_i和X_j负相关\\\end{cases}</script></li></ol><h3 id="B-灰色综合分析的案例"><a href="#B-灰色综合分析的案例" class="headerlink" title="B. 灰色综合分析的案例"></a>B. 灰色综合分析的案例</h3><blockquote><p>利用灰色关联分析对6位教师工作状况进行综合分析（即判断那个老师能力强，那个老师比较好）：</p><ol><li><p>分析指标包括：专业素质、外语水平、教学工作量、科研成果、 论文、著作与出勤</p></li><li><p>对原始数据经处理后得到以下数值</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106185111044.png" alt="指标表"></p></li></ol></blockquote><p>注意：</p><ol><li>在计算灰色关联度的时候，各个指标注意值域要相同 </li><li>这里由于是通过多个不同的指标来衡量老师，因此当然可以用层次分析法</li></ol><p>求解：</p><ol><li><p>计算$|x_0(k)-x_j(k)|$，如下表1</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106200138468.png" alt="表1"></p></li><li><p><strong>求最值</strong>：$\min=0，\max=7$</p></li><li><p>计算相关系数，如下表2</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106200238977.png" alt="表2"></p></li><li><p><strong>分别计算每个人各指标关联系数的均值（关联序）</strong>：如下表3</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106200315535.png" alt="表3"></p></li></ol><h3 id="C-灰色关联度计算代码"><a href="#C-灰色关联度计算代码" class="headerlink" title="C. 灰色关联度计算代码"></a>C. 灰色关联度计算代码</h3><p>Python实现的代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> numpy<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>function_base <span class="token keyword">import</span> iterable<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">class</span> <span class="token class-name">GrayRationalAnalysis</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> df<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">,</span> reference_vector<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>int<span class="token punctuation">,</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>df <span class="token operator">=</span> df        self<span class="token punctuation">.</span>reference_vector <span class="token operator">=</span> reference_vector        self<span class="token punctuation">.</span>indices <span class="token operator">=</span> df<span class="token punctuation">.</span>columns    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rho<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        refer_table <span class="token operator">=</span> self<span class="token punctuation">.</span>df<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span>self<span class="token punctuation">.</span>reference_vector<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>abs<span class="token punctuation">(</span><span class="token punctuation">)</span>        min_value<span class="token punctuation">,</span> max_value <span class="token operator">=</span> refer_table<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> refer_table<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span>        correlation_table<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame <span class="token operator">=</span> <span class="token punctuation">(</span>min_value <span class="token operator">+</span> rho <span class="token operator">*</span> max_value<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>refer_table <span class="token operator">+</span> rho <span class="token operator">*</span> max_value<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>correlation_table<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>self<span class="token punctuation">.</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">build_from_csv</span><span class="token punctuation">(</span>csv_path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> Path<span class="token punctuation">]</span><span class="token punctuation">,</span> reference_vector<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>int<span class="token punctuation">,</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'GrayRationalAnalysis'</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            build_from_csv用于从CSV文件中读取数据并构建灰色分析对象        """</span>        csv_path <span class="token operator">=</span> Path<span class="token punctuation">(</span>csv_path<span class="token punctuation">)</span> <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>csv_path<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token keyword">else</span> csv_path        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>csv_path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>reference_vector<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>            reference_vector<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> np<span class="token punctuation">.</span>full<span class="token punctuation">(</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fill_value<span class="token operator">=</span>reference_vector<span class="token punctuation">)</span>        <span class="token keyword">elif</span> iterable<span class="token punctuation">(</span>reference_vector<span class="token punctuation">)</span><span class="token punctuation">:</span>            reference_vector <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>reference_vector<span class="token punctuation">)</span>            <span class="token keyword">assert</span> df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>reference_vector<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">"维度不匹配"</span>        <span class="token keyword">return</span> GrayRationalAnalysis<span class="token punctuation">(</span>df<span class="token operator">=</span>df<span class="token punctuation">,</span> reference_vector<span class="token operator">=</span>reference_vector<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    gra <span class="token operator">=</span> GrayRationalAnalysis<span class="token punctuation">.</span>build_from_csv<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"./test.csv"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reference_vector<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-灰色生成数列"><a href="#4-灰色生成数列" class="headerlink" title="4. 灰色生成数列"></a>4. 灰色生成数列</h2><p>灰色系统理论认为，对于一个系统而言，尽管客观表象复杂，但总是有整体功能的，因此必然蕴含某种内在规律。关键在于如何选择适当的方式去挖掘和利用它。<strong>灰色系统是通过对原始数据的整理来寻求其变化规律的</strong>， 这是一种就数据寻求数据的现实规律的途径，即为灰色序列的生成。<strong>一切灰色序列都能通过某种生成弱化其随机性，显现其规律性</strong>。数据生成的常用方式：</p><ul><li>累加生成</li><li>累减生成</li><li>加权累加生成</li></ul><p>生成数列的目的在于原始的描述观测的特征量的值的数列具有一定的随机性，而通过多种不同的方式对原始数据进行变换（生成新的数列）的方法就可以减弱其随机性，使得原始数列的特征更加易于发现。</p><h3 id="A-累加生成数列"><a href="#A-累加生成数列" class="headerlink" title="A. 累加生成数列"></a>A. 累加生成数列</h3><p><strong>把数列各项（时刻）数据依次累加的过程称为累加生成过程（AGO）</strong>。由累加生成过程所得的数列称为<strong>累加生成数列</strong>。</p><p>设原始数列为</p><script type="math/tex; mode=display">x^{(0)}=(x^{(0)}(1), x^{(0)}(2), \cdots, x^{(0)}(n)</script><p>令</p><script type="math/tex; mode=display">x^{(1)}(k)=\sum_{i=1}^kx^{(0)}(i), \qquad k=1,2,\cdots,n</script><p>则称数列</p><script type="math/tex; mode=display">x^{(1)}=(x^{(1)}(1), x^{(1)}(2), \cdots, x^{(1)}(n)</script><p>为数列$x^{(0)}$的<strong>一次累加生成数列</strong>。类似的，称</p><script type="math/tex; mode=display">x^{(r)}=(x^{(r)}(1), x^{(r)}(2), \cdots, x^{(r)}(n),其中 x^{(r)}(k)=\sum_{i=1}^kx^{(r-1)}(i), \quad k=1,2,\cdots,n</script><p>为$x^{(0)}$的<strong>r次累加生成数列</strong></p><p>一般经济数列都是非负数列。累加生成能使任 意非负数列、摆动的与非摆动的，转化为非减 的、递增的。例如下图：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106204501736.png" alt="累加生成数列" style="zoom: 67%;"></p><p>那么原始数列每一项所含的随机影响相对于全体来说就无法造成大的影响，此时找出累加生成数列的规律，而后反推回去得到原始数列的预测就有可能，例如下面的例子。</p><p>对于每一年的作物产量进行预测，则由于每年都有病虫害问题导致年产量的曲线难以拟合，而进行一次累加后得到累计年产量曲线则表明在总体上作物产量是以指数关系增长的。对于钢产量也是同理。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106204702753.png" alt="累加生成数列容易观察得到总体服从的规律" style="zoom:67%;"></p><h3 id="B-累减生成数列"><a href="#B-累减生成数列" class="headerlink" title="B. 累减生成数列"></a>B. 累减生成数列</h3><p><strong>对于原始数据列依次做前后相邻的两个数据相减的运算过程称为累减生成过程（IAGO）</strong></p><p>设原始数列为</p><script type="math/tex; mode=display">x^{(1)}=(x^{(1)}(1), x^{(1)}(2), \cdots, x^{(1)}(n)</script><p>令</p><script type="math/tex; mode=display">x^{(0)}(k)=x^{(1)}(k)-x^{(1)}(k-1), \qquad k=2,3,\cdots,n</script><p>则称数列</p><script type="math/tex; mode=display">x^{(0)}=(x^{(0)}(1), x^{(0)}(2), \cdots, x^{(0)}(n)</script><p>为数列$x^{(1)}$的<strong>一次减生成数列</strong>。</p><p>其实从符号上可以看出，累加是累减的逆操作。</p><p>对于累减生成数列而言，其具有求导的性质，例如下面的例子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106205143207.png" alt="累减数列具有求导的性质" style="zoom:50%;"></p><h3 id="C-加权邻值生成数列"><a href="#C-加权邻值生成数列" class="headerlink" title="C. 加权邻值生成数列"></a>C. 加权邻值生成数列</h3><p>设原始数列为</p><script type="math/tex; mode=display">x^{(0)}=(x^{(0)}(1), x^{(0)}(2), \cdots, x^{(0)}(n)</script><p>称$(x^{(0)}(k-1),x^{(0)}(k-1))$为一对邻值，其中称$x^{(0)}(k-1)$为前邻值，称$x^{(0)}(k-1)$为后邻值。</p><p>对于任意常数$\alpha\in [0,1]$，取</p><script type="math/tex; mode=display">z^{(0)}(k)=\alpha x^{(0)}(k)+(1-\alpha)x^{(0)}(k-1),\qquad k=2,3,\cdots,n</script><p>则由此得到的数列</p><script type="math/tex; mode=display">z^{(0)}=(z^{(0)}(1), z^{(0)}(2), \cdots, z^{(0)}(n)</script><p>称为数列$x^{(0)}$在权$\alpha$下的<strong>邻值生成数列</strong>，权$\alpha$称为生成系数</p><p>若$\alpha=0.5$，则称数列为均值生成数列，也称为等权邻值生成数列</p><h2 id="5-灰色模型"><a href="#5-灰色模型" class="headerlink" title="5. 灰色模型"></a>5. 灰色模型</h2><h3 id="A-GM-1-1"><a href="#A-GM-1-1" class="headerlink" title="A. $GM(1,1)$"></a>A. $GM(1,1)$</h3><blockquote><p>灰色系统理论是基于关联空间、光滑离散函数等概念定义灰导数与灰微分方程，进而用离散数据列建立微分方程形式的动态模型，即灰色模型是利用离散随机数经过生成变为随机性被显著削弱而且较有规律的生成数，建立起的微分方程形式的模型，这样便于对其变化过程进行研究和描述。</p></blockquote><p>上面的这段话的关键点：</p><ul><li>灰色系统理论中定义了定义灰导数和灰微分方程，而灰色模型是基于这些基本概念定义的</li><li>灰色模型是一个<strong>微分方程模型</strong>，该微分方程模型是在随机性被削弱的生成数的基础上构建的</li></ul><p>设原始数列为</p><script type="math/tex; mode=display">x^{(0)}=(x^{(0)}(1), x^{(0)}(2), \cdots, x^{(0)}(n)</script><p>且其一次累加数列为</p><script type="math/tex; mode=display">x^{(1)}=(x^{(1)}(1), x^{(1)}(2), \cdots, x^{(1)}(n)</script><p>则，定义数列$x^{(1)}$的<strong>灰导数</strong>为</p><script type="math/tex; mode=display">d(k)=x^{(0)}(k)=x^{(1)}(k)-x^{(1)}(k-1)</script><p>设$z^{(1)}(k)$为数列$x^{(1)}$的邻值生成数列，即</p><script type="math/tex; mode=display">z^{(1)}(k)=\alpha x^{(1)}(k)+(1-\alpha)x^{(1)}(k-1)</script><p>则定义$GM(1,1)$的<strong>灰微分方程</strong>为</p><script type="math/tex; mode=display">d(k)+az^{(1)}(k)=b\\或\\x^{(0)}(k)+az^{(1)}(k)=b</script><p>上式中，$x^{(0)}(k)$是灰导数。而称$a$为<strong>发展系数</strong>，$z^{(1)}(k)$为<strong>白化背景值</strong>，b为<strong>灰作用量</strong>。</p><p>将时刻$k=2,3,\cdots,n$带入灰微分方程得</p><script type="math/tex; mode=display">\begin{cases}x^{(0)}(2)+az^{(1)}(2)=b\\x^{(0)}(3)+az^{(1)}(3)=b\\\cdots\\x^{(0)}(n)+az^{(1)}(n)=b\\\end{cases}</script><p>将上式向量化，则设</p><script type="math/tex; mode=display">\vec u = \begin{bmatrix}a\\b\end{bmatrix}</script><script type="math/tex; mode=display">\vec Y = \begin{bmatrix}x^{(0)}(2)\\x^{(0)}(3)\\\vdots\\x^{(0)}(n)\end{bmatrix}</script><script type="math/tex; mode=display">B = \begin{bmatrix}-z^{(1)}(2) & 1\\-z^{(1)}(3) & 1\\\vdots\\-z^{(1)}(n) & 1\end{bmatrix}</script><p>则$GM(1,1)$可以表示为</p><script type="math/tex; mode=display">\vec Y=B\vec u</script><p>由于$\vec Y$和$B$都可以根据输入获得，因此问题的关键在于求解$\vec u$</p><p>微分方程是线性微分方程，因此可以采用一元线性回归，即最小二乘法求估计值</p><script type="math/tex; mode=display">\vec u = \begin{bmatrix}a\\b \end{bmatrix}=(B^TB)^{-1}B^TY</script><h3 id="B-白化型-GM-1-1"><a href="#B-白化型-GM-1-1" class="headerlink" title="B. 白化型$GM(1,1)$"></a>B. 白化型$GM(1,1)$</h3><p>$GM(1,1)$是离散的方程，因为其中的导数和微分都是灰导数和灰积分。然而在有的时候，我们如果数列中的每一项之间都是沿着时间收集的，即数列中的每一项都是和时间有关的。那么我们就希望能够用含有时间$t$的微分方程来描述。因此，含有时间$t$的灰色方程即白化型$GM(1,1)$</p><p>对于$GM(1,1)$中的灰微分方程</p><script type="math/tex; mode=display">x^{(0)}(k)+az^{(1)}(k)=b</script><p>若将灰导数$x^{(0)}(k)$的每一项$k$（$k=2,3,\cdots,n$）视为连续的变量$t$，即将项的次序视为时间。则$x^{(1)}$是时间$t$的函数，即$x^{(1)}=x^{(1)}(t)$。则$x^{(0)}(k)$就对应导数，即</p><script type="math/tex; mode=display">x^{(0)}(k)=x^{(0)}(t)=\frac{dx^{(1)}(t)}{dt}</script><p>而白化背景就相当于$\alpha x^{(1)}(t)$，故若将$GM(1,1)$视为连续的项，则有</p><script type="math/tex; mode=display">\frac{dx^{(1)}(t)}{dt}+\alpha x^{(1)}(t)=b</script><p>上式两边对$t$同时积分，有：</p><script type="math/tex; mode=display">\int_{k-1}^k(\frac{dx^{(1)}(t)}{dt})dt+\int_{k-1}^k ax^{(1)}(t)dt = \int_{k-1}^k bdt</script><p>左边第一项为$\frac{dx^{(1)}(t)}{dt}$的原函数的第$k$项减第$k-1$的值，即</p><script type="math/tex; mode=display">x^{(1)}{(k)}-x^{(1)}(k-1)=x^{(0)}(k)</script><p>而第二项要求$x^{(1)}(t)$的原函数，则</p><script type="math/tex; mode=display">\int_{k-1}^k ax^{(1)}dt\approx az^{(1)}</script><h2 id="6-GM-1-1-的建模步骤"><a href="#6-GM-1-1-的建模步骤" class="headerlink" title="6. $GM(1,1)$的建模步骤"></a>6. $GM(1,1)$的建模步骤</h2><p>设原始数列为</p><script type="math/tex; mode=display">x^{(0)}=(x^{(0)}(1), x^{(0)}(2), \cdots, x^{(0)}(n)</script><ol><li><p><strong>数据的检验与处理</strong>： 为了保证$GM(1,1)$建模方法的可行性，需要对原始数列做必要的检验处理。</p><ol><li><p><strong>计算原始数列的级比</strong>：</p><script type="math/tex; mode=display">\lambda(k)=\frac{x^{(0)}(k-1)}{x^{(0)}(k)},\qquad k=2,2,\cdots,n</script></li><li><p>若所有级比都落在区间</p><script type="math/tex; mode=display">X=(e^{-\frac{2}{n+1}}, e^{\frac{2}{n+1}})</script><p>内，则可以直接对原始数列$x^{(0)}$建立$GM(1,1)$模型并进行灰色预测，否则由于不满足灰色模型的理论，因此不能直接用灰色灰色模型</p></li><li><p>否则需要对原始数列做适当的变换处理，例如平移（加常数）</p></li></ol></li><li><p><strong>建立$GM(1,1)$模型</strong>：</p><ol><li><p>假设通过第一步，得到了满足要求的数列$x^{(0)}$</p></li><li><p>则建立白化模型</p><script type="math/tex; mode=display">x^{(0)}(k)+az^{(1)}(k)=b</script><p>通过线性回归求得$a$和$b$的值，从而得到模型</p><script type="math/tex; mode=display">x^{(1)}(t)=(x^{(0)}(1)-\frac b a)e^{-a(t-1)}+\frac b a</script></li><li><p>从而得到预测值</p><script type="math/tex; mode=display">x^{(1)}(k+1)=(x^{(0)}(1)-\frac b a)e^{-ak}+\frac b a,\qquad k=1,2,\cdots,n-1</script></li><li><p>最终得到预测值</p><script type="math/tex; mode=display">x^{(0)}(k+1)=x^{(1)}(k+1)-x^{(1)}(k),\qquad k=1,2,\cdots,n-1</script></li></ol></li><li><p><strong>检验预测值</strong>：为了检测$GM(1,1)$的预测是否正确，还需要对预测进行检测</p><ol><li><p><strong>残差检验</strong>：计算相对残差，即原值减去预测值比上原值</p><script type="math/tex; mode=display">\varepsilon(k)=\frac{x^{(0)}(k)-\hat {x}^{(0)}(k)}{x^{(0)}(k)},\qquad k=1,2,\cdots,n</script><p>若对于所有的$|\varepsilon(k)|&lt;0.1$，则可以认为模型的预测达到较高的精度；否则，若对于所有的$|\varepsilon(k)|&lt;0.2$，则认为模型的预测达到一般精度</p></li><li><p><strong>级比检验</strong>：计算</p><script type="math/tex; mode=display">\rho(k)=1-\frac{1-0.5a}{1+0.5a}\lambda(k)</script><p>若对于所有的$|\rho(k)|&lt;0.1$，则认为模型的预测达到了较高的精度；否则，若对于所有的$|\rho(k)|&lt;0.2$，则认为模型达到了一般的要求</p></li></ol></li></ol><h2 id="7-灰色预测Python求解"><a href="#7-灰色预测Python求解" class="headerlink" title="7. 灰色预测Python求解"></a>7. 灰色预测Python求解</h2><p>基于Numpy和Pandas实现的灰色预测模型代码如下</p><h3 id="A-代码"><a href="#A-代码" class="headerlink" title="A. 代码"></a>A. 代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">import</span> re<span class="token keyword">from</span> typing <span class="token keyword">import</span> Union<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">as</span> scist<span class="token keyword">class</span> <span class="token class-name">GrayForcast</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> series<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">,</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>index<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>Index <span class="token operator">=</span> series<span class="token punctuation">.</span>index        self<span class="token punctuation">.</span>x0 <span class="token operator">=</span> series<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> verbose<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 计算级比</span>        right_moved<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x0<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lambdas<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> right_moved <span class="token operator">/</span> self<span class="token punctuation">.</span>x0        <span class="token comment" spellcheck="true"># 级比检验</span>        n <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x0<span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span>l<span class="token punctuation">:</span><span class="token operator">=</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>lambdas<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>lambdas<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">"级比检验未通过:{l}, 其中第{list(np.where(l==False)[0])}位:{self.x0[1:][~l]} 出错，数据不适合直接进行灰色预测"</span>        <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"级比检验通过"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># GM(1,1)建模</span>        <span class="token comment" spellcheck="true"># 一次累加</span>        self<span class="token punctuation">.</span>x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>cumsum<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x0<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 构建B和Y矩阵</span>        Y <span class="token operator">=</span> self<span class="token punctuation">.</span>x0<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        right_moved <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        left_moved <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        B <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>tup<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token punctuation">(</span>left_moved <span class="token operator">+</span> right_moved<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>right_moved<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T        <span class="token comment" spellcheck="true"># 线性回归</span>        self<span class="token punctuation">.</span>u <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>B<span class="token punctuation">.</span>T @ B<span class="token punctuation">)</span> @ B<span class="token punctuation">.</span>T @ Y        <span class="token comment" spellcheck="true"># 模型检验</span>        x0_pred <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>items<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 残差检验</span>        relative_residual <span class="token operator">=</span> np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x0 <span class="token operator">-</span> x0_pred<span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>x0<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">:</span><span class="token operator">=</span> <span class="token punctuation">(</span>relative_residual <span class="token operator">&lt;</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"残差检验通过，所有残差小于0.1，达到高精度"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">:</span><span class="token operator">=</span> <span class="token punctuation">(</span>relative_residual <span class="token operator">&lt;</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"残差检验通过，所有残差小于0.2，达到一般精度要求"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">assert</span> <span class="token boolean">False</span><span class="token punctuation">,</span> f<span class="token string">"残差检验未通过，第{np.where(l==False)[0]}位:{relative_residual[~l]}大于0.2"</span>        <span class="token comment" spellcheck="true"># 级比检验</span>        rho <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>u<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>u<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>lambdas        <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">:</span><span class="token operator">=</span> <span class="token punctuation">(</span>rho<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"级比检验通过，所有级比小于0.1，达到高精度"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l<span class="token punctuation">:</span><span class="token operator">=</span> <span class="token punctuation">(</span>rho<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"级比检验通过，所有级比小于0.2，达到一般精度要求"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">assert</span> <span class="token boolean">False</span><span class="token punctuation">,</span> f<span class="token string">"级比检验未通过，第{np.where(l==False)[0]}位:{rho[1:][~l]}大于0.2"</span>        rho<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nan        <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>            df <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span>tup<span class="token operator">=</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x0<span class="token punctuation">,</span> x0_pred<span class="token punctuation">,</span> self<span class="token punctuation">.</span>x0<span class="token operator">-</span>x0_pred<span class="token punctuation">,</span> relative_residual<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span> rho<span class="token punctuation">)</span><span class="token punctuation">)</span>            df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>df<span class="token punctuation">.</span>T<span class="token punctuation">,</span> index<span class="token operator">=</span>self<span class="token punctuation">.</span>index<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"原始值"</span><span class="token punctuation">,</span><span class="token string">"预测值"</span><span class="token punctuation">,</span><span class="token string">"残差"</span><span class="token punctuation">,</span><span class="token string">"相对残差(%)"</span><span class="token punctuation">,</span><span class="token string">"级比偏差"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> items<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">:</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> self<span class="token punctuation">.</span>u<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>u<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">x1_kp1</span><span class="token punctuation">(</span>k<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>x0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>x0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token operator">/</span>a<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>a <span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token operator">/</span>a        x1_pred <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x1_kp1<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        right_moved <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>x1_pred<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        x0_pred <span class="token operator">=</span> x1_pred <span class="token operator">-</span> right_moved        <span class="token keyword">return</span> x0_pred    @staticmethod    <span class="token keyword">def</span> <span class="token function">preprocess_donothing</span><span class="token punctuation">(</span>gf<span class="token punctuation">:</span> <span class="token string">"GrayForcast"</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"GrayForcast"</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> gf    @staticmethod    <span class="token keyword">def</span> <span class="token function">build_from_csv</span><span class="token punctuation">(</span>csv_path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> Path<span class="token punctuation">]</span><span class="token punctuation">,</span> target_col<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>None<span class="token punctuation">,</span> int<span class="token punctuation">,</span> str<span class="token punctuation">]</span><span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"GrayForcast"</span><span class="token punctuation">:</span>        csv_path <span class="token operator">=</span> csv_path <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>csv_path<span class="token punctuation">,</span> Path<span class="token punctuation">)</span> <span class="token keyword">else</span> Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>csv_path<span class="token punctuation">)</span>        df <span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>csv_path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">:</span><span class="token operator">=</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> target_col <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">,</span> f<span class="token string">"CSV文件存在多个序列：{df.columns}，请指定target_col参数指定需要预测的序列"</span>        <span class="token keyword">if</span> multiple<span class="token punctuation">:</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>target_col<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>                target_col <span class="token operator">=</span> df<span class="token punctuation">.</span>T<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>target_col<span class="token punctuation">]</span>            <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>target_col<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>                target_col <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> target_col<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            target_col <span class="token operator">=</span> df        <span class="token keyword">return</span> GrayForcast<span class="token punctuation">(</span>series<span class="token operator">=</span>target_col<span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">build_from_excel</span><span class="token punctuation">(</span>csv_path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> Path<span class="token punctuation">]</span><span class="token punctuation">,</span> target_col<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>None<span class="token punctuation">,</span> int<span class="token punctuation">,</span> str<span class="token punctuation">]</span><span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"GrayForcast"</span><span class="token punctuation">:</span>        csv_path <span class="token operator">=</span> csv_path <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>csv_path<span class="token punctuation">,</span> Path<span class="token punctuation">)</span> <span class="token keyword">else</span> Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>csv_path<span class="token punctuation">)</span>        df <span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>csv_path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">:</span><span class="token operator">=</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> target_col <span class="token keyword">is</span> None<span class="token punctuation">,</span> f<span class="token string">"xlsx文件存在多个序列：{df.columns}，请指定target_col参数指定需要预测的序列"</span>        <span class="token keyword">if</span> multiple<span class="token punctuation">:</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>target_col<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>                target_col <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>target_col<span class="token punctuation">]</span>            <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>target_col<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>                target_col <span class="token operator">=</span> df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> target_col<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            target_col <span class="token operator">=</span> df        <span class="token keyword">return</span> GrayForcast<span class="token punctuation">(</span>series<span class="token operator">=</span>target_col<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    gf <span class="token operator">=</span> GrayForcast<span class="token punctuation">.</span>build_from_csv<span class="token punctuation">(</span>csv_path<span class="token operator">=</span><span class="token string">"./test2.csv"</span><span class="token punctuation">,</span> target_col<span class="token operator">=</span><span class="token string">"噪声"</span><span class="token punctuation">)</span>    gf<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>gf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B-使用说明"><a href="#B-使用说明" class="headerlink" title="B. 使用说明"></a>B. 使用说明</h3><p>代码从指定的表格中读取数据，然后先训练得到参数，最后通过预测指定，需要预测的项数即可</p><p>表格要求如下：第一列为序号，其余列为对比数列，对比数列沿列展开，若表格有多列则需要指定计算的列的名称</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107143018846.png" alt="示例表格"></p><p>使用结果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107143325969.png" alt="计算结果"></p><h2 id="8-灰色预测案例"><a href="#8-灰色预测案例" class="headerlink" title="8. 灰色预测案例"></a>8. 灰色预测案例</h2><p>灰色预测模型处理的问题基本都是预测模型</p><h3 id="A-投资理财问题"><a href="#A-投资理财问题" class="headerlink" title="A. 投资理财问题"></a>A. 投资理财问题</h3><blockquote><p>银行有各种投资理财产品，客户可根据自己的资金实力和 投资偏好来自由选择，并且一般会有“10天犹豫期”，在 这10天里如果对自己购得的理财产品不放心或者不满意通 常情况下是可以退买的，这时候是不收手续费的。否则逾 期退买将收取一定的手续费。 通过对客户退买行为数据的分析，发现客户购得理财产品 后的每一天继续持有的客户比例依次是[92.810 97.660 98.800 99.281 99.537 99.537 99.817 0.00](单位%)，从这组数列可以看出退买高发期是在前几天，后续退买的可能性持续衰减。建立$GM(1,1)$模型对以上数据进行分析。</p></blockquote><h3 id="B-道路噪声平均值"><a href="#B-道路噪声平均值" class="headerlink" title="B. 道路噪声平均值"></a>B. 道路噪声平均值</h3><blockquote><p>北方某城市1986～1992 年道路交通噪声平均声级数据见表6，单位为db(A)</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106225804772.png" alt="表6" style="zoom:50%;"></p></blockquote><p>利用上面的代码，准备好表格数据，然后开始预测</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107143325969.png" alt="道路噪声平均值"></p><h3 id="C-公司利润预测"><a href="#C-公司利润预测" class="headerlink" title="C. 公司利润预测"></a>C. 公司利润预测</h3><blockquote><p>已知某公司1999-2008年的利润为(单位：元/年)： [89677,99215,109655,120333,135823,159878,182321,209407, 246619,300670],现在要预测该公司未来几年的利润情况。</p></blockquote><p>把上面的数据制作成下面的表格</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107144656000.png" alt="公司利润表" style="zoom:50%;"></p><p>得到未来五年利润的预测如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107144924383.png" alt="未来五年的利润预测"></p><h3 id="D-SARS病毒影响"><a href="#D-SARS病毒影响" class="headerlink" title="D. SARS病毒影响"></a>D. SARS病毒影响</h3><blockquote><p>2003年的SARS疫情对中国部分行业的经济发展产生了一 定的影响，特别是对帮分疫情较严重的省市的相关行业所造成的影响是明显的，经济影响主要分为直接经济影响和 间接影响。直接经济影响涉及到商品零售业、旅游业、综合服务等行业。很多方面难以进行定量地评估，现仅就 SARS疫情较重的某市商品零售业、旅游业和综合服务业的影响进行定量的评估分析。</p><p>究竟SARS疫情对商品零售业、旅游业和综合服务业的影 响有多大，已知该市从1997年1月到2003年10月的商品零 售额、接待旅游人数和综合服务收入的统计数据如下表1 、表2、表3．</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107150033656.png" alt="表1，单位：亿元" style="zoom:67%;"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107150057008.png" alt="表2，单位：亿元" style="zoom: 67%;"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220107150130466.png" alt="表三，单位：亿元" style="zoom:67%;"></p><p>试根据这些历史数据建立预测评估模型，评估2003年SARS疫 情给该市的商品零售业、旅游业和综合服务业所造成的影响。</p></blockquote><p>对SARS病毒影响的评估，那么可以用没有疫情和有疫情的对比实现。例如要探究SARS对零售业的影响，那么其实可以首先预测出来没有SARS零售业本来的指标，然后和有SARS的指标进行对比，从而给出对SARS病毒的影响。</p><p>因此思路如下：</p><p>根据所掌握的历史统计数据可以看出，在正常情况下，全 年的平均值较好地反映了相关指标的变化规律，这样可以 把预测评估分成两部分：</p><ol><li>利用灰色理论建立灰微分方程模型，由1997~2002年的 平均值预测2003年平均值</li><li>通过历史数据计算每个月的指标值与全年总值的关系 ，从而可预测出正常情况下2003年每个月的指标值，再与 实际值比较可以估算出SARS疫情实际造成的影响</li></ol><p>具体求解略</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Math Modeling </tag>
            
            <tag> 灰色关联分析 </tag>
            
            <tag> 灰色预测 </tag>
            
            <tag> 灰色模型 </tag>
            
            <tag> Grey relational analysis </tag>
            
            <tag> Grey Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模算法5-层次分析法</title>
      <link href="/2022/01/04/shu-xue-jian-mo-suan-fa-5-ceng-ci-fen-xi-fa/"/>
      <url>/2022/01/04/shu-xue-jian-mo-suan-fa-5-ceng-ci-fen-xi-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了数学建模中常见的评价方法：层次分析法</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/v2-986c79a5dfbf54baa7dbe8c29d5f6734_1440w.jpg" alt="层次分析法"></p><h1 id="数学建模算法5-层次分析法"><a href="#数学建模算法5-层次分析法" class="headerlink" title="数学建模算法5-层次分析法"></a>数学建模算法5-层次分析法</h1><p>层次分析法是数学建模中非常常用的算法之一，通过层次分析法，我们能够完成对一个复杂的问题的定性与定量分析，并且在分析的同时做出决策。</p><h2 id="1-层次分析法介绍"><a href="#1-层次分析法介绍" class="headerlink" title="1. 层次分析法介绍"></a>1. 层次分析法介绍</h2><p><strong>层次分析法（Analytic Hierarchy Process，AHP）</strong>是美国运筹学家匹茨堡大学教授萨蒂（T.L.Santy）于上世纪70年代初，为美国国防部研究《根据各个工业部门对国家福利的贡献大小而进行电力分配》课题时，应用网络系统理论和多目标综合评价方法，提出的一种层次权重决策分析方法。</p><p>这种方法的特点是在对复杂的决策问题的本质、影响因素及其内在关系等进行深入分析的基础上，<strong>利用较少的定量信息使决策的思维过程数学化</strong>，从而为多目标、多准则或无结构特性的复杂决策问题提供简便的决策方法。是对难于完全定量的复杂系统作出决策的模型和方法。</p><p>简单的说，其优点在于：</p><ul><li>可以使用少量的信息（数据）来指导进行决策，相比于以往的其他模型，他们都是完全的定量化的，因此需要大量的数据。</li><li>层次分析法非常善于对不易于定量的问题进行分析。</li></ul><p>人们在对社会、经济以及管理领域的问题进行系统分析时，面临 的经常是一个由相互关联、相互制约的众多因素构成的复杂系统。 层次分析法则为研究这类复杂的系统，提供了一种新的、简洁的、 实用的决策方法。</p><p>层次分析法是一种解决多目标的复杂问题的定性与定量相结合的决策分析方法。</p><p><strong>该方法将定量分析与定性分析结合起来， 用决策者的经验判断各衡量目标能否实现的标准之间的相对重要程度，并合理地给出每个决策方案的每个标准的权数，利用权数求出各方案的优劣次序，从而比较有效地应用于那些难以用定量方法解决的课题。</strong></p><p>层次分析法是社会、经济系统决策中的有效工具。其特征是合理地将定性与定量的决策结合起来，按照思维、心理的规律把<strong>决策过程层次化、数量化</strong>。是系统科学中常用的一种系统分析 方法。</p><p>该方法自1982年被介绍到我国以来，以其定性与定量相结合地 处理各种决策因素的特点，以及其系统灵活简洁的优点，迅速地在我国社会经济各个领域内，如工程计划、资源分配、方案 排序、政策制定、冲突问题、性能评价、能源系统分析、城市 规划、经济管理、科研评价等，得到了广泛的重视和应用。</p><p>层次分析法的三大运用：</p><ul><li>用于最佳方案的选取（选择运动员、选择地址）<ul><li>例如四个远动员A、B、C、D，我们分别从耐力、爆发、敏捷几个因素去评价运动员的好坏</li><li>例如医院选址，那么对多个不同的地点，可以从低价、人口密度等因素评价医院选址的好坏</li></ul></li><li>用于评价类问题（评价水质状况、评价环境）<ul><li>同上</li></ul></li><li>用于指标体系的优选（兼顾科学和效率）<ul><li>例如现在有9个指标，要从中选取出来6个指标，那么对指标剔除评价标准，例如科学性和效率性</li></ul></li></ul><h2 id="2-层次分析法的基本原理"><a href="#2-层次分析法的基本原理" class="headerlink" title="2. 层次分析法的基本原理"></a>2. 层次分析法的基本原理</h2><h3 id="A-决策"><a href="#A-决策" class="headerlink" title="A. 决策"></a>A. 决策</h3><p>决策是指在面临多种方案时需要<strong>依据一定的标准选择某一种方案</strong>。 日常生活中有许多决策问题。例如：</p><ul><li>在海尔、新飞、容声和雪花四个牌号的电冰箱中选购一 种。要考虑品牌的信誉、冰箱的功能、价格和耗电量。</li><li>在泰山、杭州和承德三处选择一个旅游点。要考虑景点 的景色、居住的环境、饮食的特色、交通便利和旅游的费用。</li><li>在基础研究、应用研究和数学教育中选择一个领域申报 科研课题。要考虑成果的贡献（实用价值、科学意义），可行性 （难度、周期和经费）和人才培养</li><li>在小丽、小美、小静中选择一个适合自己的女朋友。要 考虑基本颜值，身材比例、教育程度、家境情况、地域关系等</li></ul><h3 id="B-基本原理"><a href="#B-基本原理" class="headerlink" title="B. 基本原理"></a>B. 基本原理</h3><p>层次分析法根据问题的性质和要达到的总目标，将<strong>问题分解为不同的组成因素</strong>，并<strong>按照因素间的相互关联影响以及隶属关系将因素按不同层次聚集组合，形成一个多层次的分析结构模型</strong>，从而最终<strong>使问题归结为最低层(供决策的方案、措施等)相对于最高层(总目标)的相对重要权值的确定或相对优劣次序的排序</strong>。</p><h2 id="3-层析分析法的步骤和方法"><a href="#3-层析分析法的步骤和方法" class="headerlink" title="3. 层析分析法的步骤和方法"></a>3. 层析分析法的步骤和方法</h2><p> 运用层次分析法构造系统模型时，大体可以分为以下四个步骤：</p><ol><li>建立层次结构模型</li><li>构造判断(成对比较)矩阵</li><li>层次单排序及其一致性检验</li><li>层次总排序及其一致性检验</li></ol><h3 id="A-建立层次结构模型"><a href="#A-建立层次结构模型" class="headerlink" title="A. 建立层次结构模型"></a>A. 建立层次结构模型</h3><p>在这一层，我们将决策的目标、考虑的因素（决策准则）和决策对象按它们之间的相互关系分为最高层、中间层和最低层，绘出层次 结构图。一般来说，三层分别是：</p><ul><li><strong>最高层</strong>：决策的目的、要解决的问题。比如去旅游</li><li><strong>最低层</strong>：决策时的备选方案。比如去桂林还是去西安还是去浙江</li><li><strong>中间层</strong>：考虑的因素、决策的准则。预算、想去的景区等等</li></ul><p>此外，<strong>对于相邻的两层，称高层为目标层，低层为因素层</strong>。</p><p>举例来说，</p><ul><li><p><strong>大学毕业生就业选择问题</strong>：获得大学毕业学位的毕业生，在“双向选择”时，用人单位与毕业生都有各自的选择标准和要求。就毕业生来说选择单位的标准和要求是多方面的，例如：</p><ul><li>能发挥自己才干作出较好贡献（即工作岗位适合发挥自己的专长）</li><li>工作收入较好（待遇好）</li><li>生活环境好（大城市、气候等工作条件等）</li><li>单位名声好（声誉等）</li><li>工作环境好（人际关系和谐等）</li><li>发展晋升机会多（如新单位或前景好）等</li></ul><p>那么根据上面的指标，绘制得到的层次结构图为：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104233008393.png" alt="大学生毕业就业选择问题"></p></li><li><p><strong>选择旅游目的地</strong>：在3个目的地中按照景色、费用、居住条件等因素选择最终前往的城市</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104233208220.png" alt="旅游目的地选择问题"></p></li></ul><p>因此，第一步建立层次结构模型的整个思维过程的归纳如下：</p><ul><li>将决策问题分为3个或多个层次</li><li><strong>最高层</strong>：<strong>目标层</strong>，表示解决问题的目的，即层次分析要达到的总目标。通常只有一个总目标。</li><li><strong>中间层</strong>：<strong>准则层、指标层、……</strong>。表示采取某种措施、政策、方案等为了实现预定总目标所涉及的中间环节；根据指标的不同，可以是准则层、指标层、 策略层、约束层等。</li><li><p><strong>最低层</strong>：<strong>方案层</strong>。表示将选用的解决问题的各种措施、政策、方 案等。通常有几个方案可选。</p></li><li><p>每层有若干元素，层间元素的关系用相连直线表示。</p></li><li>层次分析法所要解决的问题是关于最低层对最高层的相对权重问题，按此相对权重可以对最低层中的各种方案、措施进行排序，从 而在不同的方案中作出选择或形成选择方案的原则。即我们首先给目标层和准则层之间有一个权重向量，然后方案层中的每一个方案都有一个准则层对应的得分向量。两个向量相乘得到得分，那么我们就可以根据得分进行排序，获得初步的方案</li></ul><h3 id="B-构造判断-成对比较-矩阵"><a href="#B-构造判断-成对比较-矩阵" class="headerlink" title="B. 构造判断(成对比较)矩阵"></a>B. 构造判断(成对比较)矩阵</h3><p>在确定各层次各因素之间的权重时，如果只是定性的结果，则 常常不容易被别人接受，因而Santy等人提出：一致矩阵法，即:</p><ol><li>不把所有因素放在一起比较，而是两两相互比较。即所有中间层的准则/因素间进行两两比较</li><li>对此时采用相对尺度，以尽可能减少性质不同的诸因素相互比较的困难，以提高准确度。即使用谁更重要，谁更不重要这样的判断，而非谁比谁好多少，谁比谁好几倍。例如身高的比较，用高一点，高很多这种，而非高1.7厘米</li></ol><p>判断矩阵是表示本层所有因素针对上一层某一个因素的相对重要性的比较。判断矩阵的元素$a_{ij}$用Santy的1—9标度方法给出。</p><p>注意，心理学家认为成对比较的因素不宜超过9个，即每层不要超过9个因素。</p><p>而具体的1-9的标度的具体的含义如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104234600062.png" alt="1-9标度的含义"></p><p>此外，指标1对于指标2的标度为5，那么指标2对指标1的标度为$\frac 1 5$。</p><p>例如对于旅游目的地选取问题，我们根据前一步的得到的准则层，对其中的准则之间进行两两比较，得到下面的判断矩阵</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104234906589.png" alt="判断矩阵"></p><p>但其实此时得到的判断矩阵是有问题，例如有$\frac {C_1}{C_2}=\frac 1 2$，而$\frac{C_2}{C_3}=7$，那么$\frac{C_1}{C_3}=\frac 7 2$，但是上述我们给出的$\frac {C_1}{C_3}$却是4，因此是存在不一致问题。</p><p>因此，在判断矩阵中，<strong>允许不一致，但要确定不一致的允许范围</strong></p><p>若矩阵中任意三个相关联的数字是一致的，即$a<em>{ik}\cdot a</em>{kj}=a_{ij}$，那么此时<strong>称对比矩阵为一致阵，反之为不一致阵</strong>。</p><p>一致阵的性质有：</p><ul><li>A的秩为1，A的唯一非零特征根为n，即矩阵的行/列数。（$A\vec w=n\vec w$）</li><li>非零特征根n所对应的特征向量归一化后可作为权向量</li></ul><p>而对于不一致(但在允许范围内)的成对比较阵A， Santy等人建议用对应于最大特征根的特征向量作为权向量</p><p>而允许范围的判断及界定则由第三步完成</p><h3 id="C-层次单排序以及其一致性检验"><a href="#C-层次单排序以及其一致性检验" class="headerlink" title="C. 层次单排序以及其一致性检验"></a>C. 层次单排序以及其一致性检验</h3><blockquote><p>注意，如果是一致阵的话，权重向量已经获得，而第三步都是针对不一致阵的。</p></blockquote><h4 id="1-层次单排序"><a href="#1-层次单排序" class="headerlink" title="1) 层次单排序"></a>1) 层次单排序</h4><p>所谓层次单排序，即指对特征根最大的特征向量中的分量进行归一化操作之后，让各元素的值的和为1的过程。而归一化之后的向量记为$W$。</p><p>因为$W$的元素为同一层次因素对于上一层次因素相对重要性的排序权值，这一过程称为层次单排序。</p><h4 id="2-一致性检验"><a href="#2-一致性检验" class="headerlink" title="2) 一致性检验"></a>2) 一致性检验</h4><p>然而我们在这里其实还并不知道我们的不一致阵的不一致程度是否在允许范围内，因此需要对这里层次单排序之后的权向量进行一致性检验。即衡量一个不一致阵的不一致性，然后根绝量化后的不一致性进行判断。衡量不一致性，其实可以用不一致阵和一致阵的偏差来进行描述，因此要借助下面的两个定理：</p><ol><li><strong>定理一：$n$阶一致阵的唯一非零特征根为$n$</strong></li><li><strong>定理二：$n$阶正互反阵$A$的最大特征根$\lambda\ge n$, 当且仅当$\lambda=n$时，A为一致阵</strong></li></ol><p>因此就可以通过衡量$\lambda$与$n$的关系来描述$A$的不一致性。即由于$\lambda$连续的依赖于$a_{ij}$，则$\lambda$比$n$ 越大，$A$的不一致性越严重。则此时用最大特征值对应的特征向量作为被比较因素对上层某因素影响程度的权向量，其不一致程度越大，引起的判断误差越大。 因而可以用$\lambda-n$数值的大小来衡量$A$的不一致程度。</p><p>因此，定义<strong>不一致性指标$CI$</strong>：</p><script type="math/tex; mode=display">CI=\frac {\lambda-n} {n-1}</script><p>因此，有</p><ul><li>$CI$等于0，有完全的一致性</li><li>$CI$接近于0，有满意的一致性</li><li>$CI$越大，不一致越严重</li></ul><p>因此衡量一个不一致阵是否是可以接受的，关键就是看这个不一致阵的$CI$是否在某个范围内。因此关键就在于选取这个范围。又已知$CI=0$表示完全的一致性，因此其实只需要得到一个大于0的上界即可。</p><p>为了获得这个上界，那么可以通过和随机构造的随机矩阵的CI的值进行比较，来衡量我们给出的非一致判断阵和随机给出的判断阵之间的关系，从而衡量我们给出的判断阵是否合理，若合理即表示虽然不一致，但是在允许范围内。</p><p>因此，引入入<strong>随机一致性指标$RI$</strong>。$RI$的计算方法如下：</p><ul><li><p>随机构造500个的成对比较矩阵$A<em>1$，$A_2$，……，$A</em>{500}$</p></li><li><p>对每个大小的矩阵计算$CI$，得到$CI_i,i=1,\cdots,500$</p></li><li><p>得到$RI$，计算公式如下：</p><script type="math/tex; mode=display">RI=\frac{CI_1+CI_2+\cdots+CI_500}{500}=\frac{\frac {\lambda_1+\lambda_2+\cdots+\lambda_500}{500}-n}{n-1}</script></li></ul><p>对不同大小的判断镇分别计算RI，得到下表</p><div class="table-container"><table><thead><tr><th style="text-align:center">N</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th><th style="text-align:center">11</th></tr></thead><tbody><tr><td style="text-align:center">RI</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0.58</td><td style="text-align:center">0.90</td><td style="text-align:center">1.12</td><td style="text-align:center">1.24</td><td style="text-align:center">1.32</td><td style="text-align:center">1.41</td><td style="text-align:center">1.45</td><td style="text-align:center">1.49</td><td style="text-align:center">1.51</td></tr></tbody></table></div><p>然后再定义<strong>一致性比率$CR$</strong>：</p><script type="math/tex; mode=display">CR=\frac {CI}{RI}</script><p>那么当$CR$小于0.1的时候，认为不一致阵A的不一致程度在允许范围内，有满意的一致性，通过了一致性检验，可以使用最大特征值对应的特征向量归一化之后的结果作为权向量。否则重新构造判断矩阵。</p><p>继续上面的旅游的例子，我们对其进行一致性检验。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220105004755325.png" alt="层次单排序及其一致性检验的例子"></p><p>因此，旅游问题中对我们给出的判断矩阵可以得到从我们的观点出发，每个因素的得分向量为：</p><script type="math/tex; mode=display">\vec w =[0.263, 0.475, 0.055, 0.090, 0.110]^T</script><p>因此，在我们看来，费用是我们在考虑目的地时候最重要的因素，接下来是景色，最后是旅途、饮食和居住</p><h3 id="D-层次总排序以及其一致性检验"><a href="#D-层次总排序以及其一致性检验" class="headerlink" title="D. 层次总排序以及其一致性检验"></a>D. 层次总排序以及其一致性检验</h3><h4 id="1-层次总排序"><a href="#1-层次总排序" class="headerlink" title="1) 层次总排序"></a>1) 层次总排序</h4><p>层次总排序指的是计算所有因素相对于总目标的相对重要性的权值的过程</p><p>这一过程从最高层到最底层依次进行。</p><p>例如前面的旅游目的地选取。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104233208220.png" alt="旅游目的地选择问题"></p><p>我们通过第三步已经有了准则层，即$C_1,C_2,C_3,C_4,C_5$之间的相对重要性。我们接下来是让方案层中的三个目的地对准则层中的每一个准侧进行比较。即在景色的角度来说，桂林比黄山、北戴河好到哪里去。此时又可以进行第二三步，即构造比较矩阵，进行层次单排序。</p><p>由于针对一个指标就可以获得一个层次单排序后的向量，例如对景色会得到一个景色单排序向量，因此最终会得到一个矩阵。</p><p>对于上面的旅游选择问题，最后得到的矩阵形状为$5\times3$，记该矩阵为$B$。接下来将准则层的得分向量左乘$B$矩阵，就得到了在方案层的层次总排序</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220105010617987.png" alt="层次总排序" style="zoom: 67%;"></p><h4 id="2-一致性检验-1"><a href="#2-一致性检验-1" class="headerlink" title="2) 一致性检验"></a>2) 一致性检验</h4><p>类似的，我们从几个不同的指标对每个方案的打分都是主观的，因此对于单个指标的对比矩阵，会出现不一致的情况。因此还要继续进行一致性检验。</p><p>我们对每一个指标$A_j$都可以计算其一致性指标$CI_j$、随机一致性指标$RI_j$，$j=1,2,\cdots,m$，则层次总排序的一致性比率为:</p><script type="math/tex; mode=display">CR=\frac{a_1CI_1+a_2CI_2+\cdots+a_mCI_m}{a_1RI_1+a_2RI_2+\cdots+a_mRI_m}</script><p>同样，当$CR\leq 0.1$时候，则表示通过层次一致性检验，注意，这里的$A=[a_1,a_2,\cdots,a_n]$是经过归一化之后准则的权重向量值</p><p>我们继续上面的旅游的例子，那么有</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220105012126634.png" alt="层次总排序以及其一致性检验1"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220105012208466.png" alt="层次总排序以及其一致性检验2"></p><p>组合权向量即方案最终的得分。计算方法就是用准则层的每个准则得分和某个城市在这几个准则上的得分做内机，最后得到的分数</p><h2 id="4-层次分析法总结"><a href="#4-层次分析法总结" class="headerlink" title="4. 层次分析法总结"></a>4. 层次分析法总结</h2><p>最后，对层次分析法的流程做一个总结</p><ol><li>建立层次结构模型。该结构图包括目标层，准则层，方案层</li><li>构造成对比较矩阵。从第二层开始用成对比较矩阵和1-9尺度</li><li>计算单排序权向量并做一致性检验。对每个成对比较矩阵计算最大特征值及其对应的特征向量，利用一致性指标、随机一致性指标和一致性比率做一致性检验。 若检验通过，特征向量（归一化后）即为权向量；若不通过， 需要重新构造成对比较矩阵</li><li>计算总排序权向量并做一致性检验。计算最下层对最上层总排序的权向量，利用总排序一致性比率，进行检验。若通过，则可按照总排序权向量表示的结果进 行决策，否则需要重新考虑模型或重新构造那些一致性比率较大的成对比较矩阵</li></ol><h2 id="5-层次分析法Python求解"><a href="#5-层次分析法Python求解" class="headerlink" title="5. 层次分析法Python求解"></a>5. 层次分析法Python求解</h2><p>由于层次分析法全部都是矩阵乘法，因此Numpy和Pandas即可求解，下面的这个只是一个初级版本，实现了层次分析法，但是没有实现从表格中读取，也没有给出GUI的输入，后面等开始大美赛前再完善一下吧</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> typing <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span class="token keyword">class</span> <span class="token class-name">AnalyticHierarchyProcess</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    RI <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.58</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">1.12</span><span class="token punctuation">,</span> <span class="token number">1.32</span><span class="token punctuation">,</span> <span class="token number">1.41</span><span class="token punctuation">,</span> <span class="token number">1.45</span><span class="token punctuation">,</span> <span class="token number">1.49</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> criteria<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">,</span> plans<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"manual"</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> method <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"csv"</span><span class="token punctuation">,</span> <span class="token string">"manual"</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>criteria_name <span class="token operator">=</span> <span class="token punctuation">[</span>f<span class="token string">"准则{i}"</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>criteria<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token keyword">else</span> criteria        self<span class="token punctuation">.</span>criteria <span class="token operator">=</span> self<span class="token punctuation">.</span>get_criteria<span class="token punctuation">(</span>criteria_names<span class="token operator">=</span>self<span class="token punctuation">.</span>criteria_name<span class="token punctuation">,</span> method<span class="token operator">=</span>method<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>plan_names <span class="token operator">=</span> <span class="token punctuation">[</span>f<span class="token string">"方案{i}"</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>plans<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>plans<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token keyword">else</span> plans        self<span class="token punctuation">.</span>plan_scores <span class="token operator">=</span> self<span class="token punctuation">.</span>get_plan_scores<span class="token punctuation">(</span>self<span class="token punctuation">.</span>plan_names<span class="token punctuation">,</span> self<span class="token punctuation">.</span>criteria_name<span class="token punctuation">,</span> method<span class="token operator">=</span>method<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">matrix2str</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> column<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>        ss <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>criteria<span class="token punctuation">,</span> index<span class="token operator">=</span>index<span class="token punctuation">,</span> columns<span class="token operator">=</span>column<span class="token punctuation">)</span>        <span class="token keyword">return</span> ss<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始层次单排序"</span><span class="token punctuation">)</span>        eigvalue<span class="token punctuation">,</span> eigvector <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eig<span class="token punctuation">(</span>self<span class="token punctuation">.</span>criteria<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>eigvalue<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"标准对比矩阵为一致阵"</span><span class="token punctuation">)</span>            w <span class="token operator">=</span> eigvector        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"标准对比矩阵为非一致阵，开始进行一致性检验"</span><span class="token punctuation">)</span>            ci <span class="token operator">=</span> <span class="token punctuation">(</span>max<span class="token punctuation">(</span>eigvalue<span class="token punctuation">)</span> <span class="token operator">-</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>criteria<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>criteria<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cr <span class="token punctuation">:</span><span class="token operator">=</span> ci<span class="token operator">/</span>self<span class="token punctuation">.</span>RI<span class="token punctuation">[</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>criteria<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"层次单排序一致性检验一致性比率CR={cr:>.3f}，通过检验"</span><span class="token punctuation">)</span>                w <span class="token operator">=</span> eigvector<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>eigvalue<span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>matrix2str<span class="token punctuation">(</span>column<span class="token operator">=</span>self<span class="token punctuation">.</span>criteria_name<span class="token punctuation">,</span> index<span class="token operator">=</span>self<span class="token punctuation">.</span>criteria_name<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">assert</span> <span class="token boolean">False</span><span class="token punctuation">,</span> f<span class="token string">"层次单排序一致性检验未通过， CR={cr:>.3f}"</span>        <span class="token comment" spellcheck="true"># 归一化处理，softmax</span>        w <span class="token operator">=</span> w <span class="token operator">/</span> sum<span class="token punctuation">(</span>w<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始层次总排序"</span><span class="token punctuation">)</span>        m <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ci_all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ri_all <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> c_name<span class="token punctuation">,</span> c_score <span class="token keyword">in</span> zip<span class="token punctuation">(</span>self<span class="token punctuation">.</span>criteria_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>plan_scores<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"针对 {Fore.GREEN}{c_name}{Style.RESET_ALL} 进行层次单排序"</span><span class="token punctuation">)</span>            eigvalue<span class="token punctuation">,</span> eigvector <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>eig<span class="token punctuation">(</span>c_score<span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>eigvalue<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}{c_name}{Style.RESET_ALL} 的对比矩阵为一致阵"</span><span class="token punctuation">)</span>                m<span class="token punctuation">.</span>append<span class="token punctuation">(</span>eigvector <span class="token operator">/</span> sum<span class="token punctuation">(</span>eigvector<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}{c_name}{Style.RESET_ALL} 的对比矩阵为非一致阵"</span><span class="token punctuation">)</span>                ci <span class="token operator">=</span> <span class="token punctuation">(</span>max<span class="token punctuation">(</span>eigvalue<span class="token punctuation">)</span> <span class="token operator">-</span> len<span class="token punctuation">(</span>c_score<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>c_score<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cr <span class="token punctuation">:</span><span class="token operator">=</span> ci<span class="token operator">/</span>self<span class="token punctuation">.</span>RI<span class="token punctuation">[</span>len<span class="token punctuation">(</span>c_score<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.1</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.YELLOW}{c_name}{Style.RESET_ALL}层次单排序一致性检验一致性比率CR={cr:>.3f}，通过检验"</span><span class="token punctuation">)</span>                    e <span class="token operator">=</span> eigvector<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>eigvalue<span class="token punctuation">)</span><span class="token punctuation">]</span>                    m<span class="token punctuation">.</span>append<span class="token punctuation">(</span>e <span class="token operator">/</span> sum<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>matrix2str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>plan_names<span class="token punctuation">,</span> self<span class="token punctuation">.</span>plan_names<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">assert</span> <span class="token boolean">False</span><span class="token punctuation">,</span> f<span class="token string">"{Fore.YELLOW}{c_name}{Style.RESET_ALL}层次单排序一致性检验未通过， CR={cr:>.3f}"</span>            ci_all<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ci<span class="token punctuation">)</span>            ri_all<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>RI<span class="token punctuation">[</span>len<span class="token punctuation">(</span>c_score<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span>cr<span class="token punctuation">:</span><span class="token operator">=</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>ci_all<span class="token punctuation">)</span> @ w<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>ri_all<span class="token punctuation">)</span> @ w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.1</span><span class="token punctuation">,</span> f<span class="token string">"层次总排序一致性检验未通过，CR={cr:>.3f}"</span>        m <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>m<span class="token punctuation">)</span>        final_score <span class="token operator">=</span> w @ m        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"最终得分:{final_score}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">get_criteria</span><span class="token punctuation">(</span>criteria_names<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> method<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">:</span>        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">"manual"</span><span class="token punctuation">:</span>            criteria <span class="token operator">=</span> np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>N<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token punctuation">:</span><span class="token operator">=</span>len<span class="token punctuation">(</span>criteria_names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">200</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入评价标准之间的相对重要性（1-9，1，3，5，7，9分别表示标准A比标准B：同等重要、稍微重要、比较重要、很重要、绝对重要，2，4，6，8分别为中位数）"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"若标准A不如标准B重要，则输入1/标准B比标准A的相对重要性，例如标准A不如标准B重要，而标准B比标准A为3，那么标准A比标准B为1/3"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token operator">*</span><span class="token number">200</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>  l<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token string">"/"</span> <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>inp<span class="token punctuation">:</span><span class="token operator">=</span>input<span class="token punctuation">(</span>f<span class="token string">"请输入 {Fore.GREEN}{criteria_names[i]}{Style.RESET_ALL} 对 {Fore.GREEN}{criteria_names[j]}{Style.RESET_ALL} 的相对重要性："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        criteria<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> int<span class="token punctuation">(</span>inp<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        upper<span class="token punctuation">,</span> lower <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> inp<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                        criteria<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> upper <span class="token operator">/</span> lower                <span class="token keyword">if</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> l<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token operator">*</span><span class="token number">200</span><span class="token punctuation">)</span>            position <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>criteria<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            criteria<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> criteria<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的评价标准之间的对比矩阵为："</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">200</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">"csv"</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">return</span> criteria    @staticmethod    <span class="token keyword">def</span> <span class="token function">get_plan_scores</span><span class="token punctuation">(</span>plan_names<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> criteria_names<span class="token punctuation">:</span> List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">,</span> method<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">:</span>        <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">"manual"</span><span class="token punctuation">:</span>            plan_scores <span class="token operator">=</span> np<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span>np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>N<span class="token operator">=</span>len<span class="token punctuation">(</span>plan_names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>plan_names<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>plan_names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> repeats<span class="token operator">=</span>len<span class="token punctuation">(</span>criteria_names<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">200</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入不同方案之间就某一个标准的的相对重要性（1-9，1，3，5，7，9分别表示标准A比标准B：同等重要、稍微重要、比较重要、很重要、绝对重要，2，4，6，8分别为中位数）"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"若就标准X，方案A不如方案B重要，则输入1/方案B比方案A的相对重要性，例如就标准X，方案A不如方案B重要，而方案B比方案A为3，那么方案A比方案B为1/3"</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>criteria_names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"就 {Fore.YELLOW}{criteria_names[i]}{Style.RESET_ALL} 对方案之间的得分进行比较"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>l <span class="token punctuation">:</span><span class="token operator">=</span> len<span class="token punctuation">(</span>plan_names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> <span class="token string">"/"</span> <span class="token operator">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>inp<span class="token punctuation">:</span><span class="token operator">=</span>input<span class="token punctuation">(</span>f<span class="token string">"请从 {Fore.YELLOW}{criteria_names[i]}{Style.RESET_ALL} 的角度，输入 {Fore.GREEN}{plan_names[j]}{Style.RESET_ALL} 对 {Fore.GREEN}{plan_names[k]}{Style.RESET_ALL} 的相对重要性："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            plan_scores<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> int<span class="token punctuation">(</span>inp<span class="token punctuation">)</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            upper<span class="token punctuation">,</span> lower <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> inp<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                            plan_scores<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> upper <span class="token operator">/</span> lower                position <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>plan_scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                plan_scores<span class="token punctuation">[</span>i<span class="token punctuation">,</span> position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> plan_scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>position<span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的不同评价标准下方案间的对比矩阵为："</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> c<span class="token punctuation">,</span> s <span class="token keyword">in</span> zip<span class="token punctuation">(</span>criteria_names<span class="token punctuation">,</span> plan_scores<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">200</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> method <span class="token operator">==</span> <span class="token string">"csv"</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">return</span> plan_scores<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    ahp <span class="token operator">=</span> AnalyticHierarchyProcess<span class="token punctuation">(</span>criteria<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"景色"</span><span class="token punctuation">,</span> <span class="token string">"费用"</span><span class="token punctuation">,</span> <span class="token string">"居住"</span><span class="token punctuation">,</span> <span class="token string">"饮食"</span><span class="token punctuation">,</span> <span class="token string">"旅途"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> plans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"苏杭"</span><span class="token punctuation">,</span> <span class="token string">"北戴河"</span><span class="token punctuation">,</span> <span class="token string">"桂林"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    ahp<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106135400089.png" alt="层次分析法运行结果"></p><h2 id="6-层次分析法例题"><a href="#6-层次分析法例题" class="headerlink" title="6. 层次分析法例题"></a>6. 层次分析法例题</h2><h3 id="A-队员选拔问题"><a href="#A-队员选拔问题" class="headerlink" title="A. 队员选拔问题"></a>A. 队员选拔问题</h3><h4 id="A-问题"><a href="#A-问题" class="headerlink" title="A. 问题"></a>A. 问题</h4><blockquote><p>设某学校数学建模教练组根据实际需要，拟从报名参赛的20名队员中选出15名优秀队员代表学校参赛。 表1给出了20名队员的基本条件的量化情况。 请根据这些条件对20名队员进行综合评价，从中选出15名综合素质较高的优秀队员</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106140221242.png" alt="队员基本情况表" style="zoom: 50%;"></p></blockquote><h4 id="B-问题分析"><a href="#B-问题分析" class="headerlink" title="B. 问题分析"></a>B. 问题分析</h4><p>这是一个半定性与半定量、多因素的综合选优排序问题． 鉴于数学建模竞赛不仅要考查学生的学科知识、还要考查学生的 作能力、计算机应用能力、团结协助能力等多方面的因素，要 从20名队员中选拔出优秀参赛队员，就要对表1中所列的六个因素进行比较分析，综合排序选优，从而选取前几名学生。</p><h4 id="C-假设"><a href="#C-假设" class="headerlink" title="C. 假设"></a>C. 假设</h4><ol><li>题目中所确定的考评条件是合理的，能够反映出参选队员的建模能力</li><li>各参选队员的量化得分是按统一的量化标准得出的</li><li>对参选队员的量化打分是公平的，所有参选队员对打分结果无异议</li><li>选拔队员所考虑的六个因素在选拔优秀队员中所起的作用依次为学科知识竞赛成绩、思维敏捷度、知识面宽广度、写作能力、计算机应用能力、团结协助能力，并且相邻两个因素的影响程度之差基本相同</li></ol><h4 id="D-模型建立"><a href="#D-模型建立" class="headerlink" title="D. 模型建立"></a>D. 模型建立</h4><p>根绝题目要求和分析与假设，建立如下的层次结构图</p><ol><li><strong>第一层为目标层</strong>：选拔优秀参赛队员</li><li><strong>第二层为准则层</strong>：选拔优秀队员时所考虑的6个因素，依次为学科知识竞赛成绩、思维敏捷度、知识面宽广度、写作能力、计 算机应用能力、协助能力</li><li><strong>第三层为方案层</strong>：参选的20名队员</li></ol><p>结构图如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106143423911.png" alt="队员选拔问题层次结构图"></p><h4 id="E-模型求解"><a href="#E-模型求解" class="headerlink" title="E. 模型求解"></a>E. 模型求解</h4><ol><li><p><strong>确定准则层对目标层的权重向量</strong>：根据假设，构造准则层$C$的准则间的比较矩阵</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106143632490.png" alt="准则层C的比较矩阵" style="zoom:50%;"></p></li><li><p><strong>确定方案层对准则层的权重向量</strong>：根据表1和模型假设，构造方案层$P$中20个队员对准则层$C$中各因素$C_k$的两两比较矩阵。构造方式为分数的两两比较</p></li><li><p><strong>求解</strong>：结果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220106144434996.png" alt="求解结果"></p></li></ol><h4 id="F-模型分析"><a href="#F-模型分析" class="headerlink" title="F. 模型分析"></a>F. 模型分析</h4><ul><li>由表1，20名队员六项条件互有强弱，利用层次分析法 得到了一种合理的综合排序方案，结果选出了综合实力较强的 15名队员</li><li>第13号队员各项条件总体较强，排在了第一位</li><li>第9号和第10号队员各项条件总体较弱，排在后两位</li></ul><h2 id="7-层次分析法的综合评价"><a href="#7-层次分析法的综合评价" class="headerlink" title="7. 层次分析法的综合评价"></a>7. 层次分析法的综合评价</h2><p>最后，给出层次分析法的整体上的一个评价</p><p>首先是优点：</p><ul><li><strong>系统性</strong>：把所研究的问题看成一个系统，按照分解、比较判断、 综合分析的思维方式进行决策分析，也是实际中继机理分析方法、统 计分析方法之后发展起来的又一个重要的系统分析工具．</li><li><strong>实用性</strong>：把定性与定量方法结合起来，能处理许多传统的优化 方法无法处理的实际问题，应用范围广．而且将决策者和决策分析者 联系起来，体现了决策者的主观意见，决策者可以直接应用它进行决 策分析，增加了决策的有效性和实用性．</li><li><strong>简洁性</strong>：具有中等文化程度的人都可以学习掌握层次分析法的基 本原理和步骤，计算也比较简便，所得结果简单明确，容易被决策者 了解和掌握．</li></ul><p>然后是其缺点：</p><ul><li>局限性是粗略、主观．首先是它的比较、判断及结果都是粗糙的， 不适于精度要求很高的问题</li><li>其次是从建立层次结构图到给出两两比较矩阵，人的主观因素作用 很大，使决策结果较大程度地依赖于决策人的主观意志，可能难以为 众人所接受</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数学建模算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Math Modeling </tag>
            
            <tag> 层次分析法 </tag>
            
            <tag> Analytic Hierarchy Process </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模算法4-非线性规划</title>
      <link href="/2022/01/04/shu-xue-jian-mo-suan-fa-4-fei-xian-xing-gui-hua/"/>
      <url>/2022/01/04/shu-xue-jian-mo-suan-fa-4-fei-xian-xing-gui-hua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解了数学建模中常见的一类问题：非线性规划，及其求解</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/v2-69cfe96a3fb52b79353c03cadb085a3b_1440w.jpg" alt="非线性规划"></p><h1 id="数学建模算法4-非线性规划"><a href="#数学建模算法4-非线性规划" class="headerlink" title="数学建模算法4-非线性规划"></a>数学建模算法4-非线性规划</h1><p>在前面的几篇文章中，我们介绍了线性规划、整数规划以及01规划，并且给出了如何利用Python来对他们进行求解。</p><p>但是在显示问题中，的确有很多规划问题他们的约束都不是线性的，或者他们的目标函数也不是线性的。可是我们在数学建模的过程中，我们自己提出来的模型很有可能是非线性的规划问题，此时就我们就不得不对非线性的规划问题进行求解。</p><p>为此，本文介绍了什么是非线性规划问题，以及如何利用Python求解非线性规划问题。</p><h2 id="1-非线性规划问题介绍"><a href="#1-非线性规划问题介绍" class="headerlink" title="1. 非线性规划问题介绍"></a>1. 非线性规划问题介绍</h2><p>如果目标函数或约束条件中包含非线性函数，就称这种规划问题为<strong>非线性规划问题（Nonlinear Programming，NP）</strong>。一般说来，解非线性规划要比解线性规划问题困难得多。而且，也不像线性规划有单纯形法这一通用方法，非线性规划目前还没有适于各种问题的一般算法，各个方法都有自己特定的适用范围。例如：</p><ul><li>20世纪50年代，H.W.Kuhn 和 A.W.Tucker 提出了非线性规划的基本定理，为非线性规划奠定了理论基础 </li><li>50、60 年代出现了许多解非线性规划问题的有效算法</li><li>80年代后，随着计算机技术的快速发展，非线性规划方法取得了长足进步，在信赖域法、稀疏拟牛顿法、并行计算、内点法和有限存储法等领域取得了丰硕的成果。</li></ul><p>不过就和前面的文章一样，我们其实并不需要关注这些算法的原理以及如何如何实现这个算法，我们只需要会用就行了，因此下面就围绕非线性规划问题进行求解。</p><h2 id="2-非线性规划的标准形式"><a href="#2-非线性规划的标准形式" class="headerlink" title="2. 非线性规划的标准形式"></a>2. 非线性规划的标准形式</h2><p>类似于线性规划的标准形式，非线性规划的约束条件可以划归称两类：第一类是$\leq型，第二类是$$=$型。</p><p>我们下面给出来非线性规划的标准形式：</p><script type="math/tex; mode=display">\min Z=f(x)\\\begin{cases}h_1(x)\leq 0\\h_2(x)\leq 0\\\cdots\\h_p(x)\leq 0\\g_1(x)\leq 0\\g_2(x)\leq 0\\\cdots\\g_q(x)\leq 0\\\end{cases}</script><p>对后面两个式子进行缩写，得到</p><script type="math/tex; mode=display">\min Z=f(x)\\\begin{cases}h_i(x)\leq 0, &i=1,\cdots,p\\g_i(x)\leq 0, &i=1,\cdots,q\\lb\leq x \leq ub\end{cases}</script><h2 id="3-非线性规划问题的Python求解"><a href="#3-非线性规划问题的Python求解" class="headerlink" title="3. 非线性规划问题的Python求解"></a>3. 非线性规划问题的Python求解</h2><p>使用Python求解非线性规划问题，主要使用SciPy中的minimize函数，这个函数实际上是多个优化算法的接口。</p><p>该函数的函数头如下</p><pre class="line-numbers language-python"><code class="language-python">scipy<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>fun<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token operator">=</span>None<span class="token punctuation">,</span> jac<span class="token operator">=</span>None<span class="token punctuation">,</span> hess<span class="token operator">=</span>None<span class="token punctuation">,</span> hessp<span class="token operator">=</span>None<span class="token punctuation">,</span> bounds<span class="token operator">=</span>None<span class="token punctuation">,</span> constraints<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tol<span class="token operator">=</span>None<span class="token punctuation">,</span> callback<span class="token operator">=</span>None<span class="token punctuation">,</span> options<span class="token operator">=</span>None<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，我们需要关注的变量只有下面几个：</p><ul><li><p>fun：以Python中的函数的形式定义的目标函数</p></li><li><p>x0：在有些求解非线性约束的方法中（例如拟牛顿法）需要梯度来帮助求解，因此需要一个初始值进行迭代</p></li><li><p>bounds：每个变量的上下限</p></li><li><p>constrains：元组形式的约束条件，其中每个约束条件是元组中的一个项，用一个字典表示</p><p>以字典形式表示的约束条件按照如下方式</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'ineq'</span><span class="token punctuation">,</span> <span class="token string">'fun'</span><span class="token punctuation">:</span> functionname<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中：</p><ul><li>type是约束的类型，是等式约束还是不等式约束，等式约束为eq，不等式约束为ineq，<strong>默认不等式约束为大于等于0</strong></li><li>fun是以Python的函数的形式定义的约束的函数</li></ul></li></ul><p>此外，需要注意的是，约束的函数和目标变量的函数都是需要接受一个变量作为输入，这个变量即决策变量组成的向量，而决策向量的形状由x0决定</p><p>例如对下面的非线性规划问题进行求解</p><script type="math/tex; mode=display">\min f(x)=x_1^2+x_2^2+x_3^2\\\begin{cases}x_1^2-x_2+x_3^2\ge 0\\-x_1-x_2^2-x_3^2\ge 20\\-x_1-x_2^2+2=0\\x_2+2x_3^2=3\\x_1,x_2,x_3\ge 0\end{cases}</script><h3 id="A-定义决策变量"><a href="#A-定义决策变量" class="headerlink" title="A. 定义决策变量"></a>A. 定义决策变量</h3><p>定义决策变量很简单，直接写一个函数就行了，注意这个函数的输入是和x0形状相同的Numpy的array</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">as</span> scopt<span class="token keyword">def</span> <span class="token function">objective</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B-定义约束"><a href="#B-定义约束" class="headerlink" title="B. 定义约束"></a>B. 定义约束</h3><p>注意，约束的定义也是写成Python中的函数，函数的参数也是Numpy的array</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">constrain1</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">constrain2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">constrain3</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">constrain4</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token keyword">def</span> <span class="token function">x0_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">x1_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">x2_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0</span>constrains <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"ineq"</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">:</span> constrain1<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"ineq"</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">:</span> constrain2<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"eq"</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">:</span> constrain3<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"eq"</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">:</span> constrain4<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"ineq"</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">:</span> x0_bound<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"ineq"</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">:</span> x1_bound<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"ineq"</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">:</span> x2_bound<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-调用求解"><a href="#C-调用求解" class="headerlink" title="C. 调用求解"></a>C. 调用求解</h3><p>调用函数求解，依次填入参数即可</p><pre class="line-numbers language-python"><code class="language-python">x0 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result<span class="token punctuation">:</span> scopt<span class="token punctuation">.</span>OptimizeResult <span class="token operator">=</span> scopt<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>fun<span class="token operator">=</span>objective<span class="token punctuation">,</span> x0<span class="token operator">=</span>x0<span class="token punctuation">,</span> constraints<span class="token operator">=</span>constrains<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>fun<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求解结果</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104173928413.png" alt="求解结果"></p><h3 id="D-完整代码"><a href="#D-完整代码" class="headerlink" title="D. 完整代码"></a>D. 完整代码</h3><p>完整的代码如下，注意约束条件也可以指定bounds参数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">as</span> scopt<span class="token keyword">def</span> <span class="token function">objective</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">constrain1</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">constrain2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">constrain3</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">constrain4</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token keyword">def</span> <span class="token function">x0_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">x1_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">x2_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0</span>constrains <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"ineq"</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">:</span> constrain1<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"ineq"</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">:</span> constrain2<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"eq"</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">:</span> constrain3<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span><span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"eq"</span><span class="token punctuation">,</span> <span class="token string">"fun"</span><span class="token punctuation">:</span> constrain4<span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># {"type": "ineq", "fun": x0_bound},</span>    <span class="token comment" spellcheck="true"># {"type": "ineq", "fun": x1_bound},</span>    <span class="token comment" spellcheck="true"># {"type": "ineq", "fun": x2_bound},</span><span class="token punctuation">)</span>bounds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span>x0 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result<span class="token punctuation">:</span> scopt<span class="token punctuation">.</span>OptimizeResult <span class="token operator">=</span> scopt<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>fun<span class="token operator">=</span>objective<span class="token punctuation">,</span> x0<span class="token operator">=</span>x0<span class="token punctuation">,</span> constraints<span class="token operator">=</span>constrains<span class="token punctuation">,</span> bounds<span class="token operator">=</span>bounds<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>fun<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-非线性规划例子"><a href="#4-非线性规划例子" class="headerlink" title="4. 非线性规划例子"></a>4. 非线性规划例子</h2><p>下面介绍即非线性规划的数学模型的例子</p><h3 id="A-选址供应问题"><a href="#A-选址供应问题" class="headerlink" title="A. 选址供应问题"></a>A. 选址供应问题</h3><p>问题的具体描述如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220105042024932.png" alt="选址供应问题"></p><h4 id="1-问题分析"><a href="#1-问题分析" class="headerlink" title="1) 问题分析"></a>1) 问题分析</h4><p>第一问中需要进行决策的变量就是从某个料场到某个工地需要运输多少的水泥，例如从料场A运输到工地1。因此考虑到有两个料场，每个料场都可以去六个工地，因此决策变量实际上用12个。</p><p>而第二问则需要决策的变量变成了两个新料场的位置，因此需要决策变量就成了两个新料场的坐标，因此第二问的决策变量有4个。</p><p>因此两问分别对应两个规划问题。</p><h4 id="2-建立模型"><a href="#2-建立模型" class="headerlink" title="2) 建立模型"></a>2) 建立模型</h4><ol><li><p>第一问</p><p>记工地的位置为$(a<em>i,b_i)$，水泥日用量为$d_i,i=1,\cdots,6$；料场的位置记为$(x_j, y_j),j=1,2$。则设料场$j$向工地$i$的运输量为$X</em>{ij}$</p><p>则针对第一问，建立的数学模型如下</p><script type="math/tex; mode=display">\min f=\sum_{j=1}^2\sum_{i=1}^6X_{ij}\sqrt {(x_i-a_i)^2+(y_i-b_i)^2}\\\begin{cases}\sum_{j=1}^2 X_{ij}=d_i, & i=1,\cdots,6\\\sum_{i=1}^6 X_{ij}\leq e_{ij}, &j=1,2\end{cases}</script></li></ol><ol><li>第二问</li></ol><h4 id="3-问题求解"><a href="#3-问题求解" class="headerlink" title="3) 问题求解"></a>3) 问题求解</h4><p>略</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Math Modeling </tag>
            
            <tag> 非线性规划 </tag>
            
            <tag> Non-Linear Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模算法3-01规划</title>
      <link href="/2022/01/03/shu-xue-jian-mo-suan-fa-3-01-gui-hua/"/>
      <url>/2022/01/03/shu-xue-jian-mo-suan-fa-3-01-gui-hua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解了数学建模中常见的一类问题：01规划，及其求解</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220103165339023.png" alt="01规划问题"></p><h1 id="数学建模算法3-01规划"><a href="#数学建模算法3-01规划" class="headerlink" title="数学建模算法3-01规划"></a>数学建模算法3-01规划</h1><p>前面我们介绍了数学规划中的线性规划、整数规划。其实对于整数规划来说，还有一类特殊的规划问题就是决策变量的取值只能为0或者1，这样的问题我们称为0-1规划。</p><p>01规划问题通常出现在指派问题中，例如一共有很多种任务，多个不同的人完成每种任务需要的时间不同，求最短耗时。那么这里是否派A去做任务X就是一个只能取0或者1的变量。因此这样的问题就可以用01规划来解决。更多可以用01规划求解的问题在后面会进行介绍。</p><h2 id="1-01规划问题介绍"><a href="#1-01规划问题介绍" class="headerlink" title="1. 01规划问题介绍"></a>1. 01规划问题介绍</h2><p>其实对于01规划问题来说，如果假设所有的变量的取值都是0或者1，并且所有变量之间都是独立的，那么我们其实用整数规划就能求解。因为所有变量独立的01规划问题相比于整数规划问题，只是单纯的限制了每个决策变量的定义域为$0\leq x_i\leq 1$。</p><p>所以对于所有变量独立的01规划来说，给所有的01变量添加大于等于0且小于等于1的约束即可。</p><p>然而01规划中，真正难处理的是01变量之间会相互影响的01规划。例如上面的投资问题，设$x_i$表示是否投资第$i$个项目，那么$x_i$的取值只能在0和1之间。</p><p>但是项目I、II、III之间会相互影响，即是否投资项目II会影响到项目I、项目III的投资，而项目I是否投资又会影响到项目V是否投资。</p><p>因此，称处01变量之间相互制约的条件为<strong>互斥条件</strong>，而为了处理含互斥条件的的01问题，在原有的约束的基础上引入<strong>互斥约束</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220103165339023.png" alt="01规划问题"></p><p>再举一个例子（如下图），新工序和原工序都是线性约束，但是在考虑两种工序到底用哪一个才能使得收益最大的时候，就可以另设一个01变量$y$表示是否用原工序。此时问题就成了混合线性规划问题。</p><p>当然这里也可以设$x_0$表示是否用原工序，$x_1$表示是否用新工序，那么再额外引入一个互斥约束为$x_1+x_1=1$。</p><p>注意，之所以要$M$是一个充分大的数（无穷），是因为$3x_1+5x_2\leq\infin$这个约束条件等价于没有，因为$x_1$和$x_2$都可以取任意的值</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220103170758245.png" alt="互斥约束问题"></p><h2 id="2-01规划问题的数学化"><a href="#2-01规划问题的数学化" class="headerlink" title="2. 01规划问题的数学化"></a>2. 01规划问题的数学化</h2><p>要对01规划进行进行求解，就需要首先写出来01规划的标准式，然后针对标准式运用算法进行求解</p><h3 id="A-leq-类型"><a href="#A-leq-类型" class="headerlink" title="A. $\leq$类型"></a>A. $\leq$类型</h3><p>设从下面$p$个约束条件中选择$q$个约束条件</p><script type="math/tex; mode=display">\begin{cases}\sum_{j=1}^n a_{1j}x_j \leq b_1\\\sum_{j=1}^n a_{2j}x_j \leq b_2\\\sum_{j=1}^n a_{3j}x_j \leq b_3\\\cdots\\\sum_{j=1}^n a_{pj}x_j \leq b_p\\\end{cases}</script><p>设</p><script type="math/tex; mode=display">y_i=\begin{cases}0, &选择第i个约束条件\\1, &不选择第i个约束条件\end{cases}</script><p>则需要添加的互斥约束为：</p><script type="math/tex; mode=display">\begin{cases}\sum_{j=1}^n a_{ij}x_j \leq b_i+My_i, & i=1,2,\cdots,p\\\sum_{i=1}^p y_i=p-q, &i=1,2,\cdots,p\end{cases}</script><p>上面这两个约束也非常好理解：</p><ul><li>不选的约束的和加起来等于$p-q$</li><li>不选这个约束则表示让该改约失效，即加上一个充分大的数即可</li></ul><h2 id="3-01规划问题举例"><a href="#3-01规划问题举例" class="headerlink" title="3. 01规划问题举例"></a>3. 01规划问题举例</h2><h3 id="A-固定费用问题"><a href="#A-固定费用问题" class="headerlink" title="A. 固定费用问题"></a>A. 固定费用问题</h3><blockquote><p>服装公司租用生产线拟生产T恤、衬衫和裤子。 每年可用劳动力8200h，布料8800m2。生产每类商品需要的劳动力、布料以及售价等信息如下表所示。求该怎样生产产品可以获得最大收益。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220103174537365.png" alt="商品信息表" style="zoom:67%;"></p></blockquote><p>上述问题中的变量其实有两类，第一类是某个商品该生产多少件，第二类是是否租用该商品的生产线。很明显，第二类变量是01变量。</p><p>设$y_i$表示是否要租用第$i$类生产线，$x_j$表示第$j$类商品生产多少件，那么上述问题的数学模型如下：</p><script type="math/tex; mode=display">\max_{\vec x,\vec y} Z=150x_1+220x_2+300x_3-200000y_1-150000y_2-100000y_3\\\begin{cases}3x_1+2x_2+6x_3\leq 8200, &x_1\leq M_1y_1且x_2\leq M_2y_2且x_3\leq M_3y_3\\0.8x_1+1.1x_2+1.5x_2\leq 8800, &x_1\leq M_1y_1且x_2\leq M_2y_2且x_3\leq M_3y_3\\x_1,x_2,x_3\ge 0\\x_1,x_2,x_3均为整数\\y_1,y_2,y_3=0或1\end{cases}</script><h3 id="B-指派问题"><a href="#B-指派问题" class="headerlink" title="B. 指派问题"></a>B. 指派问题</h3><blockquote><p>甲乙丙丁四个人，ABCD四项工作，每个人完成每项工作用时如下表。要求每人只能做一项工 作，每项工作只由一人完成，问如何指派总时间最短？</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220103183021177.png" alt="工作用时表"></p></blockquote><p>上述问题中，一个人完成四个工作有4个时间，那么4个人就一种16个时间。针对这16个时间，引入变量$x_{ij}$</p><script type="math/tex; mode=display">x_{ij}=\begin{cases}1, &第i个人做第j个工作\\0, &第i个人不做第j个工作\end{cases}</script><p>则指派问题的数学模型如下</p><script type="math/tex; mode=display">\begin{align}\min Z=&3x_{11}+5x_{12}+8x_{13}+4x_{14}+\\& 6x_{21}+8x_{22}+5x_{23}+4x_{24}+\\& 2x_{31}+5x_{32}+8x_{33}+5x_{34}+\\& 9x_{41}+2x_{42}+5x_{43}+2x_{44}\end{align}</script><script type="math/tex; mode=display">\begin{cases}x_{11}+x_{12}+x_{13}+x_{14}=1\\x_{21}+x_{22}+x_{23}+x_{24}=1\\x_{31}+x_{32}+x_{33}+x_{34}=1\\x_{41}+x_{42}+x_{43}+x_{44}=1\\x_{11}+x_{21}+x_{31}+x_{41}=1\\x_{12}+x_{22}+x_{32}+x_{42}=1\\x_{13}+x_{23}+x_{33}+x_{43}=1\\x_{14}+x_{24}+x_{34}+x_{44}=1\\\end{cases}</script><p>上述八个约束中，前四个约束为一个人只能做一项工作，而后四个约束为一个工作只能由一个人完成。</p><h3 id="C-指派问题的标准形式"><a href="#C-指派问题的标准形式" class="headerlink" title="C. 指派问题的标准形式"></a>C. 指派问题的标准形式</h3><p>$n$个人和$n$个工作，已知第$i$个人完成第$j$个工作的代价$c_{ij}$，要求每项工作只能由一个人完成，每个人只能完成其中的一项工作，问如何分配工作可以使总代价最少？</p><script type="math/tex; mode=display">C = (c_{ij})_{n\times n}\begin{bmatrix}c_{11} & c_{12} & \cdots & c_{1n}\\c_{21} & c_{22} & \cdots & c_{2n}\\\vdots & \vdots & \ddots & \vdots\\c_{n1} & c_{n2} & \cdots & c_{nn}\\\end{bmatrix}</script><p>称矩阵$C$为指派问题的系数矩阵</p><p>设$x_{ij}$表示第$i$个人做第$j$项工作的状态，即</p><script type="math/tex; mode=display">x_{ij}=\begin{cases}1, & 第i个人做第j项工作\\0, & 第i个人不做第j项工作\end{cases}</script><p>则称</p><script type="math/tex; mode=display">X = (x_{ij})_{n\times n}\begin{bmatrix}x_{11} & x_{12} & \cdots & x_{1n}\\x_{21} & x_{22} & \cdots & x_{2n}\\\vdots & \vdots & \ddots & \vdots\\x_{n1} & x_{n2} & \cdots & x_{nn}\\\end{bmatrix}</script><p>为指派问题的解矩阵。由于指派问题的要求，解矩阵每行每列都仅有一个1，类似于八皇后问题的退化版。</p><p>而指派问题的数学模型为</p><script type="math/tex; mode=display">\min z=\sum_{i=1}^n\sum_{j=1}^nc_{ij}x_{ij}\\\begin{cases}\sum_{j=1}^nx_{ij}=1, & i=1,\cdots,n\\\sum_{i=1}^nx_{ij}=1, & i=1,\cdots,n\\x_{ij}=0或x_{ij}=1, & i=1,\cdots,n\end{cases}</script><h3 id="D-非标准形式的指派问题"><a href="#D-非标准形式的指派问题" class="headerlink" title="D. 非标准形式的指派问题"></a>D. 非标准形式的指派问题</h3><h4 id="1-最大化指派问题"><a href="#1-最大化指派问题" class="headerlink" title="1) 最大化指派问题"></a>1) 最大化指派问题</h4><p>指派问题中是要求画的总时间最少，然而在一些指派问题的变体中，要求优化目标最大，则此时取系数矩阵中最大的元素$c’=\max C$，令</p><script type="math/tex; mode=display">C'=c'-C</script><p>然后转化为了指派问题，对其你找指派问题进行求解即可</p><h4 id="2-人数和工作数不相等"><a href="#2-人数和工作数不相等" class="headerlink" title="2) 人数和工作数不相等"></a>2) 人数和工作数不相等</h4><p>在指派问题中，有$n$个人做$n$项工作，然而在一些变体问题中却会存在两者数量不相等的情况，为此</p><ul><li><strong>人少工作多</strong>：添加虚拟的人，使得人数和工作数相等，注意，添加的虚拟人的代价都是0</li><li><strong>人多工作少</strong>：添加虚拟的工作，使得人数和工作数相等，注意，添加的虚拟工作的代价都是0</li></ul><h4 id="4-多面手问题"><a href="#4-多面手问题" class="headerlink" title="4) 多面手问题"></a>4) 多面手问题</h4><p>标准的指派问题中要求一个人只能做一项工作，然而若一个人可以做三四项工作，那么把这个人变为几个相同的人即可</p><h4 id="5-禁止某人做某工作"><a href="#5-禁止某人做某工作" class="headerlink" title="5) 禁止某人做某工作"></a>5) 禁止某人做某工作</h4><p>为此，将该人做某工作的代价记为无穷大即可</p><h2 id="4-匈牙利算法解01规划问题"><a href="#4-匈牙利算法解01规划问题" class="headerlink" title="4. 匈牙利算法解01规划问题"></a>4. 匈牙利算法解01规划问题</h2><p>下面将结合指派问题讲解如何用匈牙利算法求解01规划问题</p><p>匈牙利算法步骤如下：</p><ol><li><p>对指派问题的系数矩阵$(c<em>{ij})$进行变换，使其变为$(b</em>{ij})$，$(b_{ij})$满足在每行每列中都有0元素。变换步骤如下</p><ul><li>对$(c_{ij})$每行元素减去该行最小元素</li><li>从得到的新的矩阵每列元素减去该列的最小元素</li></ul></li><li><p>进行试指派，以寻求最优解</p><p>在$(b<em>{ij})$中找尽可能多的独立0元素，若能找出$n$个独立0元素（独立0元素指该元素所在的行和列数不相等），就以这$n$个独立0元素对应解矩阵$(x</em>{ij})$中的元素为1，其余为0，这就得到最优解。找独立0元素，常用的步骤为：</p><ol><li>从只有一个0元素的行(列)开始，给这个0元素加圈，记作◎ 。然后划去◎ 所在列(行)的其它0元素，记作Ø；这表示这列所代表的任务已指派 完，不必再考虑别人了。</li><li>给只有一个0元素的列(行)中的0元素加圈，记作◎；然后划去◎ 所 在行的0元素，记作Ø ．</li><li>反复进行(1)，(2)两步，直到尽可能多的0元素都被圈出和划掉为止</li><li>若仍有没有划圈的0元素，且同行(列)的0元素至少有两个， 则从剩有0元素最少的行(列)开始，比较这行各0元素所在列中0元 素的数目，选择0元素少的那列的这个0元素加圈(表示选择性多的 要“礼让”选择性少的)。然后划掉同行同列的其它0元素。可反 复进行，直到所有0元素都已圈出和划掉为止</li><li>若◎ 元素的数目m 等于矩阵的阶数n，那么这指派问题的 最优解已得到。若m &lt; n, 则转入下一步</li></ol></li><li><p>作最少的直线覆盖所有0元素</p><ol><li>对没有◎的行打√号</li><li>对已打√号的行中所有含Ø元素的列打√号</li><li>再对打有√号的列中含◎ 元素的行打√号</li><li>重复(2)，(3)直到得不出新的打√号的行、列为止</li><li>对没有打√号的行画横线，有打√号的列画纵线，这就得到覆盖 所有0元素的最少直线数 l 。l 应等于m，若不相等，说明试指派过 程有误，回到第二步(4)，另行试指派；若 l＝m &lt; n，须再变换当前 的系数矩阵，以找到n个独立的0元素，为此转第四步</li></ol></li><li><p>变换矩阵(bij)以增加0元素</p><ol><li>在没有被直线覆盖的所有元素中找出最小元素，然后打√各行都减去 这最小元素；打√各列都加上这最小元素（以保证系数矩阵中不出现 负元素）。新系数矩阵的最优解和原问题仍相同。转回第二步</li></ol></li></ol><p>实际上，单纯的看自然语言的描述不好懂，因此下面根据不同的例子来进行讲解匈牙利算法。</p><h3 id="A-例子一"><a href="#A-例子一" class="headerlink" title="A. 例子一"></a>A. 例子一</h3><p>求解下面的指派问题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104150537191.png" alt="例子一" style="zoom:50%;"></p><ol><li>第一步：对系数矩阵进行变换</li></ol><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104150601301.png" alt="第一步：变换系数矩阵" style="zoom:50%;"></p><ol><li><p>第二步：试指派，寻找最优解，寻找独立的0元素</p><ol><li><p>寻找独立0元素<br> <img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104150735537.png" alt="第二步：试指派" style="zoom:50%;"></p></li><li><p>判断是否完成求解</p><p>  <img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104150954853.png" alt="第二步:判断是否完成求解"></p></li></ol></li></ol><h3 id="B-例子二"><a href="#B-例子二" class="headerlink" title="B. 例子二"></a>B. 例子二</h3><p>求解下面的指派问题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104151405833.png" alt="例子二" style="zoom:50%;"></p><ol><li><p>第一步：变换系数矩阵</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104151706104.png" alt="变换系数矩阵"></p></li><li><p>第二步：试指派</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104151735596.png" alt="试指派"></p></li><li><p>第三步：覆盖0元素</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104151823539.png" alt="覆盖0元素"></p></li><li><p>第四步：变换系数矩阵，增加0元素</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104152021619.png" alt="变换系数矩阵"></p></li><li><p>第二步：继续进行试指派</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104152113689.png" alt="试指派"></p></li></ol><h2 id="5-01规划Python求解"><a href="#5-01规划Python求解" class="headerlink" title="5. 01规划Python求解"></a>5. 01规划Python求解</h2><blockquote><p>以下内容参考博客：<a href="https://www.cnblogs.com/youcans/p/14854596.html">https://www.cnblogs.com/youcans/p/14854596.html</a></p></blockquote><p>我们上面讲解了该如何使用匈牙利算法求解01规划问题，然而落实到真实的求解上，我们其实可以直接用PuLP即可，没有必要自己去写出来匈牙利算法，逼近CBC以及为我们准备好了。</p><p>下面以一个问题来进行举例</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104152607093.png" alt="例题"></p><h3 id="A-建模"><a href="#A-建模" class="headerlink" title="A. 建模"></a>A. 建模</h3><p>定义决策变量</p><script type="math/tex; mode=display">x_i=\begin{cases}0, &不选第i个项目\\1, &选择第i个项目\end{cases}</script><p>则模型为</p><script type="math/tex; mode=display">\max Z=150x_1+210x_2+60x_3+80x_4+180x_5\\\begin{cases}210x_1+300x_2+100x_3+130x_4+260x_5\leq 600\\x_1+x_2+x_3=1\\x_3+x_4\leq 1\\x_5\leq x_1\\x_i=0或1, & i=1,\cdots,5\end{cases}</script><h3 id="B-Python求解"><a href="#B-Python求解" class="headerlink" title="B. Python求解"></a>B. Python求解</h3><p>求解的具体过程我们其实还是使用PuLP库。类似于整数规划问题，我们只需要指定01变量的类别为”Binary”即可。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pulp<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npproblem<span class="token punctuation">:</span> pulp<span class="token punctuation">.</span>LpProblem <span class="token operator">=</span> pulp<span class="token punctuation">.</span>LpProblem<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"最大化投资问题"</span><span class="token punctuation">,</span> sense<span class="token operator">=</span>pulp<span class="token punctuation">.</span>LpMaximize<span class="token punctuation">)</span>xs <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>pulp<span class="token punctuation">.</span>LpVariable<span class="token punctuation">(</span>name<span class="token operator">=</span>f<span class="token string">"x{i}"</span><span class="token punctuation">,</span> lowBound<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> cat<span class="token operator">=</span>pulp<span class="token punctuation">.</span>LpBinary<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>profits <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">)</span>contrain1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>contrain2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>contrain3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>problem<span class="token punctuation">.</span>setObjective<span class="token punctuation">(</span>profits @ xs<span class="token punctuation">)</span>problem <span class="token operator">+=</span> <span class="token punctuation">(</span>contrain1 @ xs <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"约束1"</span><span class="token punctuation">)</span>problem <span class="token operator">+=</span> <span class="token punctuation">(</span>contrain2 @ xs <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"约束2"</span><span class="token punctuation">)</span>problem <span class="token operator">+=</span> <span class="token punctuation">(</span>contrain3 @ xs <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"约束3"</span><span class="token punctuation">)</span><span class="token keyword">if</span> pulp<span class="token punctuation">.</span>LpStatus<span class="token punctuation">[</span>problem<span class="token punctuation">.</span>solve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Optimal"</span><span class="token punctuation">:</span>    v<span class="token punctuation">:</span> pulp<span class="token punctuation">.</span>LpVariable    <span class="token keyword">for</span> v <span class="token keyword">in</span> problem<span class="token punctuation">.</span>variables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{v.name}={v.varValue}"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"max Z={pulp.value(problem.objective)}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后的结果为</p><pre class="line-numbers language-shell"><code class="language-shell">Result - Optimal solution foundObjective value:                410.00000000Enumerated nodes:               0Total iterations:               0Time (CPU seconds):             0.00Time (Wallclock seconds):       0.00Option for printingOptions changed from normal to allTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00x0=1.0x1=0.0x2=0.0x3=1.0x4=1.0max Z=410.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220104154056572.png" alt="运行结果"></p>]]></content>
      
      
      <categories>
          
          <category> 数学建模算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Math Modeling </tag>
            
            <tag> Linear Programming </tag>
            
            <tag> 01规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的推导式</title>
      <link href="/2022/01/02/python-zhong-de-tui-dao-shi/"/>
      <url>/2022/01/02/python-zhong-de-tui-dao-shi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是我CSDN中的文章，完成于2019年，现将其迁移到我的个人博客网站。本文主要介绍了Python中的推导式</p><p>This blog has been finished 2 years ago, in 2019, and was uploaded to CSDN. Now, this blog is transfer to my blog website.</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/20201221215820109.png" alt="Python中的推导式"></p><h1 id="Python推导式-Compression"><a href="#Python推导式-Compression" class="headerlink" title="Python推导式/Compression"></a>Python推导式/Compression</h1><p><strong>推导式 ( Compression )是Python语言的一大特色</strong>：</p><ul><li><p>相比于其他语言而言，推导式使得Python能够便捷的进行循环，创建出特定的字典、列表等可迭代对象</p></li><li><p>使用推导式可以避免代码的冗长，简化代码风格，使得代码更加的<strong>Pythonic</strong></p></li></ul><p>本文就将详细介绍Python中的推导式</p><p>推导式可以分为下面几种:</p><ul><li><strong>列表推导式</strong></li><li><strong>字典推导式</strong></li><li><strong>集合推导式</strong></li><li><strong>生成器推导式</strong></li></ul><h2 id="1-List-Comprehension"><a href="#1-List-Comprehension" class="headerlink" title="1. List Comprehension"></a>1. List Comprehension</h2><p>列表推导式指的是可以用于生成列表的推导式</p><h3 id="A-Simple-List-Comprehension"><a href="#A-Simple-List-Comprehension" class="headerlink" title="A. Simple List Comprehension"></a>A. Simple List Comprehension</h3><p>简单的列表推导式的语法如下,这样我们就能够快捷的创建列表</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span> 表达式 <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 可迭代对象 <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> List1<span class="token operator">=</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">'abcd'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> List2<span class="token operator">=</span><span class="token punctuation">[</span>y<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> List3<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>List1<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>List2<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>List3<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下(<code>In [1]</code>中的内容可以不管)</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/20201221215759612.png" alt="简单的列表推导式"></p><h3 id="B-List-Comprehension-with-conditions"><a href="#B-List-Comprehension-with-conditions" class="headerlink" title="B. List Comprehension with conditions"></a>B. List Comprehension with conditions</h3><p>上面我们创建了简单的推导式,实际上还可以创建带条件的推导式,这样我们能够创建更复杂的表达式</p><p>带条件的列表推导式如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span> 表达式 <span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 可迭代对象 <span class="token keyword">if</span> 条件 <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>List4<span class="token operator">=</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>List5<span class="token operator">=</span><span class="token punctuation">[</span>i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>List4<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>List5<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/20201221215809455.png" alt="带条件的列表推导式"></p><h3 id="C-Multi-variable-Comprehension"><a href="#C-Multi-variable-Comprehension" class="headerlink" title="C. Multi-variable Comprehension"></a>C. Multi-variable Comprehension</h3><p>我们前面的列表推导式实际上都只有一个变量,但是我们其实可以使用多变量的列表推导式</p><p>具体时候类似于两个for循环嵌套,因此又可以称为嵌套列表式/多变量推导式</p><p>以双变量和三变量为例的列表推导式如下, 按照这样的规则实际上可以扩展到n个变量的嵌套列表推导式</p><p><strong>双变量列表推导式</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span> 表达式<span class="token punctuation">(</span>可含变量<span class="token number">1</span>和变量<span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> 变量<span class="token number">1</span> <span class="token keyword">in</span> 可迭代对象<span class="token number">1</span> <span class="token keyword">for</span> 变量<span class="token number">2</span> <span class="token keyword">in</span> 可迭代对象<span class="token number">2</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>三变量列表推导式</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span> 表达式<span class="token punctuation">(</span>可含变量<span class="token number">1</span>和变量及变量<span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> 变量<span class="token number">1</span> <span class="token keyword">in</span> 可迭代对象<span class="token number">1</span> <span class="token keyword">for</span> 变量<span class="token number">2</span> <span class="token keyword">in</span> 可迭代对象<span class="token number">2</span> <span class="token keyword">for</span> 变量<span class="token number">3</span> <span class="token keyword">in</span> 可迭代兑现<span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> List6<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> List7<span class="token operator">=</span><span class="token punctuation">[</span>x<span class="token operator">+</span>y<span class="token operator">+</span>z <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">for</span> z <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>List6<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>List7<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/20201221215820109.png" alt="多变量推导式"></p><h3 id="C-Complex-Comprehension"><a href="#C-Complex-Comprehension" class="headerlink" title="C. Complex Comprehension"></a>C. Complex Comprehension</h3><p>实际上我们能够结合带条件的列表推导式和嵌套列表推导式,由此可以有一些非常Pythonic的操作</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>List8<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">if</span> y<span class="token operator">==</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>List8<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的代码就是求<code>y=x**2</code>的曲线上的点的代码</p><p>其实后续结合Numpy,Pandas,Matplotlib等诸多第三方库还可以进行绘图,</p><p>此外还能通元组赋值, zip和enumerate等函数产生妙用</p><p>具体就不一一细讲了,总之列表作Python中最常用的结构型数据类型, 列表推导式的妙用非常多</p><h2 id="2-Dictionary-Comprehension"><a href="#2-Dictionary-Comprehension" class="headerlink" title="2. Dictionary Comprehension"></a>2. Dictionary Comprehension</h2><p>类似于列表推导式, 字典推导式也可以结合条件语句以及多变量嵌套</p><h3 id="A-Simple-Dictionary-Comprehension"><a href="#A-Simple-Dictionary-Comprehension" class="headerlink" title="A. Simple Dictionary Comprehension"></a>A. Simple Dictionary Comprehension</h3><p>简单的字典推导式只使用一个变量, 因此键和键值的表达式中都需要有变量</p><p>声明语句如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span> 键表达式 <span class="token punctuation">:</span> 值表达式 <span class="token keyword">for</span> 表达式 <span class="token keyword">in</span> 可迭代对象 <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>Dict1<span class="token operator">=</span><span class="token punctuation">{</span>i <span class="token punctuation">:</span> i<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>Dict1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/20201221215830693.png" alt="字典推导式"></p><h3 id="B-Multi-Variable-Dictionary-Comprehension"><a href="#B-Multi-Variable-Dictionary-Comprehension" class="headerlink" title="B. Multi-Variable Dictionary Comprehension"></a>B. Multi-Variable Dictionary Comprehension</h3><p>实际上一般在创建字典的时候,我们使用的键和键值是不一样的,因此我们更常见的做法是使用嵌套的字典推导式/多变量字典推导式, 即使用多个变量分别作为键和值来进行循环,这样来创建不同的键值对</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span> 键表达式 <span class="token punctuation">:</span> 值表达式 <span class="token keyword">for</span> 变量<span class="token number">1</span> <span class="token keyword">in</span> 可迭代对象<span class="token number">1</span> <span class="token keyword">for</span> 变量<span class="token number">2</span> <span class="token keyword">in</span> 可迭代对象<span class="token number">2</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例如下:</p><pre class="line-numbers language-python"><code class="language-python">Dict1<span class="token operator">=</span><span class="token punctuation">{</span>letter <span class="token punctuation">:</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token keyword">for</span> letter <span class="token keyword">in</span> <span class="token string">"abcdef"</span><span class="token punctuation">}</span>Dict1<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20201221215840522.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NDg4MjQy,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="C-Dictionary-Comprehension-with-conditions"><a href="#C-Dictionary-Comprehension-with-conditions" class="headerlink" title="C. Dictionary Comprehension with conditions"></a>C. Dictionary Comprehension with conditions</h3><p>其实和嵌套的字典推导式一样,略</p><h3 id="D-Complex-Dictionary-Comprehension"><a href="#D-Complex-Dictionary-Comprehension" class="headerlink" title="D. Complex Dictionary Comprehension"></a>D. Complex Dictionary Comprehension</h3><p>复杂字典推导式能够实现各种骚气的功能</p><p>具体就不细说了,我下面给一个例子,更多的使用还需要大家自己开发</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> Sentece<span class="token operator">=</span><span class="token string">'This is a sentence waiting to be count that how many times does letters occur in this sentence'</span><span class="token operator">>></span><span class="token operator">></span> Dict2<span class="token operator">=</span><span class="token punctuation">{</span>letter <span class="token punctuation">:</span> Sentece<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span>letter<span class="token punctuation">)</span> <span class="token keyword">for</span> letter <span class="token keyword">in</span> list<span class="token punctuation">(</span><span class="token string">'abcdefghijklmnopqrstuvwxyz'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pprint<span class="token operator">>></span><span class="token operator">></span> pprint<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>Dict2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个例子的作用就是查询这一句话中26个字母出现的字数,可以看到在C/C++中需要写很多行代码才能实现的功能在Python中只需要一行就能结束</p><h2 id="3-集合推导式"><a href="#3-集合推导式" class="headerlink" title="3. 集合推导式"></a>3. 集合推导式</h2><p>集合推导式和列表推导是一样的,三种用法都一样,就不赘述了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">{</span> 表达式 <span class="token keyword">for</span> 表达式 <span class="token keyword">in</span> 可迭代变量<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子如下:</p><pre class="line-numbers language-python"><code class="language-python">Set1<span class="token operator">=</span><span class="token punctuation">{</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Set1<span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 杂项 </tag>
            
            <tag> Python Comprehension </tag>
            
            <tag> Python 推导式 </tag>
            
            <tag> CSDN Blog Transfer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模算法2-整数规划</title>
      <link href="/2022/01/01/shu-xue-jian-mo-suan-fa-2-zheng-shu-gui-hua/"/>
      <url>/2022/01/01/shu-xue-jian-mo-suan-fa-2-zheng-shu-gui-hua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解了数学建模中常见的一类问题：整数规划，及其求解</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/2305037-20210603134210658-726109005.png" alt="整数规划"></p><h1 id="数学建模算法2-整数规划"><a href="#数学建模算法2-整数规划" class="headerlink" title="数学建模算法2-整数规划"></a>数学建模算法2-整数规划</h1><p>在上一篇文章中，我们介绍了线性规划问题及其算法求解。线性规划问题的关键就在于：</p><ol><li>有限的资源（写出来约束）</li><li>最大化价值（写出来目标函数）</li></ol><p>判断一个问题是否可以通过线性规划求解就是看这个问题是否通过划归而具有上面的两个特点。</p><p>线性规划其实有一个隐含的条件，就是要求决策变量（需要通过线性规划决策值的变量）是连续的。但是在现实中，并不所有线性规划问题的决策变量都是连续的，有的时候，我们的决策变量是一个整数。</p><p>例如任务指派问题，在有限的人数的情况下尽可能少的派人去完成问题，这个问题符合上面的两个特点。但是其决策变量人数并不是一个连续的变量，因此直接套用线性规划是不行的。那么可能就会有人要问了，线性规划给出的小数解可能不符合要求，那么取整不就可以了？</p><p>但其实简单的取整是不能处理所有的这样的问题的，例如封面图：线性规划给出的最优解是右侧的点，对这个点的x、y坐标无论怎样取整，得到的解都不在可行域内，甚至周围几个点也都不在可行域内。因此针对这类问题我们为他们取了一个名字：<strong>整数规划（Integer Programming，IP）</strong>，并对整数问题的求解方法进行研究。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/2305037-20210603134210658-726109005.png" alt="整数规划"></p><h2 id="1-整数规划的发展历史"><a href="#1-整数规划的发展历史" class="headerlink" title="1. 整数规划的发展历史"></a>1. 整数规划的发展历史</h2><p>上面的lead-in其实已经相当于介绍了，那么这里就介绍一下整数规划的发展历史吧。</p><p>整数规划是从1958年由R.E.戈莫里提出线性规划的割平面法之后形成独立分支的 ，30多年来发展出很多方法解决各种问题。解整数规划最典型的做法是逐步生成一个相关的问题，称它是原问题的衍生问题。对每个衍生问题又伴随一个比它更易于求解的松弛问题（衍生问题称为松弛问题的源问题）。通过松弛问题的解来确定它的源问题的归宿，即源问题应被舍弃，还是再生成一个或多个它本身的衍生问题来替代它。随即 ，再选择一个尚未被舍弃的或替代的原问题的衍生问题，重复以上步骤直至不再剩有未解决的衍生问题为止。现今比较成功又流行的方法是<strong>分支定界法</strong>和<strong>割平面法</strong>，它们都是在上述框架下形成的。 </p><p><strong>需要注意的是，目前对于整数规划并不存在求解一切整数规划问题的方法（二次的约束、不连续的约束），目前流行的求解方法往往只适用于线性整数规划</strong></p><h2 id="2-整数规划的定义"><a href="#2-整数规划的定义" class="headerlink" title="2. 整数规划的定义"></a>2. 整数规划的定义</h2><p>通过上面的介绍，我们应该明白了什么是整数规划，即决策变量是整数的规划问题。<strong>如果规划的约束和目标函数都是线性的话，则称为线性整数规划</strong>。考虑到我们在数学建模的过程中往往都是对线性整数规划进行的求解，因此<strong>我们也把线性整数规划简称为整数规划</strong>，并且在<strong>后文中如果我们没有特地声明，那么所说的整数规划统统指线性整数规划</strong></p><p>上面是我们主观的理解，下面给出百度百科和维基百科上的定义：</p><blockquote><p><strong>From BaiduBaike</strong>：</p><p>整数规划是指规划中的变量（全部或部分）限制为整数，若在线性模型中，变量限制为整数，则称为整数线性规划。所流行的求解整数规划的方法往往只适用于整数线性规划。<br>一类要求问题的解中的全部或一部分变量为整数的数学规划。从约束条件的构成又可细分为线性，二次和非线性的整数规划。 </p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220102015830244.png" alt="百度百科对整数规划的介绍"></p><p><strong>From Wikipedia</strong>：</p><p>PS: 维基百科没有针对整数规划的词条。整数规划的定义在线性规划词条下。</p><p>要求所有的未知量都为整数的线性规划问题叫做<strong>整数规划</strong>（integer programming, IP）或<strong>整数线性规划</strong>（integer linear programming, ILP）问题。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220102020123747.png" alt="维基百科对整数规划的介绍"></p></blockquote><h2 id="3-整数规划的分类"><a href="#3-整数规划的分类" class="headerlink" title="3. 整数规划的分类"></a>3. 整数规划的分类</h2><p>针对问题中决策变量的不同，整数规划可以分为下面的几类：</p><ul><li><strong>纯整数规划（Pure Integer Programming，PIP）</strong>：所有的决策变量要求都是整数的整数规划，但是为解决问题引入的松弛变量或者剩余变量不要求取整</li></ul><blockquote><p><strong>松弛变量与剩余变量</strong>：</p><p>在求解多变量不等式问题的时候，通常形式是这样的：$x_1+x_2\leq 10$；有的时候为了便于求解，希望能够减少不等式中的变量个数。因此针对上式，引入第三个变量$x_3$，使得$x_1+x_2+x_3=10$，则原不等式变换为一个等式和一个单变量不等式$x_3\ge 0$。</p><p>此时称变量$x_3$为<strong>松弛变量</strong>。直观的理解就是$=$是更加严格的条件，而变量$x_3$让严格的条件松弛称为需要求解问题。</p><p>此外，若$x_1+x_2\ge 10$，则引入变量$x_3$，使得$x_1+x_2-x_3=10$，则$x_3\ge0$，此时称$x_3$为<strong>剩余变量</strong>。即比要求的$=10$多出来的部分</p></blockquote><ul><li><strong>混合整数规划（Mixed Integer Programming，MIP）</strong>：部分决策变量均要求为整数的整数规划</li><li><strong>纯0－1整数规划（Pure 0-1 Integer Programming）</strong>：所有决策变量均要求为0－1的整数规划</li><li><strong>混合0－1规划（Mixed 0-1 Integer Programming）</strong>：部分决策变量均要求为0－1的整数规划</li></ul><h2 id="4-整数规划和线性规划的关系"><a href="#4-整数规划和线性规划的关系" class="headerlink" title="4. 整数规划和线性规划的关系"></a>4. 整数规划和线性规划的关系</h2><h3 id="A-解之间的关系"><a href="#A-解之间的关系" class="headerlink" title="A. 解之间的关系"></a>A. 解之间的关系</h3><p>整数规划实际上是线性规划的一个特例，即在正常的线性规划上加上了非线性的整数约束。因此，根据线性规划解的特点，可以得到整数规划和线性规划解之间的关系：</p><ul><li><strong>最优解一致</strong>：<strong>整数规划去掉整数约束后的线性规划（称为伴随问题或者松弛问题）</strong>的最优解为整数，那么整数规划与线性规划的最优解一致。</li><li><strong>最优解变差</strong>：整数规划的伴随问题的最优解是小数，且整数规划存在可行解，那么整数规划的存在最优解，只是最优解相比伴随问题的最优解变差</li><li><strong>无最优解</strong>：伴随问题可行域内无整数解，故整数规划可能没有最优解</li></ul><h3 id="B-标准形式的关系"><a href="#B-标准形式的关系" class="headerlink" title="B. 标准形式的关系"></a>B. 标准形式的关系</h3><p>由于整数规划只是给决策变量多加了一个要求是整数的这个约束，因此两者的标准式之间基本没有差别</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220102173128816.png" alt="标准形式之间的关系"></p><h2 id="5-适合整数规划求解的问题"><a href="#5-适合整数规划求解的问题" class="headerlink" title="5. 适合整数规划求解的问题"></a>5. 适合整数规划求解的问题</h2><h3 id="A-合理下料问题"><a href="#A-合理下料问题" class="headerlink" title="A. 合理下料问题"></a>A. 合理下料问题</h3><blockquote><p>设用某型号的圆钢可以用于生产零件$A_1$， $A_2$，……，$A_m$ 。在一根圆钢上下料（切割）的方式有$B_1$，$B_2$，……，$B_n$ 种，每种下料方式可以得到各种零件的毛坯数以及用于生产的每种零件的需要量，如下表所示。问怎样安排下料方式，使得在满足生产需要的同时所用的圆钢数量最少？</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220102164618099.png" alt="每种下料方式可产生各种零件毛坯数量以及所需各类零件毛坯数量表" style="zoom:50%;"></p></blockquote><p>上面这个问题，需要的零件作为受限的资源，需要收益（消耗的圆钢）最少因此是一个数学规划问题</p><p>设$x_j$表示用$B_j$种下料方式生产的圆钢，则此时问题的数学模型为：</p><script type="math/tex; mode=display">\min_{x_1,\cdots,x_n}z = \sum_{j=1}^n x_j\\\begin {cases}\sum_{j=1}^n {a_{ij}x_j} \ge b_i &i=1,\cdots,n\\x_j \ge 0, &i=1,\cdots,n\\x_j为整数\end {cases}</script><h3 id="B-建厂问题"><a href="#B-建厂问题" class="headerlink" title="B. 建厂问题"></a>B. 建厂问题</h3><blockquote><p>某公司计划在m个地点建厂，可供选择的地点有$A<em>1$，$A_2$，……，$A_m$ ，在这些地点建立的工厂的生产能力分别是$a_1$， $a_2$，……，$a_m$（假设生产同一产品）。第 $i$个工厂的建设费用为$f_i,\ i=1,2,\cdots,m$。又有 $n$ 个地点$B_1$，$B_2$，……，$B_n$ 需要销售这 种产品，其销量分别为$b_1$，$b_2$，……，$b_n$ 。从工厂运往销地的单位运费为$c</em>{ij}$。试决定应在哪些地方建厂，既可以满足各地需要，又使总建设费用和总运输费用最少？</p></blockquote><p>同样，销量是限制的资源，而总费用作为收益需要最优，因此是一个规划问题</p><p>根据题意，可以列出下表</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220102170039401.png" alt="需求-产能-销量-建设费用表" style="zoom:50%;"></p><p>设$x_{ij}$为从工厂$i$运往销地$j$的运输量（$i=1,\cdots,m;j=1,\cdots n$），另设</p><script type="math/tex; mode=display">Y_{ij}=\begin{cases}1, &在A_i处建厂\\0, &不在A_i处建厂\end{cases}</script><p>则建厂问题数学模型为:</p><script type="math/tex; mode=display">\min_{x_{ij},y_i} Z=\sum_{j=1}^m\sum_{i=1}^nc_{ij}x_{ij}+\sum_{i=1}^mf_iy_i\\\begin {cases}\sum_{j=1}^n x_{ij} \leq a_iy_i,&i=1,\cdots,m\\\sum_{i=1}^m x_{ij} \ge b_j, &j=1,\cdots,n\\x_{ij}\ge 0, &i=1,\cdots,m;j=1,\cdots,n\\y_i=1或y_i=0, &i=1,\cdots,m\end{cases}</script><h2 id="6-整数规划的求解"><a href="#6-整数规划的求解" class="headerlink" title="6. 整数规划的求解"></a>6. 整数规划的求解</h2><p>从数学模型上看整数规划似乎是线性规划的 一种特殊形式，求解只需在线性规划的基础上， 通过四舍五入取整，寻求满足整数要求的解即可。 但实际上两者却有很大的不同，通过四舍五入有得到的整数解也不一定就是最优解，有时甚至不能保证所得到的解是整数可行解。</p><p>因此，针对整数规划就有了其他的求解算法。目前，对于求解整数规划常用的方法有：<strong>分支定界法</strong>和<strong>割平面法</strong>；对于0-1规划问题，常用的算法有<strong>隐枚举法</strong>和<strong>匈牙利算法</strong></p><h3 id="A-分支定界算法"><a href="#A-分支定界算法" class="headerlink" title="A. 分支定界算法"></a>A. 分支定界算法</h3><p><strong>分支定界算法的基本就是当作为松弛问题的线性规划问题的解为整数解的时候，整数规划的最优解就是松弛问题的最优解</strong></p><p>因此，分支定界算法的基本思想就是不断地对可行域进行划分（每次划分可行域实际上是添加新的约束），然后对所有的子可行域进行线性规划直到找到解为整数的解，此时该解可能为整数规划的一个最优解。</p><p>算法的自然语言描述如下：</p><ul><li><p>首先不考虑整数限制先求出相应松弛问题的最优解$\vec x=[x^0_1, \cdots, x^0_n]$</p><ul><li><p>若松弛问题无可行解，则ILP无可行解</p></li><li><p>若求得的松弛问题最优解符合整数要求，则是ILP的最优解</p></li><li><p>若不满足整数条件，则从最优解中选择一个不满足整数条件的变量，对其构造新的约束添加到松弛问题中形成两个子问题<br>添加的新的约束为</p><script type="math/tex; mode=display">x_i\leq \lfloor x^0_i\rfloor或者x_i \ge \lceil x^0_i\rceil</script></li><li><p>依次在缩小的可行域中求解新构造的线性规划的最优解</p></li></ul></li><li><p>重复上述过程，直到子问题无解或有整数最优解（被查清）</p></li></ul><p>算法流程图如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220102180932802.png" alt="分支定界算法流程图"></p><p>下面结合两个个例子来讲解分支定界算法</p><blockquote><p>求下面的整数规划问题</p><script type="math/tex; mode=display">\max_{x_1, x_2} z=3x_1+2x_2\\\begin {cases}2x_1+3x_2 \leq 4\\2x_1+x_2 \leq 24\\x_1, x_2 \ge 0\\x_1, x_2为整数\end{cases}</script></blockquote><p>求解步骤如下：</p><ol><li><p><strong>求解松弛问题的解</strong></p><script type="math/tex; mode=display">\max_{x_1, x_2} z=3x_1+2x_2\\\begin {cases}2x_1+3x_2 \leq 4\\2x_1+x_2 \leq 24\\x_1, x_2 \ge 0\\\end{cases}</script><p>得</p><script type="math/tex; mode=display">\begin {cases}x_1=3.25\\x_2=2.5\\z_{max}=14.75\\\end{cases}</script><p>此时松弛问题有解，但是决策变量$x_1$，$x_2$都不是整数，因此对两个变量每个都要添加新的约束</p></li><li><p><strong>首先对决策变量$x_1$添加约束</strong></p><script type="math/tex; mode=display">\max_{x_1, x_2} z=3x_1+2x_2\\\begin {cases}2x_1+3x_2 \leq 4\\2x_1+x_2 \leq 24\\x_1\le 3\\x_1, x_2 \ge 0\\\end{cases}</script><p>求解，得</p><script type="math/tex; mode=display">\begin {cases}x_1=3\\x_2=2.67\\z_{max}=14.33\\\end{cases}</script><p>添加另外一种约束</p><script type="math/tex; mode=display">\max_{x_1, x_2} z=3x_1+2x_2\\\begin {cases}2x_1+3x_2 \leq 4\\2x_1+x_2 \leq 24\\x_1\ge 4\\x_1, x_2 \ge 0\\\end{cases}</script><p>求解得到第一个可能的解</p><script type="math/tex; mode=display">\begin {cases}x_1=4\\x_2=1\\z_{max}=14\\\end{cases}</script></li><li><p><strong>接下来对决策变量$x_2$添加约束</strong></p><script type="math/tex; mode=display">\max_{x_1, x_2} z=3x_1+2x_2\\\begin {cases}2x_1+3x_2 \leq 4\\2x_1+x_2 \leq 24\\x_1\le 3\\x_2\leq 2\\x_1, x_2 \ge 0\\\end{cases}</script><p>得到一个可能的解</p><script type="math/tex; mode=display">\begin {cases}x_1=3\\x_2=2\\z_{max}=13\\\end{cases}</script><p>然后添加另外一种约束</p><script type="math/tex; mode=display">\max_{x_1, x_2} z=3x_1+2x_2\\\begin {cases}2x_1+3x_2 \leq 4\\2x_1+x_2 \leq 24\\x_1\le 3\\x_2\ge 3\\x_1, x_2 \ge 0\\\end{cases}</script><p>得到解</p><script type="math/tex; mode=display">\begin {cases}x_1=2.2\\x_2=3\\z_{max}=13.5\\\end{cases}</script></li><li><p>接下来重复步骤，直到所有的子问题的子问题的解都是整数解或者无解</p></li></ol><p>最终通过对所有的可能的解进行比较，得到最终的解为</p><script type="math/tex; mode=display">\begin {cases}x_1=4\\x_2=1\\z_{max}=14\\\end{cases}</script><p>再举一个例子</p><blockquote><p>求下面的整数规划的解</p><script type="math/tex; mode=display">\max_{x_1, x_2} z=x_1+x_2\\\begin {cases}x_1+\frac9{14}x_2 \leq \frac{51}{14}\\-2x_1+x_2 \leq \frac 1 3\\x_1, x_2 \ge 0\\x_1, x_2为整数\end{cases}</script></blockquote><p>同样，类似于上面的不断添加约束，最后得到一个搜索树，注意下面这个是深度优先的搜索树</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220102193325813.png" alt="问题二的搜索树"></p><h3 id="B-割平面算法"><a href="#B-割平面算法" class="headerlink" title="B. 割平面算法"></a>B. 割平面算法</h3><p>割平面算法的核心思想就是：</p><ol><li>对线性规划问题P添加约束等价于进一步缩小可行域（割去可行域）</li><li>对松弛问题P不断添加约束条件，即可行域不断地割去一块，使得非整数解恰好在割去的区域中而没有割去原问题的可行解，得到新问题P’</li><li>对问题P’继续进行线性规划，直到<ol><li>松弛问题无解，则整数规划问题无解</li><li>松弛问题最优解为整数向量，则整数规划的解就是松弛问题的解</li></ol></li></ol><p>下面结合一个例子讲解割平面算法</p><blockquote><p>求下面的整数规划</p><script type="math/tex; mode=display">\max_{x_1,x_2}z=x_1+x_2\\\begin{cases}-x_1+x_2\leq 1\\3x_1 +x_2 \leq4\\x_1, x_2 \ge 0\\x_1, x_2均为整数\end{cases}</script></blockquote><p>上面这个例子的可行域如下，松弛问题的最优解为$(\frac 43,\frac34)$，因此对其进行分割。</p><p>割平面算法要求分割的时候分割的区域不能包含整数解，因此选择分割的两个区域为上边和右边的两个蓝色三角形。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220102222730181.png" alt="上述例子的可行域"></p><p>对这两个区域进行分割后（添加约束后），新的问题P’为</p><script type="math/tex; mode=display">\max_{x_1,x_2}z=x_1+x_2\\\begin{cases}-x_1+x_2\leq 1\\3x_1 +x_2 \leq4\\x_1, x_2 \ge 0\\x_1\leq 1\\x_2\leq 1\\x_1, x_2均为整数\end{cases}</script><p>此时对P’的松弛问题进行求解，得到解为</p><script type="math/tex; mode=display">\begin {cases}x_1=1\\x_2=1\\z_{max}=2\\\end{cases}</script><p>此时松弛问题的解为整数解，因此算法结束。 </p><p>因此，割平面算法最关键的步骤就是在于判断该怎样对平面进行切割。具体来说进行切割的方法为引入松弛变量和剩余变量。这里就不再展开了。</p><h2 id="7-整数规划的Python求解"><a href="#7-整数规划的Python求解" class="headerlink" title="7. 整数规划的Python求解"></a>7. 整数规划的Python求解</h2><p>虽然我们上面介绍了如何在线性规划的基础上对整数规划问题进行求解的算法。但其实我们并不需要自己动手实现他们。正如我们前面所说的，数学建模的目的在于运用这个算法去解决实际问题而非去动手显示这些算法。</p><p>对整数规划问题进行求解，我们当然可以在前面介绍的SciPy的linprog的基础上自己动手实现这些算法，然而其实有其他的库已经帮助我们进行了这一步了，因此我们直接调用即可。</p><p>具体来说，这个库就是<code>PuLP</code>库，这是他的<a href="https://coin-or.github.io/pulp/index.html">官网</a>：<a href="https://coin-or.github.io/pulp/index.html">https://coin-or.github.io/pulp/index.html</a></p><p>从原理上来说，PuLP这个库是基于其他的线性规划求解程序，在PuLP这个库来说，这些求解线性规划的程序称为求解器。求解器提供了命令行的接口和API，因此PuLP其实就是对这些API做了一层Python Binding，从而实现的在Python中求解整数规划问题。</p><p>PuLP中默认的求解器是开源的CBC求解器，此外还支持很多其他的开源或者商业的求解器。不过CBC用来解决我们一般的几百个决策变量的规划问题肯定是足够了。</p><p>下面针对下面这个线性规划问题使用PuLP进行求解</p><script type="math/tex; mode=display">\max_{x_1, x_2} z=x_1+x_2\\\begin {cases}x_1+\frac9{14}x_2 \leq \frac{51}{14}\\-2x_1+x_2 \leq \frac 1 3\\x_1, x_2 \ge 0\\x_1, x_2为整数\end{cases}</script><h3 id="A-定义问题"><a href="#A-定义问题" class="headerlink" title="A. 定义问题"></a>A. 定义问题</h3><p>PuLP求解线性规划问题第一步就是创建一个线性规划问题（Linear Program Problem，LpProblem）。PuLP中将线性规划问题抽象为一个类，而诸如约束条件、优化目标、决策变量等等都是该类下的属性</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pulpproblem<span class="token punctuation">:</span> pulp<span class="token punctuation">.</span>LpProblem <span class="token operator">=</span> pulp<span class="token punctuation">.</span>LpProblem<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"线性规划例子"</span><span class="token punctuation">,</span> sense<span class="token operator">=</span>pulp<span class="token punctuation">.</span>LpMaximize<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们在初始化该类的时候需要指定该问题的名称，以及优化的类型，是最大值还是最小值</p><h3 id="B-创建决策变量"><a href="#B-创建决策变量" class="headerlink" title="B. 创建决策变量"></a>B. 创建决策变量</h3><p>同样，决策变量也被抽象为了一个类，因此我们需要对其进行初始化</p><pre class="line-numbers language-python"><code class="language-python">x1 <span class="token operator">=</span> pulp<span class="token punctuation">.</span>LpVariable<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"x1"</span><span class="token punctuation">,</span> cat<span class="token operator">=</span>pulp<span class="token punctuation">.</span>LpInteger<span class="token punctuation">,</span> lowBound<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>x2 <span class="token operator">=</span> pulp<span class="token punctuation">.</span>LpVariable<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"x2"</span><span class="token punctuation">,</span> cat<span class="token operator">=</span>pulp<span class="token punctuation">.</span>LpInteger<span class="token punctuation">,</span> lowBound<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们在创建决策变量的时候首先需要指定决策变量的名称，然后指定其类型，因为我们要求解的整数规划问题，因此我们指定这两个变量的取值是整数。</p><p>此外我们还指定了这两个变量的下界都是0，类似与SciPy中连续的线性规划，我们不指定上界（上届为None）的时候，默认是无穷</p><h3 id="C-设置优化目标和约束"><a href="#C-设置优化目标和约束" class="headerlink" title="C. 设置优化目标和约束"></a>C. 设置优化目标和约束</h3><p>我们设置优化目标和添加约束的时候，既可以通过LpProblem类的接口显示的添加，也可以通过其重载的运算符完成</p><pre class="line-numbers language-python"><code class="language-python">problem<span class="token punctuation">.</span>setObjective<span class="token punctuation">(</span>x1 <span class="token operator">+</span> x2<span class="token punctuation">)</span>problem <span class="token operator">+=</span> x1 <span class="token operator">+</span> <span class="token number">9</span><span class="token operator">/</span><span class="token number">14</span> <span class="token operator">*</span> x2 <span class="token operator">&lt;=</span><span class="token number">51</span><span class="token operator">/</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"约束1"</span>problem <span class="token operator">+=</span> pulp<span class="token punctuation">.</span>LpConstraint<span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> x1 <span class="token operator">+</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> sense<span class="token operator">=</span>pulp<span class="token punctuation">.</span>LpConstraintLE<span class="token punctuation">,</span> rhs<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"约束2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># problem += -2 * x1 + x2 &lt;= 1/3, "约束2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面我们设定优化目标是$x_1+x_2$，然后分别通过problem重载的+=符号、提供的类进行约束添加</p><p>我们此时可以打印一下problem，就能够看到添加了目标和约束之后的问题</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>problem<span class="token punctuation">)</span>线性规划例子<span class="token punctuation">:</span>MAXIMIZE<span class="token number">1</span><span class="token operator">*</span>x1 <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">*</span>x2 <span class="token operator">+</span> <span class="token number">0</span>SUBJECT TO约束<span class="token number">1</span><span class="token punctuation">:</span> x1 <span class="token operator">+</span> <span class="token number">0.642857142857</span> x2 <span class="token operator">&lt;=</span> <span class="token number">3.64285714286</span>约束<span class="token number">2</span><span class="token punctuation">:</span> <span class="token operator">-</span> <span class="token number">2</span> x1 <span class="token operator">+</span> x2 <span class="token operator">&lt;=</span> <span class="token number">0.333333333333</span>VARIABLES<span class="token number">0</span> <span class="token operator">&lt;=</span> x1 Integer<span class="token number">0</span> <span class="token operator">&lt;=</span> x2 Integer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220103151645040.png" alt="运行结果"></p><h3 id="D-求解"><a href="#D-求解" class="headerlink" title="D. 求解"></a>D. 求解</h3><p>由于并不是所有的问题都是可解的因此在对问题进行求解后，实际上问题会有很多种状态，所有的解的状态保存在pulp.LpStatus这个常量中</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pprint<span class="token operator">>></span><span class="token operator">></span> pprint<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>pulp<span class="token punctuation">.</span>LpStatus<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">'Undefined'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">'Unbounded'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'Infeasible'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'Not Solved'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'Optimal'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，</p><ul><li>Optimal表示已经得到了最优解</li><li>Not Sloved，即problem在求解前的状态</li><li>Infeasible，即问题不存在可行解，例如我们的约束中出现了$2\leq x \leq -1$这样的条件</li><li>Unbounded，即得到的答案是无穷，例如优化目标为$z=3x$，而约束为$1\leq x$</li><li>Undefined，即问题可能存在最优解，但是求解器的求解算法没有得出解</li></ul><p>因此，在我们对问题求解之后，只有Optimal才会得到最终的答案，所以我们求解结束之后输出的时候需要检查一下状态</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>problem<span class="token punctuation">)</span><span class="token keyword">if</span> pulp<span class="token punctuation">.</span>LpStatus<span class="token punctuation">[</span>status<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Optimal"</span><span class="token punctuation">:</span>    variable<span class="token punctuation">:</span> pulp<span class="token punctuation">.</span>LpVariable    <span class="token keyword">for</span> variable <span class="token keyword">in</span> problem<span class="token punctuation">.</span>variables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{variable.name}={variable.varValue}"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pulp<span class="token punctuation">.</span>value<span class="token punctuation">(</span>problem<span class="token punctuation">.</span>objective<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="E-完整代码"><a href="#E-完整代码" class="headerlink" title="E. 完整代码"></a>E. 完整代码</h3><p>完整代码如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pulpproblem<span class="token punctuation">:</span> pulp<span class="token punctuation">.</span>LpProblem <span class="token operator">=</span> pulp<span class="token punctuation">.</span>LpProblem<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"线性规划例子"</span><span class="token punctuation">,</span> sense<span class="token operator">=</span>pulp<span class="token punctuation">.</span>LpMaximize<span class="token punctuation">)</span>x1 <span class="token operator">=</span> pulp<span class="token punctuation">.</span>LpVariable<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"x1"</span><span class="token punctuation">,</span> cat<span class="token operator">=</span>pulp<span class="token punctuation">.</span>LpInteger<span class="token punctuation">,</span> lowBound<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>x2 <span class="token operator">=</span> pulp<span class="token punctuation">.</span>LpVariable<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"x2"</span><span class="token punctuation">,</span> cat<span class="token operator">=</span>pulp<span class="token punctuation">.</span>LpInteger<span class="token punctuation">,</span> lowBound<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>problem<span class="token punctuation">.</span>setObjective<span class="token punctuation">(</span>x1 <span class="token operator">+</span> x2<span class="token punctuation">)</span>problem <span class="token operator">+=</span> x1 <span class="token operator">+</span> <span class="token number">9</span><span class="token operator">/</span><span class="token number">14</span> <span class="token operator">*</span> x2 <span class="token operator">&lt;=</span><span class="token number">51</span><span class="token operator">/</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"约束1"</span>problem <span class="token operator">+=</span> pulp<span class="token punctuation">.</span>LpConstraint<span class="token punctuation">(</span>e<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> x1 <span class="token operator">+</span> x2<span class="token punctuation">)</span><span class="token punctuation">,</span> sense<span class="token operator">=</span>pulp<span class="token punctuation">.</span>LpConstraintLE<span class="token punctuation">,</span> rhs<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"约束2"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># problem += -2 * x1 + x2 &lt;= 1/3, "约束2"</span>status <span class="token operator">=</span> problem<span class="token punctuation">.</span>solve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(status)</span><span class="token keyword">print</span><span class="token punctuation">(</span>problem<span class="token punctuation">)</span><span class="token keyword">if</span> pulp<span class="token punctuation">.</span>LpStatus<span class="token punctuation">[</span>status<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Optimal"</span><span class="token punctuation">:</span>    variable<span class="token punctuation">:</span> pulp<span class="token punctuation">.</span>LpVariable    <span class="token keyword">for</span> variable <span class="token keyword">in</span> problem<span class="token punctuation">.</span>variables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{variable.name}={variable.varValue}"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pulp<span class="token punctuation">.</span>value<span class="token punctuation">(</span>problem<span class="token punctuation">.</span>objective<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后的输出</p><pre class="line-numbers language-shell"><code class="language-shell">Welcome to the CBC MILP Solver Version: 2.10.3 Build Date: Dec 15 2019 command line - /home/jack/anaconda3/envs/mm/lib/python3.9/site-packages/pulp/apis/../solverdir/cbc/linux/64/cbc /tmp/5cf19a184e774fe995d025bd3de8e4c9-pulp.mps max timeMode elapsed branch printingOptions all solution /tmp/5cf19a184e774fe995d025bd3de8e4c9-pulp.sol (default strategy 1)At line 2 NAME          MODELAt line 3 ROWSAt line 7 COLUMNSAt line 18 RHSAt line 21 BOUNDSAt line 24 ENDATAProblem MODEL has 2 rows, 2 columns and 4 elementsCoin0008I MODEL read with 0 errorsOption for timeMode changed from cpu to elapsedContinuous objective value is 4.83333 - 0.00 secondsCgl0003I 0 fixed, 1 tightened bounds, 0 strengthened rows, 0 substitutionsCgl0004I processed model has 2 rows, 2 columns (2 integer (0 of which binary)) and 4 elementsCutoff increment increased from 1e-05 to 0.9999Cbc0012I Integer solution of -4 found by DiveCoefficient after 0 iterations and 0 nodes (0.00 seconds)Cbc0001I Search completed - best objective -4, took 0 iterations and 0 nodes (0.00 seconds)Cbc0035I Maximum depth 0, 0 variables fixed on reduced costCuts at root node changed objective from -4.83333 to -4.83333Probing was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)Gomory was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)Knapsack was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)Clique was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)MixedIntegerRounding2 was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)FlowCover was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)TwoMirCuts was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)ZeroHalf was tried 0 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.000 seconds)Result - Optimal solution foundObjective value:                4.00000000Enumerated nodes:               0Total iterations:               0Time (CPU seconds):             0.00Time (Wallclock seconds):       0.00Option for printingOptions changed from normal to allTotal time (CPU seconds):       0.00   (Wallclock seconds):       0.00线性规划例子:MAXIMIZE1*x1 + 1*x2 + 0SUBJECT TO约束1: x1 + 0.642857142857 x2 <= 3.64285714286约束2: - 2 x1 + x2 <= 0.333333333333VARIABLES0 <= x1 Integer0 <= x2 Integerx1=2.0x2=2.04.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220103153434192.png" alt="求解后的输出"></p><h2 id="8-整数规划的例子"><a href="#8-整数规划的例子" class="headerlink" title="8. 整数规划的例子"></a>8. 整数规划的例子</h2><p>最后举一个真实的整数规划的数学建模的例子结束这一章</p><h3 id="A-最优生产问题"><a href="#A-最优生产问题" class="headerlink" title="A. 最优生产问题"></a>A. 最优生产问题</h3><blockquote><p>已知AM工厂是一个拥有四个车间的玩具生产厂商，该厂商今年新设计出A、B、C、D、E、F六种玩具模型，根据以前的生产情况及市场调查预测，得知生产每单位产品所需的工时、每个车间在一季度的工时上限以及产品的预测价格，如下表所示。问∶每种设计产品在这个季度各应生产多少，才能使AM工厂这个季度的生产总值达到最大?</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220103154101580.png" alt="工时上限以及价格表" style="zoom:67%;"></p></blockquote><h3 id="B-基本假设"><a href="#B-基本假设" class="headerlink" title="B. 基本假设"></a>B. 基本假设</h3><ul><li>利润越高越好</li><li>各个种类玩具都为整数</li></ul><h3 id="C-符号假设"><a href="#C-符号假设" class="headerlink" title="C. 符号假设"></a>C. 符号假设</h3><ul><li>设各种玩具生产数量为$x_i, i=1,\cdots,6$，则$x_i$为整数</li><li>设利润为$Z$，则$Z=20x_1+14x_2+16x_3+36x_4+32x_5+30x_6$</li></ul><h3 id="D-模型建立"><a href="#D-模型建立" class="headerlink" title="D. 模型建立"></a>D. 模型建立</h3><p>根据题意，得到下面的整数规划模型</p><script type="math/tex; mode=display">\max_{\vec x} z=[20,14,16,36,32,30]\vec x^T\\\begin {cases}[0.01, 0.01,0.01,0.03,0.03,0.03]\vec x^T\leq 850\\[0.02, 0, 0, 0.05, 0, 0]\vec x^T\leq700\\[0, 0.02,0,0,0.05,0]\vec x^T\leq100\\[0,0,0.03,0,0,0.08]\vec x^T\leq900\\x_i \ge 0,&i=1,\cdots,6\end {cases}</script><h3 id="E-编程求解"><a href="#E-编程求解" class="headerlink" title="E. 编程求解"></a>E. 编程求解</h3><p>代码如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pulp<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npproblem<span class="token punctuation">:</span> pulp<span class="token punctuation">.</span>LpProblem <span class="token operator">=</span> pulp<span class="token punctuation">.</span>LpProblem<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"玩具最优生产问题"</span><span class="token punctuation">,</span> sense<span class="token operator">=</span>pulp<span class="token punctuation">.</span>LpMaximize<span class="token punctuation">)</span>variables <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>pulp<span class="token punctuation">.</span>LpVariable<span class="token punctuation">(</span>name<span class="token operator">=</span>f<span class="token string">"x_{i}"</span><span class="token punctuation">,</span> cat<span class="token operator">=</span>pulp<span class="token punctuation">.</span>LpInteger<span class="token punctuation">,</span> lowBound<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>object<span class="token punctuation">)</span>jia <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span><span class="token number">0.01</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">]</span><span class="token punctuation">)</span>yi <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.02</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.05</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>bing <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.05</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ding <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0.08</span><span class="token punctuation">]</span><span class="token punctuation">)</span>profits <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>problem <span class="token operator">+=</span> jia @ variables <span class="token operator">&lt;=</span> <span class="token number">850</span><span class="token punctuation">,</span> <span class="token string">"甲工厂工时约束"</span>problem <span class="token operator">+=</span> yi @ variables <span class="token operator">&lt;=</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token string">"乙工厂工时约束"</span>problem <span class="token operator">+=</span> bing @ variables <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"丙工厂工时约束"</span>problem <span class="token operator">+=</span> ding @ variables <span class="token operator">&lt;=</span> <span class="token number">900</span><span class="token punctuation">,</span> <span class="token string">"丁工厂工时约束"</span>problem<span class="token punctuation">.</span>setObjective<span class="token punctuation">(</span>profits @ variables<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>problem<span class="token punctuation">)</span><span class="token keyword">if</span> pulp<span class="token punctuation">.</span>LpStatus<span class="token punctuation">[</span>problem<span class="token punctuation">.</span>solve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"Optimal"</span><span class="token punctuation">:</span>    variable<span class="token punctuation">:</span> pulp<span class="token punctuation">.</span>LpVariable    <span class="token keyword">for</span> variable <span class="token keyword">in</span> problem<span class="token punctuation">.</span>variables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{variable.name} = {variable.varValue}"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pulp<span class="token punctuation">.</span>value<span class="token punctuation">(</span>problem<span class="token punctuation">.</span>objective<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-python"><code class="language-python">玩具最优生产问题<span class="token punctuation">:</span>MAXIMIZE<span class="token number">20</span><span class="token operator">*</span>x_0 <span class="token operator">+</span> <span class="token number">14</span><span class="token operator">*</span>x_1 <span class="token operator">+</span> <span class="token number">16</span><span class="token operator">*</span>x_2 <span class="token operator">+</span> <span class="token number">36</span><span class="token operator">*</span>x_3 <span class="token operator">+</span> <span class="token number">32</span><span class="token operator">*</span>x_4 <span class="token operator">+</span> <span class="token number">30</span><span class="token operator">*</span>x_5 <span class="token operator">+</span> <span class="token number">0</span>SUBJECT TO甲工厂工时约束<span class="token punctuation">:</span> <span class="token number">0.01</span> x_0 <span class="token operator">+</span> <span class="token number">0.01</span> x_1 <span class="token operator">+</span> <span class="token number">0.01</span> x_2 <span class="token operator">+</span> <span class="token number">0.03</span> x_3 <span class="token operator">+</span> <span class="token number">0.03</span> x_4 <span class="token operator">+</span> <span class="token number">0.03</span> x_5 <span class="token operator">&lt;=</span> <span class="token number">850</span>乙工厂工时约束<span class="token punctuation">:</span> <span class="token number">0.02</span> x_0 <span class="token operator">+</span> <span class="token number">0.05</span> x_3 <span class="token operator">&lt;=</span> <span class="token number">700</span>丙工厂工时约束<span class="token punctuation">:</span> <span class="token number">0.02</span> x_1 <span class="token operator">+</span> <span class="token number">0.05</span> x_4 <span class="token operator">&lt;=</span> <span class="token number">100</span>丁工厂工时约束<span class="token punctuation">:</span> <span class="token number">0.03</span> x_2 <span class="token operator">+</span> <span class="token number">0.08</span> x_5 <span class="token operator">&lt;=</span> <span class="token number">900</span>VARIABLES<span class="token number">0</span> <span class="token operator">&lt;=</span> x_0 Integer<span class="token number">0</span> <span class="token operator">&lt;=</span> x_1 Integer<span class="token number">0</span> <span class="token operator">&lt;=</span> x_2 Integer<span class="token number">0</span> <span class="token operator">&lt;=</span> x_3 Integer<span class="token number">0</span> <span class="token operator">&lt;=</span> x_4 Integer<span class="token number">0</span> <span class="token operator">&lt;=</span> x_5 IntegerResult <span class="token operator">-</span> Optimal solution foundObjective value<span class="token punctuation">:</span>                <span class="token number">1250000.00000000</span>Enumerated nodes<span class="token punctuation">:</span>               <span class="token number">0</span>Total iterations<span class="token punctuation">:</span>               <span class="token number">0</span>Time <span class="token punctuation">(</span>CPU seconds<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token number">0.00</span>Time <span class="token punctuation">(</span>Wallclock seconds<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token number">0.00</span>Option <span class="token keyword">for</span> printingOptions changed <span class="token keyword">from</span> normal to allTotal time <span class="token punctuation">(</span>CPU seconds<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token number">0.00</span>   <span class="token punctuation">(</span>Wallclock seconds<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token number">0.00</span>x_0 <span class="token operator">=</span> <span class="token number">35000.0</span>x_1 <span class="token operator">=</span> <span class="token number">5000.0</span>x_2 <span class="token operator">=</span> <span class="token number">30000.0</span>x_3 <span class="token operator">=</span> <span class="token number">0.0</span>x_4 <span class="token operator">=</span> <span class="token number">0.0</span>x_5 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token number">1250000.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学建模算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Math Modeling </tag>
            
            <tag> Linear Programming </tag>
            
            <tag> 整数规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模算法1-线性规划</title>
      <link href="/2022/01/01/shu-xue-jian-mo-suan-fa-1-xian-xing-gui-hua/"/>
      <url>/2022/01/01/shu-xue-jian-mo-suan-fa-1-xian-xing-gui-hua/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解了数学建模中常见的一类问题：线性规划，及其求解</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/359b033b5bb5c9eab88c9fcdd439b6003af3b3a5" alt="线性规划" style="zoom:150%;"></p><h1 id="数学建模算法1-线性规划"><a href="#数学建模算法1-线性规划" class="headerlink" title="数学建模算法1-线性规划"></a>数学建模算法1-线性规划</h1><p>线性规划是数学建模中非常常见的一类问题，这类问题的求解算法也是必须要掌握的。本文就在介绍线性规划问题的基础上讲解了如何通过编程进行求解。</p><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>在人们的生产实践中，经常会遇到如何利用现有资源来安排生产，以取得最大经济效益的问题。更广泛的，<strong>是在某些变量有约束的条件下，求另外一些以来被约束变量的变量的最大最小值问题</strong>。针对这类问题的求解，形成了数学中的运筹学的一个重要分支——数学规划。而线性规划（Linear Programming，LP）就是数学规划中的一个组分。</p><blockquote><p>数学规划是用于求解有约束变量函数的极值问题。而线性规划是数学规划的一部分。</p></blockquote><p>自从1947年G. B. Dantzig提出求解线性规划的算法——单纯形法以来，线性规划在理论上越来越成熟，在实际的运用中也越来越广泛。尤其是计算机的发展使得能够处理成千上万个约束条件和目标变量的线性规划问题之后，线性规划的适用领域越来越广泛，成为了现代管理中经常采用的一种方法。</p><p>单纯形算法利用多面体的顶点构造一个可能的解，然后沿着多面体的边走到目标函数值更高的另一个顶点，直至到达最优解为止。虽然这个算法在实际上很有效率，在小心处理可能出现的“循环”的情况下，可以保证找到最优解，但它的最坏情况可以很坏：可以构筑一个线性规划问题，单纯形算法需要问题大小的指数倍的运行时间才能将之解出。事实上，有一段时期内人们曾不能确定线性规划问题是NP完全问题还是可以在多项式时间里解出的问题。</p><p>第一个在最坏情况具有多项式时间复杂度的线性规划算法在1979年由前苏联数学家Leonid Khachiyan提出。这个算法建基于非线性规划中Naum Shor发明的椭球法（ellip-soid method），该法又是Arkadi Nemirovski（2003年冯‧诺伊曼运筹学理论奖得主）和D. Yudin的凸集最优化椭球法的一般化。</p><p>理论上，“椭球法”在最恶劣的情况下所需要的计算量要比“单形法”增长的缓慢，有希望用之解决超大型线性规划问题。但在实际应用上，Khachiyan的算法令人失望：一般来说，单纯形算法比它更有效率。它的重要性在于鼓励了对内点算法的研究。内点算法是针对单形法的“边界趋近”观念而改采“内部逼近”的路线，相对于只沿着可行域的边沿进行移动的单纯形算法，内点算法能够在可行域内移动。<br>1984年，贝尔实验室印度裔数学家卡马卡（Narendra Karmarkar）提出了投影尺度法（又名Karmarkar’s algorithm）。这是第一个在理论上和实际上都表现良好的算法：它的最坏情况仅为多项式时间，且在实际问题中它比单纯形算法有显著的效率提升。自此之后，很多内点算法被提出来并进行分析。一个常见的内点算法为Mehrotra predictor-corrector method。尽管在理论上对它所知甚少，在实际应用中它却表现出色。</p><p>单形法沿着边界由一个顶点移动到“相邻”的顶点，内点算法每一步的移动考量较周详，“跨过可行解集合的内部”去逼近最佳解。当今的观点是：对于线性规划的日常应用问题而言，如果算法的实现良好，基于单纯形法和内点法的算法之间的效率没有太大差别，只有在超大型线性规划中，顶点几成天文数字，内点法有机会领先单形法。<br>线性规划的求解程式在各种各样的工业最优化问题里被广泛使用，例如运输网络的流量的最优化问题，其中很多都可以不太困难地被转换成线性规划问题。 </p><h2 id="2-线性规划的定义"><a href="#2-线性规划的定义" class="headerlink" title="2. 线性规划的定义"></a>2. 线性规划的定义</h2><p>先看一个例子</p><blockquote><p>某机床厂能够生产甲、乙两种机床，各自的销售利润为四千和三千元。生产甲机床需要A、B两种机器加工，加工时间分别为2小时每台和1小时每台；生产乙机床需要A、B、C三种机器，加工时间为每种机器各一个小时。若每天A、B、C机器分别只能运行10小时、8小时和7小时。问该厂每天应该生产多少甲、乙机床，才能使得总利润最大？</p></blockquote><p>针对上述问题，求解过程如下：</p><p>设该厂生产$x_1$台甲机床，$x_2$台乙机床，总利润为$z$，则上述问题数学模型为</p><script type="math/tex; mode=display">\max_{x_1, x_2} z =4x_1 + 3x_2\\\begin {cases}2x_1+x+2&\leq &10\\x_1+x_2&\leq &8\\x_2 &\leq &7\\x_1, x_2 &\geq &0\end {cases}</script><p>上面这个问题中，我们称变量$x_1, x_2$为<strong>决策变量</strong>，称变量$z$为<strong>目标变量</strong>，由于目标变量$z$一般都是决策变量的函数，因此有时候也称目标变量为<strong>目标函数</strong>。而对决策变量做出的限制，即上面的四个不等式，称为<strong>约束条件</strong>。</p><p>有了上面的定义后，我们接下来就可以给出线性规划的定义：<strong>称目标函数和约束条件都是线性函数的规划问题为线性规划</strong></p><p>因此，线性规划问题是指在<strong>一组</strong>线性约束的条件下求<strong>一组</strong>线性目标函数最大或最小值的问题。</p><p>一般来说，在约束下的决策变量的值域往往是一个连续的区域，因此称所有符合约束的决策变量的值组成的集合称为该问题的<strong>可行域</strong>，记为R。称可行域中每一个元素$\vec x=[x_1,x_2,\cdots,x_n]$为<strong>可行解</strong>。称所有可行解中可以使目标函数达到最大值的可行解为<strong>最优解</strong></p><p>线性规划问题的求解，最关键的步骤其实是如何把具体的问题抽象成一个线性规划问题。实际建模的时候，一般不会出现像上面这样如此明显的问法。此外第二个问题就是决策变量的选择。</p><h2 id="3-线性规划的变形"><a href="#3-线性规划的变形" class="headerlink" title="3. 线性规划的变形"></a>3. 线性规划的变形</h2><p>上面说到，线性规划问题的难度不在于求解，而在于将问题转变为一个线性规划问题。因此下面介绍一些常见的线性规划问题的变形</p><h3 id="A-非线性目标函数——换元"><a href="#A-非线性目标函数——换元" class="headerlink" title="A. 非线性目标函数——换元"></a>A. 非线性目标函数——换元</h3><p>在一些情况下，目标函数虽然不是线性的，但是可以通过换元的方法实现转换。例如下面的线性规划模型</p><script type="math/tex; mode=display">\max_{x_1, x_2, \cdots, x_n} z = |x_1| + |x_2| + \cdots + |x_n|\\\begin {cases}a_1 x_1 + a_2x_2 + \cdots + a_nx_n &\leq & a\\b_1 x_1 + b_2x_2 + \cdots + b_nx_n &= & b\end {cases}</script><p>为此，设$x_i=u_i-v_i$,，$|x_i|=u_i+v_i$，则上面的线性规划模型变为</p><script type="math/tex; mode=display">\max_{u_1, \cdots, u_n; v_1, \cdots, v_n} z = (u_1+\cdots u_n) + (v_1\cdots v_n)\\\begin {cases}(a_1 u_1 + \cdots + a_nu_n) - (a_1 v_1 + \cdots + a_nv_n) &\leq & a\\(b_1 u_1 + \cdots + b_nu_n) - (b_1 v_1 + \cdots + b_nv_n) &= & b\\u1+v_1,\ \ \  \cdots,\ \ \  u_n+v_n &> &0\end {cases}</script><p>则转化为一个标准的线性规划问题</p><h2 id="4-线性规划问题的公式化-向量化"><a href="#4-线性规划问题的公式化-向量化" class="headerlink" title="4. 线性规划问题的公式化/向量化"></a>4. 线性规划问题的公式化/向量化</h2><p>对线性规划问题进行向量化（表达成矩阵形式）之后，我们能够进一步的利用各种数学工具对其进行求解。</p><p>对于决策变量，用一个列向量表示$\vec x=[x_1, x_2, \cdots，x_n]^T$；由于目标变量可能有多个，因此也用一个向量表示目标向量$\vec c=[c_1, c_2,\cdots, c_n]$。则目标函数的系数可以用一个矩阵$C$来表示:</p><script type="math/tex; mode=display">\begin {aligned}\vec c &= C^T \times \vec x \\& = \begin {bmatrix}c_{11} & c_{12} & \cdots & c_{1n}\\c_{21} & c_{22} & \cdots & c_{2n}\\\vdots & \vdots & \ddots & \vdots\\c_{n1} & c_{n2} & \cdots & c_{nn}\end {bmatrix} \times \vec x\end{aligned}</script><p>接下来对约束条件进行向量化。约束条件其实可以分为三类，第一类是$\leq$类型的（即$A\vec x\leq \vec b$），第二类是$=$类型的（即$A<em>{eq}\vec x\leq b</em>{eq}$），第三类是约定变量范围的（即$\vec{lb}\leq\vec x \leq\vec{ub}$）</p><p>因此，整个线性规划问题的向量形式（标准形式）如下：</p><script type="math/tex; mode=display">\max_{\vec x} \vec z = C^T \vec x\\\begin {cases}A\vec x &\leq &\vec b\\A_{eq} \vec x & = & \vec b_{eq}\\\vec {lb} &\leq &\vec x &\leq &\vec {ub}\end {cases}</script><p>因此，稍后用程序求解线性规划问题的时候，所需要的变量就是：$\vec C$、$\vec A$、$\vec b$、$\vec A<em>{eq}$、$\vec b</em>{eq}$、$\vec {lb}$、$\vec {ub}$</p><h2 id="5-线性规划Python求解"><a href="#5-线性规划Python求解" class="headerlink" title="5. 线性规划Python求解"></a>5. 线性规划Python求解</h2><p>对于线性规划问题，对其求解办法的研究和利用线性规划求解问题是两回事。对于数学建模来说，我们其实只需要利用线性规划去求解问题即可，并不需要花费很多的时间在研究线性规划求解方法的学习上，毕竟求解线性规划问题的算法已经有很多了。其实不仅仅对于线性规划，后面讲解的诸多问题，我们只需要掌握求解方法即可，而不用过分深入求解原理。</p><p>Python中使用<code>scipy</code>库中的<code>optimize</code>模块中的<code>linprog</code>函数求解</p><p>注：以下内容参考<a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html">scipy官方的linprog文档</a>（<a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html）">https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html）</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101191341829.png" alt="SciPy的官方文档" style="zoom:50%;"></p><p>可以看到，对于 $\leq$类型，SciPy的变量名是ub（upper bound），$=$则是eq，范围则是$bounds$</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101191536675.png" alt="需要用到的参数" style="zoom:50%;"></p><p>需要注意的就是bounds的格式，bounds是一个元组对的列表，第一个元素是下限，第二个元素是上限，若没有上限/下限则为None。</p><p>此外，由于约束条件中不一定三种类型都有，因此如果没有的话指定为None即可</p><p>最后的返回值是 scipy.optimize.OptimizeResult对象，可用的属性如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101192003430.png" alt="返回对象的属性" style="zoom: 67%;"></p><p>需要注意的是，返回的最优结果是最小值，因此我们如果要求最大值要给$C$矩阵取反</p><p>下面给出一个例子</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101195241900.png" alt="线性规划求解的例子"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>optimize<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">as</span> scoptc <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>A_eq <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>B_eq <span class="token operator">=</span> <span class="token number">7</span>bounds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> None<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> None<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> None<span class="token punctuation">]</span><span class="token punctuation">]</span>result<span class="token punctuation">:</span> scipy<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>OptimizeResult <span class="token operator">=</span> scopt<span class="token punctuation">.</span>linprog<span class="token punctuation">(</span>c<span class="token operator">=</span>c<span class="token punctuation">,</span> A_ub<span class="token operator">=</span>A<span class="token punctuation">,</span> b_ub<span class="token operator">=</span>b<span class="token punctuation">,</span> A_eq<span class="token operator">=</span>A_eq<span class="token punctuation">,</span> b_eq<span class="token operator">=</span>B_eq<span class="token punctuation">,</span> bounds<span class="token operator">=</span>bounds<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"min value of z: {result.fun}"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"corresponding xs: {result.x}"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101193044389.png" alt="运行结果"></p><h2 id="6-线性规划建模例子"><a href="#6-线性规划建模例子" class="headerlink" title="6. 线性规划建模例子"></a>6. 线性规划建模例子</h2><p>最后以一个mini-数学建模的例子来结尾，这个例子就是使用线性规划求解的。</p><h3 id="A-最优投资问题"><a href="#A-最优投资问题" class="headerlink" title="A. 最优投资问题"></a>A. 最优投资问题</h3><p>​    市场上有$n$种资产$s_i,\ i=1, 2, \cdots ,n$可以选择。现用数额为$M$的资金来进行一个时期的投资。在这一时期内购买资产$s_i$的平均收益率为$r_i$，风险损失率为$q_i$。此外，投资越分散，总的风险越少，而总风险可用所有购买的资产的风险中的最大的一个风险来度量。</p><p>​    购买资产$s_i$时要付交易费，费率为$p_i$;，当购买额不超过给定值$u_i$（$M\gg u_i$）时，交易费率按购买额为$u_i$计算。另外，假定同期银行存款利率是$r_0$，存银行既无交易费又无风险（设$r_0= 5%$）。</p><p>​    n= 4时相关数据如下表。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101195640092.png" alt="表1.1" style="zoom:50%;"></p><p>​    试给该公司设计一种投资组合方案，即用给定资金$M$，有选择地购买若干种资产或存银行生息，使净收益尽可能大，使总体风险尽可能小。 </p><h3 id="B-符号规定"><a href="#B-符号规定" class="headerlink" title="B. 符号规定"></a>B. 符号规定</h3><p>对问题做出如下的符号规定</p><ul><li>设$s_i$表示第$i$种投资项目，如股票、债券等。则$i=0, 1, 2, \cdots, n$，其中$s_0$表示存入银行</li><li>$r_i$， $p_i$， $q_i$分别表示资产$s_i$的平均收益、交易费率以及风险损失，其中$r_0=0.05$，$p_0=0$，$q_0=0$</li><li>$u_i$表示交易$s_i$时候的费率</li><li>$x_i$表示投资$s_i$的金额</li><li>$a$表示投资的总风险</li><li>$Q$表示总收益</li></ul><h3 id="C-基本假设"><a href="#C-基本假设" class="headerlink" title="C. 基本假设"></a>C. 基本假设</h3><ol><li>为便于计算，假设$M=1$</li><li>投资越分散，总风险越小</li><li>总风险用购买的$s_i$中最大的一项描述</li><li>$n+1$种资产$s_i$之间的风险$q_i$是独立的</li><li>在投资期间内，$r_i$，$p_i$，$q_i$保持为定值，不受外界因素影响</li><li>净收益和总体风险只受$r_i$，$p_i$，$q_i$影响，不受其他因素影响</li></ol><h3 id="D-模型分析与建立"><a href="#D-模型分析与建立" class="headerlink" title="D. 模型分析与建立"></a>D. 模型分析与建立</h3><p>模型的总风险即指投资组可能的损失，因此</p><script type="math/tex; mode=display">a=\max\{q_ix_i| i=1,\cdots,n\}</script><p>此外，进行交易的时候购买资产<code>s_i</code>所指出的交易费用为一分段函数</p><script type="math/tex; mode=display">\begin {cases}p_i u_i, & x_i \leq u_i\\p_i x_i, & x_i \ge u_i\end {cases}</script><p>考虑到购买资产$s_i$时候的收益$r_i$，且$M\gg u_i$，则购买资产$s_i$产生的净收益为</p><script type="math/tex; mode=display">Q_i=(r_i-p_i)x_i</script><p>目标是使收益尽可能大，同时风险尽可能小，因此是一个多目标规划的模型，优化目标如下</p><script type="math/tex; mode=display">\begin {cases}\max (\sum_{i=0}^n (r_i-p_i)x_i)\\\min \max ({q_ix_i})\end {cases}</script><p>约束条件为</p><script type="math/tex; mode=display">\begin{cases}\sum_{i=0}^n (1+p_i)x_i = M, & i=0, \cdots,n\\x_i \ge 0, & i=0,\cdots,n\end{cases}</script><p>考虑到不同投资者在投资时的偏好不同，因此有如下三类模型：</p><h4 id="1-模型一：固定风险，优化收益"><a href="#1-模型一：固定风险，优化收益" class="headerlink" title="1. 模型一：固定风险，优化收益"></a>1. 模型一：固定风险，优化收益</h4><p>设投资损失的上界$l$作为投资者能够承担的最大单笔损失比例，则投资者的损失比例$\frac{q_ix_i}{M}\leq l$</p><p>此时，在加强的约束下，模型退化为</p><script type="math/tex; mode=display">\max_{x_0,\cdots,x_n}\sum_{i=0}^n(r_i-p_i)x_i\\\begin{cases}\frac{q_ix_i}{M} \leq l\\\sum_{i=0}^n(1+p_i)x_i=M, & i=0,\cdots, n\\x_i \ge0, & i=0,\cdots,n\end{cases}</script><h4 id="2-模型二：固定收益，最小化风险"><a href="#2-模型二：固定收益，最小化风险" class="headerlink" title="2. 模型二：固定收益，最小化风险"></a>2. 模型二：固定收益，最小化风险</h4><p>设投资者的收益固定为$k$，则模型退化为</p><script type="math/tex; mode=display">\min\max{q_ix_i}\\\begin {cases}\max (\sum_{i=0}^n (r_i-p_i)x_i \ge k\\\sum_{i=0}^n(1+p_i)x_i=M, & i=0,\cdots, n\\x_i \ge0, & i=0,\cdots,n\end{cases}</script><h4 id="3-模型三：收益与风险平衡"><a href="#3-模型三：收益与风险平衡" class="headerlink" title="3. 模型三：收益与风险平衡"></a>3. 模型三：收益与风险平衡</h4><p>投资者在权衡风险和收益的时候，不同的投资者会有不同的偏好，因此对风险和收益赋予权重$s$，称为投资偏好系数。则此时模型为</p><script type="math/tex; mode=display">\min(s\cdot \max{q_ix_i}-(1-s)\cdot\sum_{i=0}^n(r_i-p_i)x_i)\\\begin {cases}0\leq s\leq 1\\\sum_{i=0}^n(1+p_i)x_i=M, & i=0,\cdots, n\\x_i \ge0, & i=0,\cdots,n\end{cases}</script><h3 id="E-模型求解"><a href="#E-模型求解" class="headerlink" title="E. 模型求解"></a>E. 模型求解</h3><p>下面针对上述三个模型进行求解</p><h4 id="A-模型一"><a href="#A-模型一" class="headerlink" title="A. 模型一"></a>A. 模型一</h4><p>注意第一个约束条件是两个向量的哈达马积</p><script type="math/tex; mode=display">\min_{[x_0,\cdots,x_n]} -[0.05, 0.27, 0.19, 0.185, 0.185][x_0, x_1, x_2, x_3, x_4, x_5]^T\\\begin{cases}\max [0, 0.025 0.015 0.055, 0.026][x_0, x_1, x_2, x_3, x_4, x_5] \leq l\\[1, 1.01, 1.02, 1.045, 1.065][x_0, x_1, x_2, x_3, x_4, x_5]^T=1\\x_0, x_1, x_2, x_3, x_4 \ge0\end{cases}</script><p>$l$为求解时候变量，因此对其进行搜索，从$l$从0~0.05，即损失本金的5%</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>optimize <span class="token keyword">as</span> scoptim<span class="token keyword">from</span> typing <span class="token keyword">import</span> <span class="token operator">*</span>r <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.01</span>q <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2.5</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token number">2.6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.01</span>p <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">6.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.01</span><span class="token keyword">def</span> <span class="token function">model1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> r<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q    c <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>r <span class="token operator">-</span> p<span class="token punctuation">)</span>    A_eq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    b_eq <span class="token operator">=</span> <span class="token number">1</span>    A_ub <span class="token operator">=</span> np<span class="token punctuation">.</span>repeat<span class="token punctuation">(</span>q<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> repeats<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>N<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    bounds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span>    results<span class="token punctuation">:</span> List<span class="token punctuation">[</span>scoptim<span class="token punctuation">.</span>OptimizeResult<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span>x <span class="token punctuation">:</span><span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        b_ub <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">*</span> i        results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>scoptim<span class="token punctuation">.</span>linprog<span class="token punctuation">(</span>c<span class="token operator">=</span>c<span class="token punctuation">,</span> A_ub<span class="token operator">=</span>A_ub<span class="token punctuation">,</span> b_ub<span class="token operator">=</span>b_ub<span class="token punctuation">,</span> A_eq<span class="token operator">=</span>A_eq<span class="token punctuation">,</span> b_eq<span class="token operator">=</span>b_eq<span class="token punctuation">,</span> bounds<span class="token operator">=</span>bounds<span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> x<span class="token punctuation">.</span>fun <span class="token keyword">for</span> x <span class="token keyword">in</span> results<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"o-"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"max profit - risk"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"risk"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"profit"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>model1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101224009040.png" alt="Results"></p><p>可以看出来：</p><ul><li>风险越大，收益越大，损失本金的5%最高可以达到超过本金25%的收益</li><li>在当前五种投资资产中，收益——风险曲线最终收敛到0.25左右，意味着当前投资策略的潜力如此</li><li>$l=0.006$附近有一个转折点，转折点左侧风险增加缓慢但是收益增加显著，而右侧则风险增加很多并且收益增加不多（5%的额外收益）。所以对于风险和收益没有特殊偏好的投资者来说，应该选择曲线的转折点作为最优投资组合，大约是$l=0.6%，Q=20%$，所对应投资方案为 风险度$u=0.006$，收益$Q=0.2019$，$x_0=0$，$x_1=0.24$，$x_2=0.4$，$x_3=0.1091$，$x_4=0.2212$。</li></ul><h4 id="B-模型二、三"><a href="#B-模型二、三" class="headerlink" title="B. 模型二、三"></a>B. 模型二、三</h4><script type="math/tex; mode=display">\min\max{[0, 0.025 0.015 0.055, 0.026][x_0, x_1, x_2, x_3, x_4, x_5]}\\\begin {cases} [0.05, 0.27, 0.19, 0.185, 0.185][x_0, x_1, x_2, x_3, x_4, x_5]^T \ge k\\[1, 1.01, 1.02, 1.045, 1.065][x_0, x_1, x_2, x_3, x_4, x_5]^T=1\\x_0, x_1, x_2, x_3, x_4 \ge0\end{cases}</script><p>模型二和模型三其实有一个问题，就是目标函数不是一个线性的，因为存在去max这一步，所以实际上是一个分段函数这是由于取最大风险的才导致的不连续。所以这里就不给出解答了。如果想要做出来的话，改一下目标函数</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Math Modeling </tag>
            
            <tag> 线性规划 </tag>
            
            <tag> Linear Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统概念读书笔记-第一章：介绍-3</title>
      <link href="/2021/12/31/cao-zuo-xi-tong-gai-nian-du-shu-bi-ji-di-yi-zhang-jie-shao-3/"/>
      <url>/2021/12/31/cao-zuo-xi-tong-gai-nian-du-shu-bi-ji-di-yi-zhang-jie-shao-3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是《操作系统概念（第九版）》的第一章的读书笔记第三部分，主要介绍了操作系统的任务。</p><p>This blog is the second part of reading notes of  <em>Operating System Concepts (Ninth Edition)</em> chapter 1: Introduction, which tells  the main task of Operating System.</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228175748055.png" alt="Chapter 1: Introduction"></p><h2 id="Operating-System-Concepts-Chapter-1-Introduction-3-Main-Tasks-of-Operating-System"><a href="#Operating-System-Concepts-Chapter-1-Introduction-3-Main-Tasks-of-Operating-System" class="headerlink" title="Operating System Concepts-Chapter 1: Introduction-3 Main Tasks of Operating System"></a>Operating System Concepts-Chapter 1: Introduction-3 Main Tasks of Operating System</h2><p>操作系统概念第一部分是Overview，包括第一章和第二章。</p><p>本章主要介绍了操作系统中一些基本概念和操作系统的发展历史/操作系统的种类，以及操作系统的任务。本章的第三部分主要讲解了操作系统的主要任务</p><h2 id="1-概览"><a href="#1-概览" class="headerlink" title="1. 概览"></a>1. 概览</h2><p>从宏观的角度来说，操作系统的任务主要有以下几个：</p><ul><li>进程管理（Process Management）</li><li>内存管理（Memory Management）</li><li>文件管理（File Management）</li><li>设备管理（Device Management）</li></ul><p>因此，如果把操作系统当做人的话，操作系统就是一个多面手：</p><ul><li>进程管理员</li><li>内存管理员</li><li>文件管理员</li><li>设备管理员</li></ul><p>实际上，上面四个任务之间是需要相互配合、沟通的。例如进程的调度问题，就需要内存管理和进程管理；而文件管理由于文件会保存在磁盘上的，因此还需要设备管理的配合。</p><p>当然，以上的四个部分是作为操作系统的基石的，而操作系统是需要被用户所使用的，因此需要操作系统为用户提供一个<strong>用户命令界面（User Command Interface）</strong>以让用户使用操作系统。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101105618888.png" alt="image-20220101105618888" style="zoom:150%;"></p><p>下面就将详细的介绍这四个部分。</p><h2 id="2-Process-Management，进程管理"><a href="#2-Process-Management，进程管理" class="headerlink" title="2. Process Management，进程管理"></a>2. Process Management，进程管理</h2><p>通常而言，我们的程序写下来的时候，源代码是文本形式的文本文件，保存在磁盘上。而同样，我们用编译器把源代码编译为二进制可执行程序后，程序的内容从文本变成了二进制的指令，但是依旧保存在磁盘上。</p><p>我们运行程序的时候，首先需要把磁盘上的包含二进制指令的可执行程序从磁盘读入内存（因为磁盘太慢了），而后CPU执行程序的时候直接从内存中读取程序（的指令），运行即可。</p><p>因此，通常称在内存中的程序为<strong>进程（Process）</strong>。进程实际上就是正在执行的程序，是程序的的动态的程序实体。而保存在磁盘上的程序则是静态的程序实体。</p><p>一个进程实际上是CPU指令序列，此外进程在被CPU执行的时候还可能会需要其他的资源，例如某个文件中的数据、输出结果到某个文件，因此的<strong>一个进程如果想要完成其工作，就需要各种各样的资源</strong>：</p><ul><li>CPU、内存资源、I/O资源、文件资源</li><li>初始化数据</li></ul><p>计算机系统中的资源往往具有不可复制性，例如CPU只有一个，某个文件在磁盘中也只有一份。因此一个进程结束（Terminate）的时候需要释放（reclaim）所有的资源。</p><p>此外，CPU在某一个时间点只能运行一条指令，因此CPU中需要有一个寄存器，专门存储下一条指令在内存中的位置，这个寄存器叫做程序计数器（Program Counter，PC）或者指令指针（Instruction Pointer，IP）。</p><p>此外，由于现代的进程支持多线程，而每个线程在逻辑上都是独立的指令序列，因此多线程的程序中每个线程都会有自己的PC，而单线程的程序中只有一个PC。</p><p>通常来说，一个典型的操作系统系统会有非常多的进程，（例如我们通过htop命令看到的，目前系统中一共有204个进程，777个线程（但是注意，正在运行的进程很少，我截图的时候只有六个））、一些用户。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101113559220.png" alt="htop命令的输出"></p><p>因此，当我们说到操作系统的进程管理的时候，通常指代下面的一些操作系统需要完成的任务：</p><ul><li>创建和删除用户、系统进程</li><li>挂起和恢复进程（包括进程的调度）</li><li>提供进程间同步的机制</li><li>提供进程间通信的机制</li><li>提供死锁的处理机制</li></ul><p>因此，在后面的章节中，我们在进程管理部分就会介绍操作系统是如何完成上述任务的。</p><h2 id="3-Memory-Management，内存管理"><a href="#3-Memory-Management，内存管理" class="headerlink" title="3. Memory Management，内存管理"></a>3. Memory Management，内存管理</h2><p>我们在本章的前面部分介绍过，需要使用内存的原因是由于磁盘太慢了，让CPU直接从磁盘中读取指令会浪费大量的时间，因此在磁盘和CPU中添加了一个内存。</p><p>因此，CPU在执行进程的时候需要的所有的数据都是保存在内存中的，所有即将执行的指令也是都在内存中的。</p><p>然而，一个问题就是内存的大小是有限制的，那么就需要决定哪些进程在内存中，那些程序不在。此外，若某个需要运行的程序需要的内存大于剩余的内存怎么办？这些都是内存管理需要解决的问题。</p><p>因此，内存管理的任务如下：</p><ul><li>对内存块进行追踪，明确这块内存块当前正在被那个进程使用</li><li>决定哪个进程要被移入内存，哪个要被移出</li><li>根据需要对内存进行分配和释放</li></ul><p>查看proc下的meminfo文件，其中记录着系统当前的内存配置信息</p><pre class="line-numbers language-shell"><code class="language-shell">cat /proc/meminfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101135344831.png" alt="系统当前的内存配置信息"></p><h2 id="4-Storage-Management，存储管理"><a href="#4-Storage-Management，存储管理" class="headerlink" title="4. Storage Management，存储管理"></a>4. Storage Management，存储管理</h2><p>前面所说的内存是易失性的，因此为了能够将文件等数据永久的保存下来，我们需要将文件保存到存储器上。</p><p>如果没有操作系统的话，把文件保存到磁盘上将会是意见非常累的事情，因为我们需要自己动手写汇编语言，和磁盘的控制器进行交互。</p><p>然而，操作的任务就是向下沟通硬件，向上为用户提供服务。因此操作系统就需要对存储器进行管理，为用户提供存储器的统一的逻辑上的视图，即文件和目录。文件和目录这两个逻辑上的概念就是操作系统为我们提供的存储器在逻辑上的视图。通过这两个概念，我们很少会直接直接触到存储器。针对这个概念，操作系统还维护了保存、修改等操作；还有谁能阅读、谁能修改等权限。</p><p>此外，由于存储器的不同，因此还会一些问题：</p><ul><li>不同类型的存储器的访问速度不同，例如固态、机器、磁带</li><li>不同类型的存储器容量也不同、传输速率不同、访问方式也不同（有的可以随机访问，有的只能顺序访问，比如磁带只能顺序访问而固态/机械可以随机访问）</li></ul><p>这些差异都被操作系统给屏蔽了，我们在创建、保存文件并不会考虑到这些差异。</p><p>因此，操作系统的存储管理包括以下内容：</p><ul><li><strong>文件和目录的创建</strong>：文件的组织与管理，即文件、目录在一起构成的文件系统</li><li><strong>文件的权限管理</strong>：对文件的访问控制，即谁能读取文件、谁能修改</li></ul><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> Operating System Concepts Reading Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Operating System </tag>
            
            <tag> Reading Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统概念读书笔记-第一章：介绍-2 操作系统的分类/历史</title>
      <link href="/2021/12/30/cao-zuo-xi-tong-gai-nian-du-shu-bi-ji-di-yi-zhang-jie-shao-2/"/>
      <url>/2021/12/30/cao-zuo-xi-tong-gai-nian-du-shu-bi-ji-di-yi-zhang-jie-shao-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是《操作系统概念（第九版）》的第一章的读书笔记第二部分，主要介绍了操作系统的历史/分类。</p><p>This blog is the second part of reading notes of  <em>Operating System Concepts (Ninth Edition)</em> chapter 1: Introduction, which tells  the histroy/types of Operating System</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228175748055.png" alt="Chapter 1: Introduction"></p><h1 id="Operating-System-Concepts-Chapter-1-Introduction-2-Histroy-Types-of-Operating-System"><a href="#Operating-System-Concepts-Chapter-1-Introduction-2-Histroy-Types-of-Operating-System" class="headerlink" title="Operating System Concepts-Chapter 1: Introduction-2 Histroy/Types of Operating System"></a>Operating System Concepts-Chapter 1: Introduction-2 Histroy/Types of Operating System</h1><p>操作系统概念第一部分是Overview，包括第一章和第二章。</p><p>本章主要介绍了操作系统中一些基本概念和操作系统的发展历史/操作系统的种类，以及操作系统的任务。本章的第二部分主要讲解了操作系统的发展历史/操作系统的分类。</p><p>注：本章部分内容参考《现代操作系统》(Modern Operating System)</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230175913496.png" alt="现代操作系统" style="zoom:50%;"></p><h2 id="1-概览"><a href="#1-概览" class="headerlink" title="1. 概览"></a>1. 概览</h2><p>操作系统不仅仅是作为学术界的研究内容，其更加是产业界的产品，和用户紧密贴合。因此操作系统是随着时代在发展的。</p><p>总的来说，操作系统的发展是和计算机硬件的发展分不开的，因此伴随着计算机硬件的发展，操作系统的发展经历了以下几个阶段：</p><ul><li>1945-1955：第一代，真空管</li><li>1955-1965：第二代，晶体管</li><li>1965-1980：第三代，集成电路和多道程序设计</li><li>1980-现在：个人电脑</li><li>1990-现在：移动电脑（手机）</li></ul><p>在这些阶段中，出现了下面几种类型的操作系统</p><ul><li><strong>批处理系统（Simple Batch processing system）</strong></li><li><strong>多道程序系统（Multiplied Batch processing system）</strong></li><li><strong>分时系统（Time-sharing system）</strong></li><li><strong>实时系统（Real time system）</strong></li><li><strong>网络操作系统（Network operating system）</strong></li><li><strong>平行系统（Parallel Systems）</strong></li><li><strong>分布式系统（Distributed system）</strong></li></ul><h2 id="2-操作系统的历史"><a href="#2-操作系统的历史" class="headerlink" title="2. 操作系统的历史"></a>2. 操作系统的历史</h2><p>下面我们将回顾计算机的发展历史，并且伴随着计算机的发展穿插讲解同一时代的操作系统，以期望能够给读者一个操作系统的宏观发展史。在后面的操作系统的种类不分，将会对出现在历史上的各类操作系统进行详细的讲解</p><h3 id="A-第一代（1945-1955）：真空管和穿孔卡片"><a href="#A-第一代（1945-1955）：真空管和穿孔卡片" class="headerlink" title="A. 第一代（1945-1955）：真空管和穿孔卡片"></a>A. 第一代（1945-1955）：真空管和穿孔卡片</h3><p>第二次世界大战推动了计算机的发展，正如我们所熟知的，计算机（ENIAC）最早是为了计算炮弹的下落轨迹的。军事的发展在早期极大的推动了计算机发展。和ENIAC同时代的，还有许多计算机。例如，1944年阿兰·图灵等人在英国的因格兰建造了Colossus计算机，并在这台计算机上进行编程；Howard Aiken在哈佛大学建造了Mark I计算机；宾夕法尼亚大学的William Mauchley和他的学生J. Presper Eckert建造了ENIAC……</p><p>在这个时候，计算机的作用仅仅是用来进行复杂的数学运算，人们所做的是按照预先的设计，把电线连好，然后启动计算机，祈祷机器在两个小时后真空电子管不会烧掉并且能够给出正确的答案。在这个时候根本没有编程语言的概念，操作系统就更加无从说起了。这个时候的计算机也非常原始，很多计算机都是无法编程的，或者干脆就是用0101的机器语言编写的，之所以用机器语言编写，是因为它符合电路的通断，因此很容易就能够把写好的”代码”转换为电路的通断。</p><p>一直直到1950年以后，这个情况才稍微边的好一点了，读卡机的出现使得操作者可以提前把代码写在卡片上，然后计算机从卡片中读取程序，然后进行计算</p><h3 id="B-第二代（1955-1965）：晶体管和批处理系统"><a href="#B-第二代（1955-1965）：晶体管和批处理系统" class="headerlink" title="B. 第二代（1955-1965）：晶体管和批处理系统"></a>B. 第二代（1955-1965）：晶体管和批处理系统</h3><p>20世纪50年代，晶体管的发明极大地推动了计算机的发展，先前的计算机使用的真空管如果漏气就会被烧掉，因此稳定性不是很好，而晶体管的发明计算机已经边的非常有用，并且能够完成一些有用的任务。晶体管没有玻璃管壳，不需要真空，体积很小，生产成本很低，寿命比电子管长得多。因此，晶体管一问世，立即得到迅速发展且取代了电子管的位置。</p><p>这个时候的电脑现在被称为<strong>大型机（mainframe）</strong>，通常被锁在有专用空调的大房间中，由专业人员进行操作。因此其售价非常高昂，通常达到几百万美元。只有企业、重要的政府部门以及大学才可能接受并购买。</p><p>这个时候已经出现了编程语言的概念，有Fortran或者汇编语言，但是依旧没有操作系统的概念。这个时候的程序被称为<strong>作业（job）</strong>。程序可以通过<strong>穿孔卡片（Punched card）</strong>写在纸上，然后被计算机读入。</p><p><img src="http://pansci.asia/wp-content/uploads/2020/08/e4592ed6287a7d6c606f0856491ffaeb-560x251.jpg" alt="穿孔卡片"></p><blockquote><p>穿孔卡片如何表示数据？</p><p><strong>From Wikipedia</strong></p><p>1928年，IBM发明的80列、矩形孔卡片，成为事实上的标准。其工作原理如下：编号为0至9，总计10行；以及一块区域，用于第11、第12行（注意，没有编号为第10的行）。</p><p>每列的穿孔组合用于表示单个字符：</p><ul><li>数字通过在行0至行9直接打1个孔来表示。</li><li>空格符的表示，不需要打孔。</li><li>字母用2个孔表示：一个孔在第11、第12、第0行；另一个孔在第1至第9行。字母表被依次分为由9个字母组成的区（zones），每个区的字母依次在第1至第9行打孔。每个区分别在第11、第12、第0行打孔。第3区第1个字符保留未使用。</li><li>一些特殊字符使用了额外的单孔表示，或者双孔表示。</li><li>大多数特殊字符（如标点符号等）用3孔表示：第8行被穿孔；第0、第11、第12行有1个穿孔；第1到第7行有1个穿孔。第9行保留未使用。</li></ul></blockquote><p>用户提前编写好程序（以Fortran语言为例），然被送入计算机中，计算机中的Fortran编译器对读入的源程序进行编译编译，编译完成后得到编译好的程序。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/ae51f3deb48f8c54ef67e8a63a292df5e1fe7f86" alt="穿孔机器"></p><p>接下来计算机载入编译后的程序，然后读取数据进行运算，得到结果。最后将结果再通过打印机打印到纸上。因此一个典型的作业的卡片组如下图。首先是JOB卡片，表明用户的扣款账号，最大的运行时间（分钟）以及程序员。接下来是Fortran卡片，通知计算机把Fortran编译器从系统磁带上载入，接下来对后面程序员提前写好的Fortran程序进行编译。编译结束之后Load卡片通知计算机丢弃掉先前载入的Fortran编译器，载入编译好的程序。接下来Run卡片让程序开始运行，并以后面卡片上的数据作为输入。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230220709362.png" alt="典型的作业卡片组"></p><p>这个时候尽管有了程序的概念（虽然被称为工作），但是依然没有现在的操作系统的概念，程序的运行是直接把程序从卡片读入计算机内部，然后开始运行。因此，在同一个时间点内，计算机只能运行一个程序，并不会存在现代的调度、中断这些用来实现并行的概念。</p><p>此外，正式由于这个时候的计算机非常昂贵，因此人们就想办法尽量提高计算机的利用率，即减少计算机的机时浪费。为此就产生了<strong>批处理系统（Batch System）</strong>。批处理系统的核心思想就是首先用一台便宜的机器从穿孔卡片中读取程序，然后把程序写入到磁带上，接下来用昂贵的计算机来直接从磁带中读取程序，然后进行运算。例如用便宜的IBM 1401完成从卡片中读取、写入到磁带，计算发生在昂贵的IBM 7904上。</p><blockquote><p>之所以还需要使用穿孔卡片的原因在于在那个时候还没有键盘、鼠标这类便捷的输入设备，唯一对人类友好的输入方式就是穿孔卡片。而让人类直接读写磁带显然不可能。</p></blockquote><p>因此对于<strong>批处理系统</strong>，一个典型的工作流程就是IBM 1401首先读取穿孔卡片两个小时，并把两个小时内读取到的程序全部输出到磁带上。接下来，操作员把磁带送到IBM 7904上，IBM 7904会依次读取磁带中的程序，进行计算，最后把计算结果输出到一个磁带上去，最后再用一个IBM 1401负责读取磁带中的结果，并打印到纸上。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230220236208.png" alt="批处理系统的工作流程"></p><p>第二代的大型机主要用于科学与工程计算，例如解微分方程。</p><p>此外，由于第二代计算机并不存在现代意义上的操作系统，当时的操作系统仅仅是包含编译器在内的一套软件，在存储器（磁带）中，系统和用户程序是相邻的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101010010089.png" alt="Memory Layout"></p><h3 id="C-第三代（1965-1980）：集成电路和多道程序设计"><a href="#C-第三代（1965-1980）：集成电路和多道程序设计" class="headerlink" title="C. 第三代（1965-1980）：集成电路和多道程序设计"></a>C. 第三代（1965-1980）：集成电路和多道程序设计</h3><p>相比于第二代计算机，第三代计算机的一个进步就是在计算机中采用了（小规模的）集成电路(Integrated Circuit，IC)。因此计算机的性能得到了巨大的提升。此外，第三代计算机的主存储器采用半导体，因而现代计算机中的内存/主存在此时出现。</p><p>在第三代计算机发展的初期，即1965年左右，这个时候每个计算机厂商需要维护两条产品线，一条是面向科学计算的大型机（mainframe），另外一条是面向文字处理的商用计算机（银行业、保险业、金融业），例如IBM 1401。</p><p>而维护两条生产线的代价是高昂的，因为厂商需要针对两种不同的设备维护相同的软件，但是却有两套不同的底层。另外一个问题就是同一条产品线的不同代的产品之间都不互相兼容。因此为了解决这个问题，在1964年，IBM推出了OS/360系统希望来屏蔽这个问题。OS/360系统搭载在System/360系列计算机上，尽管每代计算机都会有新的指令退出，OS/360都始终保持着兼容。这就意味着针对不同的硬件，OS/360都会提供支持，并对诸如Fortran编译器、文字处理程序提供支持。因此，<strong>OS/360代表着操作系统雏形的诞生，即向下沟通硬件、屏蔽硬件之间的差异，向上为程序提供资源/服务</strong>。</p><p>虽然后来OS/360变的越来越庞大，包含了数千个程序员写的百万行汇编代码，以至于维护越来越苦难，最终被放弃，System/360可以作为人类工程史上一项里程碑式的大型复杂软件系统而被记录。</p><p>除了屏蔽指令集的不同以外，OS/360的另外一大贡献就是开创了<strong>多道程序设计（multiprogramming）</strong>。</p><p>在第二代计算机中，计算机在一段时间内被一个作业独占，此时任何其他人都无法使用计算机。因此一个显著地问题就是计算机从卡片/磁带上读取/输出的时候会消耗很多时间，而这个时间段内当前作业仍然在占用计算机，因此CPU就会空转以等待这些I/O操作。对于科学计算这类CPU密集型的程序，一个作业85%的时间CPU在进行计算，而对于字符处理这些作业来说，CPU只有大概10~15%的时间在进行运算，其余时间在进行数据读写。</p><p>因此为了提高CPU的利用率，多道程序设计的核心思想在于当一个程序在进行I/O时，让另外一个程序使用CPU进行计算。</p><p>为了实现这样的技术，需要做的事情如下：</p><ul><li><p>首先需要把所有的程序都读入计算机中，即存储到内存中（System/360中可以存放15个作业）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211231170111022.png" alt="OS/360存储所有的作业"></p></li><li><p>其次需要对内存中的每个作业进行保护，避免某个作业被当前作业错误的改写。</p><p>System/360，包括现在的计算机的做法是使用了两个特殊的变量，第一个变量指明当前程序的下界，而第二个变量指明当前程序的范围，这两个变量作为程序的一部分，储存在CPU上的两个寄存器中，即为了实现对程序的保护，需要有特殊的硬件。</p></li></ul><p>通过这样的设计，OS/360的CPU利用率接近100%。</p><p>在OS/360之后，就是<strong>分时系统（Time-sharing System）</strong>。OS/360实现的多道程序设计极大地提升了CPU的利用率，但是却缺乏和用户的交互，因为所有的程序都是用户事先指定的，在运行的过程中用户无法和系统进行交互。为了解决这个问题，就出现了分时系统。</p><p>分时系统的核心思想在于让机器以固定的时间间隔在多个程序之间轮转，而不需要等待直到程序进行I/O的时候再把CPU让出。从CPU的家督来说，分时系统其实是多道程序设计的一个变体。通过分时系统，就可以实现让五六个用户同时通过终端连接到计算机，并且运行自己的程序，而CPU则在每个程序之间轮流进行执行。由于轮转的速度非常快，一秒可以有几十次，因此在用户的角度来说仿佛没有发生过轮转。因此极大的提升了用户的体验。</p><p>进一步，出现了兼容分时系统（Compatible Time-Sharing System，CTSS）。兼容分时系统的意义在于当有用户运行他们的程序的时候，系统会运行用户的程序，而让用户没有运行程序的时候，系统就会运行在后台的大型程序（计算密集型程序，这个时候以及不太说作业了）。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211231170210172.png" alt="MIT开发的CTSS系统"></p><p>从分时系统开始，逐渐出现了程序之间的调度，由此产生了操作系统的第一个任务：进程调度（进程可以理解为作业的现代术语）。此外，由于程序（进程）需要保存在内存里，因此就出现了操作系统的第二个任务：内存管理。</p><p>在CTSS系统成功之后，进一步，人们希望研发一个系统，可以支持上百个分时用户通过终端，因此通用电气（GE）公司和MIT、贝尔实验室联合在一起，开发一个名为Multics（Multiiplexed Information and Computing Service）系统。虽然同样，Multics失败了，但是其进一步推动了操作系统的发展，推出了诸多原创性的思想。</p><p>最后，虽然Multics失败了，但是其把火种传播下去了，曾今参与Multics计划的贝尔实验室中的计算机科学家Ken Thompson在贝尔实验室中找到了一台没有人使用的计算机。为了使用这台计算机，他自己动手写了一个Multics的简化版系统。他的系统期初只在贝尔实验室中使用，慢慢的人们觉得这个系统越来越好用，因此也提出了越来越多的建议。慢慢的，在众人的帮助下基于Ken Thompson工作的新的系统Unix诞生了。</p><p>在起初，Unix系统是每个人都可以下载的，而且由于Unix的简单性，很多人都可以对Unix系统的源代码进行修改。因此，出现了很多Unix系统的修改版本，从而极大地推动了操作系统的发展。这些由Unix系统修改来的版本，在一起构成了Unix家族</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101041059718.png" alt="Unix系列系统"></p><h3 id="D-第四代（1980-至今）：个人计算机"><a href="#D-第四代（1980-至今）：个人计算机" class="headerlink" title="D. 第四代（1980-至今）：个人计算机"></a>D. 第四代（1980-至今）：个人计算机</h3><p>随着大规模集成电路（Large Scale Integrated Circuit）的发展，每平方厘米的硅片芯片上能够集成的晶体管的数量越来越多，因此，计算机的体积越来越小，个人计算机的时代到来了。</p><p>从计算机的体系结构看来，个人计算机（早期称为微型计算机）的结构和大型机没有大的区别。只是操作系统不同</p><p>个人计算机的发展可以追溯到Intel推出第一代小型、通用的CPU。在Intel推出第一代通用八位CPU——Intel 8080时，此时市面上的操作系统都是为大型机编写的，因此尽管8080 CPU确实可用，但是却没有能够让用户使用这个CPU的操作系统。因此英特尔邀请了Gary Kildall为8080编写一套操作系统。为此，Gary Kildal编写了一套完全基于磁带的操作系统，称为<strong>CP/M（Control Program for Microcomputer）</strong>。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/96dda144ad345982b2b7f05339b826adcbef77092e94" alt="CP/M操作系统"></p><p>CP/M随着英特尔的8080而大获成功，甚至统治了个人计算机操作系统长达五年。</p><p>正式因为CP/M的巨大成功，IBM这个早期的专门做大型机的公司开始瞄准个人机市场后，咨询Kildal能否为IBM的个人机进行适配以支持IBM的个人电脑。Kildal拒绝了IBM。因此IBM别无办法，只能开发自己的操作系统。</p><p>当IBM正在寻找能够在IBM的PC上运行的操作系统的时候，Bill Gates出现了。Bill Gates了解到在西雅图有一家叫做Seattle Computer Products的公司制作出了一个DOS系统（Disk Operating System），于是出价75000美元买下了这个系统。在进行简单的修改之后，Gates把这个系统成套的卖给了IBM。随后在IBM的要求下，Gates对DOS进行了修改，修改版称为MS-DOS（MicroSoft Disk Operating System）。MS-DOS很快抢占了CP/M的市场，并且在个人电脑的操作系统中占据主导地位。</p><p>另外一段故事就是在1983年，Steve Jobs的Apple公司发布的具有GUI的Lisa计算机。其实在1960年代，斯坦福大学的Doug Engelbart加收就开发出了图形用户界面，包括窗口、图标、菜单以及鼠标。然而那个时候操作系统本身都还没有发展起来，因此这个超时代的创新并没有引起重视。后来图形用户界面的研究被Xerox PARC的研究员继续深入下去。Jobs在一次访问PARC的时候，看到了GUI的系统，意识到了GUI的巨大应用。于是在1983年的时候，Jobs的Apple公司发布了第一个带有GUI系统的计算机：Lisa。</p><p>不过由于过于昂贵，Lisa最终在商业上失败了，但是Lisa后来的改进版，Macintosh获得了巨大的成功。因为它使得社会大众可以不用专门的学习计算机技术而使用计算机。</p><p>随后，微软在看到Apple的Macintosh获得的巨大成功之后，开发了名为Windows的基于GUI的操作系统。在Windows的早期，Windows只是在MS-DOS的基础上多运行了一个GUI的环境。一直直到1995年，微软才制作了一个完全独立的Windows，MS-DOS虽然依旧在系统中，但是仅仅用于运行早期的MS-DOS系统上编写的程序。</p><h3 id="E-第五代（1990-至今）：移动计算机"><a href="#E-第五代（1990-至今）：移动计算机" class="headerlink" title="E. 第五代（1990-至今）：移动计算机"></a>E. 第五代（1990-至今）：移动计算机</h3><p>第一台手持电话出现在1970年左右，大概两公斤，即当时在港台影片上看到的大哥大</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/1ad5ad6eddc451dab4bd9a1eb6fd5266d11632ff" alt="老式大哥大"></p><p>后来随着大规模集成电路的发展，人们逐渐开始把计算机和电话结合起来，最终在90年代完成了这一摄设想。诺基亚发布的N9000真正做到了手机和电脑合二为一。进一步1997年爱立信公司的GS88手机发布的时候创造出了“智能手机”（SmartPhone）这一术语。</p><p>随着智能手机逐渐普及，智能手机上的各种操作系统间的竞争边的非常激烈。在最初的十年内，大多数手机都运行这Symbian OS。包括三星、索尼、爱立信、摩托罗达等等厂商在内，他们的手机在出场的时候就搭载了Symbian OS。除此以外，还有RIM公司的Blackberry OS。</p><p>然而，触屏技术的发展，新的支持触屏的系统迅速获得了市场，例如搭载iOS的iPhone的发布和Google的Android系统，成为移动计算机的巨头，统治了手机操作系统，直到今天。</p><h2 id="3-操作系统的种类"><a href="#3-操作系统的种类" class="headerlink" title="3. 操作系统的种类"></a>3. 操作系统的种类</h2><p>在前面，我们回顾了计算机的发展历史，并且伴随着计算机的发展穿插了各种操作系统。下面的内容将完全注重于操作系统，讲解各种类型的操作系统。</p><p>在讲解下面的系统前，我们首先需要明白，现代的操作系统主要有下面四大任务（下一篇文章会详细讲解）：</p><ul><li>进程管理</li><li>内存管理</li><li>文件管理</li><li>设备管理</li></ul><h3 id="A-Simple-Batch-Processing-System，单道批处理操作系统"><a href="#A-Simple-Batch-Processing-System，单道批处理操作系统" class="headerlink" title="A. Simple Batch Processing System，单道批处理操作系统"></a>A. Simple Batch Processing System，单道批处理操作系统</h3><p>单道批处理在同一时间只能够运行一个程序（作业），并且在一个程序（作业）开始后，直到作业结束，系统都不会运行新的作业。而在一个作业从开始到结束的这段时间内，包括了作业的指令的读取事件、数据的读取事件、CPU的运算时间以及将结果输出的时间。因此正如前面所说，单道批处理操作系统会浪费大量的CPU时间。</p><p>但是相比于单道批处理操作系统之前的、由人工完成的一次把一个job的穿孔卡片放入、连接好电路而言，依旧节省了不少时间。</p><p>单道批处理系统的特点如下：</p><ul><li>减少相同任务的初始化时间</li><li>自动的Job队列——可以顺着队列依次执行Job</li><li>需要雇佣一个操作员（换卡片）</li><li>需要一个读卡器</li></ul><p>单道批处理系统的内存结构也非常简单，除了系统就是用户的程序</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101004315223.png" alt="单道批处理系统的内存结构"></p><p>一些单道批处理系统的例子如下：</p><ul><li>BM FMS（FORTRAN Monitor System），for IBM7094</li><li>IBM IBSYS，for IBM7090 and 7094</li><li>UM UMES，for IBM7094,1959</li><li>IBM JCL-related (job control language) systems.</li></ul><h3 id="B-Multiplied-Batch-Processing-System，多道批处理操作系统"><a href="#B-Multiplied-Batch-Processing-System，多道批处理操作系统" class="headerlink" title="B. Multiplied Batch Processing System，多道批处理操作系统"></a>B. Multiplied Batch Processing System，多道批处理操作系统</h3><p>多道批处理操作系统是对单道批处理操作系统的改进，主要目的是为了提高CPU的利用率。</p><p>多道批处理操作系统，重点在于<strong>多道（Multiprgramming）</strong>，而多道意味着：</p><ul><li>对于程序而言，CPU在各个程序之间轮转，执行指令；而对于CPU来说，程序以交错的的形式形成一条线被CPU依次执行</li><li>在程序进行I/O等操作（没有使用CPU）的时候，把CPU让给其他程序使用</li></ul><p>为此，支持多道程序的系统需要的特点如下：</p><ul><li><p>内存管理和保护，因为要把所有的程序首先读入然后储存，因此其内存存储结构如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101005524822.png" alt="支持多道程序系统的内存结构"></p></li><li><p>CPU调度，还包含上下文切换（寄存器内的值的改变）</p></li><li><p>资源共享：独占资源和同步资源，例如一个文件只能一个程序进行修改</p></li><li><p>设备分配</p></li></ul><p>知名的操作系统包括：IBM OS 360</p><h3 id="C-Time-Sharing-System，分时系统"><a href="#C-Time-Sharing-System，分时系统" class="headerlink" title="C. Time-Sharing System，分时系统"></a>C. Time-Sharing System，分时系统</h3><p>分时系统是多道批处理系统的变体，因此在很多地方和多道批处理系统是类似的：</p><ul><li>CPU在程序间轮转</li></ul><p>然而不同之处在于：</p><ul><li>分时系统要求系统与用户之间是可以进行交互的，因此当用户发出指令执行程序之后，用户执行的程序不能在被执行前等待过长的时间。因此，分是系统要求系统对用户响应必须要小于1秒</li></ul><p>此外，分时系统的一些特点如下：</p><ul><li>每个终端用户在内存中至少有一个程序（进程）</li><li>若多个程序都已经准备好运行（所有需要的资源都已经获得），系统具有调度CPU，决定那个程序可以获得CPU运行。</li><li>若进程太大，超过剩余的内存空间的话，操作系统就会通过将进程移入移出内存来最终运行程序（虚拟内存）</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101010616641.png" alt="典型的分时系统"></p><p>典型的分时系统如下：</p><ul><li>1961年MIT开发的CTSS，兼容分时系统</li><li>1964-1969年由MIT 、Bell Lab of AT&amp;T、DEC机构以PL/1语言开发的MULTICS</li><li>1970年由Bell Lab of AT&amp;T,  PDP 7等开发的UNIX</li></ul><h3 id="D-nix-Operating-Systems，-nix-系列操作系统"><a href="#D-nix-Operating-Systems，-nix-系列操作系统" class="headerlink" title="D. *nix Operating Systems，*nix 系列操作系统"></a>D. *nix Operating Systems，*nix 系列操作系统</h3><p>尽管<em>nix系列操作系统是分时系统的一种，但是由于、\</em>nix系列操作系统在操作系统历史上是不可逾越的，因此单独讲讲Unix系列操作系统。</p><p>Unix和Linux系列的操作系统是最具有影响力的操作系统，并且有除了Windows以外的最大的用户基数。由于源代码开源，因此有非常多的修改后的在发行版本，但是这些系统通常在后面会加上*nix表示是Unix/Linux的衍生版本，因此在一些语境下，说Unix/Linux系统的时候其实指代的是*nix系列系统。</p><p>起初，第一版可以使用的Unix是在贝尔实验室中开发的，开发语言包括C语言和汇编语言。C语言其实最初的目的是为了帮助Thompson开发Unix操作系统</p><p>而后，从Unix派生出来两大流派：</p><ul><li>由UC Berkely开发的BSD Unix系统，主要是为了科研使用。为了避免Unix的专利，BSD自己实现了Unix中的所有功能，并且没有参考AT&amp;T 的Unix的代码<ul><li>进一步，从BSD又发展出了Solaris系统，Solaris系统是BSD流派中安装最多的系统</li><li>此外，还有一个发行版是FreeBSD系统，也是一个安装比较多的系统</li><li>BSD系统对系统提出了一些标准，这些标准称为POSIX标准，而MacOS是从BSD系统中发展来的，因此也支持这套标准。</li></ul></li><li>又AT&amp;T开发的的System V（贝尔实验室后来被AT&amp;T收购了）</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101014233543.png" alt="Unix系统家谱"></p><h3 id="E-Real-time-System，实时操作系统"><a href="#E-Real-time-System，实时操作系统" class="headerlink" title="E. Real-time System，实时操作系统"></a>E. Real-time System，实时操作系统</h3><p>实时操作系统是一种特殊目的的操作系统，他属于分时操作系统，但是他强调任务的实时性，即程序需要及时的完成。</p><p>注意实时操作系统对时间的看重程度远超分时系统，因为他们通常用在金融记账、飞机控制、航天器控制中，因此1秒的差距都是不可忍受的。</p><p>为此实时操作系统为每个任务都设定了一个截止时间，任何任务（进程）都必须要在截止时间之前完成。其实严格的说，并不是所有实时操作系统都是这样的。</p><p>实时操作系统分为两类：</p><ul><li>硬实时操作系统，即一点超时都不能有的操作系统，任何的超时都意味着当前任务失败，需要重新进行</li><li>软实时操作系统，即偶尔的超时还是可以忍受的，但是尽量不要超时</li></ul><h3 id="F-Network-Operating-System，网络操作系统"><a href="#F-Network-Operating-System，网络操作系统" class="headerlink" title="F. Network Operating System，网络操作系统"></a>F. Network Operating System，网络操作系统</h3><p>网络操作系统即指具备网络能力的操作系统，关于网络主要在计算机网络中有所讲解，这里不会深入。</p><p>具体的网络能力指：</p><ul><li>网络通信</li><li>网络服务</li></ul><p>由于Unix允许用户写的程序可以和另外一台操作系统上的某个程序进行通信，因此Unix系列的操作系统就是网络操作系统，Windows和MacOS也是类似的</p><h3 id="G-Distributed-Systems，分布式系统"><a href="#G-Distributed-Systems，分布式系统" class="headerlink" title="G. Distributed Systems，分布式系统"></a>G. Distributed Systems，分布式系统</h3><p>分布式系统指操作系统是分布在网络中的计算机集群中。通过网络实现将多台物理上的计算机形成逻辑上的单台性能强大的计算机。</p><p>因此分布式系统内需要对共享的资源进行管理并且协调所有的组件（计算机）完成目标</p><p>知名的例子有：</p><ul><li>Client/server system</li><li>internet computing system（云服务器）</li></ul><p>分布式系统的优点如下：</p><ul><li>Resources sharing</li><li>Computation speed up – load sharing </li><li>Reliability</li><li>Communications</li></ul><h3 id="H-Parallel-Systems，平行系统"><a href="#H-Parallel-Systems，平行系统" class="headerlink" title="H. Parallel Systems，平行系统"></a>H. Parallel Systems，平行系统</h3><p>平行系统指具有多个CPU的操作系统，多个CPU之间是高度耦合的，他们会共享内存、时钟等等内容。</p><p>这类系统的好处如下：</p><ul><li>Increased throughput </li><li>Economical</li><li>Increased reliability</li><li>Graceful degradation</li><li>Fail-soft system</li></ul><p>此外，根据每个CPU执行的任务是否相同，有对称平行系统和非对称平行系统之分</p><ul><li>Symmetric multiprocessing (SMP) 对称平行系统指CPU之间运行的程序都是一样的</li><li>Asymmetric multiprocessing，非对称平行系统则指CPU之间不是一样的，有的CPU负责管理其他CPU，有的负责进行运算</li></ul><h3 id="I-Embedded-Operating-System，嵌入式系统"><a href="#I-Embedded-Operating-System，嵌入式系统" class="headerlink" title="I. Embedded Operating System，嵌入式系统"></a>I. Embedded Operating System，嵌入式系统</h3><p>所谓嵌入式系统，是指一些特化的用于处理固定任务的、与硬件高度结合的操作系统。例如微波炉中的操作系统</p><p>这类操作系统通常用于对设备进行控制，他们的特点如下：</p><ul><li>Special  purpose system</li><li>Should be customized</li><li>Size can be cut out</li><li>Low energy consumption</li><li>Real time</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220101020047260.png" alt="嵌入式系统存在的地方"></p>]]></content>
      
      
      <categories>
          
          <category> Operating System Concepts Reading Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Operating System </tag>
            
            <tag> Reading Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora图床上传失败解决方案</title>
      <link href="/2021/12/29/typora-tu-chuang-shang-chuan-shi-bai-jie-jue-fang-an/"/>
      <url>/2021/12/29/typora-tu-chuang-shang-chuan-shi-bai-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍了Typora中使用图床上传图片失败的解决方案</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229233841511.png" alt="Typora 图床上传失败"></p><h1 id="Typora图床上传失败解决方案"><a href="#Typora图床上传失败解决方案" class="headerlink" title="Typora图床上传失败解决方案"></a>Typora图床上传失败解决方案</h1><p>我的博客的开发环境是Typora+Hexo+Matery主题，此外为了方便博客的部署，所有的图片使用的都是图床。然而在Typora中使用PicGO图床并不是一帆风顺的，因此本文主要介绍了Typora中PicGO图床出错的一些解决方法</p><h1 id="一、图片上传403错误"><a href="#一、图片上传403错误" class="headerlink" title="一、图片上传403错误"></a>一、图片上传403错误</h1><p>这个错误在我这里发生的现象是这样的，在之前的几个月的使用都是完全正常的，然而某次关机、切换成Windows之后再切换为Ubuntu，Typora的图床就无法使用了，上传图片会报错403。具体的如下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229233841511.png" alt="上传图片403错误"></p><p>这个问题其实是由于时差的问题，因为我是windows和ubuntu双系统，因此开完Ubuntu之后开Windows，时间就会差八个小时，然后在Windows中把时间改对了，在Ubuntu中又会差八个小时。因此这个问题就发生在Ubuntu的事件不对。解决办法很简单，把时间改回来就行了。</p><p>在设置中搜索<code>时间</code>，然后修改即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229154229847.png" alt="修改日期和时间"></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Typora </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统概念读书笔记-第一章：介绍-1 基础概念</title>
      <link href="/2021/12/29/cao-zuo-xi-tong-gai-nian-du-shu-bi-ji-di-yi-zhang-jie-shao-1/"/>
      <url>/2021/12/29/cao-zuo-xi-tong-gai-nian-du-shu-bi-ji-di-yi-zhang-jie-shao-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是《操作系统概念（第九版）》的第一章的读书笔记第一部分，主要介绍了操作系统中的一些基础概念。</p><p>This blog is the first part of reading notes of  <em>Operating System Concepts (Ninth Edition)</em> chapter 1: Introduction, which tells  the basic ideas of Operating System</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228175748055.png" alt="Chapter 1: Introduction"></p><h1 id="Operating-System-Concepts-Chapter-1-Introduction-1-Basic-Concepts"><a href="#Operating-System-Concepts-Chapter-1-Introduction-1-Basic-Concepts" class="headerlink" title="Operating System Concepts-Chapter 1: Introduction-1 Basic Concepts"></a>Operating System Concepts-Chapter 1: Introduction-1 Basic Concepts</h1><p>操作系统概念第一部分是Overview，包括第一章和第二章。</p><p>本章主要介绍了操作系统中一些基本概念和操作系统的发展历史/操作系统的种类，以及操作系统的任务。本章的第一部分主要讲解了操作系统的一些基础概念</p><h2 id="1-What-is-Operating-System"><a href="#1-What-is-Operating-System" class="headerlink" title="1. What is Operating System?"></a>1. What is Operating System?</h2><p>要说明什么是操作系统，还得从什么是计算机说起</p><blockquote><p><strong>What is computer</strong>：</p><p>从硬件上来说，计算机就是一堆硬件，包括鼠标、显示器、CPU、显卡等等；而对于我们用户来说，计算机就是一个黑箱子，我们坐在计算机前面，通过鼠标、键盘等等方式为计算机输入数据，计算机计算后会通过显示屏把输出（图像）输出出来。</p></blockquote><p>然而就像我们去买显卡的时候一样，我们知道显卡可以用来进行图形渲染，带来更好的游戏体验。然而我们在买显卡的时候买到的却是一个硬件，我们也没有办法直接使用</p><p>因此，在我们和计算机的一堆硬件之间存在一个管理员，这个管理员帮助我们管理计算机的硬件，把我们的需求转换为对计算机硬件的调用，<strong>这个管理员就是操作系统</strong>。</p><h3 id="A-操作系统的概念"><a href="#A-操作系统的概念" class="headerlink" title="A. 操作系统的概念"></a>A. 操作系统的概念</h3><p>我们首先需要对操作系统有一个大的认知，即<code>操作系统是一个在用户和硬件之间的程序</code></p><h3 id="B-操作系统的目标"><a href="#B-操作系统的目标" class="headerlink" title="B. 操作系统的目标"></a>B. 操作系统的目标</h3><p>操作系统的目标如下：</p><ul><li>执行用户的程序，并能够简化用户解决问题的过程</li><li>让计算机更加易于使用</li><li>以高效的方式使用计算机的硬件，从而提高性能</li></ul><p>因此说白了，操作系统的目的其实就是两个：向下，<code>高效的使用硬件</code>；向上，<code>让计算机对用户更加易用</code></p><p>因此未来介绍的包括存储管理、内存管理等等都是为了更加易用这个目标，而存储管理则视为了高效的使用硬件</p><h2 id="2-Computer-System-Structure"><a href="#2-Computer-System-Structure" class="headerlink" title="2. Computer System Structure"></a>2. Computer System Structure</h2><p>当我们提到操作系统的时候，通常指的是操作系统这个软件，只不过这个软件和硬件结合的非常紧密。</p><p>而当我们提到计算机系统的时候，计算机系统不仅仅指硬件的集合，实际上还指包括硬件在内的，操作系统等软件的集合。因此计算机系统的结构从下到上如下：</p><ul><li><strong>硬件</strong>：我们的文档需要保存在硬盘中，我们的程序需要被CPU运行，显示器上的图像需要被显卡渲染，网络数据的收发需要网卡……硬件提供了最基础的计算机的资源</li><li><strong>操作系统</strong>：操作系统可以控制、管理各种各样的硬件，并且为多个用户的多种程序调度硬件资源</li><li><strong>应用程序</strong>：应用程序负责调用硬件资源，解决用户的需求，例如文芳编辑器、编译器、汇编器、数据库软件等等</li><li><strong>用户</strong>：用户通过调用引用程序解决他们的问题，用户可以是具体的人，也可以是其他的电脑前的用户（本机是运算发生的地方，而用户在的电脑负责产生运算请求并发到本机）等等</li></ul><p>具体的图示如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229170838604.png" alt="计算机系统的结构图"></p><h2 id="3-Resource-in-Computer-System"><a href="#3-Resource-in-Computer-System" class="headerlink" title="3. Resource in Computer System"></a>3. Resource in Computer System</h2><p>根据上面的讲解，从应用程序的角度和用户的角度来看，计算机系统中的资源可以分为下面的两种：</p><ul><li>硬件资源（应用程序的角度向下看）<ul><li><strong>主机资源</strong>：包括CPU和内存</li><li><strong>外部设备资源</strong>：包括<ul><li>外部存储设备：U盘、固态/机械硬盘、光驱/光盘等等</li><li>外部输入输出设备：键盘（字符作为输入），显示器（图像作为输出），打印机（喷出的油墨作为输出），鼠标（位置作为输入）</li><li>其他设备：例如网线接头</li></ul></li></ul></li><li>软件资源（用户的角度向下看）<ul><li>系统程序：例如操作系统、编译器等等系统的软件</li><li>应用程序：MS Office套装、CAD软件以及用户自己开发的程序等等</li><li>工具软件</li></ul></li></ul><p>具体的结构图如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229173958594.png" alt="计算机系统具有的资源"></p><h2 id="4-Operating-System-Definition"><a href="#4-Operating-System-Definition" class="headerlink" title="4. Operating System Definition"></a>4. Operating System Definition</h2><p>操作系统的定义实际上非常多，从不同的角度能够给出操作系统不同的定义</p><h3 id="A-Resource-Allocator"><a href="#A-Resource-Allocator" class="headerlink" title="A. Resource Allocator"></a>A. Resource Allocator</h3><p>从资源管理的角度，操作系统就是一个资源分配器（包括软件、硬件）。而作为资源分配者，操作系统就需要满足以下的要求：</p><ul><li>管理所有的资源</li><li>兼顾公平与效率，即不同的用户、程序请求同一个资源的时候，系统要确保公平以及效率</li></ul><p>更加具体的，操作系统管理的硬件资源如下：</p><ul><li>CPU管理：CPU的分配和控制，即决定那个程序能用多久的CPU</li><li>内存管理：分配和回收内存空间，关于为什么要进行内存管理在后面会有更多的介绍</li><li>设备管理：分配和控制IO设备，例如把文档以怎么样的方式保存到磁盘上、键盘输入的字符该怎样的处理</li><li>文件管理：管理文件的权限，这个文件谁能看到、谁能修改……</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229200640120.png" alt="操作系统管理的硬件资源" style="zoom:50%;"></p><h3 id="B-Control-Program"><a href="#B-Control-Program" class="headerlink" title="B. Control Program"></a>B. Control Program</h3><p>另外一方面，从操作系统的功能来说，操作系统像一个管理程序，用于：</p><ul><li>防止错误的发生</li><li>阻止对计算机不正确的使用</li></ul><h3 id="C-More-Definition"><a href="#C-More-Definition" class="headerlink" title="C. More Definition"></a>C. More Definition</h3><p>其实操作系统目前并没有一个广泛通用的定义，维基百科上的定义如下</p><blockquote><p><strong>From Wikipedia</strong>：</p><p>操作系统（英语：Operating System，缩写：OS）是一组主管并控制计算机操作、运用和运行硬件、软件资源和提供公共服务来组织用户交互的相互关联的系统软件程序，同时也是计算机系统的内核与基石。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入与输出设备、操作网络与管理文件系统等基本事务。操作系统也提供一个让用户与系统交互的操作界面。</p><p>操作系统的类型非常多样，不同机器安装的操作系统可从简单到复杂，可从移动电话的嵌入式系统到超级电脑的大型操作系统。许多操作系统制造者对它涵盖范畴的定义也不尽一致，例如有些操作系统集成了图形用户界面，而有些仅使用命令行界面，将图形用户界面视为一种非必要的应用程序。</p><p>操作系统理论在计算机科学中，为历史悠久而又活跃的分支；而操作系统的设计与实现则是软件工业的基础与内核。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229201749524.png" alt="维基百科上对操作系统的定义"></p></blockquote><p>从外观上来描述操作系统，它的特点如下：</p><ul><li>买电脑时厂商附带的一切：Windows、MacOS、VMS、Multics</li><li>开机后一直在运行的程序</li></ul><h2 id="5-Dual-mode-of-Operating-System"><a href="#5-Dual-mode-of-Operating-System" class="headerlink" title="5. Dual-mode of Operating System"></a>5. Dual-mode of Operating System</h2><p>实际上操作系统在运行过程中具有两种状态：<strong>用户态（User Mode）</strong>和<strong>内核态（Kernel Mode）</strong></p><ul><li><p><strong>User Mode</strong>：处于用户态的程序仅仅可以执行非特权指令，例如1+1</p></li><li><p><strong>Kernel Mode</strong>：处于内核态的程序可以执行所有的指令，包括特权指令。</p></li></ul><p>通常来说，特权指令指的是一些如果操作不当可能会导致系统崩溃的指令，例如清除内存、重置时钟、读取磁盘等等。因此如果不对这些特权指令加以保护（即所有用户都可以使用），那么垃圾程序员写出来的烂代码很可能就会搞崩系统。</p><p>为了区分用户态和内核态的程序，在硬件（CPU）上通常会用一个比特位来进行标识，称为<strong>模式位（mode bit）</strong>。例如处于用户态的程序user mode bit是1，而处于内核态的程序的user mode bit是0。</p><h2 id="6-System-Call"><a href="#6-System-Call" class="headerlink" title="6. System Call"></a>6. System Call</h2><p>为了保护系统不会因为垃圾程序员导致的崩溃，系统通过不同的模式来保护一些高危的指令。例如对磁盘进行读写的指令如果使用不当可能会造成磁盘损坏，但由于我们在程序中经常会有读写文件的操作，例如C语言的fread、Python的open等等。而文件就保存在磁盘上，因此读写文件在计算机底层就一定会包含对磁盘进行操作的指令。</p><p>只是由于读写磁盘这些特权指令使用的非常频繁，经常在用户态的程序中被调用，因此就需要为用户态的程序提供仅可以在内核态运行的指令的接口/入口/函数API。<strong>这些函数称为系统调用(System Call)</strong>。</p><p>在系统调用的时候，我们的程序会取调用这些系统提供的函数，因此在执行这些函数的时候，程序的控制流会短暂的移交到系统提供的函数中。此时我们程序的模式位会改变为内核态。在内核提供的函数完成调用后，程序控制流会返回我们的程序，此时程序的模式位会改回我们原先的特权态。</p><p>称进行系统调用时，程序控制流转移到系统中为<strong>陷入内核（trap in kernel）</strong>。</p><p>因此一次系统调用的过程中我们程序的控制流和对应的状态位变化如下，横轴为时间。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229211610111.png" alt="系统调用的时序图"></p><h2 id="7-Computer-Startup"><a href="#7-Computer-Startup" class="headerlink" title="7. Computer Startup"></a>7. Computer Startup</h2><p>正如前面所讲，操作系统本身也是一个软件，只不过这个软件和QQ、微信这类软件不同：QQ和微信是运行在操作系统上的软件，他们通过各种各样的系统调用来调用硬件资源，结合自己的逻辑控制与判断完成任务；而操作系统是直接运行在硬件上的，负责管理硬件以及提供各种各样的系统调用。因此尽管两者都是软件，两者所处的层级并不同，正如前面的计算机系统的结构图中展示的一样。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229170838604.png" alt="计算机系统的结构图"></p><p>正是因为这份特殊性，系统这个软件的启动和QQ这类普通的软件启动的方式不同。QQ这类普通软件（Windows上的exe、Linux上的o）我们双击即可运行，这是因为操作系统在背后帮我们干了非常多的事情，例如：申请一块内存空间用来存放QQ这个程序的指令、把QQ这个程序的指令从磁盘中读取出来并放到申请到的内存的位置中去（加载）、调用CPU去解析、执行QQ程序中的指令……</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229214549149.png" alt="操作系统也是一个软件"></p><p>但是系统的启动是完全基于一个裸的硬件的，因此在启动系统的时候并不会像启动QQ一样有操作系统为其准备好各种各样的环境。取而代之的是有一个叫做引导程序（Bootloader）为操作系统准备各种环境，引导程序会首先进行设备自检、初始化周边设备，然后加载操作系统，即从磁盘中读取操作系统内核可执行文件的指令序列，然后复制到内存中。</p><p>因此计算机启动的过程首先运行引导程序，然后由引导程序进行设备的自检，而后引导、初始化操作系统</p><h2 id="8-Computer-System-Organization"><a href="#8-Computer-System-Organization" class="headerlink" title="8. Computer System Organization"></a>8. Computer System Organization</h2><p>前面我们从层次上介绍了计算机系统的结构（Structure），下面从硬件的角度介绍计算机系统的组成（Organization）。</p><p>计算机系统的组成包含多种多样的设备，通常会有：</p><ul><li>一个或多个CPU</li><li>一个或多个磁盘</li><li>一个或多个USB设备</li><li>一个或多个显示器</li></ul><p>然而一个经典的CPU的执行流程是：用户通过键盘鼠标、磁盘等输入输出设备把数据输入（鼠标点击、键盘敲击、读取磁盘中的文件）到计算机，接下来数据被CPU计算得到结果，最后结果通过显示器或者磁盘输出（显示或者保存）。</p><p>而由于多种不同的设备读取到的数据的形式可能不同，而CPU只能够处理一种格式的数据，因此就需要在硬件上有控制器（Device Controller）或者适配器（Device Adapter），他们负责把从磁盘、鼠标、键盘读取到的原始数据处理转化为CPU可以直接处理的数据，然后让CPU进行处理，或者是把CPU处理之后的数据转换为显示器可以显示的数据。</p><p>此外，数据在电路中的传输是以分时的电信号的形式传输的，传播速度为光速，因此需要设备保存下数据，因此就有了存储器（Memory）。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229221140892.png" alt="计算机系统的组成" style="zoom:150%;"></p><h2 id="9-Bus"><a href="#9-Bus" class="headerlink" title="9. Bus"></a>9. Bus</h2><p>上面说到，数据在不同的设备间传递，而每个设备都会有自己的Controller或者Adapter以实现和CPU的交互。数据的传输需要有实体，这个实体在计算机中实际上就是总线（Bus）。</p><p>通过总线我们就可以实现让不同的设备（买来的机器自带的设备还是我们自己外加的附加设备/周边设备/第三方设备）之间进行数据的交互。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229221706606.png" alt="总线让内存和CPU之间进行交互" style="zoom:150%;"></p><h2 id="10-I-O-Operation"><a href="#10-I-O-Operation" class="headerlink" title="10. I/O Operation"></a>10. I/O Operation</h2><p>还是在上面说到，不同的设备每个设备都会有一个控制器/适配器，设备可以通过控制器/适配器和CPU进行数据间的交互。然而通常来说，每个控制器/适配器都会有一个自己的缓存（buffer），用来存储暂时的输入。</p><p>使用buffer的原因也很简单，就是因为设备读取输入的速度的问题。例如我们现在希望从磁盘中读取一个文本文件（例如，三国演义），然后让CPU把这个文本文件里的每个句子在句子末尾添加一个回车，接下来再把处理后的文本文件保存到磁盘中去。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229223014684.png" alt="三国演绎的文本文件"></p><p>然而在读取三国演义的时候有一个问题就是磁盘的读取速度是有上限的，假设一毫秒只能读取文本文件的一半，而作为用户我们当然是希望文本文件一次性被读完，然后被CPU一次性处理完之后保存到磁盘中。</p><p>因此这个时候就是缓存的作用了，buffer可以暂时存储已经读取到的一半的文件，接下来等待后一半读取完了之后统一交给CPU处理。</p><p>其实同样的例子还发生在键盘上，假设我们现在写一个程序，读取用户输入的句子，并将输入的句子打印在屏幕上。那么由于键盘是一次一个字符的传输，因此我们如果希望能够完整的把一句话打印在屏幕上，就需要一个缓冲区来保存先前所有输入的字符，然后等待用户按下回车结束输入，再把缓冲区中的句子发送给CPU，让CPU处理完后交给屏幕显示。</p><p>因此对于CPU而言，CPU的操作就是把数据从内存中移入到某个设备的缓冲区，或者把数据从某个设备的缓冲区中移动到内存中。至于具体的数据在缓冲区的保存和从缓冲器移动到内存都是由设备控制器/适配器完成的。</p><p>称数据从内存到控制器缓冲区/从控制器缓冲区到内存中的一次操作为一次<strong>I/O操作（I/O Operation）</strong>。</p><p>由于I/O操作发生在内存和设备控制器/适配器之间，而每个设备都会有自己的控制器/适配器，因此实际上操作系统可以并发的(Concurrent)和多个设备之间进行I/O操作。</p><blockquote><p><strong>为什么需要内存/主存（内存又称为主存）</strong>：</p><p>我们上面的讲解中说道，各种控制器读取到的数据需要移入内存中才能够被CPU处理，而CPU处理完的数据也需要保存到内存中才能够被设备保存（输出到磁盘或者屏幕上）。</p><p>那么为什么数据需要经过内存/主存？原因就在于<strong>各种设备运行的速度/访问的时间不同</strong></p><p>借用<em>现代操作系统</em>中的图片，CPU从寄存器中获取需要处理的数据只需要1纳秒，从内存中获取需要处理的数据需要10纳秒，而从磁盘中获取数据则需要10毫秒，基本上$10^3$的数量级的差距。</p><p>因此如果CPU直接从设备中获取需要处理的数据，那么CPU就不得不等待这些设备，因此就会浪费大量的时间。所以提高CPU的利用率，降低等待时间/加快速度，所有的数据都需要被放到内存中去。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229224334928.png" alt="各种设备的访问时间"></p></blockquote><h2 id="11-Interrupt"><a href="#11-Interrupt" class="headerlink" title="11. Interrupt"></a>11. Interrupt</h2><p>上面说道，I/O操作是内存和设备控制器的缓冲区之间的数据交换，这个过程的目的在于加快稍后CPU数据的获取（CPU可以直接从内存中获取数据而非等待设备控制器）。一个典型的CPU的I/O操作的流程其实如下（假设还是上面的读取文件后给每个句子后面添加回车）：</p><ul><li>CPU首先发出通知给控制器，要求控制器把数据放到内存中的某个位置上去</li><li>接下来CPU发出这样的指令给控制器后就继续去执行其他的程序的指令去了，而在CPU执行其他指令的这段时间，控制器就会去设备上获取数据（读取文件或者等待用户输入）</li><li>当控制器完成读取后，会发送消息给CPU，通知CPU读取已经完成。</li><li>CPU在收到控制器发来的消息后，会中止当前正在执行的指令，继续去每个句子后添加回车。</li></ul><p>具体的时序图如下：</p><pre class="line-numbers language-mermaid"><code class="language-mermaid">    sequenceDiagram    CPU->>USB Port 1: Fetch the data from file zzzzzz for me    USB Port 1 -->> Main Memory: Put data1： xxxxxxx on yyyyyyy    USB Port 1 -->> Main Memory: Put data2： xxxxxxx on yyyyyyy    USB Port 1 -->> Main Memory: .....    USB Port 1 -->> Main Memory: Put dataN： xxxxxxx on yyyyyyy    USB Port 1 -->> CPU: All data you need is put on yyyyyyy    CPU -->> Main Memory: I need data on yyyyyy    Main Memory -->> CPU: Here is your data: xxxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230191239374.png" alt="CPU与控制器的交互"></p><p>因此，称在某些情况下计算机中止当前程序的运行，并转而去运行其他的程序的现象为<strong>中断(Interruput)</strong>。上面的例子就是典型的I/O中断，即由于输入输出导致的中断。而导致中断发生的事件称为<strong>中断事件(Interrupt Event)</strong>。</p><p>除了I/O中断以外，还有很多类型的中断，例如上面的执行系统调用（System Call），以及CPU执行用户程序时发生的运算错误，例如除0错误。</p><p>实际上中断是计算机系统中非常常用的机制，因为中断可以让原有的程序放弃CPU并且让CPU执行新的程序。</p><p>此外，中断分为两类，一类是<strong>可屏蔽的中断（Maskable Interrupt）</strong>，一类是<strong>不可屏蔽的中断（Non-Maskable Interruptable）</strong>。可屏蔽的中断表示中断事件导致的中断并不会立即中止当前程序的运行。CPU可能在稍后来响应这个中断事件，例如上面的把文件从磁盘读入到内存完成后，控制器向CPU发送的中断可能并不会立即让CPU中止运行当前的程序，来处理内存中的程序。因为CPU当前运行的程序可能是具有更高优先级的。例如在后面我们会讲到的同步。当前程序会特地的禁止CPU响应中断。</p><p>此外，CPU对可屏蔽的中断的另外一种响应就是忽略中断。</p><p>对于不可屏蔽的中断，CPU会立即中断当前运行的程序，然后处理中断。例如如果上面读取完成的事件发出的是不可屏蔽的中断的话，CPU就会立即处理这个中断，而处理中断的方式就是继续运行我们的文本处理程序。</p><p>根据中断发生的原因，中断可以分为三类：</p><ul><li><strong>程序产生的中断</strong>：程序产生的中断是用户的程序在运行的过程中，某些意外事件（中断事件）发生，导致向CPU发出了中断。常见的程序产生的中断有：除0中断、溢出中断、系统调用（虽然系统的函数被视为程序的一部分，但是系统的函数本身也可以视为一段程序，因此调用系统的函数就会”中止”我们的程序，而运行系统的程序（新的程序），因此在这个含义上，系统调用也可以视为中断）</li><li><strong>I/O中断</strong>：I/O中断即指由I/O设备产生的中断，常见的如上面的读取完成中断，此外还有文件不存在这类中断</li><li><strong>计时器中断</strong>：由计算机系统上的一个叫做计时器的硬件产生的中断（关于计时器稍后会讲）。</li></ul><h2 id="12-Timer"><a href="#12-Timer" class="headerlink" title="12. Timer"></a>12. Timer</h2><p>计时器本身是在计算机硬件系统上的一个硬件，类似于手表中的石英可以以固定的频率震动，计时器可以以固定的时间间隔（Unix中是1/60秒）发出一个中断。这个中断通常称为<strong>计时器中断（Timer Interrupt）</strong>。这个固定的时间间隔称为<strong>时间片（Time Share）</strong>。</p><p>不同于磁盘读取完成中断，计时器中断的意义不在于运行某个特定的中断处理程序，而在于通知操作系统（当前程序），他（你）已经占用CPU够久了，该把CPU让给别的程序来运行了。</p><p>因此计时器的目的其实就在于通过分时的CPU占用实现类似于并行的效果，提升多用户使用的体验（多道程序）。而之所以需要不断的中断的原因在于CPU（假设只有一个核心，虽然现在的CPU经常都是8核、16核）一次只能运行一个程序，因为一个程序被编译出来之后可能只有几百KB，但是在汇编层次的机器码而言，会有成千上万的指令。这些指令运行和解释起来就需要一个CPU（的核心）。</p><p>因此，操作系统中的计时器机制的特点如下：</p><ul><li>通过简单的计时 —&gt; 中断，避免了无穷循环和硬件资源的永久霸占</li><li>在一定的时间间隔后会发出一个中断</li><li>当中断发生后，当前进程可能会被kill掉，而其占用的资源会被释放，例如加锁的文件（文件加锁在后面会讲，但是目前只需要明白为了避免文件被两个程序同时修改导致的不同步，程序在修改文件的时候通常会给文件加锁，避免其他人同时修改文件）</li></ul><p>此外，计时器有的时候也被称为<strong>看门狗（Watch Dog Timer）</strong></p><p>虽然我们上面说计时器中断并不会类似文件读取完成中断一样，会调用我们指定的中断处理程序（我们的加回车程序）来处理中断。但是其实计时器中断也会去调用一个特殊的中断处理程序。这个中断处理程序是系统里已经写好的程序。这个程序的目的就是把当前程序的一些变量从寄存器中保存到内存中去，然后决定下一个需要运行的程序，接下来把下一个需要运行的程序的变量等内容从内存中加载到寄存器中去。</p><h2 id="13-Interrupt-Handling"><a href="#13-Interrupt-Handling" class="headerlink" title="13. Interrupt Handling"></a>13. Interrupt Handling</h2><p>当中断发生的时候（例如计时器中断），操作系统具体是如何完成整个中断的过程的？</p><p>首先我们需要明白，中断的定义就是中止运行当前程序，然后去运行新的程序。因此对中断的处理其实就包含两步，第一步就是中止当前程序的运行，第二步就是运行新的程序。</p><p>对于中止当前程序的运行，需要做的首先就是保存当前程序运算到中间得到的一些中间变量。例如我们让一个程序循环从1加到1000，例如：</p><pre class="line-numbers language-python"><code class="language-python">sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">+=</span> i<span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那么在加到50的时候程序可能由于时间片用完了，导致程序需要被中断，CPU转而去运行别的程序。此时需要保存循环变量i。以及保存在寄存器的中间变量sum。</p><p>接下来第二步就是运行新的程序，即<strong>中断处理程序(Interruput Handler或者Interrupt Service Routine，ISR)</strong>。在计算机内部，中断的表示是利用一个整数来表示的。而接下来去运行中断处理程序处理中断处理程序。由于中断可能会有很多种，因此中断处理程序也会有很多。为此需要指定一个中断 — &gt;中断处理程序的映射表，这个映射表称为<strong>中断表(Interrupt Table)</strong>。一个典型的中断表如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230152940124.png" alt="中断表" style="zoom:50%;"></p><p>如果是上面假设的计时器中断（中断的目的就在于把CPU让给下一个程序）的话，那么就会去运行计时器中断处理程序，计时器中断处理程序会从CPU的就绪队列中挑去下一个需要执行CPU的进程，然后把这个进程的变量和程序计数器加载到寄存器中，从而开始运行下一个程序。</p><p>以上就是一个典型的中断处理的过程。</p><p>除了正常的中断处理意外，还有可能发生的一个情况就是中断冲突。</p><p>在一个操作系统中，中断发生的次数非常多，每秒可能就会有一百多次。由于中断发生的原因可能会非常多，例如上面的IO中断，那么就可能会出现一个现象就是系统正在处理一个中断的时候另外一个中断发生了。例如上面的磁盘读取完成中断发生后，正在运行我们后续的程序的时候（中断处理程序），另外一个中断事件发生了，例如时间片用完。此时就会发生中断的冲突。</p><p>因此为了处理多个中断冲突的情况，系统为不同的中断设定不同的优先级。高优先级的中断会中断掉低优先级的中断处理程序，而低优先级的中断会等待高优先级的中断完成。注意，中断冲突发生的情况一定是CPU当前正在运行一个中断的处理函数。</p><p>因此处理中断的时候就会有两种处理方式，第一种就是A图中的低优先级的Y中断的中断处理函数等待高优先级的X中断的中断处理程序完成，第二种就是B图中的高优先级的Y中断的中断处理程序中断了低优先级的X中断的中断处理程序。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230144720338.png" alt="两种中断冲突处理方式"></p><h2 id="14-I-O-Processing"><a href="#14-I-O-Processing" class="headerlink" title="14. I/O Processing"></a>14. I/O Processing</h2><p>正如前面所说的，I/O指的是由CPU发起的，内存和I/O设备之间数据的交互。前面我们只是泛泛的说了一下系统是如何处理输入输出请求的。其实在真实的情境下，I/O的处理分为两种：</p><ul><li><strong>同步I/O（Synchronous）</strong>：同步I/O指的是当CPU向控制器发出I/O请求后，CPU会空转以等待控制器完成I/O。在此期间CPU不会运行其他的任何程序。</li><li><strong>异步I/O（Asynchronous）</strong>：异步I/O指的是当CPU先控制发出I/O请求后，CPU会立马中断发出I/O请求的程序（例如添加回车的程序），然后运行别的程序，一直直到控制读取完成后向CPU发出中断。当CPU收到中断之后就会中断其他的程序，转而继续运行添加回车的程序（当然这个取决于当前运行的程序和中断的优先级）。</li></ul><p>这两种I/O处理的方式如下图，A图中同步的I/O随着事件流逝，user占用的CPU会等待读取完成的中断。而B图中异步的I/O则是发出I/O请求后立即返回，同时user占用的CPU立刻去运行其他的程序。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230154003231.png" alt="两种I/O处理方式"></p><p>此外，由于每个I/O设备都会有自己的控制器，因此每个I/O设备可能都会处于不同的状态（是否在响应I/O请求）。因此在系统中有一张表来维护每个设备的状态，这个表称为<strong>设备状态表(Device-Status Table)</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230160557297.png" alt="设备状态表"></p><h2 id="15-Storage-Structure"><a href="#15-Storage-Structure" class="headerlink" title="15. Storage Structure"></a>15. Storage Structure</h2><p>在计算机系统中，有不少硬件都可以进行数据的存储，例如寄存器、磁盘、内存(主存)，甚至包括控制器的缓冲区。但是计算机的存储结构通常指磁盘、内存这类专门用于存储的硬件在内的存储系统。</p><p>通常，计算机的存储结构中包含以下硬件：</p><ul><li><strong>内存/主存（Main Memory）</strong>：主存是唯一的CPU可以直接获取数据的设备。内存中的数据是<strong>易失性的（volatile）</strong>，即断电后数据会全部遗失。</li><li><strong>二级存储（Secondary Memory）</strong>：二级存储是对主存的扩展，其内部的数据是<strong>非易失性的（nonvolatile）</strong>。</li><li><strong>磁盘（Magnetic Disks）</strong>：磁盘是由可以保存磁场的材料制成的。数据在其内部以磁的形式保存<ul><li>通常而言，数据在磁盘上按照<strong>磁道（Track）</strong>、<strong>扇区（Sector）</strong>的形式记录在磁盘上。</li><li>磁盘上的<strong>设备控制器(Disk Controller)</strong>帮助完成计算机和磁盘之间的沟通，包括磁信号到电信号的转换。</li></ul></li></ul><p>通常在考虑存储器的选择的时候，会权衡速度、价格和容量三个方面的因素。一般而言速度越快、容量越大，价格就会越高。因此系统中存储器的分层结构（Storage-Device Hierarchy）如下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230163108041.png" alt="存储器的分层结构" style="zoom:150%;"></p><p>从上到下单位价格容量越来越低，而速度越来越慢。</p><p>在前面放过一张图，图中描述了CPU访问每个设备、获取到数据需要的时间。一般来说访问内存需要10纳秒左右的时间，虽然寄存器的访问速度非常快，但是CPU内板载的寄存器首先非常有限，其次价格非常高昂，因此退而求其次，就有了<strong>高速缓存(Cache)</strong>。</p><p>计算机中的二八定律指出80%的访问都是针对20%的数据的，因此可以把内存中一些经常被访问的数据加载到高速缓存中去，CPU每次要从内存中获取数据前先从高速缓存中去看看，如果高速缓存中有的话就直接获取数据即可，如果没有再去内存中获取数据。</p><p>因此如果绝大多数CPU需要的数据都在缓存中的话，系统的运行速度实际上可以有极大地提升。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229224334928.png" alt="各种设备的访问时间"></p><h2 id="16-Multiprocessors"><a href="#16-Multiprocessors" class="headerlink" title="16. Multiprocessors"></a>16. Multiprocessors</h2><p>前面我们所有的讲解都是基于一个CPU，并且CPU中只有一个核心这个前提展开的，然而在现代的计算机中，有些系统可能不止有一个CPU，换而言之我们现在的计算机系统有些是多处理器的（Multiprocessors）的系统。</p><p>多处理器的系统有如下的好处：</p><ul><li><strong>大吞吐量（Increased Throughput）</strong></li><li><strong>便宜（Economy of scale）</strong></li><li><strong>更加可靠/容错更好（Graceful Degradation/fault tolerance）</strong></li></ul><p>通常来说，多处理器系统有两种架构：</p><ul><li><p><strong>非对称多处理器架构（Asymmetric Multiprocessing）</strong>：对称处理多处理架构指处理器之间是对称的，即在操作系统看来，没有多个处理器，只有一个处理器，所有的线程不加以区分，具体由那个处理器执行是随机的，所有处理器之间共享内存。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230165903630.png" alt="对称多处理器架构"></p></li><li><p><strong>对称对处理器架构（Symmetric Multiprocessing）</strong>：非对称多处理架构指处理器与处理器之间是非对称的，有些处理器专注于处理用户的程序（线程），而有些处理器则专注于处理系统线程</p></li></ul><p>两者的对比图如下：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230170031905.png" alt="Asymmetric v.s. Symmetric"></p><h2 id="17-Multicore"><a href="#17-Multicore" class="headerlink" title="17. Multicore"></a>17. Multicore</h2><p>前面我们说了可能存在不止一个处理器的系统，其实现在的计算机中一个处理器有多个核心，类似于多处理器的系统架构，多核心的CPU的好处和多处理器的系统的好处是类似的。</p><p>多核心的CPU主要有三种设计：</p><ul><li><p><strong>共享缓存（Shared Cache）</strong>：共享缓存的CPU中的多个核心之间会共享cache，而运算则是独立的。知名的一些产品有：IBM POWER4/5 family、Sun UltraSPARC-IV、Fujitsu SPARC64-VI、Sun Niagara、Intel Yonah/Merom family</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230170816531.png" alt="共享缓存的CPU设计"></p></li><li><p><strong>共享IO接口（Shared I/O Interface）</strong>：CPU可以通过总线和其他各个设备之间进行数据的交互，例如和内存。而共享I/O接口的多核处理器的设计则是两个处理器有单独的运算单元和缓存，只有I/O接口是共享的。一些知名的产品包括：Intel Itanium2、AMD dual-core Opteron </p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230171118342.png" alt="共享I/O接口的CPU"></p></li><li><p><strong>共享外壳(?)（Shared data packet）</strong>：这种多核心CPU的设计两个核心基本上就是独立的CPU，我实在不知道怎么翻译data packet……</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211230171323203.png" alt="共享外壳的CPU"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Operating System Concepts Reading Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Operating System </tag>
            
            <tag> Reading Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统概念读书笔记-第零章：概览.md</title>
      <link href="/2021/12/28/cao-zuo-xi-tong-gai-nian-du-shu-bi-ji-di-ling-zhang-gai-lan-md/"/>
      <url>/2021/12/28/cao-zuo-xi-tong-gai-nian-du-shu-bi-ji-di-ling-zhang-gai-lan-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是《操作系统概念（第九版）》读书笔记系列的第一篇文章，主要讲述我为什会编写这一系列的文章以及本系列文章的规划。</p><p>This article is the overview of series article: reading notes of  <em>Operating System Concepts (Ninth Edition)</em>.</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229231836302.png" alt="操作系统概念"></p><h1 id="操作系统概念读书笔记-第零章：概览"><a href="#操作系统概念读书笔记-第零章：概览" class="headerlink" title="操作系统概念读书笔记-第零章：概览"></a>操作系统概念读书笔记-第零章：概览</h1><h2 id="1-Why-Learning-Operating-System"><a href="#1-Why-Learning-Operating-System" class="headerlink" title="1. Why Learning Operating System?"></a>1. Why Learning Operating System?</h2><h3 id="A-From-the-aspect-of-own-capability"><a href="#A-From-the-aspect-of-own-capability" class="headerlink" title="A. From the aspect of own capability."></a>A. From the aspect of own capability.</h3><p>操作系统是一种特殊的软件，它下可以沟通硬件，上可以为用户的程序提供服务，连接了人与硬件。操作系统。各种算法、优化、设计思想的集大成者，巨型工程的难得成功案例</p><p>学习操作系统本身就能够提升我们的代码水平，因为其实写代码的时候遇到的很多问题是与底层机制相关的，如果不学底层这些知识，就会在遇到问题的时候束手无策。因此为我们想要写出来更好的程序、更好的操作计算机就需要学习操作系统。</p><h3 id="B-From-the-aspect-of-school-courses"><a href="#B-From-the-aspect-of-school-courses" class="headerlink" title="B. From the aspect of school courses."></a>B. From the aspect of school courses.</h3><p>另外一方面，操作系统是计算机科学相关专业学生的必修课，我也不例外。因此学习操作系统的另外一方面就是要分数。虽然我不太喜欢内卷，但是基础的分数还是必要的。</p><h2 id="2-Why-this-series-of-blogs"><a href="#2-Why-this-series-of-blogs" class="headerlink" title="2. Why this series of blogs"></a>2. Why this series of blogs</h2><p>写这系列博客的原因其实有很多，首先是作为学习的笔记，在未来需要的时候可以快速的回忆起来。</p><p>其次是作为我学习过操作系统的证据，毕竟需要记录可以证明我曾经学习过这些东西，</p><h2 id="3-Why-Operating-System-Concepts"><a href="#3-Why-Operating-System-Concepts" class="headerlink" title="3. Why Operating System Concepts?"></a>3. Why <em>Operating System Concepts</em>?</h2><p>学习是需要媒介的，无论是通过视频（网课）、看书（PPT）还是上课。对于我来说，效率最高的方式就是看书，此外由于学校里的课程使用的教材是《操作系统概念》，因此就选择阅读这本书来进行学习。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229231836302.png" alt="《操作系统概念》"></p><p>此外关于操作系统的书有两种，一种是面向新手的、零基础的介绍操作系统的概念的书，例如这本操作系统概念；另外一种是面向以及有经验的、面向开发的操作系统的书，例如Linux内核完全剖析。</p><p>第一次学习操作系统当然是要学基础的、介绍概念的书，未来提升自己、动手实现一个内核的时候再参考Linux内核完全剖析这类书。</p><h2 id="4-Overview-of-Operating-System-Concepts"><a href="#4-Overview-of-Operating-System-Concepts" class="headerlink" title="4. Overview of Operating System Concepts"></a>4. Overview of <em>Operating System Concepts</em></h2><p>操作系统概念这本书主要分为以下几个大部分：</p><ul><li>概述：Overview，1-2章</li><li>进程管理：Process Management，3-7章</li><li>内存管理：Memory Management，8-9章</li><li>存储管理：Storage Management，10-13章</li><li>保护和安全：Protection and Security，14-15章</li><li>高级话题：Advanced Topics，主要讲解了虚拟化技术和分布式系统，16-17章</li><li>案例分析：Case Study，讨论了MacOS、Linux、Windows 7、Free BSD这些操作系统，18-19章</li></ul><p>本系列文章也将根据这些内容进行展开。</p>]]></content>
      
      
      <categories>
          
          <category> Operating System Concepts Reading Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Operating System </tag>
            
            <tag> Reading Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下QQ和微信解决方法</title>
      <link href="/2021/12/28/ubuntu-xia-qq-he-wei-xin-jie-jue-fang-fa/"/>
      <url>/2021/12/28/ubuntu-xia-qq-he-wei-xin-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<blockquote><p>QQ和微信作为国民级的应用，无论是聊天还是传输文件都非常的方便。本文介绍了如何在类似Ubuntu这类的Linux平台上使用微信和QQ。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229230820817.png" alt="最终效果图"></p><h1 id="Ubuntu-Linux下QQ和微信解决方法"><a href="#Ubuntu-Linux下QQ和微信解决方法" class="headerlink" title="Ubuntu/Linux下QQ和微信解决方法"></a>Ubuntu/Linux下QQ和微信解决方法</h1><p>作为一个开发者，通常在进行开发的时候往往会选择使用Ubuntu、CentOS等Linux发行版作为开发的平台。然而中国的开发者难以避开的就是QQ、微信等等应用。除了聊天以外，QQ、微信的一个重要的功能就是在多端设备之间传输文件（电脑—&gt;手机、平板—&gt;电脑）。然而QQ和微信都仅仅支持MacOS和Windows这两大平台，因此本文就介绍了在Ubuntu/Linux平台上使用QQ和微信的方法。</p><h2 id="方案一：虚拟机"><a href="#方案一：虚拟机" class="headerlink" title="方案一：虚拟机"></a>方案一：虚拟机</h2><p>微信和QQ都支持windows平台，因此使用虚拟机的话就是我们在ubuntu上安装一个windwos的虚拟机，然后在虚拟机中安装qq和微信。</p><p>使用虚拟机的原因在于使用docker和wine等方式使用QQ和微信都只是权宜之计，只能够解决某一个版本的QQ和微信的使用。此外一个API还会可能有问题，因此如果想到比较完美的使用体验就还是需要虚拟机。</p><h3 id="1-检查内存大小"><a href="#1-检查内存大小" class="headerlink" title="1. 检查内存大小"></a>1. 检查内存大小</h3><p>使用虚拟机的一个大问题就是需要电脑有足够大的内存，这样在运行windows虚拟机的时候就不会很卡。</p><p>由于我的机器的性能还是不错的，内存有32个G，因此对我来说最合适的解决方案就是安装一个Windows的虚拟机。</p><p>在后续的步骤前首先需要查看自己的机器的内存和交换空间的大小，使用下面的命令，就可以看到。</p><pre class="line-numbers language-shell"><code class="language-shell">watch free -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228173025146.png" alt="我的机器的内存信息"></p><h3 id="2-安装Virtualbox虚拟机"><a href="#2-安装Virtualbox虚拟机" class="headerlink" title="2. 安装Virtualbox虚拟机"></a>2. 安装Virtualbox虚拟机</h3><p>目前运行比较流畅的虚拟机就是Oracle的VirtualBox和VMware公司的VMware两个软件。由于Virtualbox免费并且多平台适用的的特点（VMware收费），本文使用VirtualBox来作为虚拟机的软件。</p><p>安装VirtualBox虚拟机使用下面的命令就行，由于我已经安装过了，因此不会有任何反应</p><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get install virtualbox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228173626767.png" alt="安装VirtualBox"></p><p>安装完了之后我们就可以在命令行中通过virtualbox命令或者在应用程序图标里点击运行VirtualBox，这里继续使用命令行</p><pre class="line-numbers language-shell"><code class="language-shell">virtualbox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们就能够看到VirtualBox开始运行。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228173825872.png" alt="image-20211228173825872"></p><h3 id="3-下载windows镜像"><a href="#3-下载windows镜像" class="headerlink" title="3. 下载windows镜像"></a>3. 下载windows镜像</h3><p>windows的镜像文件我们可以直接取<a href="https://www.microsoft.com/zh-cn/software-download/windows10ISO">windows的官网</a>上下载：<a href="https://www.microsoft.com/zh-cn/software-download/windows10ISO。考虑到浏览器本身就会占用很多的资源，影响下载速度，因此使用wget从命令行加速下载。">https://www.microsoft.com/zh-cn/software-download/windows10ISO。考虑到浏览器本身就会占用很多的资源，影响下载速度，因此使用wget从命令行加速下载。</a></p><p>我们选择完windows版本之后会看到官网给出的两个下载链接，选择自己需要的版本然后复制链接即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228174324033.png" alt="复制下载链接"></p><p>接下来在命令行中wget下载即可，注意复制来的网页链接中有<code>(</code>之类的shell的语法字符，因此需要用<code>""</code>把网址包围起来禁止转义</p><pre class="line-numbers language-shell"><code class="language-shell">wget -c "你的下载地址"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228174604765.png" alt="下载Windows的镜像文件"></p><p>然后耐心等待即可。下载完大小5.5G左右</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228190833912.png" alt="下载完成的镜像文件"></p><p>最后我们给这个文件改个名字，把后缀改成iso，因为稍后VirtualBox是根据后缀名来识别文件的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228192040466.png" alt="修改后的文件"></p><h3 id="4-创建虚拟机"><a href="#4-创建虚拟机" class="headerlink" title="4. 创建虚拟机"></a>4. 创建虚拟机</h3><p>点击右上角的<code>新建</code>，然后选择虚拟机文件的存储位置和对应的系统，完成后点下一步。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228190934329.png" alt="虚拟机的基本设置"></p><p>接下来给虚拟机分配内存，这个就看个人了，我的内存比较大，所以就给虚拟机分配12G内存</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228191153552.png" alt="内存分配"></p><p>接下来给虚拟机的文件分配大小，默认即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228191420175.png" alt="为虚拟机分配磁盘1"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228191450549.png" alt="为虚拟机分配磁盘2"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228191511960.png" alt="为虚拟机分配磁盘2"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228191536355.png" alt="为虚拟机分配磁盘3"></p><h3 id="5-安装windows虚拟机"><a href="#5-安装windows虚拟机" class="headerlink" title="5. 安装windows虚拟机"></a>5. 安装windows虚拟机</h3><p>上面我们只是用VirtualBox创建好了所有需要的环境，接下来我们就是要把windows安装进去</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228191700557.png" alt="点击设置"></p><p>然后在存储中点击盘片，选择windows的映像文件</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228191834378.png" alt="选择windows的映像文件"></p><p>然后点击启动即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228192121402.png" alt="点击启动"></p><p>然后按照指引进行安装即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228192211784.png" alt="安装windows"></p><p>安装完之后的分辨率有点问题，因此我们还需要设置一下分辨率</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228200126547.png" alt="有问题的分辨率"></p><p>点击<code>设备</code>—&gt;<code>安装增强功能</code>，然后按照提示安装即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228200320807.png" alt="安装增强功能"></p><p>安装完成之后在C盘外有一个程序，点击运行即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228201049520.png" alt="image-20211228201049520"></p><p>安装完之后重启，就可以在视图中进行设置，选择自动调整窗口大小即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228202752076.png" alt="全屏显示"></p><p>最后在设置里设置双向剪贴板</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211228203017531.png" alt="设置共享剪切板"></p><h3 id="6-安装微信和QQ"><a href="#6-安装微信和QQ" class="headerlink" title="6. 安装微信和QQ"></a>6. 安装微信和QQ</h3><p>最后安装微信和QQ即可，最终效果图如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211229230820817.png" alt=""></p><p>此外，我们安装完的Windows实际上是未激活的的Windows，只能够使用一些有限的功能。为此，要么去微软官方买一个激活码，或者去淘宝买一个激活码即可。</p>]]></content>
      
      
      <categories>
          
          <category> Linux实用技巧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Linux </tag>
            
            <tag> QQ </tag>
            
            <tag> 微信 </tag>
            
            <tag> Wechat </tag>
            
            <tag> Virtualbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A*算法-Python实现</title>
      <link href="/2021/12/21/a-suan-fa-python-shi-xian/"/>
      <url>/2021/12/21/a-suan-fa-python-shi-xian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要提供了Python版本的A*路径规划算法实现，并在此基础上提供了命令行和基于Matplotlib的GUI用户界面（User Interface）</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/a_star.gif" alt="完整效果"></p><h1 id="A-算法-Python实现"><a href="#A-算法-Python实现" class="headerlink" title="A*算法-Python实现"></a>A*算法-Python实现</h1><p>路径规划算法是计算机届中非常重要的算法，在不少领域都能够看到路径规划算法的应用，最直接的应用例如打车软件为你规划出路径、迷宫问题的求解等等；而复杂一些的、不直接的应用如六自由度机械臂在空间中运动轨迹的规划可以看做是在六维空间的路径规划、火星车在火星表面的探索等等都可以视为路径规划问题，从而使用路径规划算法进行求解。</p><p>路径规划算法大体上可以分为两类：<strong>静态路径规划</strong>以及<strong>动态路径规划</strong>。所谓静态静态路径规划指的是提前已知全局地图的前提下进行路径规划；而动态路径规划则指的是预先并不知道全局地图或者仅知道全局地图的一部分，在此基础上对全局地图进行探索的同时动态的利用获取到的信息指导路径规划，最终达到终点。在我们的认知上，一般当然是动态路径规划算法会好很多，因为我们往往并不知道全局地图，而且对于我们人类来说，在一个陌生环境下进行路径规划、到达终点更是我们所希望的。然而在现实中在一些场景中确实全局地图是可以提前获得的，因此针对这些场景，开发出来资源占用更少、速度更快、路径更优的算法就还是有必要的。</p><p>其实动态路径规划更进一步，在探索的构建出来全局地图，那就成了SLAM问题了，即同时定位与建图（Simultaneous Localization And Mapping，SLAM）。关于SLAM本文就不再深入了。</p><p>本文将要介绍的A<em>算法就是属于静态路径规划算法的其中一种。在诸多的静态路径规划算法里，A\</em>算法可以和暴力搜索（广度优先、深度优先）一样，获得最优的路径，并且资源消耗远远小于广度优先和深度优先。因此有广泛的应用。</p><p>本文将在介绍A*算法的基础上提供一种A*算法的Python实现，并在此基础上讲解实现的代码</p><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>其实我现在是一个大二的计算机系学生，最近数据结构课程的配套实验要求学生从十四个题中选择四个来做。本篇博客就是对应的迷宫问题的求解代码。求解问题比较简单，但是这样就太没有意思了，所以在实现文本字符的迷宫求解基础上，我想为自己带来一些挑战，增加一些趣味性与难度。</p><p>因此在基础的求解迷宫问题的要求上，我利用Matplotlib中的Interactive Plotting Method将路径规划的过程以GUI的形式表达出来，并在此基础上提供地图绘制、地图保存等一系列功能，最后完成一个不错的程序。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211221220005902.png" alt="数据结构算法实验"></p><h2 id="1-A-算法"><a href="#1-A-算法" class="headerlink" title="1. A*算法"></a>1. A*算法</h2><p>其实关于A<em>算法并没有什么好说的，网上不少博客对A\</em>算法都有了非常深入的介绍，因此我这里就不在赘述了，避免班门弄斧。</p><p>而对于A*算法，需要理解的关键之处就是在启发值的运用。启发值描述了当前点到终点的估计距离，因此相比于深度有限和广度优先，A*算法每次都会去寻找离终点距离比较近的点作为下一个点，从而避免了漫无目的、低效率的遍历。</p><p>此外，算法中的OpenList和CloseList其实指的就是已探索区域的边缘和已经探索区域的内部，因此每次进行下一次探索的时候从OpenList里面找出来点作为下一个探索的点即可。而一旦这个点被探索完毕，将其加入到CloseList中即可，即表示当前点已经被考虑过。</p><p>最后算法的结束条件就是当终点已经在CloseList中了，表示已经找到了一条路径，此时对CloseList中的点进行回溯即可找到路径，因为CloseList中的探索区域已经蕴含了路径的信息；此外还要注意找不到路径时候的结束条件，避免找不到路径而陷入死循环。</p><p>上面是我对于A*算法的理解，如果需要学习A*算法的话，其实B站上、知乎上有很多不错的讲解。这里就贴出来百度百科和维基百科的介绍</p><blockquote><p><strong>From Wikipedia</strong>：</p><p>A<em> (pronounced “A-star”) is a graph traversal and path search algorithm, which is often used in many fields of computer science due to its completeness, optimality, and optimal efficiency. One major practical drawback is its  $O(b^{d}$) space complexity, as it stores all generated nodes in memory. Thus, in practical travel-routing systems, it is generally outperformed by algorithms which can pre-process the graph to attain better performance, as well as memory-bounded approaches; however, A</em> is still the best solution in many cases.</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211222143802336.png" alt="维基百科上对A*算法的介绍"></p><p><strong>From BaiduBaike</strong>：</p><p>A*算法，A*（A-Star)算法是一种静态路网中求解最短路径最有效的直接搜索方法，也是解决许多搜索问题的有效算法。算法中的距离估算值与实际值越接近，最终搜索速度越快。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211222143914743.png" alt="百度百科上对A*算法的介绍"></p></blockquote><h2 id="2-实现思路"><a href="#2-实现思路" class="headerlink" title="2. 实现思路"></a>2. 实现思路</h2><p>针对不同的功能，整个程序的实现，主要分为三个层次（软件分层的思想）：</p><ol><li><strong>核心层</strong>：负责GUI的显示（地图的绘制与更新）、地图的加载与保存、键盘鼠标等事件对应的回调函数（信号处理函数）的绑定</li><li><strong>算法实现层</strong>：负责A*算法的实现</li><li><strong>用户界面层</strong>：负责提供命令行用户界面，从而实现<del>高级感</del>（逼格）</li></ol><h3 id="1-核心层"><a href="#1-核心层" class="headerlink" title="1. 核心层"></a>1. 核心层</h3><p>核心层的具体任务为维护全局地图以及进行地图的保存，因此代码也是围绕这两大内容进行编写的。</p><h4 id="1-地图的维护"><a href="#1-地图的维护" class="headerlink" title="1. 地图的维护"></a>1. 地图的维护</h4><p>对于路径规划问题，其核心维护对象就是全局地图地图，因为地图的保存、与加载；GUI的显示以及路径规划的实现都需要地图上区域的状态，因此在核心层首先需要实现的的就是地图。</p><ul><li>首先是关于地图的表示。对于地图本身而言，由于目前进行的是二维的路径规划，因此可以利用一个二维数组来表示。</li><li>其次是地图在磁盘上的表示。为了方便保存之后方便读取、加载以及人类的理解，可以将二维数组保存为csv文件从而序列化到磁盘上，而在加载地图的时候再从磁盘上反序列化csv文件到内存，从而读取出来地图。</li><li>最后是地图中障碍物的表示。由于地图中的区域会有多种状态，例如是否为障碍物（是否可行），其次在进行A*路径规划的时候也会为地图中的区域标记其状态（是否已经考虑过）。因此针对地图中不同的状态的区域，使用不同的数值表示当前区域的状态，例如inf表示障碍物，3表示最终规划得到的路径。</li></ul><h4 id="2-地图的显示"><a href="#2-地图的显示" class="headerlink" title="2. 地图的显示"></a>2. 地图的显示</h4><p>由于地图的显示涉及到图形的显示，因此需要了解一下图形在计算机中的显示。</p><blockquote><p>图形的显示有两种方式，分别是矢量图以及光栅图。</p><ul><li>对于矢量图，其内部的图形是由基本的几何图形构成的，因此在矢量图文件（例如.dot）文件中，只需要按照指定的格式描述图形的属性即可。例如Windows的.dot文件，我们按照其要求的语法对图形进行描述，然后对应的解析该语法，利用图形学的算法即可渲染出来图形，我们常见的PDF、SVG等等文件都是矢量图。例如下面的例子</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211224005217273.png" alt="矢量图的一种：dot文件"></p><ul><li>而对于光栅图，其基本构成单位是像素，每个像素大小只有零点几个毫米，而每平方厘米都会有几百几千个像素。而每个像素都会有自己的数值，表现出来自己的颜色。因此我们通过几万个极小的、在人眼看来是点的像素组合起来就成了我们所看到的图像。因此这种图像又称为位图、点阵图、像素图。我们常见的JPG、PNG、BMP等等都是光栅图，例如下面的例子</li></ul><p><img src="https://bkimg.cdn.bcebos.com/pic/54fbb2fb43166d22356091ba4b2309f79052d28d?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U4MA==,g_7,xp_5,yp_5/format,f_auto" alt="经典的光栅图"></p><p>矢量图最大的好处就在于由于其图形是完全利用数学公式描述的（例如圆相对于屏幕左上角的相对距离、圆相对于屏幕宽度的半径等等），因此针对不同的屏幕、不同的放大背书，矢量图片完全可以通过运算进行放大、适配。因此在我们用户看来就是矢量图是无论怎样放大边缘都不会模糊。例如下面的pdf</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211224010247748.png" alt="放大2.5倍的PDF文件"></p><p>aas</p><p>而光栅图的基本单位是像素，因此再怎么放大，像素都是不会变的，因此在放大一定的倍数就会模糊，这个时候即便有一些算法会做自适应，例如双线性插值、三线性插值等等增加像素的数量，但是他们会造成边缘的模糊</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211224010524045.png" alt="光栅图放大后可见的像素"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211224010559551.png" alt="经过插值处理之后的图片会变的模糊"></p><p>因此在不同场景下有不同的取舍。一般而言，当图形比较好描述（都是规则的几何图形）的时候，就会选择用矢量图，而当图形不好描述的时候（例如自然景观），这个时候就会选择光栅图</p></blockquote><p>尽管地图都是规整的矩形和色块，使用矢量图非常容易描述，但是考虑到如果需要使用矢量图像的话还需要不少的学习成本来学习矢量图的描述语言，花费的时间比较多。而有考虑到Python中其实已经想Matplotlib、Seaborn、Plotly这类非常好的光栅图绘图库（当然他们可以绘制矢量图），因此最终决定使用光栅图来显示、绘制地图。</p><p>当然，其实Matplotlib、Plotly这些库最终调用的都是类似于cairo、gtk这些由C/C++开发出来的图形库</p><h4 id="3-地图动态显示"><a href="#3-地图动态显示" class="headerlink" title="3. 地图动态显示"></a>3. 地图动态显示</h4><p>地图的绘制与显示实际上是一个非常消耗资源的操作。上面的GIF和后面放出来的B站的演示视频里A*算法花了不少的时间最后才找到最终的路径，但是真正的纯A<em>算法的规划路径的速度才只有0.2秒左右，这还是我在100\</em>100的地图上测试的。然而为了显示出A*的动态效果图，因此算法的每次试探都会进行地图的绘制。而每次绘图就需要占去0.2秒左右的时间（我读取系统时间做了benchmark）。因此只敢显示30*30的地图。</p><p>因此为了尽可能的的加快绘图的速度，在图形中对所有的Patch（即一个小方格）进行记录，每次只会重新绘制发生了变化的Patch而不会重新绘制整张地图，因此极大地加快了显示的速度。至少在我测试的50*50的场景下效果还是非常不错的。</p><h3 id="2-算法实现层"><a href="#2-算法实现层" class="headerlink" title="2. 算法实现层"></a>2. 算法实现层</h3><p>算法实现层负责实现A*算法。A*算法中使用使用OpenList以及CloseList维护已探索区域和边缘区域。此外为实现算法实现层与核心层解耦合，而二维地图的状 态的维护由核心层提供，因此在算法实现层只需要调用核心层提供的接口进行地图状态修改即可 </p><h3 id="3-用户界面层"><a href="#3-用户界面层" class="headerlink" title="3. 用户界面层"></a>3. 用户界面层</h3><p>用户界面层负责GUI的显示以及命令行用户界面。GUI部分通过Matplotlib内嵌的信号与槽机制实现用户鼠标、键盘事件的监听以及回调函数的绑定，进而响应用户事件，完成功能，例如：保存地图 。命令行用户界面负责根绝接收到不同的用户参数，运行不同的功能，例如绘制地图、开始路径规划……</p><h2 id="3-具体代码"><a href="#3-具体代码" class="headerlink" title="3. 具体代码"></a>3. 具体代码</h2><h3 id="1-导入库"><a href="#1-导入库" class="headerlink" title="1. 导入库"></a>1. 导入库</h3><p>导入Python中队列维护的库queue、路径处理库pathlib、二维数组维护库Numpy、csv序列化与反序列化Pandas库、绘图库Matplotlib以及命令行彩色字体库colorama</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> queue<span class="token keyword">import</span> pprint<span class="token keyword">import</span> argparse<span class="token keyword">from</span> typing <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>backend_bases <span class="token keyword">as</span> bbase<span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-核心对象"><a href="#2-核心对象" class="headerlink" title="2. 核心对象"></a>2. 核心对象</h3><p>_MapBase中维护的核心对象为map，程序所处的状态由一个有限状态机维护，不同的事件由不同的回调函数负责处理。</p><p>首先，__del__、new、update、add_patch实现了GUI图形的绘制以及更新</p><p>pandasfy与depandasfy负责将二维地图以csv文件格式保存至磁盘上</p><p>_btn_press_cb、_btn_release_cb、_move_cb、_keyboard_cb分别响应鼠标按下、松开、移动以及键盘按下事件</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">_MapBase</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Notes:        MapBase 用于可视化的地图创建    Args:        mapsize (tuple[int, int]): size of map        figsize (tuple[int, int]): size of figure    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mapsize<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">,</span> figsize<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>_MapBase<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># meta information</span>        self<span class="token punctuation">.</span>_mapsize<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span> <span class="token operator">=</span> mapsize        self<span class="token punctuation">.</span>_figsize<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span> <span class="token operator">=</span> figsize        <span class="token comment" spellcheck="true"># map, inf obstacle, 0 accessible, 1 in path</span>        self<span class="token punctuation">.</span>map<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>shape<span class="token operator">=</span>mapsize<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>map_temp<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> None        <span class="token comment" spellcheck="true"># visualize core object</span>        self<span class="token punctuation">.</span>_figure<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span>figsize<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_canvas <span class="token operator">=</span> self<span class="token punctuation">.</span>_figure<span class="token punctuation">.</span>canvas        self<span class="token punctuation">.</span>_title<span class="token punctuation">:</span> plt<span class="token punctuation">.</span>Text <span class="token operator">=</span> None        self<span class="token punctuation">.</span>_go_on<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true"># gui interaction, finite state machine to control plot</span>        self<span class="token punctuation">.</span>_on_press<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span>        self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"add_obstacle"</span>        self<span class="token punctuation">.</span>btn_pressed_cid <span class="token operator">=</span> self<span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>mpl_connect<span class="token punctuation">(</span><span class="token string">"button_press_event"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_btn_press_cb<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>btn_released_cid <span class="token operator">=</span> self<span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>mpl_connect<span class="token punctuation">(</span><span class="token string">"button_release_event"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_btn_release_cb<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>mouse_move_cid <span class="token operator">=</span> self<span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>mpl_connect<span class="token punctuation">(</span><span class="token string">"motion_notify_event"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_move_cb<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>keyboard_cid <span class="token operator">=</span> self<span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>mpl_connect<span class="token punctuation">(</span><span class="token string">"key_press_event"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_keyboard_cb<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>close<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_figure<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token boolean">False</span><span class="token punctuation">,</span> f<span class="token string">"This method should be overwritten by subclass"</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_canvas<span class="token punctuation">.</span>draw_idle<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">new</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            new is used to clear the map. In practice, generate a new axes        Returns:            if_clear (bool): true if successfully clear the map        """</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>map <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>shape<span class="token operator">=</span>self<span class="token punctuation">.</span>_mapsize<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>cla<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_mapsize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_mapsize<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>set_xlim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_mapsize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_mapsize<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_title <span class="token operator">=</span> self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span>f<span class="token string">"Current State: {self._current_state}"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"goal"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"obstacle"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"start"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"final path"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"gray"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"explored"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"cyan"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"frontier"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1.01</span><span class="token punctuation">,</span> <span class="token number">0.85</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">except</span> KeyboardInterrupt <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Keyboard interrupted"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">add_patch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>int<span class="token punctuation">,</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> list<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>int<span class="token punctuation">,</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> list<span class="token punctuation">]</span><span class="token punctuation">,</span>                  patches<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> None<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> bool<span class="token punctuation">:</span>        prompt <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token keyword">else</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_current_state <span class="token operator">==</span> <span class="token string">"add_obstacle"</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>map<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>inf            <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>                <span class="token keyword">pass</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"black"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Add obstacle: {prompt}"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>_current_state <span class="token operator">==</span> <span class="token string">"add_goal"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>map <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>any<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.YELLOW}Already have one goal!{Style.RESET_ALL}"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            self<span class="token punctuation">.</span>map<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Add goal: {prompt}"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>_current_state <span class="token operator">==</span> <span class="token string">"add_start"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>map <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>any<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.YELLOW}Already have one start!{Style.RESET_ALL}"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            self<span class="token punctuation">.</span>map<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"green"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Add start: {prompt}"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>_current_state <span class="token operator">==</span> <span class="token string">"going_back"</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>map<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>_current_state <span class="token operator">==</span> <span class="token string">"clear_patch"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>map<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.YELLOW}Not in use!{Style.RESET_ALL}"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>            self<span class="token punctuation">.</span>map<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Cleared: {prompt}"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>_current_state <span class="token operator">==</span> <span class="token string">"searching"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> patches <span class="token operator">==</span> <span class="token string">"explored"</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># assert (0 &lt;= self.map[x, y] &lt;= 2).all(), f"{Fore.RED}Illegal Operation on map{Fore.RESET}"</span>                <span class="token comment" spellcheck="true"># self.map[x, y] = 1</span>                self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"gray"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> patches <span class="token operator">==</span> <span class="token string">"frontier"</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># assert (0 &lt;= self.map[x, y] &lt;= 2).all(), f"{Fore.RED}Illegal Operation on map{Fore.RESET}"</span>                <span class="token comment" spellcheck="true"># self.map[x, y] = 2</span>                self<span class="token punctuation">.</span>_axes<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> marker<span class="token operator">=</span><span class="token string">"s"</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"cyan"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> <span class="token boolean">False</span><span class="token punctuation">,</span> F<span class="token string">"{Fore.RED}Invalid State: {self._current_state}"</span>        self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">pandasfy</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            pandasfy will serialize current map from matplotlib to cvs file        Returns:            serialized_map (pd.Dataframe)        """</span>        pp<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>map<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>str<span class="token punctuation">)</span>        pp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"-1.0"</span><span class="token punctuation">,</span> <span class="token string">"GOAL"</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        pp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"-2.0"</span><span class="token punctuation">,</span> <span class="token string">"START"</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> pp    <span class="token keyword">def</span> <span class="token function">depandasfy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> csv_path<span class="token punctuation">:</span> Path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            depandasfy will deserialized csv file map to matplotlib        Args:            csv_path (Path): path of csv file        Returns:            None        """</span>        df<span class="token punctuation">:</span> pd<span class="token punctuation">.</span>DataFrame <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>filepath_or_buffer<span class="token operator">=</span>csv_path<span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"START"</span><span class="token punctuation">,</span> <span class="token string">"-2.0"</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"GOAL"</span><span class="token punctuation">,</span> <span class="token string">"-1.0"</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token punctuation">)</span>        t <span class="token operator">=</span> df<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T        <span class="token comment" spellcheck="true"># self.map = df.to_numpy()</span>        xs<span class="token punctuation">,</span> ys <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>t <span class="token operator">==</span> np<span class="token punctuation">.</span>inf<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"add_obstacle"</span>        self<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span>xs<span class="token punctuation">,</span> ys<span class="token punctuation">)</span>        xs<span class="token punctuation">,</span> ys <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"add_goal"</span>        self<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span>xs<span class="token punctuation">,</span> ys<span class="token punctuation">)</span>        xs<span class="token punctuation">,</span> ys <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"add_start"</span>        self<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span>xs<span class="token punctuation">,</span> ys<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_update_title</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> s <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_title<span class="token punctuation">.</span>set_text<span class="token punctuation">(</span>f<span class="token string">"Current State: {self._current_state}"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_title<span class="token punctuation">.</span>set_text<span class="token punctuation">(</span>s<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_btn_press_cb</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">:</span> bbase<span class="token punctuation">.</span>MouseEvent<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_on_press <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>inaxes<span class="token punctuation">:</span>            point <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>event<span class="token punctuation">.</span>xdata<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>event<span class="token punctuation">.</span>ydata<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span><span class="token operator">*</span>point<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_btn_release_cb</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">:</span> bbase<span class="token punctuation">.</span>MouseEvent<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_on_press <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">_move_cb</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">:</span> bbase<span class="token punctuation">.</span>MouseEvent<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_on_press<span class="token punctuation">:</span>            <span class="token keyword">if</span> event<span class="token punctuation">.</span>inaxes<span class="token punctuation">:</span>                point <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>event<span class="token punctuation">.</span>xdata<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>event<span class="token punctuation">.</span>ydata<span class="token punctuation">)</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span><span class="token operator">*</span>point<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_keyboard_cb</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> event<span class="token punctuation">:</span> bbase<span class="token punctuation">.</span>KeyEvent<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"c"</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"add_obstacle"</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.YELLOW}Clear all!{Style.RESET_ALL}"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"1"</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"add_obstacle"</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}Switch to {self._current_state}{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"add_goal"</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}Switch to {self._current_state}{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"add_start"</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}Switch to {self._current_state}{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"0"</span> <span class="token operator">or</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"d"</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"clear_patch"</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}Switch to {self._current_state}{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"r"</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> self<span class="token punctuation">.</span>_current_state            self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"add_obstacle"</span>            xs <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_mapsize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span>n <span class="token punctuation">:</span><span class="token operator">=</span> self<span class="token punctuation">.</span>_mapsize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>_mapsize<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">//</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            ys <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>_mapsize<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> size<span class="token operator">=</span>n<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span>xs<span class="token punctuation">,</span> ys<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> p        <span class="token keyword">elif</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"w"</span><span class="token punctuation">:</span>            files <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>stem <span class="token keyword">for</span> i <span class="token keyword">in</span> Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>absolute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">"map_*.csv"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                name <span class="token operator">=</span> f<span class="token string">"map_{int(max([f.split('_')[1] for f in files])) + 1}"</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                name <span class="token operator">=</span> <span class="token string">"map_0"</span>            self<span class="token punctuation">.</span>pandasfy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>p <span class="token punctuation">:</span><span class="token operator">=</span> Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>f<span class="token string">"{name}.csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}Save current Map to {p}{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> event<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token string">"v"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}Start finding goal{self._current_state}{Style.RESET_ALL}"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_go_on <span class="token operator">=</span> <span class="token boolean">True</span>            self<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_update_title<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-算法实现"><a href="#3-算法实现" class="headerlink" title="3. 算法实现"></a>3. 算法实现</h3><p>算法实现由Astar类负责完成，其中由于在计算启发值时可以有多种算法，因此将启发值的计算以静态方法形式嵌入到类中</p><p>start方法为完整的A*算法实现，而plot4searching用于在路径规划时动态更新地图</p><p>此外OpenList和CloseList分别作为字典的键和值蕴含在came_from和cost_so_far两个字典中，因此不用单独开辟新的数组进行保存</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Astar</span><span class="token punctuation">(</span>_MapBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> load_path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Path<span class="token punctuation">,</span> None<span class="token punctuation">]</span><span class="token punctuation">,</span> mapsize<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Astar<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>mapsize<span class="token operator">=</span>mapsize<span class="token punctuation">)</span>        <span class="token keyword">if</span> load_path <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}Load from {load_path}{Style.RESET_ALL}"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>depandasfy<span class="token punctuation">(</span>load_path<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>            t <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>self<span class="token punctuation">.</span>map <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>self<span class="token punctuation">.</span>map <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>start_point<span class="token punctuation">:</span> str <span class="token operator">=</span> f<span class="token string">"{t[0][0][0]},{t[0][1][0]}"</span>            self<span class="token punctuation">.</span>goal_point<span class="token punctuation">:</span> str <span class="token operator">=</span> f<span class="token string">"{t[1][0][0]},{t[1][1][0]}"</span>            <span class="token comment" spellcheck="true"># open list, but I think frontier is a better name</span>            <span class="token comment" spellcheck="true"># no need for close list for which has been represented as items of came_from or keys of cost_so_far</span>            self<span class="token punctuation">.</span>frontier <span class="token operator">=</span> queue<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>frontier<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>start_point<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>came_from<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span>str<span class="token punctuation">,</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> None<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>self<span class="token punctuation">.</span>start_point<span class="token punctuation">:</span> None<span class="token punctuation">}</span>            self<span class="token punctuation">.</span>cost_so_far<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span>str<span class="token punctuation">,</span> float<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>self<span class="token punctuation">.</span>start_point<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span>            self<span class="token punctuation">.</span>_last<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> None            plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}Start drawing map{Style.RESET_ALL}"</span><span class="token punctuation">)</span>            plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            A* algorithm implementation        Returns:            None        """</span>        if_can_find_goal<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true"># get the closest point</span>        self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"searching"</span>        self<span class="token punctuation">.</span>_update_title<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>frontier<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            current_p<span class="token punctuation">:</span> str <span class="token operator">=</span> self<span class="token punctuation">.</span>frontier<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># find the goal</span>            <span class="token keyword">if</span> current_p <span class="token operator">==</span> self<span class="token punctuation">.</span>goal_point<span class="token punctuation">:</span>                if_can_find_goal <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">break</span>            next_p<span class="token punctuation">:</span> str            <span class="token keyword">for</span> next_p <span class="token keyword">in</span> <span class="token punctuation">(</span>n <span class="token punctuation">:</span><span class="token operator">=</span> self<span class="token punctuation">.</span>_get_neighbor<span class="token punctuation">(</span>current_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                new_cost <span class="token operator">=</span> self<span class="token punctuation">.</span>cost_so_far<span class="token punctuation">[</span>current_p<span class="token punctuation">]</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>_get_cost<span class="token punctuation">(</span>next_p<span class="token punctuation">,</span> current_p<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># if next point has not been considered / next point in in undiscovered area</span>                <span class="token comment" spellcheck="true"># or there exists a nearer way to get to next point by passing current point</span>                <span class="token comment" spellcheck="true"># this also can help preventing going back</span>                <span class="token keyword">if</span> next_p <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>cost_so_far<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">or</span> new_cost <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>cost_so_far<span class="token punctuation">[</span>next_p<span class="token punctuation">]</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>cost_so_far<span class="token punctuation">[</span>next_p<span class="token punctuation">]</span> <span class="token operator">=</span> new_cost                    priority <span class="token operator">=</span> new_cost <span class="token operator">+</span> self<span class="token punctuation">.</span>_get_cost<span class="token punctuation">(</span>next_p<span class="token punctuation">,</span> self<span class="token punctuation">.</span>goal_point<span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>frontier<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token punctuation">(</span>priority<span class="token punctuation">,</span> next_p<span class="token punctuation">)</span><span class="token punctuation">)</span>                    current_pp <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> current_p<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">]</span>                    self<span class="token punctuation">.</span>came_from<span class="token punctuation">[</span>next_p<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token string">"{current_pp[0]},{current_pp[1]}"</span>                    self<span class="token punctuation">.</span>_plot4searching<span class="token punctuation">(</span><span class="token punctuation">)</span>                    plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> if_can_find_goal<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.RED}Cannot find the goal in current map{Style.RESET_ALL}"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_update_title<span class="token punctuation">(</span><span class="token string">"STOP: cannot find the path!"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># go back to find the path</span>            self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"add_goal"</span>            goal <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>goal_point<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span><span class="token operator">*</span>goal<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"going_back"</span>            self<span class="token punctuation">.</span>_update_title<span class="token punctuation">(</span><span class="token punctuation">)</span>            path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            current_p <span class="token operator">=</span> self<span class="token punctuation">.</span>goal_point            <span class="token keyword">while</span> current_p <span class="token operator">!=</span> self<span class="token punctuation">.</span>start_point<span class="token punctuation">:</span>                current_p <span class="token operator">=</span> self<span class="token punctuation">.</span>came_from<span class="token punctuation">[</span>current_p<span class="token punctuation">]</span>                p <span class="token operator">=</span> tuple<span class="token punctuation">(</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> current_p<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_current_state <span class="token operator">=</span> <span class="token string">"add_start"</span>            start <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> self<span class="token punctuation">.</span>start_point<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span><span class="token operator">*</span>start<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.BLUE}{Style.BRIGHT}Success!{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Path:"</span><span class="token punctuation">)</span>        pprint<span class="token punctuation">.</span>pprint<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">return</span> path    <span class="token keyword">def</span> <span class="token function">_get_neighbor</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> itertools <span class="token keyword">import</span> product        x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> point<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        neighbor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> product<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> abs<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>dx <span class="token punctuation">:</span><span class="token operator">=</span> x <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>_mapsize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>dy <span class="token punctuation">:</span><span class="token operator">=</span> y <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>_mapsize<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">and</span> \                    self<span class="token punctuation">.</span>map<span class="token punctuation">[</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">]</span> <span class="token operator">!=</span> np<span class="token punctuation">.</span>inf<span class="token punctuation">:</span>                neighbor<span class="token punctuation">.</span>append<span class="token punctuation">(</span>f<span class="token string">"{dx},{dy}"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> neighbor    <span class="token keyword">def</span> <span class="token function">_get_cost</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point1<span class="token punctuation">:</span> str<span class="token punctuation">,</span> point2<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># x, y = [int(i) for i in point.split(",")]</span>        <span class="token comment" spellcheck="true"># return self.manhattan_distance(*[int(i) for i in point1.split(",")],</span>        <span class="token comment" spellcheck="true">#                                *[int(i) for i in point2.split(",")])</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>euler_distance<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> point1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                   <span class="token operator">*</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> point2<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_plot4searching</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Codes for plotting"""</span>        <span class="token comment" spellcheck="true"># update current map</span>        <span class="token comment" spellcheck="true"># explore area</span>        explored_ps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> p<span class="token punctuation">,</span> parent <span class="token keyword">in</span> self<span class="token punctuation">.</span>came_from<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pp <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> p<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> parent <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                explored_ps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>pp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                explored_ps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>pp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>map<span class="token punctuation">[</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>explored_ps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>explored_ps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token comment" spellcheck="true"># frontier</span>        frontier_ps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>frontier<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            t<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>frontier<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> t<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>frontier<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span> tt <span class="token keyword">in</span> t<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># frontier_ps.append(t.get()[1])</span>            p <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> tt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            frontier_ps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            frontier_ps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># simply deepcopy locked object will raise an error</span>        <span class="token comment" spellcheck="true"># t = copy.deepcopy(self.frontier)</span>        self<span class="token punctuation">.</span>map<span class="token punctuation">[</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>frontier_ps<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>frontier_ps<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>        <span class="token comment" spellcheck="true"># find difference</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_last <span class="token keyword">is</span> None<span class="token punctuation">:</span>            update_explored <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>self<span class="token punctuation">.</span>map <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            update_frontier <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>self<span class="token punctuation">.</span>map <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># update_frontier = [(i,j) for i, j in zip(*update_frontier)]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            last_explored <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_last <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            last_frontier <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_last <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            current_explored <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>self<span class="token punctuation">.</span>map <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            current_frontier <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>self<span class="token punctuation">.</span>map <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            update_explored <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>current_explored<span class="token punctuation">)</span> <span class="token operator">-</span> set<span class="token punctuation">(</span>last_explored<span class="token punctuation">)</span><span class="token punctuation">)</span>            update_frontier <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>current_frontier<span class="token punctuation">)</span> <span class="token operator">-</span> set<span class="token punctuation">(</span>last_frontier<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_last <span class="token operator">=</span> self<span class="token punctuation">.</span>map<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># draw explored area</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>update_explored<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> update_explored<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> update_explored<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           patches<span class="token operator">=</span><span class="token string">"explored"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># draw frontier</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>update_frontier<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>add_patch<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> update_frontier<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> update_frontier<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                           patches<span class="token operator">=</span><span class="token string">"frontier"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">manhattan_distance</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> abs<span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span>y2 <span class="token operator">-</span> y1<span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">euler_distance</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token punctuation">:</span><span class="token operator">=</span> abs<span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">+</span> abs<span class="token punctuation">(</span>y2 <span class="token operator">-</span> y1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">elif</span> d <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">1.4</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> round<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token punctuation">(</span>x2 <span class="token operator">-</span> x1<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>y2 <span class="token operator">-</span> y1<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ndigits<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-命令行参数解析"><a href="#4-命令行参数解析" class="headerlink" title="4. 命令行参数解析"></a>4. 命令行参数解析</h3><p>命令行参数解析由parse_arg函数负责完成，并返回Namespace对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_arg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parer <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>        description<span class="token operator">=</span>f<span class="token string">"{Fore.GREEN}{Style.BRIGHT}A* Algorithm, animated with matplotlib{Style.RESET_ALL}. "</span>                    f<span class="token string">"Author: {Fore.YELLOW}Jack Wang{Fore.RESET}. "</span>                    f<span class="token string">"Date: {Fore.YELLOW}2021-12-15{Style.RESET_ALL}."</span>                    <span class="token string">"This script provides A* algorithm illustration with the help of matplotlib\n"</span>                    f<span class="token string">"You can use this script either by {Fore.GREEN}command-line interface{Fore.RESET} "</span>                    f<span class="token string">"or {Fore.GREEN}python code interface{Fore.RESET}."</span>                    <span class="token string">"To use this script with command-line interface, call this script with -h option. "</span>                    <span class="token string">"To use this script in python code, "</span>                    <span class="token string">"simply calling Astar class to create an Astar object, then everything will be done. "</span>                    <span class="token string">"If load_path argument of Astar class are not specified (i.e. load_path=None), "</span>                    <span class="token string">"this program will create a blank"</span>                    <span class="token string">"map for you, else loading an existing map."</span>                    <span class="token string">"\n\n"</span>                    <span class="token string">"In the matplotlib GUI, press 1 to add obstacle, 2 to add goal, 3 to add start, w to save map, "</span>                    <span class="token string">"r to random generate obstacles, d to delete an grid and v to start path planning. "</span>                    f<span class="token string">"{Fore.YELLOW}Note: when call with -c, you can not press v to start path planning, -c is only "</span>                    f<span class="token string">"for drawing map. {Style.RESET_ALL}"</span><span class="token punctuation">)</span>    parer<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-o"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"ok"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"must be added when calling the scripts to let me "</span>                                                                  <span class="token string">"know you understand how to use this program"</span><span class="token punctuation">)</span>    parer<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-c"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"gen_map"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"create a new map"</span><span class="token punctuation">)</span>    parer<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-l"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"load_num"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"load a existing map"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> parer<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-主程序"><a href="#5-主程序" class="headerlink" title="5. 主程序"></a>5. 主程序</h3><p>主程序中若不提供加载的地图路径则默认打开新的地图用于地图绘制</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> parse_arg<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> args<span class="token punctuation">.</span>ok<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.RED}Please read the help info with -h option the rerun the scripts with -o option{Fore.RESET}"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">if</span> args<span class="token punctuation">.</span>gen_map<span class="token punctuation">:</span>        Astar<span class="token punctuation">(</span>load_path<span class="token operator">=</span>None<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token keyword">if</span> args<span class="token punctuation">.</span>load_num <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        Astar<span class="token punctuation">(</span>load_path<span class="token operator">=</span>Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>f<span class="token string">"map_{args.load_num}.csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># a = Astar(load_path=Path("./map_4.csv"))</span>    <span class="token comment" spellcheck="true"># a = Astar(load_path=Path(__file__).resolve().parent.joinpath("./map_1.csv"))</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataStructure </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> A* </tag>
            
            <tag> PathPlanning </tag>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼（Huffman Encoding）压缩算法-Python实现</title>
      <link href="/2021/12/21/ha-fu-man-ya-suo-suan-fa-python-shi-xian/"/>
      <url>/2021/12/21/ha-fu-man-ya-suo-suan-fa-python-shi-xian/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要提供了Python版本的哈夫曼压缩算法实现，并在此基础上提供了命令行和基于Qt的GUI用户界面（User Interface）</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/all.gif" alt="完整效果"></p><h1 id="哈夫曼（Huffman-Encoding）压缩算法-Python实现"><a href="#哈夫曼（Huffman-Encoding）压缩算法-Python实现" class="headerlink" title="哈夫曼（Huffman Encoding）压缩算法-Python实现"></a>哈夫曼（Huffman Encoding）压缩算法-Python实现</h1><p>哈夫曼编码作为计算机届非常底层的算法，不少领域都会出现该算法的身影，例如在MPEG图片压缩算法中等等。因此掌握哈夫曼算法以及相关的哈弗曼编码、哈弗曼树实现还是比较必要的。</p><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>我目前是一个大二的计算机系学生，最近数据结构课程的配套实验要求学生从十四个题中选择四个来做。刚好最近学习了PyQt的相关内容，于是本着学习的目的把我完成的成果记录下来，希望我的这篇博客能够帮助大家学习与理解。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211221220005902.png" alt="数据结构算法实验"></p><h2 id="1-编码"><a href="#1-编码" class="headerlink" title="1. 编码"></a>1. 编码</h2><p>所有的文件，包括MP3音频、MP4视频、PDF文档、乃至于可执行文件（Windows上的.EXE、Linux中的.O等ELF格式文件），对于计算机来说都是二进制数据流，即由0101的比特构成的流（Stream）。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211221222101136.png" alt="计算机底层以二进制形式存储文件"></p><p>然而二进制流对于计算机而言是有意义的，对人而言却没有多大的意义了，因为人看不懂二进制的字节流。于是为了解决这个问题，就出现了编码。所谓<strong>编码即指将信息从一种格式转换为另外一种格式而不改变其内容</strong>，更详细的介绍，参考下面百度百科和维基百科的介绍。</p><blockquote><p><strong>From Wikipedia</strong></p><p>编码是信息从一种形式或格式转换为另一种形式的过程；解码则是编码的逆过程。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211221221212302.png" alt="维基百科上对编码的介绍"></p><p><strong>From BaiduBaike</strong>:</p><p>编码是信息从一种形式或格式转换为另一种形式的过程，也称为计算机编程语言的代码简称编码。用预先规定的方法将文字、数字或其它对象编成数码，或将信息、数据转换成规定的电脉冲信号。编码在电子计算机、电视、遥控和通讯等方面广泛使用。编码是信息从一种形式或格式转换为另一种形式的过程。解码，是编码的逆过程。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211221221358810.png" alt="百度百科上对编码的介绍"></p></blockquote><p>因此，编码其实指的就是转变信息的形式而不改变信息的内容。之所以要进行编码与解码，就是因为对于不同的主体而言，不同编码方式的信息的阅读难度和理解难度不同。例如上面的三国演义，对于我们人而言，文字形式的三国演义易于理解而二进制形式的三国演义更利于计算机理解。</p><p>换个角度，其实语种之间的转换也是一种编码的转换。例如英语对于中文母语的人就不好理解。而翻译也是把信息从一种语言转换为另一种语言，其形式在变，但本质内涵的信息却没有变。<strong>所以究其根本，编码的目的在于方便信息的理解。</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211221230110176.png" alt="英文版的三国演义"></p><p>话说回来，要进行编码，就需要一张编码表。例如学C语言时候的ASCII表。我们通过编码表构建了两种不同编码之间的映射关系，因此单纯的ASCII字符的转换，就是数值的映射关系，从而通过数值-字符的转换，实现了编码与解码。其实从语言的角度来看，语言的编码不仅仅是单词的映射，还涉及语法的转换等等更加复杂的关系。</p><p>然而单纯的使用ASCII编码或者UTF8这种编码方式其实虽然很不错，计算机能够理解，但是他们的问题就是太浪费空间了。例如针对ASCII编码，每一个字符需要8个比特位（0-255）。因此哈夫曼编码除了方便计算机理解以外，更大的好处是能够节约空间。</p><p>说了这么久，总算是说到了哈夫曼编码，哈夫曼编码其实就是一种编码，和ASCII编码在本质上没有区别的。</p><h2 id="2-哈夫曼算法-Huffman-Coding"><a href="#2-哈夫曼算法-Huffman-Coding" class="headerlink" title="2. 哈夫曼算法 / Huffman Coding"></a>2. 哈夫曼算法 / Huffman Coding</h2><p>关于哈夫曼编码和对应的哈夫曼算法就不赘述了，在数据结构的课本上其实讲得非常好也非常的透彻。下面就放一下百度百科和维基百科的介绍</p><blockquote><p><strong>From Wikipedia</strong>：</p><p>霍夫曼编码（英语：Huffman Coding），又译为哈夫曼编码、赫夫曼编码，是一种用于无损数据压缩的熵编码（权编码）算法。由美国计算机科学家大卫·霍夫曼（David Albert Huffman）在1952年发明。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211221231837051.png" alt="维基百科上哈夫曼编码的介绍"></p><p><strong>From BaiduBaike</strong>：</p><p>哈夫曼编码(Huffman Coding)，又称霍夫曼编码，是一种编码方式，哈夫曼编码是可变字长编码(VLC)的一种。Huffman于1952年提出一种编码方法，该方法完全依据字符出现概率来构造异字头的平均长度最短的码字，有时称之为最佳编码，一般就叫做Huffman编码（有时也称为霍夫曼编码）。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211221231927090.png" alt="百度百科上哈夫曼编码的介绍"></p></blockquote><h2 id="3-实现思路"><a href="#3-实现思路" class="headerlink" title="3. 实现思路"></a>3. 实现思路</h2><p>针对不同的功能，整个程序的实现，主要分为三个层面：</p><ol><li><strong>核心层</strong>：负责哈夫曼算法的实现</li><li><strong>数据存取层</strong>：负责任意形式数据的读取、保存</li><li><strong>用户界面层</strong>：负责提供命令行用户界面以及图形用户接口，从而实现<del>高级感</del>（逼格）</li></ol><h3 id="A-核心层"><a href="#A-核心层" class="headerlink" title="A. 核心层"></a>A. 核心层</h3><p>核心层的任务其实就是构建哈弗曼树、得到哈夫曼编码即可，主要算法其实在数据结构课本、B站视频、知乎上都有不少介绍。 </p><p>然而一个重要的问题就是课本上和B站中的不少介绍视频都是针对字符（字母）进行哈夫曼编码的。我们由于要对任意格式的文件进行编码，因此就要从数据的本源：字节，进行哈夫曼编码。因此我们哈弗曼树的叶子节点实际上是字节。我们以8位二进制作为一个单元（Symbol）。然后针对这个Symbol进行编码。因此我们编码的对象就从26个字母变成了256种八位二进制数字。换而言之我们是对0~255这256个数字进行编码。</p><p>然后根据得到的哈夫曼编码将原字节数据一个字节（八位比特）进行编码、转换为哈夫曼编码即可。</p><h3 id="B-数据存取层"><a href="#B-数据存取层" class="headerlink" title="B. 数据存取层"></a>B. 数据存取层</h3><p>在数据存取层，我们假设现在已经对原数据（raw data）构建出了哈弗曼树并且得到了原数据的哈弗曼编码，而且根据这些哈夫曼编码得到了原数据的哈夫曼编码字节流。我们在数据存取层需要做的就是</p><ol><li>保存转换后的新的哈夫曼编码的字节流</li><li>读取原始数据的二进制字节流</li><li>保存哈夫曼编码表</li></ol><p>读取原始数据的二进制字节流其实问题不大，Python中以rb（read byte）模式打开文件即可。而哈夫曼编码表的保存则可以利用Python的Pickle模块将Python中的对象保存到磁盘/从磁盘中加载（我们以字典/映射的形式保存编码表）</p><p>因此数据存取层的关键就在于如何保存编码后的哈夫曼编码字节流？这个问题看似简单，其实有一个问题，就是（二进制）数据在计算机外存（固态、硬盘）中的保存都是整字节整字节的保存的，读取也是整字节整字节读取的。而我们对原文件的二进制流进行哈夫曼编码后实际上其长度是不定的，不一定是整字节的。</p><p>因此保存的时候虽然我们可以强行以整字节整字节的保存编码后的二进制流，但是在最后一位由于不一定是一个整字节，因此实际上存在问题。为了处理这个问题，我们设定一个特殊的字符EOF，由于8位二进制能表示256个数字（Symbol），而这些数字都有可能出现在原字节流中，因此我们是不能直接选取一个数字来表示文件结尾的。为此，在Python中，通过一个特定的类来实现文件结尾的表示，即我们自定义的EOF。在大文件（几MB的文件）中，一共有1024*1024个字节，因此从0~255这256个数字出现的次数一定是远远大于1的，而EOF的出现次数永远为1，因此必然会拥有最长的编码。</p><p>在我们转换完所有的原数据之后，我们把EOF添加到末尾去，并且如果最后不满足8位的话在最后补0。而在读取的时候，我们只需要获取最长长度的编码的长度，然后对最后一个字节做截取即可得到正确的完整的带有EOF的编码的编码后的原数据的哈夫曼编码字节流。</p><h3 id="C-用户界面层"><a href="#C-用户界面层" class="headerlink" title="C. 用户界面层"></a>C. 用户界面层</h3><p>在用户界面层，不关心具体的哈夫曼编码的实现、数据的保存方式等这些具体的细节。相比，用户界面层仅关注如何提供一个用户友好的用户界面。例如在终端（Terminal）提供选项，让用户制定压缩、解压的文件。还会检查用户指定的文件是否存在、查找用户需要解码的文件对应的的哈弗曼编码表的文件位置。</p><p>当然，GUI使用会让程序显得非常高级，因此GUI部分是必须的。而完成GUI程序，则借助Qt来完成，即使用Qt的Python Binding。</p><p>当然，为了便于写代码管理与开发，需要注意GUI的代码要与完成功能的代码在逻辑和形式上分离，因此采取前面所说的分层的思想。</p><p>因此将GUI作为用户界面层的一个组件（另一个组件为终端命令行接口），调用由数据存取层提供的接口函数完成功能。</p><p>在GUI内部，进行在GUI窗口上发生的事件的监听，以及轮转调度、回调函数调用等等功能。</p><h2 id="4-具体代码"><a href="#4-具体代码" class="headerlink" title="4. 具体代码"></a>4. 具体代码</h2><p>本部分根据上面的讲解，对照代码进行详细的介绍。</p><p>项目结构如下</p><pre class="line-numbers language-shell"><code class="language-shell">(base) jack@Alienware:~/projects/data_structure/11_huffman$ tree -L 2.├── ErrorHuffman.py├── huff.py├── resources│   ├── 三国演绎.txt│   ├── D_Star_illustration.pptx│   ├── ICRA2022.pdf│   ├── romance_of_three_kingdoms.rar│   ├── Song.mp3│   ├── str.txt│   └── test.mp4├── ui│   └── main.ui└── Ui_main.py2 directories, 11 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li>resource为项目资源文件夹，主要存放稍后用于验证压缩的资源，包括MP4、txt、MP3、rar、PDF等多种格式文件</li><li>ui为程序图形界面配置文件，负责设定界面大小、按钮位置等配置参数。而UI_main为具体的按钮等控件的实现代码</li><li>huff.py为最终的程序，内含所有完整代码；errHuff.py为先前写错的代码，问题出在了哈夫曼建树的时候得到的不是范式哈弗曼树，因此该程序遍历哈弗树得到哈夫曼编码的时候有问题，最后压缩出来的文件比源文件大了好几倍（反向压缩。。。应了刘某的反向抽烟XXX<span class="github-emoji"><span>😂</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</li></ul><h3 id="1-导入库"><a href="#1-导入库" class="headerlink" title="1. 导入库"></a>1. 导入库</h3><p>主要导入的库为命令行参数获取库argparse、Python对象序列化库Pickle、路径处理库pathlib、堆管理库heapq、GUI库PyQt以及为了更好的显示得到的哈夫曼编码表的pandas库与命令行彩色输出的colorama库。</p><p>最后定义了文件的私有变量设定作者和日期，以及将可能存在源代码的文件加入文件搜索路径（类似于Linux环境变量LD_LIBRARY_PATH）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> pickle<span class="token keyword">import</span> argparse<span class="token keyword">import</span> itertools<span class="token keyword">import</span> collections<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">from</span> heapq <span class="token keyword">import</span> heapify<span class="token punctuation">,</span> heappush<span class="token punctuation">,</span> heappop<span class="token keyword">from</span> typing <span class="token keyword">import</span> Union<span class="token punctuation">,</span> Any<span class="token punctuation">,</span> Dict<span class="token punctuation">,</span> List<span class="token punctuation">,</span> Tuple<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QDir<span class="token keyword">import</span> pandas<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>__author__ <span class="token operator">=</span> <span class="token string">"Jack Wang"</span>__date__ <span class="token operator">=</span> <span class="token string">"2021/12/19"</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"./ui"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-定义EOF符号"><a href="#2-定义EOF符号" class="headerlink" title="2. 定义EOF符号"></a>2. 定义EOF符号</h3><p>EOF符号由于和0-255个数字一样将在构建树的进行比较，因此需要重载如等于（__eq__）、大于(__gt__)、小于(__lt__)等运算符。在Python中重载运算符以魔术方法（double underline）实现。最后由于在序列化以及字典中保存符号-哈夫曼编码键值对的时候，符号作为字典的键需要时可哈希的对象（Hashable），因此重写__hash__方法，以实现作为字典的键。</p><p>注意，上面说过了EOF需要保证编码是最长的，因此当合别人比大的时候总是False，比小的时候总是True，并且只会等于同样是EOF的对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">_EOFSymbol</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Notes:        _EOFSymbol 是内置的文件结尾的类，用于在编码的时候标志文件的结尾。        由于在进行哈夫曼树的构建的时候需要选出来权最小的节点，因此需要重写比较的魔术方法。        默认文档结尾是频率最少的字符，因此和任何数字比较    """</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"_EOF"</span>    <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">__gt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__class__ <span class="token operator">==</span> other<span class="token punctuation">.</span>__class__    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> hash<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>_EOF <span class="token operator">=</span> _EOFSymbol<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-哈夫曼编码"><a href="#3-哈夫曼编码" class="headerlink" title="3. 哈夫曼编码"></a>3. 哈夫曼编码</h3><p>采用工厂模式，实现哈夫曼编码与解码的核心对象为_HuffmanCoder，与用于构建_HuffmanCoder的HuffmanFactory类。</p><p>_HuffmanCoder类负责：</p><ul><li>输出/打印哈夫曼编码表：get_code_table方法、print_code_table方法</li><li>编码、解码字节流序列：_encode_streaming方法、_decode_streaming方法</li><li>为用户界面层提供统一接口：encode方法、decode方法</li><li>保存、加载哈夫曼编码表：save方法、load方法</li></ul><p>其初始化参数负责接受已经获得的编码表和符号的拼接方式以及eof符号定义</p><p>此外save方法通过Python内建的字典将类的元数据保存到字典中，并利用Python的Pickle模块序列化到磁盘上。而load方法则通过类方法，在通过Pickle加载通过save方法保存到磁盘上的数据后显示调用类的初始化方法以实现_HuffmanCoder类的重构。</p><p>此外，在保存的时候需要确保保存的文件的路径存在，因此编写ensure_dir函数，而_guess_concat_function则是为支持多种类型的Symbol（字符串、二进制流（串））在编码、解码时候拼接所写的函数，即根据输入的类型来获得拼接方法的函数。</p><p>HuffmanCoderFactory类负责：</p><ul><li>获得哈夫曼编码表：from_frequencies方法</li><li>创建_HuffmanCoder类：from_sequence方法、from_frequencies方法。</li></ul><p>其中from_frequencies接受符号-频数键值对并构建哈弗曼树、获得哈夫曼编码表；from_sequence负责统计序列中的符号的频数，由于需要对任意的数据进行压缩，因此符号即指一个字节。</p><p>在进行构建的时候，利用优先队列，以出现频率作为优先级进行排列，每次pop都会获得优先队列顶的元素，即出现频率最小的元素。</p><p>而队列中的每个元素，则是一个元组，元祖的第一个元素为权值（频率），<strong>第二个元素为以该节点为祖宗的叶子节点的二进制编码（以数字形式表现）和对应的比特位数（所处的哈弗曼树的层数/深度）对</strong>。使用数字是由于位移操作方便构建哈弗曼编码而记录比特位数则是为了记录开头为0的哈夫曼编码的总位数。</p><p>具体流程为只要队列（森林）中的节点多于1个，则首先弹出权值较小的子树a与权值较大的子树b，将子树a与b的频率相加作为新的子树的频率，而后将子树a的所有的叶子节点的深度+1（比特位数），然后在原二进制编码前加上0（维持不变）。而对子树b，将其所有的叶子节点的二进制编码前加上1（将1左移原有比特位数（原有深度），然后加上当前二进制编码），最后将其深度（比特位数）加1。即使用递归的方式完成哈弗曼树的构建与哈夫曼编码的同步获取。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_guess_concat_function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Notes:        To support multiple types of input, e.g., str, bytes, list, there must be a        function that return the needed concat function    Returns:        pass    """</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>type<span class="token punctuation">(</span>u<span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span> u<span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">,</span> type<span class="token punctuation">(</span>b<span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bytes<span class="token punctuation">}</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>type<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ensure_dir</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> Path<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Path<span class="token punctuation">:</span>    path<span class="token punctuation">:</span> Path <span class="token operator">=</span> path <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>path<span class="token punctuation">,</span> Path<span class="token punctuation">)</span> <span class="token keyword">else</span> Path<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        path<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> path<span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> path<span class="token keyword">class</span> <span class="token class-name">_HuffmanCoder</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Notes:        _HuffmanCoder, which provide encode, decode, serialize, deserialize, save_code, load_code functionalities.    Args:    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> code_table<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> concat<span class="token operator">=</span>list<span class="token punctuation">,</span> check<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> eof<span class="token operator">=</span>_EOF<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            initialize method of _HuffmanCoder with given code table        Args:            code_table (Dict[Any, Tuple[int, int]]): code table of all symbols in the encoding sequence, create automatically by                HuffmanCoderFactory, items are Tuple[Symbol, [depth, bit]]            concat: concat method of symbols, will be automatically determined in HuffmanCoderFactory            check: valid code table's format            eof: eof symbol, leave it alone        """</span>        self<span class="token punctuation">.</span>_table <span class="token operator">=</span> code_table        self<span class="token punctuation">.</span>_concat <span class="token operator">=</span> concat        self<span class="token punctuation">.</span>_eof <span class="token operator">=</span> eof        <span class="token keyword">if</span> check<span class="token punctuation">:</span>            <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_table<span class="token punctuation">,</span> dict<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">"{Fore.RED}Code table need to be a dict!{Style.RESET_ALL}"</span>            <span class="token keyword">assert</span> all<span class="token punctuation">(</span>                isinstance<span class="token punctuation">(</span>b<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token operator">and</span> b <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">and</span> isinstance<span class="token punctuation">(</span>v<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token operator">and</span> v <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_table<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">"{Fore.RED}Code table internal format Error!{Style.RESET_ALL}"</span>    <span class="token keyword">def</span> <span class="token function">get_code_table</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Dict<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            get_code_table returns code table of input sequence        Returns:            self._table        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_table    <span class="token keyword">def</span> <span class="token function">print_code_table</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> pandas<span class="token punctuation">.</span>DataFrame<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            print_code_table is used to print code table        Args:            verbose (bool): if True, then print the table in a pretty format        Returns:            pd.DataFrame        """</span>        pd<span class="token punctuation">.</span>options<span class="token punctuation">.</span>display<span class="token punctuation">.</span>max_rows <span class="token operator">=</span> None        columns <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span>            <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"Symbol"</span><span class="token punctuation">,</span> <span class="token string">"Huff Code"</span><span class="token punctuation">,</span> <span class="token string">"BitSize"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>                <span class="token punctuation">(</span>repr<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">,</span> bin<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>bits<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> symbol<span class="token punctuation">,</span> <span class="token punctuation">(</span>bits<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_table<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>        <span class="token keyword">return</span> df    <span class="token keyword">def</span> <span class="token function">_encode_streaming</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_sequence<span class="token punctuation">)</span><span class="token punctuation">:</span>        size <span class="token operator">=</span> <span class="token number">0</span>        buffer <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> raw_sequence<span class="token punctuation">:</span>            bits<span class="token punctuation">,</span> values <span class="token operator">=</span> self<span class="token punctuation">.</span>_table<span class="token punctuation">[</span>s<span class="token punctuation">]</span>            buffer <span class="token operator">=</span> <span class="token punctuation">(</span>buffer <span class="token operator">&lt;&lt;</span> bits<span class="token punctuation">)</span> <span class="token operator">+</span> values            size <span class="token operator">+=</span> bits            <span class="token keyword">while</span> size <span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">:</span>                byte <span class="token operator">=</span> buffer <span class="token operator">>></span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span>                <span class="token keyword">yield</span> byte                buffer <span class="token operator">=</span> buffer <span class="token operator">-</span> <span class="token punctuation">(</span>byte <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                size <span class="token operator">-=</span> <span class="token number">8</span>        <span class="token keyword">if</span> size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            bit<span class="token punctuation">,</span> value <span class="token operator">=</span> self<span class="token punctuation">.</span>_table<span class="token punctuation">[</span>self<span class="token punctuation">.</span>_eof<span class="token punctuation">]</span>            buffer <span class="token operator">=</span> <span class="token punctuation">(</span>buffer <span class="token operator">&lt;&lt;</span> bit<span class="token punctuation">)</span> <span class="token operator">+</span> value            size <span class="token operator">+=</span> bit            <span class="token keyword">if</span> size <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">:</span>                byte <span class="token operator">=</span> buffer <span class="token operator">>></span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                byte <span class="token operator">=</span> buffer <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> size<span class="token punctuation">)</span>            <span class="token keyword">yield</span> byte    <span class="token keyword">def</span> <span class="token function">_decode_streaming</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> encoded_sequence<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Reverse lookup table: map (bitsize, value) to symbols</span>        lookup <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span> s <span class="token keyword">for</span> s<span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_table<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        buffer <span class="token operator">=</span> <span class="token number">0</span>        size <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> byte <span class="token keyword">in</span> encoded_sequence<span class="token punctuation">:</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                buffer <span class="token operator">=</span> <span class="token punctuation">(</span>buffer <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> bool<span class="token punctuation">(</span>byte <span class="token operator">&amp;</span> m<span class="token punctuation">)</span>                size <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token keyword">in</span> lookup<span class="token punctuation">:</span>                    symbol <span class="token operator">=</span> lookup<span class="token punctuation">[</span>size<span class="token punctuation">,</span> buffer<span class="token punctuation">]</span>                    <span class="token keyword">if</span> symbol <span class="token operator">==</span> self<span class="token punctuation">.</span>_eof<span class="token punctuation">:</span>                        <span class="token keyword">return</span>                    <span class="token keyword">yield</span> symbol                    buffer <span class="token operator">=</span> <span class="token number">0</span>                    size <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_seq<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            encode is used to encode the sequence that build the huffman tree        Args:            raw_seq: sequence that build the huffman tree        Returns:            bytes        """</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_encode_streaming<span class="token punctuation">(</span>raw_seq<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> encoded_seq<span class="token punctuation">,</span> concat<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>concat <span class="token operator">or</span> self<span class="token punctuation">.</span>_concat<span class="token punctuation">)</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_decode_streaming<span class="token punctuation">(</span>encoded_seq<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> Path<span class="token punctuation">]</span><span class="token punctuation">,</span> metadata<span class="token punctuation">:</span> Any <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        code_table <span class="token operator">=</span> self<span class="token punctuation">.</span>get_code_table<span class="token punctuation">(</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"code_table"</span><span class="token punctuation">:</span> code_table<span class="token punctuation">,</span>            <span class="token string">"type"</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"concat"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>_concat<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> metadata<span class="token punctuation">:</span>            data<span class="token punctuation">[</span><span class="token string">'metadata'</span><span class="token punctuation">]</span> <span class="token operator">=</span> metadata        path <span class="token operator">=</span> Path<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        ensure_dir<span class="token punctuation">(</span>path<span class="token punctuation">.</span>parent<span class="token punctuation">)</span>        <span class="token keyword">with</span> path<span class="token punctuation">.</span>open<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> file<span class="token operator">=</span>f<span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> Path<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'_HuffmanCoder'</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> Path<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">with</span> path<span class="token punctuation">.</span>open<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            data <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        cls <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span>        <span class="token keyword">assert</span> issubclass<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> _HuffmanCoder<span class="token punctuation">)</span>        code_table <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'code_table'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> cls<span class="token punctuation">(</span>code_table<span class="token punctuation">,</span> concat<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'concat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">HuffmanCoderFactory</span><span class="token punctuation">(</span>_HuffmanCoder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Notes:        HuffmanCodecFactory is the class that create HuffmanCoder from different type of inputs    Methods:        from_frequencies: create HuffmanCoder from frequency table    """</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">from_frequencies</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> frequencies<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">,</span> concat<span class="token operator">=</span>None<span class="token punctuation">,</span> eof<span class="token operator">=</span>_EOF<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            from_frequencies creates huffman codec by symbol-frequency table/mapping.        Args:            frequencies (Dict[Any, int]): Symbols and its frequency, symbols can be str, bytes or int, etc.            concat (Union[None]): concat method of symbols, will be determined by the function if argument is not                specified            eof (_EOFSymbol): leave it alone.        Returns:            __HuffmanCoder        Examples:            >>> huf_coder = HuffmanCoderFactory.from_frequencies({"a":29, "b":10, "c": 5})            >>> type(huf_coder)        """</span>        concat_function <span class="token operator">=</span> concat <span class="token keyword">if</span> concat <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token keyword">else</span> _guess_concat_function<span class="token punctuation">(</span>next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>frequencies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># build huffman tree node heap</span>        <span class="token comment" spellcheck="true"># each item: (frequency, [(symbol, (bitsize, value))], value equals which layer of the tree</span>        heap<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>freq<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> symbol<span class="token punctuation">,</span> freq <span class="token keyword">in</span>                                                                     frequencies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># add eof</span>        <span class="token keyword">if</span> eof <span class="token operator">not</span> <span class="token keyword">in</span> frequencies<span class="token punctuation">:</span>            heap<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>eof<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        heapify<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>heap<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># get first 2 min as left and right child tree</span>            a<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>            b<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># merge child to form parent</span>            <span class="token comment" spellcheck="true"># parent frequencies adds together, left child add 0 ahead (do nothing) of previous bits</span>            <span class="token comment" spellcheck="true"># right add 1 ahead of previous bits</span>            merged <span class="token operator">=</span> <span class="token punctuation">(</span>                a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">in</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">in</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token punctuation">)</span>            heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> merged<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># code table is root</span>        table <span class="token operator">=</span> dict<span class="token punctuation">(</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">(</span>table<span class="token punctuation">,</span> concat<span class="token operator">=</span>concat<span class="token punctuation">,</span> check<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> eof<span class="token operator">=</span>eof<span class="token punctuation">)</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">from_sequence</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> sequence<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Any<span class="token punctuation">]</span><span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span>Any<span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> bytes<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            from_sequence will build a huffman tree from a sequence of symbol        Args:            sequence (Union[List, Tuple][Any]):        Returns:            __HuffmanCoder        Examples:            >>> seq = "a"*100 + "b"*29 + "c"*32            >>> coder = HuffmanCoderFactory.from_sequence(seq)        """</span>        frequencies <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span>sequence<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>from_frequencies<span class="token punctuation">(</span>frequencies<span class="token punctuation">,</span> concat<span class="token operator">=</span>_guess_concat_function<span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-哈夫曼编码层接口"><a href="#4-哈夫曼编码层接口" class="headerlink" title="4. 哈夫曼编码层接口"></a>4. 哈夫曼编码层接口</h3><p>为实现GUI与哈弗曼编码解耦，在前面哈夫曼编码的核心类的基础上，编写哈弗曼编码接口函数，完成编码、解码一步到位</p><p>其中：</p><ul><li>encode负责读取文件的二进制流、压缩、输出压缩时的摘要信息</li><li>decode负责读取文件的二进制流、解压、输出解压时的摘要信息</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> Path<span class="token punctuation">]</span><span class="token punctuation">,</span> verbose<span class="token punctuation">:</span> bool<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span>path <span class="token punctuation">:</span><span class="token operator">=</span> Path<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">"{Fore.RED}{path} not exists!{Style.RESET_ALL}"</span>    <span class="token keyword">with</span> path<span class="token punctuation">.</span>open<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    coder <span class="token operator">=</span> HuffmanCoderFactory<span class="token punctuation">.</span>from_sequence<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    byte <span class="token operator">=</span> coder<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>out_fd <span class="token punctuation">:</span><span class="token operator">=</span> path<span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent <span class="token operator">/</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>stem <span class="token operator">+</span> <span class="token string">"_huf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        out_fd<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token punctuation">(</span>main_path <span class="token punctuation">:</span><span class="token operator">=</span> out_fd<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>path<span class="token punctuation">.</span>stem <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> path<span class="token punctuation">.</span>suffix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".huf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>byte<span class="token punctuation">)</span>    coder<span class="token punctuation">.</span>save<span class="token punctuation">(</span>coder_path <span class="token punctuation">:</span><span class="token operator">=</span> out_fd<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>path<span class="token punctuation">.</span>stem <span class="token operator">+</span> <span class="token string">"_coder.huf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b1 <span class="token operator">=</span> path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size    b2 <span class="token operator">=</span> main_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size    b3 <span class="token operator">=</span> coder_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size    summary1<span class="token punctuation">,</span> summary2<span class="token punctuation">,</span> summary3<span class="token punctuation">,</span> summary4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">4</span>    <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>        summary1 <span class="token operator">=</span> f<span class="token string">"Origin file: {path.stem}{path.suffix}, byte size: {b1}"</span>        summary2 <span class="token operator">=</span> f<span class="token string">"Compressed file: {main_path.stem}{main_path.suffix}, byte size: {b2}"</span>        summary3 <span class="token operator">=</span> f<span class="token string">"HuffCoder file: {coder_path.stem}{coder_path.suffix}, byte size: {b3}"</span>        summary4 <span class="token operator">=</span> f<span class="token string">"{Fore.GREEN}Compression rate {b2}/{b1}={Style.BRIGHT}{round(b2/b1, 4)*100}%{Style.NORMAL}"</span> <span class="token operator">+</span>\                f<span class="token string">", saved {Style.BRIGHT}{b1-b2}{Style.RESET_ALL} bytes"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token string">"Summary"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>max<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>summary1<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>summary2<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>summary3<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>summary4<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">(</span>summary1<span class="token punctuation">,</span> summary2<span class="token punctuation">,</span> summary3<span class="token punctuation">,</span> summary4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> coder<span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>huf_path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Path<span class="token punctuation">,</span> str<span class="token punctuation">]</span><span class="token punctuation">,</span> coder_path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Path<span class="token punctuation">,</span> str<span class="token punctuation">]</span><span class="token punctuation">,</span> verbose<span class="token punctuation">:</span> bool<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    huf_path<span class="token punctuation">,</span> coder_path <span class="token operator">=</span> Path<span class="token punctuation">(</span>huf_path<span class="token punctuation">)</span><span class="token punctuation">,</span> Path<span class="token punctuation">(</span>coder_path<span class="token punctuation">)</span>    coder <span class="token operator">=</span> _HuffmanCoder<span class="token punctuation">.</span>load<span class="token punctuation">(</span>coder_path<span class="token punctuation">)</span>    <span class="token keyword">with</span> huf_path<span class="token punctuation">.</span>open<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    decoded <span class="token operator">=</span> coder<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token punctuation">(</span>dec_path <span class="token punctuation">:</span><span class="token operator">=</span> huf_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token punctuation">:</span><span class="token operator">=</span> huf_path<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token string">"_decode.{s[1]}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>decoded<span class="token punctuation">)</span>    b1 <span class="token operator">=</span> huf_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size    b2 <span class="token operator">=</span> coder_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size    b3 <span class="token operator">=</span> dec_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size    <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>        summary1 <span class="token operator">=</span> f<span class="token string">"Origin file: {huf_path.stem}{huf_path.suffix}, byte size: {b1}"</span>        summary2 <span class="token operator">=</span> f<span class="token string">"Coder file: {coder_path.stem}{coder_path.suffix}, byte size: {b2}"</span>        summary3 <span class="token operator">=</span> f<span class="token string">"Decompressed file: {dec_path.stem}{dec_path.suffix}, byte size: {b3}"</span>        summary4 <span class="token operator">=</span> f<span class="token string">"{Fore.GREEN}Decompression rate {b3}/{b1}={Style.BRIGHT}{round(b3/b1, 4)*100}%{Style.NORMAL}"</span> <span class="token operator">+</span>\                f<span class="token string">", lost {Style.BRIGHT}{b3-b1}{Style.RESET_ALL} bytes"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token string">"Summary"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>max<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>summary1<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>summary2<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>summary3<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>summary4<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">(</span>summary1<span class="token punctuation">,</span> summary2<span class="token punctuation">,</span> summary3<span class="token punctuation">,</span> summary4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> coder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-用户接口层"><a href="#5-用户接口层" class="headerlink" title="5. 用户接口层"></a>5. 用户接口层</h3><p>用户接口层负责提供命令行用户界面以及GUI用户界面</p><h4 id="A-GUI用户界面"><a href="#A-GUI用户界面" class="headerlink" title="A. GUI用户界面"></a>A. GUI用户界面</h4><p>GUI用户界面由于会接管程序流的控制，因此以类的形式进行封装。</p><p>其中：</p><ul><li>initUI方法负责窗口的UI设计、按钮等控件的信号对应的槽函数（信号处理函数）的绑定</li><li>fileDialog方法负责暂时接管程序流，以GUI的形式帮助用户进行文件的选择，以Dialog的形式暂时接管程序运行</li><li>compress方法作为压缩按钮的槽函数，负责文件的压缩，在进行文件路径检查（文件存在）之后，调用哈夫曼编码层提供的接口函数进行压缩，并将摘要信息输出到程序显示框内</li><li>decompress方法作为解压按钮的槽函数，负责文件的解压，在进行文件路径检查（压缩文件以及哈夫曼编码表文件均存在）之后，调用哈夫曼编码层提供的接口函数进行解压，并将摘要信息输出到程序显示框内</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">QtGUIHuff</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>initUI<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">initUI</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> Ui_main <span class="token keyword">import</span> Ui_Form        self<span class="token punctuation">.</span>ui <span class="token operator">=</span> Ui_Form<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">"哈夫曼压缩/解压缩程序"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>compress<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>decompress<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>decompress<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fileDialog</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        dialog <span class="token operator">=</span> QFileDialog<span class="token punctuation">(</span><span class="token punctuation">)</span>        dialog<span class="token punctuation">.</span>setFileMode<span class="token punctuation">(</span>QFileDialog<span class="token punctuation">.</span>AnyFile<span class="token punctuation">)</span>        dialog<span class="token punctuation">.</span>setFilter<span class="token punctuation">(</span>QDir<span class="token punctuation">.</span>Files<span class="token punctuation">)</span>        <span class="token keyword">if</span> dialog<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            filename <span class="token operator">=</span> dialog<span class="token punctuation">.</span>selectedFiles<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Path<span class="token punctuation">(</span>filename<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">compress</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        f_path <span class="token operator">=</span> self<span class="token punctuation">.</span>fileDialog<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setReadOnly<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"开始压缩"</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> encode<span class="token punctuation">(</span>f_path<span class="token punctuation">)</span>        summary1 <span class="token operator">=</span> f<span class="token string">"Origin file: {f_path.stem}{f_path.suffix}, byte size: {result[0]}"</span>        summary2 <span class="token operator">=</span> f<span class="token string">"Compressed file:  byte size: {result[1]}"</span>        summary3 <span class="token operator">=</span> f<span class="token string">"HuffCoder file: , byte size: {result[2]}"</span>        summary4 <span class="token operator">=</span> f<span class="token string">"Compression rate {result[1]}/{result[0]}={round(result[1]/result[0], 4)*100}%"</span> <span class="token operator">+</span> \                f<span class="token string">", saved {result[0] - result[1]} bytes"</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">*</span>s<span class="token punctuation">,</span> summary1<span class="token punctuation">,</span> summary2<span class="token punctuation">,</span> summary3<span class="token punctuation">,</span> summary4<span class="token punctuation">,</span> <span class="token string">"压缩结束"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>print_code_table<span class="token punctuation">(</span>verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decompress</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        f_path <span class="token operator">=</span> self<span class="token punctuation">.</span>fileDialog<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> f_path<span class="token punctuation">.</span>suffix <span class="token operator">!=</span> <span class="token string">".huf"</span><span class="token punctuation">:</span>            QMessageBox<span class="token punctuation">.</span>warning<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"警告"</span><span class="token punctuation">,</span> <span class="token string">"请选择正确的压缩文件路径"</span><span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Yes<span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Yes<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>ps <span class="token punctuation">:</span><span class="token operator">=</span> list<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>f_path<span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">"*.huf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span>            <span class="token keyword">for</span> p_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token string">"coder"</span> <span class="token keyword">in</span> ps<span class="token punctuation">[</span>p_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>stem<span class="token punctuation">:</span>                    cp_idx <span class="token operator">=</span> p_idx        <span class="token keyword">else</span><span class="token punctuation">:</span>            QMessageBox<span class="token punctuation">.</span>warning<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"警告"</span><span class="token punctuation">,</span> <span class="token string">"缺少必要的解压缩文件"</span><span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Yes<span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Yes<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"开始解压"</span><span class="token punctuation">]</span>        <span class="token keyword">import</span> time        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> decode<span class="token punctuation">(</span>huf_path<span class="token punctuation">:</span><span class="token operator">=</span>ps<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span>cp_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> coder_path<span class="token punctuation">:</span><span class="token operator">=</span>ps<span class="token punctuation">[</span>cp_idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        summary1 <span class="token operator">=</span> f<span class="token string">"Origin file: {huf_path.stem}{huf_path.suffix}, byte size: {result[0]}"</span>        summary2 <span class="token operator">=</span> f<span class="token string">"Coder file: {coder_path.stem}{coder_path.suffix}, byte size: {result[1]}"</span>        summary3 <span class="token operator">=</span> f<span class="token string">"Decompressed file: byte size: {result[2]}"</span>        summary4 <span class="token operator">=</span> f<span class="token string">"Decompression rate {result[2]}/{result[0]}={round(result[2]/result[0], 4)*100}%"</span> <span class="token operator">+</span>\                f<span class="token string">", lost {result[2] - result[0]} bytes"</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">*</span>s<span class="token punctuation">,</span> summary1<span class="token punctuation">,</span> summary2<span class="token punctuation">,</span> summary3<span class="token punctuation">,</span> summary4<span class="token punctuation">,</span> <span class="token string">"解压结束"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>print_code_table<span class="token punctuation">(</span>verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="B-Terminal用户界面"><a href="#B-Terminal用户界面" class="headerlink" title="B. Terminal用户界面"></a>B. Terminal用户界面</h4><p>Terminal用户界面则是以argparse库中的ArgumentParser对象完成命令行参数的接受，稍后在主程序中配合完成用户界面。设定了-h参数输出帮助信息、-s对指定路径的文件进行压缩、-t对指定路径的文件进行解压、-g以GUI用户界面运行程序，-v将压缩/解压摘要输出到命令行窗口</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> argparse<span class="token punctuation">.</span>Namespace<span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>        description<span class="token operator">=</span><span class="token string">"哈夫曼压缩算法Python实现，可以对任意文件进行压缩，提供命令行以及GUI用户界面。作者：Jack Wang"</span>    <span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-s"</span><span class="token punctuation">,</span> <span class="token string">"--src"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"src_path"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> default<span class="token operator">=</span>None<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"需要压缩的文件路径"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-t"</span><span class="token punctuation">,</span> <span class="token string">"--target"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"target_path"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> default<span class="token operator">=</span>None<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"需要解压文件所在的文件夹的路径"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-v"</span><span class="token punctuation">,</span> <span class="token string">"--verbose"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"v"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"是否显示压缩的摘要信息"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"--gui"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"gui"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"是否以GUI方式显示"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-主程序"><a href="#6-主程序" class="headerlink" title="6. 主程序"></a>6. 主程序</h3><p>主程序很简单，根据接受的命令行参数调用不同的接口即可</p><p>在非图形界面的运行的时候，程序的主控制流以程序为主，而以GUI方式运行的时候，程序的控制流则在Qt框架下，用户级线程调度、事件监听、信号分发、槽函数（信号处理函数）唤醒等均由框架负责。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> argparse<span class="token punctuation">.</span>Namespace<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> args<span class="token punctuation">.</span>gui<span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token operator">&lt;</span> int<span class="token punctuation">(</span>args<span class="token punctuation">.</span>src_path <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">)</span> <span class="token operator">+</span> int<span class="token punctuation">(</span>args<span class="token punctuation">.</span>target_path <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">"{Fore.RED}请选择压缩或者解压，使用-h查询用法{Style.RESET_ALL}"</span>    <span class="token keyword">if</span> <span class="token operator">not</span> args<span class="token punctuation">.</span>gui<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}命令行工作模式{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> args<span class="token punctuation">.</span>src_path <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"开始压缩 {args.src_path}"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> args<span class="token punctuation">.</span>v<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>encode<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>args<span class="token punctuation">.</span>src_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>print_code_table<span class="token punctuation">(</span>verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                encode<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>args<span class="token punctuation">.</span>src_path<span class="token punctuation">)</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"压缩完成"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> args<span class="token punctuation">.</span>target_path <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>ps <span class="token punctuation">:</span><span class="token operator">=</span> list<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>args<span class="token punctuation">.</span>target_path<span class="token punctuation">)</span><span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">"*.huf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span>                <span class="token keyword">for</span> p_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token string">"coder"</span> <span class="token keyword">in</span> ps<span class="token punctuation">[</span>p_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>stem<span class="token punctuation">:</span>                        cp_idx <span class="token operator">=</span> p_idx            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">assert</span> <span class="token boolean">False</span><span class="token punctuation">,</span> f<span class="token string">"{Fore.RED}无效的路径，没有找到压缩文件{Style.RESET_ALL}"</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"开始解压 {args.target_path}"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> args<span class="token punctuation">.</span>v<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>decode<span class="token punctuation">(</span>huf_path<span class="token operator">=</span>ps<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span>cp_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> coder_path<span class="token operator">=</span>ps<span class="token punctuation">[</span>cp_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>print_code_table<span class="token punctuation">(</span>verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                decode<span class="token punctuation">(</span>huf_path<span class="token operator">=</span>ps<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span>cp_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> coder_path<span class="token operator">=</span>ps<span class="token punctuation">[</span>cp_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解压完成"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>        m <span class="token operator">=</span> QtGUIHuff<span class="token punctuation">(</span><span class="token punctuation">)</span>        m<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-运行实例"><a href="#5-运行实例" class="headerlink" title="5. 运行实例"></a>5. 运行实例</h2><h3 id="A-GIF版演示"><a href="#A-GIF版演示" class="headerlink" title="A. GIF版演示"></a>A. GIF版演示</h3><p> 这里先放一个gif图片（比较大，44兆，不知道能不能加载出来），高清版本去下面的B站视频里看看</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/哈夫曼算法压缩任意文件演示.gif" alt=""></p><h3 id="B-B站高清版"><a href="#B-B站高清版" class="headerlink" title="B. B站高清版"></a>B. B站高清版</h3><p><a href="https://www.bilibili.com/video/BV1cL41177zL/">视频链接</a>：<a href="https://www.bilibili.com/video/BV1cL41177zL/">https://www.bilibili.com/video/BV1cL41177zL/</a></p><iframe src="//player.bilibili.com/player.html?aid=465019836&amp;bvid=BV1cL41177zL&amp;cid=465905780&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><h2 id="6-完整代码"><a href="#6-完整代码" class="headerlink" title="6. 完整代码"></a>6. 完整代码</h2><p>完整代码如下</p><h3 id="A-huff-py"><a href="#A-huff-py" class="headerlink" title="A. huff.py"></a>A. huff.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> pickle<span class="token keyword">import</span> argparse<span class="token keyword">import</span> itertools<span class="token keyword">import</span> collections<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">from</span> heapq <span class="token keyword">import</span> heapify<span class="token punctuation">,</span> heappush<span class="token punctuation">,</span> heappop<span class="token keyword">from</span> typing <span class="token keyword">import</span> Union<span class="token punctuation">,</span> Any<span class="token punctuation">,</span> Dict<span class="token punctuation">,</span> List<span class="token punctuation">,</span> Tuple<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtCore <span class="token keyword">import</span> QDir<span class="token keyword">import</span> pandas<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> <span class="token operator">*</span>__author__ <span class="token operator">=</span> <span class="token string">"Jack Wang"</span>__date__ <span class="token operator">=</span> <span class="token string">"2021/12/19"</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"./ui"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">_EOFSymbol</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Notes:        _EOFSymbol 是内置的文件结尾的类，用于在编码的时候标志文件的结尾。        由于在进行哈夫曼树的构建的时候需要选出来权最小的节点，因此需要重写比较的魔术方法。        默认文档结尾是频率最少的字符，因此和任何数字比较    """</span>    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"_EOF"</span>    <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">__gt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__class__ <span class="token operator">==</span> other<span class="token punctuation">.</span>__class__    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> hash<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__class__<span class="token punctuation">)</span>_EOF <span class="token operator">=</span> _EOFSymbol<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_guess_concat_function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Notes:        To support multiple types of input, e.g., str, bytes, list, there must be a        function that return the needed concat function    Returns:        pass    """</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>type<span class="token punctuation">(</span>u<span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span> u<span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">,</span> type<span class="token punctuation">(</span>b<span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bytes<span class="token punctuation">}</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>type<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ensure_dir</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> Path<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Path<span class="token punctuation">:</span>    path<span class="token punctuation">:</span> Path <span class="token operator">=</span> path <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>path<span class="token punctuation">,</span> Path<span class="token punctuation">)</span> <span class="token keyword">else</span> Path<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        path<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">assert</span> path<span class="token punctuation">.</span>is_dir<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> path<span class="token keyword">class</span> <span class="token class-name">_HuffmanCoder</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Notes:        _HuffmanCoder, which provide encode, decode, serialize, deserialize, save_code, load_code functionalities.    Args:    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> code_table<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> concat<span class="token operator">=</span>list<span class="token punctuation">,</span> check<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> eof<span class="token operator">=</span>_EOF<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            initialize method of _HuffmanCoder with given code table        Args:            code_table (Dict[Any, Tuple[int, int]]): code table of all symbols in the encoding sequence, create automatically by                HuffmanCoderFactory, items are Tuple[Symbol, [depth, bit]]            concat: concat method of symbols, will be automatically determined in HuffmanCoderFactory            check: valid code table's format            eof: eof symbol, leave it alone        """</span>        self<span class="token punctuation">.</span>_table <span class="token operator">=</span> code_table        self<span class="token punctuation">.</span>_concat <span class="token operator">=</span> concat        self<span class="token punctuation">.</span>_eof <span class="token operator">=</span> eof        <span class="token keyword">if</span> check<span class="token punctuation">:</span>            <span class="token keyword">assert</span> isinstance<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_table<span class="token punctuation">,</span> dict<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">"{Fore.RED}Code table need to be a dict!{Style.RESET_ALL}"</span>            <span class="token keyword">assert</span> all<span class="token punctuation">(</span>                isinstance<span class="token punctuation">(</span>b<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token operator">and</span> b <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">and</span> isinstance<span class="token punctuation">(</span>v<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token operator">and</span> v <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_table<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">"{Fore.RED}Code table internal format Error!{Style.RESET_ALL}"</span>    <span class="token keyword">def</span> <span class="token function">get_code_table</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Dict<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            get_code_table returns code table of input sequence        Returns:            self._table        """</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_table    <span class="token keyword">def</span> <span class="token function">print_code_table</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> pandas<span class="token punctuation">.</span>DataFrame<span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            print_code_table is used to print code table        Args:            verbose (bool): if True, then print the table in a pretty format        Returns:            pd.DataFrame        """</span>        pd<span class="token punctuation">.</span>options<span class="token punctuation">.</span>display<span class="token punctuation">.</span>max_rows <span class="token operator">=</span> None        columns <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>itertools<span class="token punctuation">.</span>chain<span class="token punctuation">(</span>            <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"Symbol"</span><span class="token punctuation">,</span> <span class="token string">"Huff Code"</span><span class="token punctuation">,</span> <span class="token string">"BitSize"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>                <span class="token punctuation">(</span>repr<span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">,</span> bin<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>bits<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>bits<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> symbol<span class="token punctuation">,</span> <span class="token punctuation">(</span>bits<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_table<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span>        <span class="token keyword">return</span> df    <span class="token keyword">def</span> <span class="token function">_encode_streaming</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_sequence<span class="token punctuation">)</span><span class="token punctuation">:</span>        size <span class="token operator">=</span> <span class="token number">0</span>        buffer <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> s <span class="token keyword">in</span> raw_sequence<span class="token punctuation">:</span>            bits<span class="token punctuation">,</span> values <span class="token operator">=</span> self<span class="token punctuation">.</span>_table<span class="token punctuation">[</span>s<span class="token punctuation">]</span>            buffer <span class="token operator">=</span> <span class="token punctuation">(</span>buffer <span class="token operator">&lt;&lt;</span> bits<span class="token punctuation">)</span> <span class="token operator">+</span> values            size <span class="token operator">+=</span> bits            <span class="token keyword">while</span> size <span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">:</span>                byte <span class="token operator">=</span> buffer <span class="token operator">>></span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span>                <span class="token keyword">yield</span> byte                buffer <span class="token operator">=</span> buffer <span class="token operator">-</span> <span class="token punctuation">(</span>byte <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                size <span class="token operator">-=</span> <span class="token number">8</span>        <span class="token keyword">if</span> size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            bit<span class="token punctuation">,</span> value <span class="token operator">=</span> self<span class="token punctuation">.</span>_table<span class="token punctuation">[</span>self<span class="token punctuation">.</span>_eof<span class="token punctuation">]</span>            buffer <span class="token operator">=</span> <span class="token punctuation">(</span>buffer <span class="token operator">&lt;&lt;</span> bit<span class="token punctuation">)</span> <span class="token operator">+</span> value            size <span class="token operator">+=</span> bit            <span class="token keyword">if</span> size <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">:</span>                byte <span class="token operator">=</span> buffer <span class="token operator">>></span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                byte <span class="token operator">=</span> buffer <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> size<span class="token punctuation">)</span>            <span class="token keyword">yield</span> byte    <span class="token keyword">def</span> <span class="token function">_decode_streaming</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> encoded_sequence<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Reverse lookup table: map (bitsize, value) to symbols</span>        lookup <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span> s <span class="token keyword">for</span> s<span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>_table<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        buffer <span class="token operator">=</span> <span class="token number">0</span>        size <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> byte <span class="token keyword">in</span> encoded_sequence<span class="token punctuation">:</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                buffer <span class="token operator">=</span> <span class="token punctuation">(</span>buffer <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> bool<span class="token punctuation">(</span>byte <span class="token operator">&amp;</span> m<span class="token punctuation">)</span>                size <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span> <span class="token keyword">in</span> lookup<span class="token punctuation">:</span>                    symbol <span class="token operator">=</span> lookup<span class="token punctuation">[</span>size<span class="token punctuation">,</span> buffer<span class="token punctuation">]</span>                    <span class="token keyword">if</span> symbol <span class="token operator">==</span> self<span class="token punctuation">.</span>_eof<span class="token punctuation">:</span>                        <span class="token keyword">return</span>                    <span class="token keyword">yield</span> symbol                    buffer <span class="token operator">=</span> <span class="token number">0</span>                    size <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_seq<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            encode is used to encode the sequence that build the huffman tree        Args:            raw_seq: sequence that build the huffman tree        Returns:            bytes        """</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_encode_streaming<span class="token punctuation">(</span>raw_seq<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> encoded_seq<span class="token punctuation">,</span> concat<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>concat <span class="token operator">or</span> self<span class="token punctuation">.</span>_concat<span class="token punctuation">)</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>_decode_streaming<span class="token punctuation">(</span>encoded_seq<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> Path<span class="token punctuation">]</span><span class="token punctuation">,</span> metadata<span class="token punctuation">:</span> Any <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>        code_table <span class="token operator">=</span> self<span class="token punctuation">.</span>get_code_table<span class="token punctuation">(</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"code_table"</span><span class="token punctuation">:</span> code_table<span class="token punctuation">,</span>            <span class="token string">"type"</span><span class="token punctuation">:</span> type<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"concat"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>_concat<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> metadata<span class="token punctuation">:</span>            data<span class="token punctuation">[</span><span class="token string">'metadata'</span><span class="token punctuation">]</span> <span class="token operator">=</span> metadata        path <span class="token operator">=</span> Path<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        ensure_dir<span class="token punctuation">(</span>path<span class="token punctuation">.</span>parent<span class="token punctuation">)</span>        <span class="token keyword">with</span> path<span class="token punctuation">.</span>open<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span> file<span class="token operator">=</span>f<span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> Path<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'_HuffmanCoder'</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> Path<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">with</span> path<span class="token punctuation">.</span>open<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            data <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        cls <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span>        <span class="token keyword">assert</span> issubclass<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> _HuffmanCoder<span class="token punctuation">)</span>        code_table <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'code_table'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> cls<span class="token punctuation">(</span>code_table<span class="token punctuation">,</span> concat<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'concat'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">HuffmanCoderFactory</span><span class="token punctuation">(</span>_HuffmanCoder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Notes:        HuffmanCodecFactory is the class that create HuffmanCoder from different type of inputs    Methods:        from_frequencies: create HuffmanCoder from frequency table    """</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">from_frequencies</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> frequencies<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">,</span> concat<span class="token operator">=</span>None<span class="token punctuation">,</span> eof<span class="token operator">=</span>_EOF<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            from_frequencies creates huffman codec by symbol-frequency table/mapping.        Args:            frequencies (Dict[Any, int]): Symbols and its frequency, symbols can be str, bytes or int, etc.            concat (Union[None]): concat method of symbols, will be determined by the function if argument is not                specified            eof (_EOFSymbol): leave it alone.        Returns:            __HuffmanCoder        Examples:            >>> huf_coder = HuffmanCoderFactory.from_frequencies({"a":29, "b":10, "c": 5})            >>> type(huf_coder)        """</span>        concat_function <span class="token operator">=</span> concat <span class="token keyword">if</span> concat <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token keyword">else</span> _guess_concat_function<span class="token punctuation">(</span>next<span class="token punctuation">(</span>iter<span class="token punctuation">(</span>frequencies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># build huffman tree node heap</span>        <span class="token comment" spellcheck="true"># each item: (frequency, [(symbol, (bitsize, value))], value equals which layer of the tree</span>        heap<span class="token punctuation">:</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>freq<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>symbol<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> symbol<span class="token punctuation">,</span> freq <span class="token keyword">in</span>                                                                     frequencies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># add eof</span>        <span class="token keyword">if</span> eof <span class="token operator">not</span> <span class="token keyword">in</span> frequencies<span class="token punctuation">:</span>            heap<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>eof<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        heapify<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>        <span class="token keyword">while</span> len<span class="token punctuation">(</span>heap<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># get first 2 min as left and right child tree</span>            a<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>            b<span class="token punctuation">:</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> List<span class="token punctuation">[</span>Tuple<span class="token punctuation">[</span>Any<span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span>int<span class="token punctuation">,</span> int<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># merge child to form parent</span>            <span class="token comment" spellcheck="true"># parent frequencies adds together, left child add 0 ahead (do nothing) of previous bits</span>            <span class="token comment" spellcheck="true"># right add 1 ahead of previous bits</span>            merged <span class="token operator">=</span> <span class="token punctuation">(</span>                a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">in</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">in</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token punctuation">)</span>            heappush<span class="token punctuation">(</span>heap<span class="token punctuation">,</span> merged<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># code table is root</span>        table <span class="token operator">=</span> dict<span class="token punctuation">(</span>heappop<span class="token punctuation">(</span>heap<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">(</span>table<span class="token punctuation">,</span> concat<span class="token operator">=</span>concat<span class="token punctuation">,</span> check<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> eof<span class="token operator">=</span>eof<span class="token punctuation">)</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">from_sequence</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> sequence<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Any<span class="token punctuation">]</span><span class="token punctuation">,</span> Tuple<span class="token punctuation">[</span>Any<span class="token punctuation">]</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> bytes<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Notes:            from_sequence will build a huffman tree from a sequence of symbol        Args:            sequence (Union[List, Tuple][Any]):        Returns:            __HuffmanCoder        Examples:            >>> seq = "a"*100 + "b"*29 + "c"*32            >>> coder = HuffmanCoderFactory.from_sequence(seq)        """</span>        frequencies <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span>sequence<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>from_frequencies<span class="token punctuation">(</span>frequencies<span class="token punctuation">,</span> concat<span class="token operator">=</span>_guess_concat_function<span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>str<span class="token punctuation">,</span> Path<span class="token punctuation">]</span><span class="token punctuation">,</span> verbose<span class="token punctuation">:</span> bool<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span>path <span class="token punctuation">:</span><span class="token operator">=</span> Path<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">"{Fore.RED}{path} not exists!{Style.RESET_ALL}"</span>    <span class="token keyword">with</span> path<span class="token punctuation">.</span>open<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    coder <span class="token operator">=</span> HuffmanCoderFactory<span class="token punctuation">.</span>from_sequence<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    byte <span class="token operator">=</span> coder<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>out_fd <span class="token punctuation">:</span><span class="token operator">=</span> path<span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent <span class="token operator">/</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span>stem <span class="token operator">+</span> <span class="token string">"_huf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        out_fd<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token punctuation">(</span>main_path <span class="token punctuation">:</span><span class="token operator">=</span> out_fd<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>path<span class="token punctuation">.</span>stem <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> path<span class="token punctuation">.</span>suffix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".huf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>byte<span class="token punctuation">)</span>    coder<span class="token punctuation">.</span>save<span class="token punctuation">(</span>coder_path <span class="token punctuation">:</span><span class="token operator">=</span> out_fd<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>path<span class="token punctuation">.</span>stem <span class="token operator">+</span> <span class="token string">"_coder.huf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b1 <span class="token operator">=</span> path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size    b2 <span class="token operator">=</span> main_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size    b3 <span class="token operator">=</span> coder_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size    summary1<span class="token punctuation">,</span> summary2<span class="token punctuation">,</span> summary3<span class="token punctuation">,</span> summary4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">4</span>    <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>        summary1 <span class="token operator">=</span> f<span class="token string">"Origin file: {path.stem}{path.suffix}, byte size: {b1}"</span>        summary2 <span class="token operator">=</span> f<span class="token string">"Compressed file: {main_path.stem}{main_path.suffix}, byte size: {b2}"</span>        summary3 <span class="token operator">=</span> f<span class="token string">"HuffCoder file: {coder_path.stem}{coder_path.suffix}, byte size: {b3}"</span>        summary4 <span class="token operator">=</span> f<span class="token string">"{Fore.GREEN}Compression rate {b2}/{b1}={Style.BRIGHT}{round(b2/b1, 4)*100}%{Style.NORMAL}"</span> <span class="token operator">+</span>\                f<span class="token string">", saved {Style.BRIGHT}{b1-b2}{Style.RESET_ALL} bytes"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token string">"Summary"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>max<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>summary1<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>summary2<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>summary3<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>summary4<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">(</span>summary1<span class="token punctuation">,</span> summary2<span class="token punctuation">,</span> summary3<span class="token punctuation">,</span> summary4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> coder<span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>huf_path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Path<span class="token punctuation">,</span> str<span class="token punctuation">]</span><span class="token punctuation">,</span> coder_path<span class="token punctuation">:</span> Union<span class="token punctuation">[</span>Path<span class="token punctuation">,</span> str<span class="token punctuation">]</span><span class="token punctuation">,</span> verbose<span class="token punctuation">:</span> bool<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    huf_path<span class="token punctuation">,</span> coder_path <span class="token operator">=</span> Path<span class="token punctuation">(</span>huf_path<span class="token punctuation">)</span><span class="token punctuation">,</span> Path<span class="token punctuation">(</span>coder_path<span class="token punctuation">)</span>    coder <span class="token operator">=</span> _HuffmanCoder<span class="token punctuation">.</span>load<span class="token punctuation">(</span>coder_path<span class="token punctuation">)</span>    <span class="token keyword">with</span> huf_path<span class="token punctuation">.</span>open<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        content <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    decoded <span class="token operator">=</span> coder<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token punctuation">(</span>dec_path <span class="token punctuation">:</span><span class="token operator">=</span> huf_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token punctuation">:</span><span class="token operator">=</span> huf_path<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token string">"_decode.{s[1]}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>decoded<span class="token punctuation">)</span>    b1 <span class="token operator">=</span> huf_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size    b2 <span class="token operator">=</span> coder_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size    b3 <span class="token operator">=</span> dec_path<span class="token punctuation">.</span>stat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>st_size    <span class="token keyword">if</span> verbose<span class="token punctuation">:</span>        summary1 <span class="token operator">=</span> f<span class="token string">"Origin file: {huf_path.stem}{huf_path.suffix}, byte size: {b1}"</span>        summary2 <span class="token operator">=</span> f<span class="token string">"Coder file: {coder_path.stem}{coder_path.suffix}, byte size: {b2}"</span>        summary3 <span class="token operator">=</span> f<span class="token string">"Decompressed file: {dec_path.stem}{dec_path.suffix}, byte size: {b3}"</span>        summary4 <span class="token operator">=</span> f<span class="token string">"{Fore.GREEN}Decompression rate {b3}/{b1}={Style.BRIGHT}{round(b3/b1, 4)*100}%{Style.NORMAL}"</span> <span class="token operator">+</span>\                f<span class="token string">", lost {Style.BRIGHT}{b3-b1}{Style.RESET_ALL} bytes"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>s <span class="token punctuation">:</span><span class="token operator">=</span> <span class="token string">"Summary"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>max<span class="token punctuation">(</span><span class="token punctuation">[</span>len<span class="token punctuation">(</span>summary1<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>summary2<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>summary3<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>summary4<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">(</span>summary1<span class="token punctuation">,</span> summary2<span class="token punctuation">,</span> summary3<span class="token punctuation">,</span> summary4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3<span class="token punctuation">,</span> coder<span class="token keyword">def</span> <span class="token function">parse_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> argparse<span class="token punctuation">.</span>Namespace<span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>        description<span class="token operator">=</span><span class="token string">"哈夫曼压缩算法Python实现，可以对任意文件进行压缩，提供命令行以及GUI用户界面。作者：Jack Wang"</span>    <span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-s"</span><span class="token punctuation">,</span> <span class="token string">"--src"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"src_path"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> default<span class="token operator">=</span>None<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"需要压缩的文件路径"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-t"</span><span class="token punctuation">,</span> <span class="token string">"--target"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"target_path"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> default<span class="token operator">=</span>None<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"需要解压文件所在的文件夹的路径"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-v"</span><span class="token punctuation">,</span> <span class="token string">"--verbose"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"v"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"是否显示压缩的摘要信息"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"--gui"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"gui"</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"是否以GUI方式显示"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">QtGUIHuff</span><span class="token punctuation">(</span>QMainWindow<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>initUI<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">initUI</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> Ui_main <span class="token keyword">import</span> Ui_Form        self<span class="token punctuation">.</span>ui <span class="token operator">=</span> Ui_Form<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>setupUi<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">"哈夫曼压缩/解压缩程序"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>compress<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>decompress<span class="token punctuation">.</span>clicked<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>self<span class="token punctuation">.</span>decompress<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fileDialog</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        dialog <span class="token operator">=</span> QFileDialog<span class="token punctuation">(</span><span class="token punctuation">)</span>        dialog<span class="token punctuation">.</span>setFileMode<span class="token punctuation">(</span>QFileDialog<span class="token punctuation">.</span>AnyFile<span class="token punctuation">)</span>        dialog<span class="token punctuation">.</span>setFilter<span class="token punctuation">(</span>QDir<span class="token punctuation">.</span>Files<span class="token punctuation">)</span>        <span class="token keyword">if</span> dialog<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            filename <span class="token operator">=</span> dialog<span class="token punctuation">.</span>selectedFiles<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Path<span class="token punctuation">(</span>filename<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">compress</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        f_path <span class="token operator">=</span> self<span class="token punctuation">.</span>fileDialog<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setReadOnly<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"开始压缩"</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> encode<span class="token punctuation">(</span>f_path<span class="token punctuation">)</span>        summary1 <span class="token operator">=</span> f<span class="token string">"Origin file: {f_path.stem}{f_path.suffix}, byte size: {result[0]}"</span>        summary2 <span class="token operator">=</span> f<span class="token string">"Compressed file:  byte size: {result[1]}"</span>        summary3 <span class="token operator">=</span> f<span class="token string">"HuffCoder file: , byte size: {result[2]}"</span>        summary4 <span class="token operator">=</span> f<span class="token string">"Compression rate {result[1]}/{result[0]}={round(result[1]/result[0], 4)*100}%"</span> <span class="token operator">+</span> \                f<span class="token string">", saved {result[0] - result[1]} bytes"</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">*</span>s<span class="token punctuation">,</span> summary1<span class="token punctuation">,</span> summary2<span class="token punctuation">,</span> summary3<span class="token punctuation">,</span> summary4<span class="token punctuation">,</span> <span class="token string">"压缩结束"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>print_code_table<span class="token punctuation">(</span>verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decompress</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        f_path <span class="token operator">=</span> self<span class="token punctuation">.</span>fileDialog<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> f_path<span class="token punctuation">.</span>suffix <span class="token operator">!=</span> <span class="token string">".huf"</span><span class="token punctuation">:</span>            QMessageBox<span class="token punctuation">.</span>warning<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"警告"</span><span class="token punctuation">,</span> <span class="token string">"请选择正确的压缩文件路径"</span><span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Yes<span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Yes<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>ps <span class="token punctuation">:</span><span class="token operator">=</span> list<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>f_path<span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">"*.huf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span>            <span class="token keyword">for</span> p_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token string">"coder"</span> <span class="token keyword">in</span> ps<span class="token punctuation">[</span>p_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>stem<span class="token punctuation">:</span>                    cp_idx <span class="token operator">=</span> p_idx        <span class="token keyword">else</span><span class="token punctuation">:</span>            QMessageBox<span class="token punctuation">.</span>warning<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"警告"</span><span class="token punctuation">,</span> <span class="token string">"缺少必要的解压缩文件"</span><span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Yes<span class="token punctuation">,</span> QMessageBox<span class="token punctuation">.</span>Yes<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"开始解压"</span><span class="token punctuation">]</span>        <span class="token keyword">import</span> time        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> decode<span class="token punctuation">(</span>huf_path<span class="token punctuation">:</span><span class="token operator">=</span>ps<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span>cp_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> coder_path<span class="token punctuation">:</span><span class="token operator">=</span>ps<span class="token punctuation">[</span>cp_idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        summary1 <span class="token operator">=</span> f<span class="token string">"Origin file: {huf_path.stem}{huf_path.suffix}, byte size: {result[0]}"</span>        summary2 <span class="token operator">=</span> f<span class="token string">"Coder file: {coder_path.stem}{coder_path.suffix}, byte size: {result[1]}"</span>        summary3 <span class="token operator">=</span> f<span class="token string">"Decompressed file: byte size: {result[2]}"</span>        summary4 <span class="token operator">=</span> f<span class="token string">"Decompression rate {result[2]}/{result[0]}={round(result[2]/result[0], 4)*100}%"</span> <span class="token operator">+</span>\                f<span class="token string">", lost {result[2] - result[0]} bytes"</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setText<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">*</span>s<span class="token punctuation">,</span> summary1<span class="token punctuation">,</span> summary2<span class="token punctuation">,</span> summary3<span class="token punctuation">,</span> summary4<span class="token punctuation">,</span> <span class="token string">"解压结束"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>print_code_table<span class="token punctuation">(</span>verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> argparse<span class="token punctuation">.</span>Namespace<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> args<span class="token punctuation">.</span>gui<span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token operator">&lt;</span> int<span class="token punctuation">(</span>args<span class="token punctuation">.</span>src_path <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">)</span> <span class="token operator">+</span> int<span class="token punctuation">(</span>args<span class="token punctuation">.</span>target_path <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">"{Fore.RED}请选择压缩或者解压，使用-h查询用法{Style.RESET_ALL}"</span>    <span class="token keyword">if</span> <span class="token operator">not</span> args<span class="token punctuation">.</span>gui<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}命令行工作模式{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> args<span class="token punctuation">.</span>src_path <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"开始压缩 {args.src_path}"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> args<span class="token punctuation">.</span>v<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>encode<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>args<span class="token punctuation">.</span>src_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>print_code_table<span class="token punctuation">(</span>verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                encode<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>args<span class="token punctuation">.</span>src_path<span class="token punctuation">)</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"压缩完成"</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> args<span class="token punctuation">.</span>target_path <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>ps <span class="token punctuation">:</span><span class="token operator">=</span> list<span class="token punctuation">(</span>Path<span class="token punctuation">(</span>args<span class="token punctuation">.</span>target_path<span class="token punctuation">)</span><span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">"*.huf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span>                <span class="token keyword">for</span> p_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token string">"coder"</span> <span class="token keyword">in</span> ps<span class="token punctuation">[</span>p_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>stem<span class="token punctuation">:</span>                        cp_idx <span class="token operator">=</span> p_idx            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">assert</span> <span class="token boolean">False</span><span class="token punctuation">,</span> f<span class="token string">"{Fore.RED}无效的路径，没有找到压缩文件{Style.RESET_ALL}"</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"开始解压 {args.target_path}"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> args<span class="token punctuation">.</span>v<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>decode<span class="token punctuation">(</span>huf_path<span class="token operator">=</span>ps<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span>cp_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> coder_path<span class="token operator">=</span>ps<span class="token punctuation">[</span>cp_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>print_code_table<span class="token punctuation">(</span>verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                decode<span class="token punctuation">(</span>huf_path<span class="token operator">=</span>ps<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span>cp_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> coder_path<span class="token operator">=</span>ps<span class="token punctuation">[</span>cp_idx<span class="token punctuation">]</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解压完成"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>        m <span class="token operator">=</span> QtGUIHuff<span class="token punctuation">(</span><span class="token punctuation">)</span>        m<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Ui-main-py"><a href="#2-Ui-main-py" class="headerlink" title="2. Ui_main.py"></a>2. Ui_main.py</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Form implementation generated from reading ui file '/media/jack/JackCode/project/data_structure/11_huffman/ui/main.ui'</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Created by: PyQt5 UI code generator 5.9.2</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># WARNING! All changes made in this file will be lost!</span><span class="token keyword">from</span> PyQt5 <span class="token keyword">import</span> QtCore<span class="token punctuation">,</span> QtGui<span class="token punctuation">,</span> QtWidgets<span class="token keyword">class</span> <span class="token class-name">Ui_Form</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setupUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Form<span class="token punctuation">)</span><span class="token punctuation">:</span>        Form<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"Form"</span><span class="token punctuation">)</span>        Form<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">751</span><span class="token punctuation">,</span> <span class="token number">374</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layoutWidget <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QWidget<span class="token punctuation">(</span>Form<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layoutWidget<span class="token punctuation">.</span>setGeometry<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>QRect<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">641</span><span class="token punctuation">,</span> <span class="token number">321</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layoutWidget<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"layoutWidget"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>horizontalLayout_2 <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QHBoxLayout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>layoutWidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>horizontalLayout_2<span class="token punctuation">.</span>setContentsMargins<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>horizontalLayout_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"horizontalLayout_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>verticalLayout <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QVBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>verticalLayout<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"verticalLayout"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>horizontalLayout <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QHBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>horizontalLayout<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"horizontalLayout"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>compress <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QPushButton<span class="token punctuation">(</span>self<span class="token punctuation">.</span>layoutWidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"compress"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>horizontalLayout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>compress<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>decompress <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QPushButton<span class="token punctuation">(</span>self<span class="token punctuation">.</span>layoutWidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>decompress<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"decompress"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>horizontalLayout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>decompress<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>verticalLayout<span class="token punctuation">.</span>addLayout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>horizontalLayout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>layoutWidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setAlignment<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"label"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>verticalLayout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QTextEdit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>layoutWidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"textEdit"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>verticalLayout<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>textEdit<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>horizontalLayout_2<span class="token punctuation">.</span>addLayout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>verticalLayout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>verticalLayout_2 <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QVBoxLayout<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>verticalLayout_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"verticalLayout_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2 <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QLabel<span class="token punctuation">(</span>self<span class="token punctuation">.</span>layoutWidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setAlignment<span class="token punctuation">(</span>QtCore<span class="token punctuation">.</span>Qt<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"label_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>verticalLayout_2<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>label_2<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2 <span class="token operator">=</span> QtWidgets<span class="token punctuation">.</span>QTextEdit<span class="token punctuation">(</span>self<span class="token punctuation">.</span>layoutWidget<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">.</span>setObjectName<span class="token punctuation">(</span><span class="token string">"textEdit_2"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>verticalLayout_2<span class="token punctuation">.</span>addWidget<span class="token punctuation">(</span>self<span class="token punctuation">.</span>textEdit_2<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>horizontalLayout_2<span class="token punctuation">.</span>addLayout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>verticalLayout_2<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>retranslateUi<span class="token punctuation">(</span>Form<span class="token punctuation">)</span>        QtCore<span class="token punctuation">.</span>QMetaObject<span class="token punctuation">.</span>connectSlotsByName<span class="token punctuation">(</span>Form<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">retranslateUi</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> Form<span class="token punctuation">)</span><span class="token punctuation">:</span>        _translate <span class="token operator">=</span> QtCore<span class="token punctuation">.</span>QCoreApplication<span class="token punctuation">.</span>translate        Form<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"Form"</span><span class="token punctuation">,</span> <span class="token string">"Form"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"Form"</span><span class="token punctuation">,</span> <span class="token string">"压缩"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>decompress<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"Form"</span><span class="token punctuation">,</span> <span class="token string">"解压"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"Form"</span><span class="token punctuation">,</span> <span class="token string">"Compress/Decompress Log"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>label_2<span class="token punctuation">.</span>setText<span class="token punctuation">(</span>_translate<span class="token punctuation">(</span><span class="token string">"Form"</span><span class="token punctuation">,</span> <span class="token string">"Huffman Tree"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataStructure </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Python </tag>
            
            <tag> GUI </tag>
            
            <tag> PyQt </tag>
            
            <tag> HuffmanEncode </tag>
            
            <tag> HuffmanAlgorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5学习笔记 Chapter 0-Introduction： Part 3.第一个Qt程序</title>
      <link href="/2021/12/20/pyqt5-xue-xi-bi-ji-3-di-yi-ge-qt-cheng-xu/"/>
      <url>/2021/12/20/pyqt5-xue-xi-bi-ji-3-di-yi-ge-qt-cheng-xu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本讲作为Introduction的最后一讲，实现了一个简单的Qt的GUI程序</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211220145356314.png" alt="第一个Qt Gui程序"></p><h1 id="PyQt5学习笔记-Chapter-0-Introduction：-Part-3-第一个Qt程序"><a href="#PyQt5学习笔记-Chapter-0-Introduction：-Part-3-第一个Qt程序" class="headerlink" title="PyQt5学习笔记 Chapter 0-Introduction： Part 3.第一个Qt程序"></a>PyQt5学习笔记 Chapter 0-Introduction： Part 3.第一个Qt程序</h1><p>在Introduction章节中，我们介绍了什么是Qt、PyQt以及Qt中的一些基本概念。本文作为Introduction的终节，展示一个Qt程序。</p><h2 id="1-Qt程序"><a href="#1-Qt程序" class="headerlink" title="1. Qt程序"></a>1. Qt程序</h2><p>上面的Qt GUI程序的代码如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> PyQt5<span class="token punctuation">.</span>QtWidgets <span class="token keyword">import</span> QApplication<span class="token punctuation">,</span> QMainWindow<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app <span class="token operator">=</span> QApplication<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    w <span class="token operator">=</span> QMainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>move<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>setWindowTitle<span class="token punctuation">(</span><span class="token string">"第一个Qt应用"</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 运行主循环，循环扫描窗口上的事件，并分发给对应的回调函数</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span>app<span class="token punctuation">.</span>exec_<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们运行之后就会弹出来一个窗口。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211220145739135.png" alt="弹出来的窗口"></p><h2 id="2-程序解释"><a href="#2-程序解释" class="headerlink" title="2. 程序解释"></a>2. 程序解释</h2><p>在上面，我们写了一个极简的Qt GUI程序，下面我们对他进行讲解。</p><ol><li>Qt5本身有非常多的功能，例如网络引擎、蓝牙设备管理等等。因此在Qt5中，一个功能就是一个模块。我们这里的QtWidgets模块中包含了所有的Qt常见的功能。例如按钮、窗口、程序等等。</li><li>首先正如前面所讲，我们实例化一个QApplication类</li><li>接下来我们实例化了一个窗口。并将这个窗口大小设置为300像素宽、150像素高；将窗口锚点（左上角点）移动到距离屏幕左上角宽300像素、高300像素的位置；设置窗口名称为第一个Qt应用；最后显示窗口。</li><li>最后我们运行这个程序，并将程序运行的结果（返回值）作为参数传给sys.exit</li></ol><p>其实从上面我们能够看到，一个窗口本身并不是整个程序，而是程序的一部分。这也是Qt的设计思想之一，即功能和显示分离。我们目前只是利用一些对象进行了显示，而功能的实现需要稍后面介绍的信号与槽机制。</p>]]></content>
      
      
      <categories>
          
          <category> PyQt5 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> GUI开发 </tag>
            
            <tag> PyQt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5学习笔记 Chapter 0-Introduction： Part 2.QApplication与QObject</title>
      <link href="/2021/12/17/pyqt5-xue-xi-bi-ji-2-qt-ji-chu-qapplication-yu-qobject/"/>
      <url>/2021/12/17/pyqt5-xue-xi-bi-ji-2-qt-ji-chu-qapplication-yu-qobject/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解了Qt中的核心对象：QApplication与QObject</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211222112408341.png" alt="Qt可以制作出的高端界面"></p><h1 id="PyQt5学习笔记-Chapter-0-Introduction：-Part-2-QApplication与QObject"><a href="#PyQt5学习笔记-Chapter-0-Introduction：-Part-2-QApplication与QObject" class="headerlink" title="PyQt5学习笔记 Chapter 0-Introduction： Part 2.QApplication与QObject"></a>PyQt5学习笔记 Chapter 0-Introduction： Part 2.QApplication与QObject</h1><p>想要学好Qt，我们就需要掌握Qt的设计与架构，单纯的为掌握API是徒劳的，没有理解终究会忘记。本文作为基础，首先介绍了Qt中的QApplication与QObject。</p><h2 id="1-QObject"><a href="#1-QObject" class="headerlink" title="1. QObject"></a>1. QObject</h2><p>前面我们介绍过，Qt是一个面向对象的应用程序框架。因此在Qt中的一起都是对象，例如我们看到的窗口、按钮等等都是对象，甚至连整个应用程序都是对象。不同的对象有不同的属性和方法，例如对于窗口，窗口大小和锚点（左上角点）的位置就是其属性，窗口移动到某个位置就是其方法。而针对按钮，按钮也可以将按钮的大小作为其属性，而将点击作为其方法。</p><p>因此针对所有的对象，Qt提供了QObject作为所有类的基类，所有的类都是QObject的基类。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211222112125225.png" alt="Qt官方对QObject的介绍"></p><p>在未来，随着我们逐步的深入，我们会了解到诸如信号与槽、定时器等机制。而这些机制其实都是由QObject所提供的。</p><p>现在我们只需要记住，Qt所写的GUI程序中的一切都是对象即可</p><h2 id="2-QApplication"><a href="#2-QApplication" class="headerlink" title="2. QApplication"></a>2. QApplication</h2><p>前面我们说了，Qt中一切都是对象，Qt甚至将程序本身也抽象成了一个类。这个类就是QApplication。</p><p><strong>QApplication接管GUI程序的主控制流</strong>，具体包括：线程的管理，事件的分发（例如鼠标点击按钮后由谁来处理），回调函数的唤醒等等。因此我们使用Qt开发程序的时候必须要有一个QApplication对象。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211222112030842.png" alt="Qt官方的文档"></p><p>程序可以开启也可以关闭，因此QApplication对象就有运行和关闭等功能。而由于运行程序和结束程序是QApplication对象最常见的功能，因此因此我们在未来不断地一段时间内都只会用到QApplication的运行和结束方法。在未来我们会介绍线程等内容。</p><p>现在我们只需要知道，使用Qt写程序的时候必须要有一个QApplication，而程序开始运行则需要调用QApplication对象的运行方法</p>]]></content>
      
      
      <categories>
          
          <category> PyQt5 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> GUI开发 </tag>
            
            <tag> PyQt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo的个人技术博客搭建 —— Part 5 Hexo本地编写技巧</title>
      <link href="/2021/12/16/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-5-hexo-ben-di-bian-xie-ji-qiao/"/>
      <url>/2021/12/16/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-5-hexo-ben-di-bian-xie-ji-qiao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前面我们成功的在本地搭建出了Hexo博客网站的环境以及完成了Typora编辑器的设置。本文将讲解如何使用Hexo在本地创建文章以及设置为草稿、密码阅读等技巧</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217131946247.png" alt="Hexo 博客编写技巧"></p><h1 id="基于Hexo的个人技术博客搭建-——-Hexo本地编写技巧"><a href="#基于Hexo的个人技术博客搭建-——-Hexo本地编写技巧" class="headerlink" title="基于Hexo的个人技术博客搭建 ——  Hexo本地编写技巧"></a>基于Hexo的个人技术博客搭建 ——  Hexo本地编写技巧</h1><p>前面我们已经设置好了本地的Hexo博客环境，以及本地的编辑器环境。本文将讲解如何通过Hexo来创建新的博客文章，并且设置文章为草稿（不可见）以及加密（密码阅读等功能）。</p><p>前面我们讲过Hexo中博客其实是Markdown文件。针对Markdown，Hexo可以根据我们预先设置好的模板来渲染、生成对应的HTML文件。那么我们要开始编写博客，其实就是开始编写Markdown文档。</p><p>然而在我们使用Typora开始编写前，自然就需要创建出来这个Markdown文件。然后在创建的Markdown文件的基础上，我们为这个Markdown文件设置文章的标题、日期等等元信息（mate-information，类比于HTML中的header）。</p><p>进一步，有了文章我们有的时候不希望一些文章被人看到，比如写了一半的草稿；也有一些文章，我们希望有访问权限得人（有密码的人）才能阅读，例如你的简历。</p><p>因此针对这些功能，Hexo都进行了设置。</p><h2 id="1-Hexo的博客原理"><a href="#1-Hexo的博客原理" class="headerlink" title="1. Hexo的博客原理"></a>1. Hexo的博客原理</h2><h3 id="1-Markdown的Front-Formatter"><a href="#1-Markdown的Front-Formatter" class="headerlink" title="1. Markdown的Front-Formatter"></a>1. Markdown的Front-Formatter</h3><p>首先针对文章的标题、日期、是否加密等信息都是在Markdown开头的Header区设定，由于设定之后会影响到文章的外观（在稍后会看到），因此这个区域成为Front-Formatter。以我之前写好的一篇文章为例，我们能够看到文章的标题、创建日期、封面图像、所属目录、分类等等信息都在Header区设定。</p><p>其实包括后面的密码验证文章也在这里设置。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217130309720.png" alt="Markdown的Header"></p><h3 id="2-Hexo中的草稿与正式发布文章"><a href="#2-Hexo中的草稿与正式发布文章" class="headerlink" title="2. Hexo中的草稿与正式发布文章"></a>2. Hexo中的草稿与正式发布文章</h3><p>由于Hexo是通过Markdown文件来生成文章，因此我们写的草稿和正式要发布的文章其实对于Hexo来说是完全等价的。要区分两者。Hexo实际上是通过文件所处的文件夹来进行的。我们所有的要发布的文章都在<code>source/_post</code>文件夹中，而所有的草稿都在<code>source/_draft</code>中</p><pre class="line-numbers language-shell"><code class="language-shell">(base) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/hexo-blogs$ tree -d -L 2 source/(base) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/hexo-blogs$ ls source/_posts/(base) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/hexo-blogs$ ls source/_drafts/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>原谅我因为博客要在不同的机器上编写，所以放在了硬盘上，导致文件权限很呆滞<span class="github-emoji"><span>🤔</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f914.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217130820741.png" alt="Hexo中的草稿与发布文章的文件夹"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217131004765.png" alt="具体的草稿与发布的文章"></p><p>因此用的来说，我们写博客时候需要掌握的技巧就是文章在草稿（文件夹）与正式发布（文件夹）之间的左右横跳与单篇文章内的信息设置。</p><h2 id="2-Hexo文章草稿与正式发布的博客"><a href="#2-Hexo文章草稿与正式发布的博客" class="headerlink" title="2. Hexo文章草稿与正式发布的博客"></a>2. Hexo文章草稿与正式发布的博客</h2><h3 id="1-草稿"><a href="#1-草稿" class="headerlink" title="1. 草稿"></a>1. 草稿</h3><h4 id="1-创建草稿"><a href="#1-创建草稿" class="headerlink" title="1. 创建草稿"></a>1. 创建草稿</h4><p>我们通过hexo new的时候指定使用的模板是draft即可，此时创建的文章会被自动放到_draft文件夹下面</p><pre class="line-numbers language-shell"><code class="language-shell">hexo new draft 标题<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-shell"><code class="language-shell">hexo new draft draft_testls source/_drafts/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217134454739.png" alt="Hexo创建草稿"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217134547721.png" alt="所有草稿文章"></p><p>然后我们hexo gen生成文章，再使用hexo server来查看本地文章的时候，并不会看到这些草稿文章</p><h4 id="2-发布草稿"><a href="#2-发布草稿" class="headerlink" title="2. 发布草稿"></a>2. 发布草稿</h4><p>当我们完成了草稿文章之后想要发布的时候，使用下面的命令来进行发布</p><pre class="line-numbers language-shell"><code class="language-shell">hexo publish 标题<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要注意的是，Hexo是一个轻量级的博客，因此不存在像记录草稿、已发布的文章这样的数据库。所有的操作都是基于文件的，因此上面的命令就是把文章从_draft中移动到_post中。我们直接手动mv也是可以的</p><pre class="line-numbers language-shell"><code class="language-shell">hexo publish draft-testls source/_posts/ | grep dra<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217135305343.png" alt="发布文章"></p><h3 id="2-正式发布文章"><a href="#2-正式发布文章" class="headerlink" title="2. 正式发布文章"></a>2. 正式发布文章</h3><h4 id="1-创建正式发布的文章"><a href="#1-创建正式发布的文章" class="headerlink" title="1. 创建正式发布的文章"></a>1. 创建正式发布的文章</h4><p>直接hexo new就完事，或者自己在_post下面创建，略</p><h4 id="2-改发布文章为草稿"><a href="#2-改发布文章为草稿" class="headerlink" title="2. 改发布文章为草稿"></a>2. 改发布文章为草稿</h4><p>没啥好说的，mv就完事了</p><h2 id="3-Hexo文章Front-Formatter设置"><a href="#3-Hexo文章Front-Formatter设置" class="headerlink" title="3. Hexo文章Front-Formatter设置"></a>3. Hexo文章Front-Formatter设置</h2><p>事实上对于Hexo文章的Front-Formatter而言，Hexo本身支持的Front-Formatter是有限的，需要通过第三方的主题进行扩展。幸运的是，我们前面使用的Matery主题以及有所考虑，支持非常多的Front-Formatter。</p><p>由于Matery主题的Front-Formatter在<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-19">闪烁之狐对Matery主题介绍的博客</a>中已经有了非常详尽的介绍，本文只对一些需要配置的功能进行介绍，一些只需要在Front-Formatter中添加对应的项即可显示的设置就不在介绍，请参考Matery主题闪烁之狐的介绍</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217131946247.png" alt="Front-Formatter闪烁之狐的介绍"></p><h3 id="1-密码设置"><a href="#1-密码设置" class="headerlink" title="1. 密码设置"></a>1. 密码设置</h3><p>对文章进行密码设置功能并不是Hexo的功能，而是Matery主题中的功能，因此我们需要在Matery主题的配置中进行设置</p><p>具体路径为<code>themes/hexo-theme-matery</code>下的<code>_config.yml</code>，然后找到<code>verifyPassword</code>这一项，将其设置为True，然后修改提示语即可</p><pre class="line-numbers language-shell"><code class="language-shell">vim themes/hexo-theme-matery/_config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217132432259.png" alt="设置主题，开启文章加密功能"></p><p>需要注意的是，Matery主题中的验证密码方式是通过内置的SHA256算法对访问者输入的密码加密之后和我们在文章的Front-Formatter中设置的经过SHA256 加密的 password 的值进行对比得到的。因此我们首先可以通过一下网站来获得密码对应的值。</p><ul><li><a href="https://tool.oschina.net/encrypt?type=2">开源中国</a></li><li><a href="http://encode.chahuo.com/">chahuo</a></li><li><a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a></li></ul><p>例如我们使用开源中国来进行值的获取，注意选择SHA256算法。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217133017741.png" alt="生成加密后的密码的值"></p><p>然后我们新建一篇文章来进行测试。</p><pre class="line-numbers language-shell"><code class="language-shell">hexo new passwd-test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们在里面设置password这一项，随便写一点内容</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217133315175.png" alt="设置文章密码"></p><p>然后我们使用hexo gen来生成文章看看效果</p><pre class="line-numbers language-shell"><code class="language-shell">hexo genhexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来我们就能够在首页看到这个加密的文章了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217133600366.png" alt="加密的文章"></p><p>我们一旦点进去访问，就需要我们输入密码</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217133650320.png" alt="输入密码"></p><p>我们输入正确之后进去就能够看到了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217133745568.png" alt="输入正确之后可以看到文章"></p><p>而一旦输入错误就会返回主页</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217133827160.png" alt="输入错误之后返回主页"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5学习笔记 Chapter 0-Introduction： Part 1.Qt、PyQt与PySide</title>
      <link href="/2021/12/16/pyqt5-xue-xi-bi-ji-1-qt-pyqt-yu-pyside/"/>
      <url>/2021/12/16/pyqt5-xue-xi-bi-ji-1-qt-pyqt-yu-pyside/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Before learn something, you’d better know what it is. </p><p>本文介绍了Qt、PyQt与PySide间的关系。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/pyqt_vs_pyside.png" alt="PyQt vs PySide"></p><h1 id="PyQt5学习笔记-Chapter-0-Introduction：-Part-1-Qt、PyQt与PySide"><a href="#PyQt5学习笔记-Chapter-0-Introduction：-Part-1-Qt、PyQt与PySide" class="headerlink" title="PyQt5学习笔记 Chapter 0-Introduction： Part 1.Qt、PyQt与PySide"></a>PyQt5学习笔记 Chapter 0-Introduction： Part 1.Qt、PyQt与PySide</h1><p>在学习一个东西之前，我们需要首先明白这个东西是什么。</p><h2 id="0-库与框架"><a href="#0-库与框架" class="headerlink" title="0. 库与框架"></a>0. 库与框架</h2><p>在介绍Qt前，我们需要明白什么是库，什么是框架。</p><p>以下内容参考知乎问题<a href="https://www.zhihu.com/question/29643471">库，框架，架构，平台，有什么明确的区别？</a>博主<a href="https://www.zhihu.com/people/aton">苏莉安的回答</a>与<a href="https://www.zhihu.com/people/ze.ran">ze ran的回答</a>以及<a href="https://www.zhihu.com/people/morgancheng">程墨Morgan的回答</a></p><h3 id="1-库-Library"><a href="#1-库-Library" class="headerlink" title="1. 库 Library"></a>1. 库 Library</h3><p>库可以理解成一个工具箱，工具箱里提供了很多的工具来帮助我们进行工作。</p><p>例如我们在淘宝上买了一个书架，快递发过来的是书架的零件，我们需要自己去进行组装。而在组装架子的时候，我们会用螺丝刀。而自己手动拧螺丝刀则会拧到手痛。所以这个时候我们就会去买一个电动螺丝刀。利用这个电动螺丝刀，我们的效率马上会有极大地提升。我们的生产力也会有极大地进步。</p><p>而无论螺丝刀还是电动螺丝刀，都是不同的工具。</p><p>对应的，库里提供了很多的函数来帮助我们进行工作。利用这些函数，我们的效率马上会翻几倍。</p><p>螺丝刀和电动螺丝刀则是完成同一个工作的不同的库，库与库之间也会存在差异。</p><p><strong>然而库之于程序就像工具之于人，是人决定怎么用工具，工具在哪里用；库也是程序（我们程序员）决定在哪里使用、怎样使用；库只是提供了便利，不需要我们自己手动实现，而且在一些情况下高效率的库（e.g., numpy）能够避免我们自己手动低效率的实现（e.g., for 循环）</strong></p><p>所以说，<strong>库</strong>（Library）是一系列预先编写好的代码集合，供开发者在编程中调用，大大减少重复工作量。我们自己写一个字符串处理函数，包装好之后调用，也是库。</p><p>库的概念很宽泛。程序员第一次输出hello world用的printf就来自C语言标准库；各种SDK都是库；从npm、Maven、Nuget下载的包都是库；pip中绝大部分也是库</p><p><strong>对于库而言，最重要的一点就是程序的主控制流在我们的程序中；或者说是我们的程序在调用库</strong></p><h3 id="2-框架-FrameWork"><a href="#2-框架-FrameWork" class="headerlink" title="2. 框架 FrameWork"></a>2. 框架 FrameWork</h3><p><strong>框架</strong>（Framework）可以理解成是库的进阶版。很多人会把框架和普通库的区别仅仅理解为规模和复杂度，其实不然。</p><p><strong>框架最大的特点就是会接管程序的主控制流；或者说框架在调用我们的代码</strong></p><p>我们只需要编写业务的逻辑代码，具体的工作执行（例如后面要说的GUI框架Qt中的图形显示、信号处理/槽函数调用；未来会出的网页程序框架Flask的服务器运行等等）都是由框架执行的。</p><p>框架是一个半成品的应用，和库的最大区别是框架直接左右了应用怎么来写。</p><hr><h2 id="1-What-is-Qt"><a href="#1-What-is-Qt" class="headerlink" title="1. What is Qt"></a>1. What is Qt</h2><p>在前面介绍完库与框架的区别之后，我们就可以正式的开始介绍Qt了。</p><p>简单的来说，<strong>Qt是一个C++的应用程序开发框架</strong>；更具体的介绍，则看看下面维基百科和百度百科的介绍</p><blockquote><p><strong>From Wikipedia</strong>：</p><p>Qt（/ˈkjuːt/，发音同“cute”）是一个跨平台的C++应用程序开发框架。广泛用于开发GUI程序，这种情况下又被称为部件工具箱。也可用于开发非GUI程序，例如控制台工具和服务器。Qt被用于OPIE、Skype、VLC media player、Adobe Photoshop Elements、VirtualBox与Mathematica以及被Autodesk 、欧洲空间局、梦工厂、Google、HP、KDE、卢卡斯影业、西门子公司、沃尔沃集团, 华特迪士尼动画制作公司、三星集团、飞利浦、Panasonic所使用。</p><p>它是Digia公司的产品。Qt使用标准的C++和特殊的代码生成扩展（称为元对象编译器（Meta Object Compiler, moc））以及一些宏。通过语言绑定，其他的编程语言也可以使用Qt。</p><p>Qt是自由且开放源代码的软件，在GNU宽通用公共许可证（LGPL）条款下发布。所有版本都支持广泛的编译器，包括GCC的C++编译器和Visual Studio。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217102149620.png" alt="Qt的维基百科介绍"></p><p><strong>From Baidubaike</strong>：</p><p>Qt 是一个1991年由Qt Company开发的跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。Qt是面向对象的框架，使用特殊的代码生成扩展（称为元对象编译器(Meta Object Compiler, moc)）以及一些宏，Qt很容易扩展，并且允许真正地组件编程。<br>2008年，Qt Company科技被诺基亚公司收购，Qt也因此成为诺基亚旗下的编程语言工具。2012年，Qt被Digia收购。<br>2014年4月，跨平台集成开发环境Qt Creator 3.1.0正式发布，实现了对于iOS的完全支持，新增WinRT、Beautifier等插件，废弃了无Python接口的GDB调试支持，集成了基于Clang的C/C++代码模块，并对Android支持做出了调整，至此实现了全面支持iOS、Android、WP,它提供给应用程序开发者建立艺术级的图形用户界面所需的所有功能。基本上，Qt 同 X Window 上的 Motif，Openwin，GTK 等图形界面库和 Windows 平台上的 MFC，OWL，VCL，ATL 是同类型的东西。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217102306283.png" alt="Qt的百度百科介绍"></p></blockquote><p>关于Qt，我们需要知道的重要的点如下：</p><ol><li><strong>Qt是一个C++的框架</strong>。因此使用C++进行Qt开发是很舒服的，而Python解释器中Python基金会官方提供的解释器本身是由C语言写的，因此直接动态加载C++的库（挖个坑，后面会将Python调用C++的库）。因此，我们能够早Python中调用Qt</li><li><strong>Qt是一个应用程序框架，而非仅仅是一个带图形界面的应用程序框架（GUI应用程序框架）</strong>。因此在Qt看来，GUI只是Qt的一个部分，而不是全部。对于一个成熟的应用来说，涉及到的内容用：进程/线程/协程管理、网络编程、蓝牙/影响等设备管理、GUI图形显示等等功能。因此Qt作为一个应用程序框架，对于这些内容都是可以胜任的。因此Qt不仅仅是GUI的库，而是一个应用程序框架。更加具体的来说，Qt是因为他的GUI出名，但不仅仅只有GUI。</li></ol><p>针对第一个点，我们稍后就会讲解什么是PyQt，什么是PySide。而针对第二个点，我们明白了未来要怎么样学习Qt，即分模块学习。因此在未来的有的文章会关注PyQt的GUI部分，有的部分会关注PyQt的多线程管理，而有的部分会关注PyQt的网络编程。</p><h2 id="2-What-is-Python-Language-Binding"><a href="#2-What-is-Python-Language-Binding" class="headerlink" title="2. What is Python/Language Binding"></a>2. What is Python/Language Binding</h2><p>在进一步介绍之前，我们需要知道什么是Python Binding，什么是Language Binding。</p><p>从概念上来说，Language Binding是Python Binding的父类/超集。而具体来说，Language Binding指的是某种语言中可以让该语言调用其他语言或者一些系统服务的该语言的代码，这些代码成为胶水代码（glue code）。</p><p>关于Language Binding，百度百科上没有介绍，因此只有维基百科的英文介绍</p><blockquote><p><strong>From Wikipedia</strong>:</p><p>In programming and software design, binding is an application programming interface (API) that provides glue code specifically made to allow a programming language to use a foreign library or operating system service (one that is not native to that language).</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217104203893.png" alt="Introduction of Language Binding in Wikipedia"></p></blockquote><p>因此对于Python来说，Python Binding即指能够让Python调用由其他语言开发的库或者是系统提供的功能（系统调用）的Python代码。</p><p>事实上，得益于Python官方的CPython解释器是由C语言开发的，因此Python具有的直接调用C/C++库的这个能力，Python中的不少库都是C++的库，然后提供了Python Binding，从而使得在Python中能够调用这些库。最著名的一个例子就是OpenCV了。</p><p>我们可以用mlocate查一下</p><pre class="line-numbers language-shell"><code class="language-shell">(base) jack@jack-Alienware-m15-R3:~$ locate *opencv*.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们其实就能够看到，Python的opencv库里没有opencv的so，所有的共享库文件都放在了C++源码编译时候安装的位置了，而Python的OpenCV库里本身只是提供了一些OpenCV 的Python Binding代码，真正的功能还得看预编译好的so文件。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211217110010408.png" alt="查询结果"></p><h2 id="3-What-is-PyQt-amp-PySide"><a href="#3-What-is-PyQt-amp-PySide" class="headerlink" title="3. What is PyQt &amp; PySide"></a>3. What is PyQt &amp; PySide</h2><p>我们前面说道Qt是一个C++的应用程序框架，因此PyQt和PySide其实是两种不同的Qt的Python Binding。两者之间的区别在很多时候都只是<code>from xxx.yyy import zzz</code>中的<code>xxx</code>不同，毕竟底层调用的Qt的so都是一样的，Binding 本身只是为Qt编译成so之后里面的API提供Python的类或者函数的签名。</p><p>因此其实我们学习的时候两者任意选一个就行了。但是PyQt由于推出的早，因此资料比较全，而PySide则虽然推出的晚，但是Qt公司的产品，因此两者在学习的时候我们推荐学习PyQt，因为资料会很全。未来PySide也期待他会变得更好。</p><p>注意在未来我们的系列教程中更加关注Qt的Python Binding，而非具体的PyQt、PySide之争。两者在API上的区别正如上面所说，往往是非常小的。</p><p>关于PyQt与PySide其实在技术上的介绍以及结束了，但是我们不禁会想问为什么一个Qt会有PyQt与PySide两套Binding？</p><p>为了解决这个问题，<del>我们就要介绍一下PyQt与PySide的历史了</del>（吃瓜）</p><p>注：以下关于PyQt、PySide的历史参考知乎问题：<a href="https://www.zhihu.com/question/306793447/answer/560109210">如何评价Qt官方推出的Qt for Python(PySide)？</a>中<a href="https://www.zhihu.com/people/phantask93">饶锦蒙的回答</a></p><h3 id="1-PyQt-PyQt5"><a href="#1-PyQt-PyQt5" class="headerlink" title="1. PyQt / PyQt5"></a>1. PyQt / PyQt5</h3><p>PyQt本身Riverbank Computing这家英国公司在2005年以前的时候开发的，那个时候Python刚刚开始流行。</p><p>前面介绍过，Qt身GPL V3协议下的一个项目，因此当使用PyQt程序就被要求需要强制开源，因此PyQt对商业软件的开发就非常不友好。而Qt本身所属的公司在零几年被诺基亚收购之后就成了诺基亚的一个项目。那个时候诺基亚就与Riverbank Computing展开了多轮磋商，希望PyQt能够支持对商业更加友好的LGPL协议，即开源项目在商业软件中被使用了之后，商业软件不需要强制进行开源。因此LGPL对商业更加友好。</p><p>然而PyQt所属的母公司Riverbank Computing十动然拒，最后诺基亚就和Riverbank Computing谈崩了。</p><p>因此从PyQt的角度来看，PyQt是最早支持Qt的Python Binding的库，在发展上也是非常顺利的。</p><p>因此针对不同的Qt版本（Qt4，Qt5），PyQt就有不同的版本支持PyQt4、PyQt5</p><h3 id="2-PySide-Pyside2"><a href="#2-PySide-Pyside2" class="headerlink" title="2. PySide / Pyside2"></a>2. PySide / Pyside2</h3><p>前面我们说到，诺基亚和Riverbank Computing谈崩之后，诺基亚手握Qt的版权，又不忍放过Python中Qt的商业运用，因此2009年一气之下最终决定自己从头单干，重新开发一套Qt的Python Binding，即PySide。</p><p>然而诺基亚后面的故事我们都很熟悉了，2009年PySide发布了同时支持GPL和LGPL的PySide之后，就芜湖了。因此PySide项目就一度搁浅。</p><p>直到2012年，诺基亚把包括PySide在内的所有有关Qt的全部内容卖给了Digia公司。Digia公司在收购了Qt之后，决定大力支持Qt的全方位发展，因此在2014年9月将Qt分拆成一家独立全资子公司The Qt Company。</p><p>虽说加大了投入，该补的课也绕不开，C++的Qt在Digia收购Qt之后就推出了Qt5版本，PySide对Qt5提供支持的计划从2014年才开始筹备，也就是2015年上马的Qt for Python项目，该项目开发的模块命名为PySide2，以表示与老一代PySide的不同。然而反观PyQt，在Qt5出来不到半年时间就支持了PyQt5。</p><p>PySide2在Qt公司和Qt社区开发者的共同努力下，也只在2018年6月才正式发布了第一个版本，稳定性还是个问题。不过从0到1是最难的，后面就容易了。到今天为止，PySide2已经日趋完善，又是亲生的，还有LGPL的加持，今后PySide2有足够的理由变得越来越好。</p><h2 id="4-Which-Version-of-Qt-to-Use？"><a href="#4-Which-Version-of-Qt-to-Use？" class="headerlink" title="4. Which Version of Qt to Use？"></a>4. Which Version of Qt to Use？</h2><p>其实经过前面的介绍，我们也应该知道了Qt5的版本在2012年推出的，Qt4就更早了。虽然最近也推出了Qt6，但是目前市场、社区里的还是Qt5居多，因此我们直接使用Qt5的Python Binding即可。即PyQt5与PySide2</p><p>正如前面所强调的，在未来的文章中我们不会过分强调PyQt5与PySide2，只有在两者API差异比较大的时候我们才会特地的注明到底每一个是怎么样的。</p>]]></content>
      
      
      <categories>
          
          <category> PyQt5 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> GUI开发 </tag>
            
            <tag> PyQt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5学习笔记 Chapter 0-Introduction： Part 0.初心</title>
      <link href="/2021/12/16/pyqt5-xue-xi-bi-ji-0-chu-xin/"/>
      <url>/2021/12/16/pyqt5-xue-xi-bi-ji-0-chu-xin/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文作为PyQt系列学习笔记的第一篇，记录了我为什么要学习PyQt，以及本系列文章的组织形式</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211216205416019.png" alt="Qt的Python绑定：PySide"></p><h1 id="PyQt5学习笔记：-Part-0-初心"><a href="#PyQt5学习笔记：-Part-0-初心" class="headerlink" title="PyQt5学习笔记： Part 0-初心"></a>PyQt5学习笔记： Part 0-初心</h1><p>作为系列文章的第一篇，本文将讲解我为什么要学习PyQt、本系列文章的目标以及未来文章的组织形势</p><h2 id="1-为什么要学习PyQt"><a href="#1-为什么要学习PyQt" class="headerlink" title="1. 为什么要学习PyQt"></a>1. 为什么要学习PyQt</h2><h3 id="1-What-is-User-Interface"><a href="#1-What-is-User-Interface" class="headerlink" title="1. What is User Interface"></a>1. What is User Interface</h3><p>一般来说，我们写出的程序都是直接运行的，通常与用户只有有限的交互（例如input等待用户输入），这样的程序在程序员看来就以及很可以了。然而从用户的角度来说，这样的程序体验非常差。因为用户无法与程序进行交互。</p><p>而对于提供了用户界面（User Interface）的程序用户体验就会好很多，而且看起来就会非常高级。</p><p>例如下面有了文字用户界面，用户就可以指定不同的参数和选项，从而实现不同的功能。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/Fdedit.png" alt="用户界面之一：图形文字界面文件管理器（Text User Interface File Manager)"></p><h3 id="2-Classification-of-User-Interface"><a href="#2-Classification-of-User-Interface" class="headerlink" title="2. Classification of User Interface"></a>2. Classification of User Interface</h3><p>一般来说，用户界面分为两种，一种是<strong>文字用户界面</strong>，另外一种就是<strong>图形用户界面</strong>。</p><h4 id="1-Text-based-User-Interface-（TUI）"><a href="#1-Text-based-User-Interface-（TUI）" class="headerlink" title="1. Text(-based) User Interface （TUI）"></a>1. Text(-based) User Interface （TUI）</h4><p>文字用户界面即指程序与用户的交互界面就是由文本构成的，即用文本模拟出来的界面。例如我们上面看到的<strong>FreeDOS Edit</strong>。</p><p>很多程序都提看TUI，例如make。有些程序源码中在Makefile中提供了menuconfig规则，我们使用make来利用这个规则进行编译时配置的时候就会看到TUI界面。如下图我们进行内核编译参数配置的时候使用menuconfig。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211216214559133.png" alt="TUI编译内核"></p><p>然后我们就能看到TUI界面</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211216214636804.png" alt="Menuconfig的TUI界面"></p><p>可以看到TUI的界面其实就是把文本背景设置为不同的颜色，以此来表达出界面。</p><h4 id="2-Graphic-based-User-Interface"><a href="#2-Graphic-based-User-Interface" class="headerlink" title="2. Graphic(-based) User Interface"></a>2. Graphic(-based) User Interface</h4><p>图形用户界面则是现在程序的标配，我们在Windows上用的QQ、微信等等都是GUI程序。在Linux上，所谓的桌面也是一个GUI程序。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/4/48/Linux_Mint_19.1_&quot;Tessa&quot;_(Cinnamon" alt="Linux Mint的桌面">.png)</p><p>所以话说回来，我们学习PyQt的目的其实就非常明确了，我们就是想要能够做出来一个GUI程序，即类似于QQ、微信这样的程序。</p><h2 id="2-本系列文章的组织形式"><a href="#2-本系列文章的组织形式" class="headerlink" title="2. 本系列文章的组织形式"></a>2. 本系列文章的组织形式</h2><p>本系列文章将从0开始，记录我学习PyQt的过程，同时也将作为PyQt的教程。</p><p>由于需要学习得内容比较多，因此类似于一本书，全书将会分为多个章节。每个章节围绕一个主题进行讲解。</p><p>讲解内容包括Qt Designer、Layout、Signal与Slot等等内容</p>]]></content>
      
      
      <categories>
          
          <category> PyQt5 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> GUI开发 </tag>
            
            <tag> PyQt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-hw1：Covid19 Cases Prediction</title>
      <link href="/2021/12/11/li-hong-yi-ml2021-spring-hw1-covid19-cases-prediction-md/"/>
      <url>/2021/12/11/li-hong-yi-ml2021-spring-hw1-covid19-cases-prediction-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解李宏毅ML2021 Spring的Homework1： Covid19 Cases Prediction</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207150639649.png" alt="作业一：COVID-19 Cases Prediction"></p><h1 id="李宏毅ML2021-Spring-hw1：Covid19-Cases-Prediction"><a href="#李宏毅ML2021-Spring-hw1：Covid19-Cases-Prediction" class="headerlink" title="李宏毅ML2021-Spring-hw1：Covid19 Cases Prediction"></a>李宏毅ML2021-Spring-hw1：Covid19 Cases Prediction</h1><h2 id="1-Homework-Objectives"><a href="#1-Homework-Objectives" class="headerlink" title="1. Homework Objectives"></a>1. Homework Objectives</h2><p>作业一的目的在于：</p><ul><li>明白如何使用DNN解决Regression问题</li><li>掌握基本的DNN训练技术：调参、特征选择、正则化</li><li>熟悉Pytorch的使用</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207151013750.png" alt="Objectives of Homework1"></p><h2 id="2-Task-Description"><a href="#2-Task-Description" class="headerlink" title="2. Task Description"></a>2. Task Description</h2><p>本次任务要求我们对每日的新冠肺炎的确诊人数进行预测。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207151406811.png" alt="Task Description"></p><h3 id="1-Survey-Methods"><a href="#1-Survey-Methods" class="headerlink" title="1. Survey Methods"></a>1. Survey Methods</h3><p>数据集的来源是CMU的研究员在社交媒体上发布调查问卷，问卷的内容包括了心理健康状态、流感类似症状疾病患者人数。而后根据受访者居住的地区来监测美国所有州的所有城市的情况。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211211163552345.png" alt="Survey Method"></p><h3 id="2-Data-Inspection"><a href="#2-Data-Inspection" class="headerlink" title="2. Data Inspection"></a>2. Data Inspection</h3><p>本次任务的数据集是csv文件</p><p>在训练数据中，训练数据的csv文件中每一行就是一个example。example的前40维是对于城市的one-hot编码，然后每一个样本会给出来三天的调查情况。</p><p>其中，<strong>前两天的确诊人数是我们的training的一个feature，而第三天的确诊人数则是我们需要预测的label</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207151633099.png" alt="Training Data Inspection"></p><p>而对于测试数据，则只有前面的feature，没有最后的label，最后我们需要将生成的label以csv文件的形式提交</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211211164704231.png" alt="Testing Data Inspection"></p><h3 id="3-Evaluation-Metrics"><a href="#3-Evaluation-Metrics" class="headerlink" title="3. Evaluation Metrics"></a>3. Evaluation Metrics</h3><p>针对本次任务，使用的衡量标准是Rooted Mean Square Error（RMSE），所以最后在kaggle上得到的分数是越低越好。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207152032106.png" alt="Evaluation Metric"></p><h3 id="4-Baselines"><a href="#4-Baselines" class="headerlink" title="4. Baselines"></a>4. Baselines</h3><p>这次任务有三个BaseLine</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207151811659.png" alt="Task Baseline"></p><h2 id="3-My-Solution"><a href="#3-My-Solution" class="headerlink" title="3. My Solution"></a>3. My Solution</h2><p>下面是我关于本次任务的理解和更新</p><h3 id="1-Thoughs"><a href="#1-Thoughs" class="headerlink" title="1. Thoughs"></a>1. Thoughs</h3><p>这个是一个regression的任务，最后的输出是一个数字，所以网络最后一层out_feature是1即可</p><p>然后这些特征之间有可能有一些特征是和确诊人数的确相关的，有一些是和确诊人数完全无关的，甚至是random的，所以这一些特征可能会影响最后的判断，所以后面需要进行特征选择或者让模型自己选出来重要的特征，然后给重要的特征大的权重。类似于attention</p><p>然后可以试试generative的方法，让模型在训练一段时间之后自己生成，即训练判断模型的基础上再生成一个生成模型。生成模型用GAN去生成数据，然后让判断模型去学习。</p><p>最后可以试试不确定性的方法。</p><h3 id="2-Updates"><a href="#2-Updates" class="headerlink" title="2. Updates"></a>2. Updates</h3><h4 id="2021-12-11：完成了基本框架"><a href="#2021-12-11：完成了基本框架" class="headerlink" title="2021-12-11：完成了基本框架"></a>2021-12-11：完成了基本框架</h4><ul><li><strong>进展</strong>：完成了基本的框架的搭建，明天开始训练。完成的框架包括训练代码，网络的定义，dataset和得到提交文件的代码</li></ul><pre class="line-numbers language-shell"><code class="language-shell">(torch) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/deeplearning/hw1_1-regression$ tree src/src/├── dataset.py├── gen_submission.py├── networks.py├── pathconfig.py└── train.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2021-12-12-update1：训练时loss不下降-cry"><a href="#2021-12-12-update1：训练时loss不下降-cry" class="headerlink" title="2021-12-12 update1：训练时loss不下降:cry:"></a>2021-12-12 update1：训练时loss不下降<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><ul><li><p><strong>问题</strong>：开始训练，但是训练的时候遇到了一些问题，训练的时候loss一直没有下降，例如下面这张图<img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212115234546.png" alt="loss没有下降"></p></li><li><p>解决办法：最后经过检查，是batchsize的问题，dataloader的忘记设置batchsize和shuffle了，所以出了问题，这个数据集里单个样本随机波动太大，不像图像是比较通用的，随机波动小，单个example也能学到东西。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212115505406.png" alt="出问题的代码"><br>最后修改掉之后就可以正常训练了，以后一定要注意小batchsize带来的小样本梯度随机波动问题<br><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212115710477.png" alt="修改之后的代码"></p><p>最后可以正常训练<img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212115901900.png" alt="正常开始训练"></p><p>最后在379个epoch时候停下来了，提交一发<img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212120026808.png" alt="最后的训练结果"></p></li></ul><h4 id="2021-12-12-update2-提交分数起飞-boom"><a href="#2021-12-12-update2-提交分数起飞-boom" class="headerlink" title="2021-12-12 update2: 提交分数起飞:boom:"></a>2021-12-12 update2: 提交分数起飞<span class="github-emoji"><span>💥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><ul><li><p><strong>问题</strong>：接上一个问题，完成了之后提交结果，分数很烂</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212140536683.png" alt="分数很低"></p></li><li><p><strong>解决办法</strong>：最后经过检查，是网络在训练的时候，对训练数据的feature和label都进行了正则化，使其服从均值为0，标准差为1的分布，这样在训练过程中的梯度的分布也会更加均匀。但是这样做的问题就是网络预测的进过标准化之后的label，所以使用测试数据生成结果的时候得到的也是标准化之后的结果，需要加上label的均值和标准差，但是由于是测试数据，所以没有标准差和均值，而<strong>测试数据和训练数据不是独立同分布的</strong>。所以不能直接加上测试数据的标准差和方差</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212143542126.png" alt="修改前的错误代码，对label也做了标准化"></p><p>修改之后不给label做标准化，再训练一次然后提交</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212151141477.png" alt="修改后不对label做标准化"></p><p>再进行一次训练</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212151509152.png" alt="修改后的训练"></p><p>最后提交的结果，相比于一开始有了很大的进步</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212151837238.png" alt="提交结果"></p></li></ul><h4 id="2021-12-12-update3-Simple-baseline-triangular-flag-on-post"><a href="#2021-12-12-update3-Simple-baseline-triangular-flag-on-post" class="headerlink" title="2021-12-12 update3:  Simple baseline:triangular_flag_on_post:"></a>2021-12-12 update3:  Simple baseline<span class="github-emoji"><span>🚩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><p>大胜利<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><ul><li><p><strong>思路</strong>：尝试了一下仅仅使用前两天的确诊人数作为feature来训练，最后提升巨大，由于我在代码里预留了dim2use，所以直接加上前两的确诊人数的feature和州，一共42个dimension再来一次</p><p><strong>所以前面的猜想确实成立，即存在一些和确诊人数完全无关的特征，这些特征会极大地影响模型的表现</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212155208705.png" alt="加上前两天的确诊人数"></p></li><li><p><strong>效果</strong>：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212155232450.png" alt="巨大的进步"></p></li></ul><h4 id="2021-12-12-update4-特征选择的思考-Medium-Baseline-triangular-flag-on-post"><a href="#2021-12-12-update4-特征选择的思考-Medium-Baseline-triangular-flag-on-post" class="headerlink" title="2021-12-12 update4: 特征选择的思考 Medium Baseline :triangular_flag_on_post:"></a>2021-12-12 update4: 特征选择的思考 Medium Baseline <span class="github-emoji"><span>🚩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><ul><li><p><strong>想法</strong>：因为在前面使用了州和前两天，得到的分数非常的高，所以利用了特征选择的手段，试了一下不同的特征，得到的结果如下</p><ul><li><p><strong>使用了州和前两天</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212163655980.png" alt="使用州和前两天"></p></li><li><p><strong>使用了得分前15的特征</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212163737608.png" alt="得分前15的特征"></p></li><li><p><strong>使用了得分大于500的特征</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212163814031.png" alt="得分大于500的特征"></p></li><li><p><strong>只使用前两天得病的人数</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212163858827.png" alt="只使用前两天得病的人数"></p></li></ul><p>而特征选择时候前90个特征的得分如下，可以看到，前两个特征（前两天确诊的人数）的分数是远远大于剩下的特征，也就难怪训练出来最后一个的得分最高</p><pre class="line-numbers language-shell"><code class="language-shell">                    Specs          Score76       tested_positive.1  148069.65827858         tested_positive   69603.87259143            hh_cmnty_cli    9235.49209461          hh_cmnty_cli.1    9209.01955879          hh_cmnty_cli.2    9097.37517244          nohh_cmnty_cli    8395.42130062        nohh_cmnty_cli.1    8343.25592780        nohh_cmnty_cli.2    8208.17643541                     cli    6388.90684959                   cli.1    6374.54800077                   cli.2    6250.00870242                     ili    5998.92288060                   ili.1    5937.58857678                   ili.2    5796.94767293      worried_finances.2     833.61319175      worried_finances.1     811.91646057        worried_finances     788.07693188        public_transit.2     686.73653970        public_transit.1     681.56290252          public_transit     678.83478984                  shop.2     561.76405166                  shop.1     553.87672748                    shop     546.5533950                       id     328.68231192    worried_become_ill.2     208.12264718                      MA     205.67260374    worried_become_ill.1     203.47307256      worried_become_ill     199.19546186            spent_time.2     193.92668968            spent_time.1     188.76375150              spent_time     183.14522921                      MS     164.45080730                      OK     160.7761357                       CT     146.60954017                      MD     123.5469725                       CA     122.36156229                      OH      92.60376324                      NV      86.48058110                      ID      85.60427553                 anxious      83.53223222                      MO      80.57186136                      UT      76.09237971               anxious.1      75.0735223                       AZ      72.80367685            restaurant.2      71.04775467            restaurant.1      70.08674323                      NE      69.08267649              restaurant      69.02759335                      TX      68.60934789               anxious.2      64.5877442                       AK      64.39624232                      PA      63.0960936                       CO      47.44609615                      KY      43.15197213                      IA      42.0966008                       FL      39.97677827                      NY      38.26168438                      WA      35.19877531                      OR      30.42481982  travel_outside_state.2      29.42480819                      MI      27.61129464  travel_outside_state.1      27.47727446    travel_outside_state      25.78825114                      KS      18.69999455           felt_isolated      18.34572833                      RI      18.22380073         felt_isolated.1      18.05009891         felt_isolated.2      17.89572034                      SC      15.17410045            wearing_mask      13.10686263          wearing_mask.1      11.66081520                      MN      11.13468587           large_event.2      10.9953231                       AL      10.91595281          wearing_mask.2      10.42354439                      WV       9.40700369           large_event.1       9.13166925                      NJ       8.63782437                      VA       8.32844951             large_event       7.4492279                       GA       7.30044783     work_outside_home.2       4.17440465     work_outside_home.1       3.88715654               depressed       3.83787911                      IL       3.83412347       work_outside_home       3.28351372             depressed.1       2.96797128                      NC       2.8773594                       AR       2.54622390             depressed.2       2.362492Int64Index([76, 58, 43, 61, 79, 44, 62, 80, 41, 59, 77, 42, 60, 78, 93, 75, 57,            88, 70, 52, 84, 66, 48,  0, 92, 18, 74, 56, 86, 68, 50, 21, 30,  7,            17,  5, 29, 24, 10, 53, 22, 36, 71,  3, 85, 67, 23, 49, 35, 89,  2,            32,  6, 15, 13,  8, 27, 38, 31, 82, 19, 64, 46, 14, 55, 33, 73, 91,            34, 45, 63, 20, 87,  1, 81, 39, 69, 25, 37, 51,  9, 83, 65, 54, 11,            47, 72, 28,  4, 90],           dtype='int64')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2021-12-12-update5-大进步-tada"><a href="#2021-12-12-update5-大进步-tada" class="headerlink" title="2021-12-12 update5: 大进步:tada:"></a>2021-12-12 update5: 大进步<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><ul><li><p><strong>思路</strong>：因为前面实验了一下使用不同的特征，发现只有前两个特征，所以我感觉特征选择可能走到了头，需要新的思路来进一步提升模型的表现。因此从模型本身下手，更换了网络模型，从助教的baseline换成了残差模型，同样还是只有两个特征</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212170623668.png" alt="网络模型"></p></li><li><p><strong>效果</strong>：最后的效果的提升还是巨大的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212170744439.png" alt="提交后的结果"></p></li></ul><h4 id="2021-12-12-update6-关于优化器"><a href="#2021-12-12-update6-关于优化器" class="headerlink" title="2021-12-12 update6: 关于优化器"></a>2021-12-12 update6: 关于优化器</h4><ul><li><p><strong>思路</strong>：前面改了一下网络结构，使得精度有了不错的提升。我在特征选择后面又想到了一个思路，就是换一个优化器，所以在实验完网络结构之后我又实验了一下优化器，看看优化器会不会对训练又帮助，所以把SGD换成了AdamW，AdamW比Adam少了对bias的求导，所以方向避免出错。</p><p>换优化器其实我也是实验了不少次，因为使用SGD的时候，不管超参数怎么变，总会在51个epoch的时候出现一次最优值。虽然有的超参数经过比较长的epoch之后会有新的最优值，但是51这个epoch常常会出现，不管我怎么变超参数。</p><p>所以我怀疑51个epoch的时候对于SGD优化器，已经到了一个比较wide的谷底，这个时候很难跳出去，所以有的时候会直接在这里停下来。</p><p>作为弥补我换了一个优化器，换成了AdamW，因为AdamW跳出saddle point的能力要强不少</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212173038313.png" alt="一些训练轮次"></p></li><li><p><strong>结果</strong>：更换优化器之后，训练轮次要长很多，而且最初的十多个epoch会有震荡，还在loss 空间的高处</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/train_log.png" alt="AdamW的训练过程"></p><p>上面的图其实看不太出来，因为横轴30000多个step，但是SGD的训练图在开始部分是直线下冲的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/train_log1.png" alt="train_log1"></p><p>最后的结果是成功冲进了1分以内的误差</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212173834843.png" alt="1分以内"></p></li></ul><h4 id="2012-12-12-update7-关于正则化"><a href="#2012-12-12-update7-关于正则化" class="headerlink" title="2012-12-12 update7: 关于正则化"></a>2012-12-12 update7: 关于正则化</h4><ul><li><p><strong>思路</strong>：前面在想的时候其实还想到了第三个思路，就是在网络中加入正则化方法，一个是加入dropout，一个是加入batch normalization，因为目前这两个是公认的不错的的正则化方法。而使用正则化方法能够帮助加速训练、提高收敛精度。然而在训练时候却发现不太对劲。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212175933758.png" alt="不太对劲的正则化"></p><p>可以看到，使用batch norm 和 dropout，收敛速度不降反升。这个和大家的公认有所差别，我百思不得其解<span class="github-emoji"><span>😕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>最后怀疑是AdamW优化器的问题。因为AdamW优化器中有限制梯度的项，而dropout会mask掉一些神经元，导致梯度在这里为0，而batch norm则是炸平梯度空间。所以怀疑问题出在这里，优化器换回SGD，好家伙，这个速度，比纯SGD快多了（下面的图第一个日志写错了，应该是batch norm）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212180324925.png" alt="使用AdamW的训练记录"></p></li></ul><h4 id="2021-12-13-update1-Strong-Network，More-Complex-data"><a href="#2021-12-13-update1-Strong-Network，More-Complex-data" class="headerlink" title="2021-12-13 update1: Strong Network，More Complex data"></a>2021-12-13 update1: Strong Network，More Complex data</h4><ul><li><p><strong>问题</strong>：昨天在最后使用adam优化器和residual模块的配合，训练阶段使用特征选择选出来的前两天的确诊人数，一共2个dimension的feature作为输入进行训练，最后得到的精度0.98左右。昨天的炼丹就到此为止了。昨天晚上在复盘的时候想到，老师上课讲过的模型训练攻略里说的内容。</p><ol><li>而在复盘的时候想起来，昨天的炼丹过程其实提升最大的有两段，第一段就是在一开始使用助教的baseline的时候，使用特征抽取选取了前两天的特征，loss在training data上的损失就收敛到1.x左右了。可是使用baseline在这之后不管怎么样都始终无法进入到0.x的大关。而关于Optimization中也实验过了正则化、调参、换优化器等等手段。但是模型的表现还是没有下降。</li><li>第二个阶段就是换了residual的模型，性能立马又有了提升。但是同样的，residual的模型各种optimization的方法都已经试过了，最后还是卡在了0.98左右。</li></ol><p>最后想想老师讲的课，突然明白，在一开始的时候，model的能力不够强，所以没有办法学好14个重要特征。因此选择前两天的确诊人数作为feature，性能有了很大的提升。这个时候的问题可能是baseline model 的model bias了，即模型的能力不够强。后来歪打正着换了一个模型，同样的数据和参数下训练，性能立马有了提升，所以确信是baseline模型的问题。</p><p>可是后来不管怎么调，residual的模型性能也上不去了。后来其实我也试了一下wide的模型，wide + residual的模型，最后性能都不是很好。这个时候我突然想起来，因为baseline里面是两个feature表现最好，所以我就直接用了两个dimension的feature来train residual的一系列model。后来换model单纯的只是希望能够得到能力更强的model。</p><p>但是问题却在于，能力更强的model确实能够得到更好的performance，但是我并不知道residual是否达到了他的上限，即有可能是我只用了前两天的确诊人数，这样的training data对residual太弱了，他完全学有余力。</p><p>刚好我也没有像baseline一样进行特征选择的测试，所以我其实并不知道residual的model是否达到他的上限了。所以今天我试着使用了更多的training data，即使用了所有大于5000分的数据，一共14个维度</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213003527934.png" alt="用更多的数据来训练residual model"></p></li><li><p><strong>结果</strong>：最后经过训练之后提交，大进步<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213003658575.png" alt="使用14个feature训练的结果"></p></li></ul><h4 id="2021-12-13-update2-temp-final"><a href="#2021-12-13-update2-temp-final" class="headerlink" title="2021-12-13 update2: temp final"></a>2021-12-13 update2: temp final</h4><p>搞到现在，做了一下，现在最优的成绩是下面的，基本上就是残差模块的数量问题，关于伪标签其实我感觉如果用test的data来做的话，就会有过拟合test数据的嫌疑。所以目前想的是等用generative的方法来做，目前暂时就先到这里</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213015919490.png" alt="目前的最优成绩"></p><h2 id="4-My-Codes"><a href="#4-My-Codes" class="headerlink" title="4. My Codes"></a>4. My Codes</h2><p>下面是我的代码</p><h3 id="1-代码结构"><a href="#1-代码结构" class="headerlink" title="1. 代码结构"></a>1. 代码结构</h3><p>整个代码的结构如下</p><pre class="line-numbers language-shell"><code class="language-shell">(torch) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/deeplearning/hw1_1-regression$ tree -d -L 2.├── checkpoint│   ├── Baseline│   ├── DeeperNet│   ├── DeeperNormalizedNet│   ├── OtherNet│   └── WideNet├── data├── log│   ├── Baseline│   ├── DeeperNet│   ├── DeeperNormalizedNet│   ├── OtherNet│   └── WideNet├── src│   ├── config│   └── __pycache__└── submission    ├── Baseline    ├── DeeperNet    ├── DeeperNormalizedNet    ├── OtherNet    └── WideNet22 directories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中:</p><ul><li><p>src里都是源代码</p></li><li><p>checkpoint、log和submission都如其名</p></li><li><p>每次进行训练的时候，都会根据模型（网络）名创建一个文件夹，在里面放对应的训练日志、提交结果、参数文件等等。以log为例，每次得到的结果都是根据日期和时间创建的文件夹。只有正确训练结束才会三个文件，分别为训练摘要、训练图像以及训练的过程中的loss。</p><pre class="line-numbers language-shell"><code class="language-shell">(torch) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/deeplearning/hw1_1-regression$ tree log/DeeperNet/log/DeeperNet/├── 2021-12-12 16_52_47├── 2021-12-12 16_53_13├── 2021-12-12 16_53_38├── 2021-12-12 16_54_21├── 2021-12-12 16_55_03│   └── message.txt├── 2021-12-12 16_56_25│   └── message.txt├── 2021-12-12 16_56_50│   ├── message.txt│   ├── train_log1.png│   └── train_val.loss.pkl├── 2021-12-12 17_12_44├── 2021-12-12 17_12_57│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 17_16_00│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 17_16_56│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 17_17_49│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 17_20_12├── 2021-12-12 17_20_34│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 17_41_30│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 18_17_42│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 18_21_58├── 2021-12-12 18_22_24│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 18_28_27│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 19_17_44│   └── message.txt├── 2021-12-12 19_18_15│   └── message.txt├── 2021-12-12 19_18_42│   └── message.txt├── 2021-12-12 19_19_12│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 19_20_16│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 19_25_46│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 19_27_36│   └── message.txt├── 2021-12-12 19_28_20│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 19_33_37│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 19_37_51│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 19_42_24│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 19_48_44│   └── message.txt├── 2021-12-12 19_48_59│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 19_52_28│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 19_56_30│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 20_05_07├── 2021-12-12 20_05_46│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 20_10_02│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 20_12_20│   └── message.txt├── 2021-12-12 20_13_33│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 20_16_43│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-12 20_21_37│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-13 00_46_42│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-13 00_59_08│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-13 01_34_47│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-13 01_39_11│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-13 01_48_12│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl├── 2021-12-13 01_51_22│   ├── message.txt│   ├── train_log.png│   └── train_val.loss.pkl└── 2021-12-13 01_55_10    ├── message.txt    ├── train_log.png    └── train_val.loss.pkl48 directories, 104 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>直接提交submission中生成的文件即可</li></ul><h3 id="2-src中文件作用"><a href="#2-src中文件作用" class="headerlink" title="2. src中文件作用"></a>2. src中文件作用</h3><p>src中有这些文件</p><pre class="line-numbers language-shell"><code class="language-shell">(torch) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/deeplearning/hw1_1-regression$ tree src/ -L 1src/├── config├── dataset.py├── feature_selection.py├── gen_submission.py├── networks.py├── pathconfig.py├── __pycache__└── train.py2 directories, 6 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li>train是训练代码</li><li>gen_submission是生成结果的代码</li><li>networks是所有的网络的代码</li><li>feature_selection 是做特征工程的时候代码</li></ul><p>具体的代码在下面给出来</p><h3 id="3-data中的数据"><a href="#3-data中的数据" class="headerlink" title="3. data中的数据"></a>3. data中的数据</h3><p>data中需要把训练、测试数据放进去就行了</p><pre class="line-numbers language-shell"><code class="language-shell">(torch) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/deeplearning/hw1_1-regression$ tree data/data/├── covid.test.csv├── covid.train.csv└── sampleSubmission.csv0 directories, 3 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实最后只会用到test 和 train</p><h3 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h3><p>用的时候要注意，gen_submission要改参数文件的路径。此外自己想写网络的话需要继承_NetworkBase，然后重写dtype</p><p>训练网络和生成结果的时候一种网络一个函数即可</p><h4 id="1-pathconfig-py"><a href="#1-pathconfig-py" class="headerlink" title="1. pathconfig.py"></a>1. pathconfig.py</h4><p>自动决定所有的路径</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">:</span><span class="token operator">=</span>Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">:</span>    sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">green</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token string">"{Fore.GREEN}{s}{Fore.RESET}"</span><span class="token keyword">def</span> <span class="token function">red</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token string">"{Fore.RED}{s}{Fore.RESET}"</span><span class="token keyword">def</span> <span class="token function">yellow</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token string">"{Fore.YELLOW}{s}{Fore.RESET}"</span><span class="token keyword">class</span> <span class="token class-name">Paths</span><span class="token punctuation">:</span>    base_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parents<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    src_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> base_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span>    log_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> base_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span>    data_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> base_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span>    checkpoint_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> base_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"checkpoint"</span><span class="token punctuation">)</span>    submission_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> base_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"submission"</span><span class="token punctuation">)</span>    train_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> data_path <span class="token operator">/</span> <span class="token string">"covid.train.csv"</span>    test_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> data_path <span class="token operator">/</span> <span class="token string">"covid.test.csv"</span>    config_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> src_path <span class="token operator">/</span> <span class="token string">"config"</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> Paths<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> key<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"_path"</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> value<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        value<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pc <span class="token operator">=</span> Paths<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span>base_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-feature-selection-py"><a href="#2-feature-selection-py" class="headerlink" title="2. feature_selection.py"></a>2. feature_selection.py</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_selection <span class="token keyword">import</span> SelectKBest<span class="token punctuation">,</span> f_regression<span class="token keyword">from</span> pathconfig <span class="token keyword">import</span> Pathsdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>Paths<span class="token punctuation">.</span>train_path<span class="token punctuation">)</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 根据得分函数计算出来的分数选取前五个</span>bestfeatures <span class="token operator">=</span> SelectKBest<span class="token punctuation">(</span>score_func<span class="token operator">=</span>f_regression<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>fit <span class="token operator">=</span> bestfeatures<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>dfscores <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>fit<span class="token punctuation">.</span>scores_<span class="token punctuation">)</span>dfcolumns <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>x<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#concat two dataframes for better visualization </span>featureScores <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>dfcolumns<span class="token punctuation">,</span>dfscores<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>featureScores<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Specs'</span><span class="token punctuation">,</span><span class="token string">'Score'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#naming the dataframe columns</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>featureScores<span class="token punctuation">.</span>nlargest<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">'Score'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#print 15 best features</span><span class="token keyword">print</span><span class="token punctuation">(</span>featureScores<span class="token punctuation">.</span>nlargest<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token string">"Score"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-dataset-py"><a href="#3-dataset-py" class="headerlink" title="3. dataset.py"></a>3. dataset.py</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> random<span class="token keyword">import</span> typing<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> data<span class="token keyword">from</span> pathconfig <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">CovidDataset</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> split<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">,</span> dim2use<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>Iterable<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token operator">=</span>None<span class="token punctuation">,</span> val_ratio<span class="token punctuation">:</span> float<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        dim2use <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">93</span><span class="token punctuation">)</span> <span class="token keyword">if</span> dim2use <span class="token keyword">is</span> None <span class="token keyword">else</span> dim2use        <span class="token keyword">assert</span> split <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> red<span class="token punctuation">(</span>f<span class="token string">"无效的数据集类别：{split}"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span>t<span class="token punctuation">:</span><span class="token operator">=</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">93</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> red<span class="token punctuation">(</span>f<span class="token string">"无效的feature dimension， 最大只有 93 维(0-92), dim2use={dim2use[t]} > 92"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># read file</span>        self<span class="token punctuation">.</span>split<span class="token punctuation">:</span> str <span class="token operator">=</span> split        <span class="token keyword">if</span> self<span class="token punctuation">.</span>split <span class="token operator">==</span> <span class="token string">"test"</span><span class="token punctuation">:</span>            raw_csv<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>Paths<span class="token punctuation">.</span>test_path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            raw_csv<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>Paths<span class="token punctuation">.</span>train_path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">)</span><span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;</span> val_ratio <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>                val_idx<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>population<span class="token operator">=</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>raw_csv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token operator">=</span>int<span class="token punctuation">(</span>val_ratio <span class="token operator">*</span> len<span class="token punctuation">(</span>raw_csv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                train_idx<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>raw_csv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> set<span class="token punctuation">(</span>val_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> Paths<span class="token punctuation">.</span>config_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"train_val.pkl"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>yellow<span class="token punctuation">(</span><span class="token string">"覆盖train_val.pkl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span>Paths<span class="token punctuation">.</span>config_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"train_val.pkl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"train"</span><span class="token punctuation">:</span>train_idx<span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">:</span>val_idx<span class="token punctuation">}</span><span class="token punctuation">,</span> file<span class="token operator">=</span>f<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token keyword">with</span> open<span class="token punctuation">(</span>Paths<span class="token punctuation">.</span>config_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"train_val.pkl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                        p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>file<span class="token operator">=</span>f<span class="token punctuation">)</span>                        train_idx<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span>                        val_idx<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token string">"val"</span><span class="token punctuation">]</span>                <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>                    <span class="token keyword">assert</span> <span class="token boolean">False</span><span class="token punctuation">,</span> red<span class="token punctuation">(</span>f<span class="token string">"不存在train_validation的config文件，请先指定val_ratio生成train_val的config"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> split <span class="token operator">==</span> <span class="token string">"val"</span><span class="token punctuation">:</span>                raw_csv <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                raw_csv <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span>train_idx<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># standard</span>        self<span class="token punctuation">.</span>mean <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>std <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>mean<span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>std        <span class="token keyword">if</span> self<span class="token punctuation">.</span>split <span class="token operator">!=</span> <span class="token string">"test"</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>data<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> dim2use<span class="token punctuation">]</span>            self<span class="token punctuation">.</span>label<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>data<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> dim2use<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> typing<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span>np<span class="token punctuation">.</span>ndarray<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>split <span class="token operator">!=</span> <span class="token string">"test"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>label<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># cd = CovidDataset(split="train", val_ratio=0.1)</span>    <span class="token comment" spellcheck="true"># cd = CovidDataset(split="val", dim2use=range(10))</span>    <span class="token comment" spellcheck="true"># cd = CovidDataset(split="test", dim2use=range(10))</span>    cd <span class="token operator">=</span> CovidDataset<span class="token punctuation">(</span>split<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">,</span> dim2use<span class="token operator">=</span>None<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cd<span class="token punctuation">.</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> cd<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-networks-py"><a href="#4-networks-py" class="headerlink" title="4. networks.py"></a>4. networks.py</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">class</span> <span class="token class-name">_NetworkBase</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dtype <span class="token operator">=</span> None        self<span class="token punctuation">.</span>net<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>Module <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Baseline</span><span class="token punctuation">(</span>_NetworkBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_features<span class="token punctuation">:</span>int<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span>in_features<span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> son <span class="token keyword">in</span> self<span class="token punctuation">.</span>net<span class="token punctuation">.</span>named_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            weight<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>Parameter            <span class="token keyword">if</span> <span class="token punctuation">(</span>weight<span class="token punctuation">:</span><span class="token operator">=</span>getattr<span class="token punctuation">(</span>son<span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dtype<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>dtype <span class="token operator">=</span> weight<span class="token punctuation">.</span>dtype    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># x: [batch, channel]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DeeperNet</span><span class="token punctuation">(</span>_NetworkBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_features<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>input_trainsform <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span>in_features<span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=64),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=64),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=64),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=64),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>output <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.LeakyReLU(),</span>            <span class="token comment" spellcheck="true"># nn.Linear(in_features=32, out_features=1)</span>        <span class="token punctuation">)</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> son <span class="token keyword">in</span> self<span class="token punctuation">.</span>input_trainsform<span class="token punctuation">.</span>named_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            weight<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>Parameter            <span class="token keyword">if</span> <span class="token punctuation">(</span>weight<span class="token punctuation">:</span><span class="token operator">=</span>getattr<span class="token punctuation">(</span>son<span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dtype<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>dtype <span class="token operator">=</span> weight<span class="token punctuation">.</span>dtype    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>input_trainsform<span class="token punctuation">(</span>raw_x<span class="token punctuation">)</span>        y1 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> x        y2 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block2<span class="token punctuation">(</span>y1<span class="token punctuation">)</span> <span class="token operator">+</span> y1         <span class="token comment" spellcheck="true"># y3 = self.residual_block3(y2) + y2</span>        <span class="token comment" spellcheck="true"># y4 = self.residual_block4(y3) + y3</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>output<span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DeeperNormalizedNet</span><span class="token punctuation">(</span>_NetworkBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_features<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>input_trainsform <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span>in_features<span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=64),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=64),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>output <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> son <span class="token keyword">in</span> self<span class="token punctuation">.</span>input_trainsform<span class="token punctuation">.</span>named_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            weight<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>Parameter            <span class="token keyword">if</span> <span class="token punctuation">(</span>weight<span class="token punctuation">:</span><span class="token operator">=</span>getattr<span class="token punctuation">(</span>son<span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dtype<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>dtype <span class="token operator">=</span> weight<span class="token punctuation">.</span>dtype    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>input_trainsform<span class="token punctuation">(</span>raw_x<span class="token punctuation">)</span>        y1 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> x        y2 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block2<span class="token punctuation">(</span>y1<span class="token punctuation">)</span> <span class="token operator">+</span> y1        <span class="token keyword">return</span> self<span class="token punctuation">.</span>output<span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WideNet</span><span class="token punctuation">(</span>_NetworkBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_features<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>input_trainsform <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span>in_features<span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>output <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> son <span class="token keyword">in</span> self<span class="token punctuation">.</span>input_trainsform<span class="token punctuation">.</span>named_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            weight<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>Parameter            <span class="token keyword">if</span> <span class="token punctuation">(</span>weight<span class="token punctuation">:</span><span class="token operator">=</span>getattr<span class="token punctuation">(</span>son<span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dtype<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>dtype <span class="token operator">=</span> weight<span class="token punctuation">.</span>dtype    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>input_trainsform<span class="token punctuation">(</span>raw_x<span class="token punctuation">)</span>        y11 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> x        y12 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block2<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> x        y1 <span class="token operator">=</span> <span class="token punctuation">(</span>y11 <span class="token operator">+</span> y12<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        y2 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block3<span class="token punctuation">(</span>y1<span class="token punctuation">)</span> <span class="token operator">+</span> y1        <span class="token keyword">return</span> self<span class="token punctuation">.</span>output<span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">OtherNet</span><span class="token punctuation">(</span>_NetworkBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_features<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span>in_features<span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span>num_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> son <span class="token keyword">in</span> self<span class="token punctuation">.</span>net<span class="token punctuation">.</span>named_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            weight<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>Parameter            <span class="token keyword">if</span> <span class="token punctuation">(</span>weight<span class="token punctuation">:</span><span class="token operator">=</span>getattr<span class="token punctuation">(</span>son<span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dtype<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>dtype <span class="token operator">=</span> weight<span class="token punctuation">.</span>dtype    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># x: [batch, channel]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    baseline <span class="token operator">=</span> Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">93</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>dtype<span class="token operator">=</span>baseline<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>baseline<span class="token punctuation">.</span>device<span class="token punctuation">)</span>    baseline<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-train-py"><a href="#5-train-py" class="headerlink" title="5. train.py"></a>5. train.py</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">import</span> typing<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>axes <span class="token keyword">import</span> Axes<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>cuda<span class="token keyword">import</span> torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">import</span> optimizer<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> data<span class="token keyword">import</span> networks<span class="token keyword">from</span> pathconfig <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> dataset <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">Trainer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> network<span class="token punctuation">:</span> networks<span class="token punctuation">.</span>_NetworkBase<span class="token punctuation">,</span> dim2use<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>start_time<span class="token punctuation">:</span> str <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>select_device<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>reproducibile<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>network <span class="token operator">=</span> network<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>suffix<span class="token punctuation">:</span> str <span class="token operator">=</span> self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__        self<span class="token punctuation">.</span>log_folder<span class="token punctuation">:</span> Path <span class="token operator">=</span> Paths<span class="token punctuation">.</span>log_path <span class="token operator">/</span> self<span class="token punctuation">.</span>suffix <span class="token operator">/</span> self<span class="token punctuation">.</span>start_time<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> Paths<span class="token punctuation">.</span>checkpoint_path <span class="token operator">/</span> self<span class="token punctuation">.</span>suffix <span class="token operator">/</span> f<span class="token string">"{self.start_time}.pt"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>log_folder<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>log_folder<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># train</span>        self<span class="token punctuation">.</span>train_loader <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>CovidDataset<span class="token punctuation">(</span>split<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>val_loader <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>CovidDataset<span class="token punctuation">(</span>split<span class="token operator">=</span><span class="token string">"val"</span><span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># mse for regression</span>        self<span class="token punctuation">.</span>lossfunc <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">"mean"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.lossfunc = nn.(reduction="mean")</span>        <span class="token comment" spellcheck="true"># visualize</span>        self<span class="token punctuation">.</span>train_loss<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>float<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>val_loss<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>float<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>min_val_loss<span class="token punctuation">:</span> float <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">:</span> Axes        _<span class="token punctuation">,</span> self<span class="token punctuation">.</span>axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">select_device</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>device <span class="token operator">=</span> <span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span>    <span class="token keyword">def</span> <span class="token function">reproducibile</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> seed<span class="token punctuation">:</span> int<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token operator">=</span>seed<span class="token punctuation">)</span>        torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token operator">=</span>seed<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># no optimization for convolution</span>        torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true"># use default convolution algorithm</span>        torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>device <span class="token operator">==</span> <span class="token string">"cuda"</span><span class="token punctuation">:</span>            torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token operator">=</span>seed<span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token operator">=</span>seed<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">visualize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val_loss<span class="token punctuation">:</span> float<span class="token punctuation">,</span> train_loss<span class="token punctuation">:</span> float<span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>ion<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>cla<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">400.0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"steps"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"loss / MSE"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span>f<span class="token string">"{self.suffix}-{self.start_time}"</span><span class="token punctuation">)</span>        x_train <span class="token operator">=</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>        x_val <span class="token operator">=</span> x_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loss<span class="token punctuation">)</span> <span class="token operator">//</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>val_loss<span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> self<span class="token punctuation">.</span>train_loss<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"tab:red"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"train loss"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_val<span class="token punctuation">,</span> self<span class="token punctuation">.</span>val_loss<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"tab:cyan"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"val loss"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>f<span class="token string">"min_val_loss: {self.min_val_loss:>5.4f}"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>f<span class="token string">"val/train loss: {val_loss:>5.4f}/{train_loss:>5.4f}"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token operator">=</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loss<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> s<span class="token operator">=</span>f<span class="token string">"Current loss: {self.train_loss[-1]:>5.4f}"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> epoch<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Saving model at {Fore.GREEN}{Style.BRIGHT}{epoch}{Style.RESET_ALL} epoch, val_loss = {Fore.GREEN}{Style.BRIGHT}{self.min_val_loss}{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token operator">=</span>self<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">lossfunc_l2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">,</span> pred<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">:</span>        loss <span class="token operator">=</span> self<span class="token punctuation">.</span>lossfunc<span class="token punctuation">(</span>target<span class="token punctuation">,</span> pred<span class="token punctuation">)</span>        norm_loss <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> param <span class="token keyword">in</span> self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            norm_loss <span class="token operator">+=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>param<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> loss <span class="token operator">+</span> norm_loss <span class="token operator">*</span> <span class="token number">0.00075</span>    @torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">validation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        loss <span class="token operator">=</span> <span class="token number">0</span>        x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor        y<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor        self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> self<span class="token punctuation">.</span>val_loader<span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>            y_pred<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>network<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># loss += self.lossfunc(y, y_pred.squeeze()).sqrt()</span>            <span class="token comment" spellcheck="true"># loss = self.lossfunc_l2(y, y_pred.squeeze())</span>            loss <span class="token operator">+=</span> self<span class="token punctuation">.</span>lossfunc<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        l<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor        self<span class="token punctuation">.</span>val_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">:</span><span class="token operator">=</span><span class="token punctuation">(</span>loss<span class="token operator">/</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>val_loader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> l    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lr<span class="token punctuation">:</span> float<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> wd<span class="token punctuation">:</span> float<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> n_epoch<span class="token punctuation">:</span> int<span class="token operator">=</span><span class="token number">3000</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> early_stop<span class="token punctuation">:</span> int<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        msg<span class="token punctuation">:</span> str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入本次训练的日志记录："</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># optimizer = optim.SGD(self.network.parameters(), lr=lr, weight_decay=wd, momentum=momentum)</span>        optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>AdamW<span class="token punctuation">(</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>wd<span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>log_folder<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"message.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>msg<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token string">"epoch: {n_epoch}, lr: {lr}, wd: {wd}, early_stop: {early_stop}, optimizer: {optimizer.__class__.__name__}\n"</span><span class="token punctuation">)</span>        early_stop_cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor            y<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor            self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>            train_loss<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> self<span class="token punctuation">.</span>train_loader<span class="token punctuation">:</span>                optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>                x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>                y_pred<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>network<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                loss<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>lossfunc<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># loss = self.lossfunc_l2(y, y_pred.squeeze())</span>                <span class="token comment" spellcheck="true"># loss = loss.sqrt()</span>                loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>train_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            train_loss <span class="token operator">=</span> <span class="token punctuation">(</span>train_loss <span class="token operator">/</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">)</span>            val_loss <span class="token operator">=</span> self<span class="token punctuation">.</span>validation<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> val_loss <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>min_val_loss<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>min_val_loss <span class="token operator">=</span> val_loss                early_stop_cnt <span class="token operator">=</span> <span class="token number">0</span>                self<span class="token punctuation">.</span>save<span class="token punctuation">(</span>epoch<span class="token operator">=</span>epoch<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                early_stop_cnt <span class="token operator">+=</span> <span class="token number">1</span>            self<span class="token punctuation">.</span>visualize<span class="token punctuation">(</span>val_loss<span class="token operator">=</span>val_loss<span class="token punctuation">,</span> train_loss<span class="token operator">=</span>train_loss<span class="token punctuation">)</span>            <span class="token keyword">if</span> early_stop_cnt <span class="token operator">>=</span> early_stop<span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>green<span class="token punctuation">(</span>f<span class="token string">"Training stopped at {epoch}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>green<span class="token punctuation">(</span><span class="token string">"Saving trainig log"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>log_folder<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"train_val.loss.pkl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>                <span class="token punctuation">{</span>                    <span class="token string">"val"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>val_loss<span class="token punctuation">,</span>                    <span class="token string">"train"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>train_loss<span class="token punctuation">,</span>                    <span class="token string">"min_val"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>min_val_loss                <span class="token punctuation">}</span><span class="token punctuation">,</span> file<span class="token operator">=</span>f            <span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>self<span class="token punctuation">.</span>log_folder<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"train_log.png"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># @torch.no_grad()</span>    <span class="token comment" spellcheck="true"># def get_presudo</span><span class="token keyword">def</span> <span class="token function">baseline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> networks<span class="token punctuation">.</span>Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">93</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>b<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span>wd<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">previous2day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dim2use<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> networks<span class="token punctuation">.</span>Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>b<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">selected_feature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    b <span class="token operator">=</span> networks<span class="token punctuation">.</span>Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>b<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">residual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58]) - 1</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58, 43, 61, 79, 44, 62, 80, 41, 59, 77, 42, 60, 78, 93, 75, 57, 88, 70, 52, 84, 66, 48]) - 1</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([75, 57, 61, 79, 43, 78, 60, 42, 91, 73, 83, 80, 68, 62, 40, 86, 65, 77, 85, 67, 55, 49])</span>    d <span class="token operator">=</span> networks<span class="token punctuation">.</span>DeeperNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>d<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span>wd<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    d <span class="token operator">=</span> networks<span class="token punctuation">.</span>DeeperNormalizedNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>d<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span>wd<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">wider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    w <span class="token operator">=</span> networks<span class="token punctuation">.</span>WideNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>w<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span>wd<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    o <span class="token operator">=</span> networks<span class="token punctuation">.</span>OtherNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>o<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span>wd<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># baseline()</span>    <span class="token comment" spellcheck="true"># previous2day()</span>    <span class="token comment" spellcheck="true"># selected_feature()</span>    residual<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># other()</span>    <span class="token comment" spellcheck="true"># normalized()</span>    <span class="token comment" spellcheck="true"># wider()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-gen-submission-py"><a href="#6-gen-submission-py" class="headerlink" title="6. gen_submission.py"></a>6. gen_submission.py</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> typing<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> data<span class="token keyword">from</span> dataset <span class="token keyword">import</span> CovidDataset<span class="token keyword">import</span> networks<span class="token keyword">from</span> pathconfig <span class="token keyword">import</span> <span class="token operator">*</span>@torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen_submission</span><span class="token punctuation">(</span>network<span class="token punctuation">:</span>networks<span class="token punctuation">.</span>_NetworkBase<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>None<span class="token punctuation">,</span> save_path<span class="token punctuation">:</span> Path<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    test_loader <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>CovidDataset<span class="token punctuation">(</span>split<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor    <span class="token keyword">for</span> x <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span><span class="token string">"cuda"</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>        y_pred<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor <span class="token operator">=</span> network<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        result<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>y_pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> save_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        save_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>save_path<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>save_path<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"id,tested_positive\n"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> id<span class="token punctuation">,</span> r <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token string">"{id},{r}\n"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen_baseline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">93</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/Baseline/2021-12-12 15_29_31.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>None<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen2day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/Baseline/2021-12-12 15_40_58.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dim2use <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dim2use<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">feature_selection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58, 43, 61, 79, 44, 62, 80, 41, 59, 77, 42, 60, 78, 93]) - 1</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/Baseline/2021-12-12 16_33_04.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">residual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58, 43, 61, 79, 44, 62, 80, 41, 59, 77, 42, 60, 78, 93]) - 1</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58]) - 1</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([75, 57, 61, 79, 43, 78, 60, 42, 91, 73, 83, 80, 68, 62, 40, 86, 65, 77, 85, 67, 55, 49])</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58, 43, 61, 79, 44, 62, 80, 41, 59, 77, 42, 60, 78, 93, 75, 57, 88, 70, 52, 84, 66, 48]) - 1</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([75, 57])</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>DeeperNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/DeeperNet/2021-12-13 01_55_10.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58, 43, 61, 79, 44, 62, 80, 41, 59, 77, 42, 60, 78, 93]) - 1</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>DeeperNormalizedNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/DeeperNormalizedNet/2021-12-12 17_55_08.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">wider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>WideNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/WideNet/2021-12-12 18_12_38.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>OtherNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/OtherNet/2021-12-13 00_49_48.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># gen_baseline()</span>    <span class="token comment" spellcheck="true"># gen2day()</span>    <span class="token comment" spellcheck="true"># feature_selection()</span>    <span class="token comment" spellcheck="true"># other()</span>    residual<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># normalize()</span>    <span class="token comment" spellcheck="true"># wider()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Homeworks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021 Spring homeworks: hw0 -- 概述</title>
      <link href="/2021/12/10/li-hong-yi-ml2021-spring-hw0-gai-shu/"/>
      <url>/2021/12/10/li-hong-yi-ml2021-spring-hw0-gai-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文讲解李宏毅ML2021 Spring homeworks系列文章的写作原因以及系列文章的写作目的</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207145714311.png" alt="课程官网"></p><span id="more"></span><h1 id="李宏毅ML2021-Spring-homeworks-hw0-—-概述"><a href="#李宏毅ML2021-Spring-homeworks-hw0-—-概述" class="headerlink" title="李宏毅ML2021 Spring homeworks: hw0 — 概述"></a>李宏毅ML2021 Spring homeworks: hw0 — 概述</h1><p>李宏毅老师的Machine Learning 2021 Spring的课程李宏毅老师以及上传到他的Youtube上了，并且系列作业也已经经过整理向公众开放。今年的ML课程完全关注Deep Learning，此外结合了Kaggle的许多实战。<strong>因此本系列文章记录了我在完成作业时候的心得与体会。</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/44fe603d253c2586def6d0e832b5efd6_r.jpg" alt="ML与DL的关系"></p><h2 id="1-写作初心"><a href="#1-写作初心" class="headerlink" title="1. 写作初心"></a>1. 写作初心</h2><p>在2019年我刚进入大学的时候，那个时候深度学习已经火热起来了。在那个时候我就通过观看李宏毅老师的Machine Learning的系列课程从而对机器学习和深度学习入门了。</p><p>然而可惜的是，由于种种原因，在2019年的时候，李宏毅老师的ML系列课程我最终没有坚持下来全部看完。</p><p>一方面是受到了当时学识的限制。在那时候刚刚进入大学，刚刚开始学习线性代数，对概率论、图论、凸优化、计算机、多元高等数学等内容完全没有接触过。</p><p>另外一方面当时更加关注与计算机底层LInux等内容的学习；最后是大一时候的课是真的多。</p><p>因此最终没有听完2019年的课程，非常的可惜。</p><p>现在因为降级转入计算机专业的原因，有了很多的时间；此外自己在业余时间也已经把许多计算机的课程、深度学习的数学原理课程都已经学过了，编程能力也有了非常大的提升。</p><p>又恰逢2021年李宏毅老师的课程上架。因此决定这一次详细的学完所有课程并完成对应的作业。</p><p>所有的作业都以博客的形式来记录我炼丹的点滴。希望能够见证我这一段时间的投入和付出。</p><h2 id="2-Who-is-Hung-yi-Lee"><a href="#2-Who-is-Hung-yi-Lee" class="headerlink" title="2. Who is Hung-yi Lee"></a>2. Who is Hung-yi Lee</h2><p>As now we are going to have classes of Hung-yi Lee, we’d better have some knowledge of him.</p><p>首先是<code>Wikipedia</code>的介绍</p><blockquote><p><strong>From wikipedia</strong></p><p>李宏毅（1985年或1986年－），台湾地区计算机科学家，国立台湾大学电机工程学系副教授，研究领域包括语意理解、语音辨识、机器学习、深度学习等。</p><p>李宏毅在大学二年级时，因对电机系许多课程感到困惑，曾一度非常沮丧迷惘，甚至萌生了退学的念头。他当时选了一门“数字通信处理”课程，发现自己难以听懂，但他并未放弃，不弃选不退修，最终豁然开朗，“原来用手机拨电话给别人时，中间发生的事就是这些信号处理。”找到学习的兴趣后，李宏毅开始跟随中央研究院李琳山院士做项目，随后于2010年从国立台湾大学取得硕士学位，2012年取得博士学位。2012年9月至2013年8月间，李宏毅于中央研究院资讯科技创新研究中心担任博士后研究员。2013年9月以客座科学家身份前往麻省理工学院计算机科学暨人工智能实验室。2014年返台，担任台湾大学电机工程学系教师至今。</p><p>2015年，李宏毅开始在台湾大学讲授机器学习课程，选课人数通常爆满，有400多人来修。于是，李宏毅将学生分在两间教室，一间现场看老师上课，另一间同步看直播。由于直播上课的诸多限制，李宏毅养成了录制课程影片的习惯。一开始李宏毅将影片上传至个人主页，后来由于萤幕侧录软件的序号过期，无法导出MP4，但有导出至YouTube的选项，于是李宏毅开始将课程影片上传至YouTube。此举不仅帮助了台湾大学的学生，还意外嘉惠台湾大学以外的学生。在其影片下方，还有中国大陆的学生留言感谢，表示已经听完全部课程，并留下笔记连结。截至2021年9月30日，李宏毅的YouTube频道有8.99万位订阅者，最热门的影片有56万次观看。</p><p>李宏毅擅长用浅显易懂的语言，以学生喜爱的精灵宝可梦、凉宫春日等动漫来讲解复杂的机器学习技术，因此被亲切地称为“精灵宝可梦大师”。中华民国电脑学会称李宏毅为“第一个公开有系统地完整深入讲解深度学习技术的学者，使得华文的深度学习教学与英文世界并驾齐驱。”</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207143939983.png" alt="维基百科对老师的介绍"></p><p>从维基百科的介绍中能够看出来，李宏毅老师讲解机器学习的课程非常的有趣和生动，因此广受欢迎。我在当初也是受到了李宏毅老师早年的课程的熏陶，才进入了ML/DL的大门。</p><h2 id="3-Why-is-Hung-yi-Lee"><a href="#3-Why-is-Hung-yi-Lee" class="headerlink" title="3. Why is Hung-yi Lee"></a>3. Why is Hung-yi Lee</h2><p>为什么选择李宏毅老师的课程而非其他老师的课程？</p><p>首先是因为李宏毅老师的课程非常的通俗易懂，在讲课的时候老师会举各种各样的例子，宝可梦、全职猎人、凉宫春日等等，贴近与学生的距离。</p><p>其次是因为老师的ML的课程从16年到现在以及过去了5年时间了，在这五年中老师的课程已经经过了长久的打磨，因此会具备丰富的经验，所以学起来的时候体验会好很多。</p><p>最后就是关于我个人的原因，因为先前没有学完老师2019年的课程，感到非常遗憾，所想要在2021年完成老师的课程，弥补当年的遗憾。</p><h2 id="4-How-to-learn"><a href="#4-How-to-learn" class="headerlink" title="4. How to learn"></a>4. How to learn</h2><p>本系列文章将会记录每个作业的说明，我对每个作业的理解以及我在完成作业时的Update，在最后会附带上完整的项目代码。</p><p>所以每一个博客对应的一个作业，其结构大概类似于下面：</p><ol><li>作业介绍</li><li>我的作业动态</li><li>最终代码</li></ol>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Homeworks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> CNN </tag>
            
            <tag> Attention </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo的个人技术博客搭建 —— Part 4 Markdown编辑器Typora的设置以及腾讯云图床设置</title>
      <link href="/2021/12/10/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-4-markdown-bian-ji-qi-typora-de-she-zhi-yi-ji-teng-xun-yun-tu-chuang-she-zhi/"/>
      <url>/2021/12/10/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-4-markdown-bian-ji-qi-typora-de-she-zhi-yi-ji-teng-xun-yun-tu-chuang-she-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前面我们通过hexo在本地搭建出了静态博客网站的框架，那么我们还需要一个合适的Markdown编辑器来帮助我们快乐的写博客。本文讲解了如何在本地搭建出来一个Markdown开发环境</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211211015803341.png" alt="最终效果图:Nord主题"></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Markdown编辑器Typora的设置以及腾讯云图床设置"><a href="#基于Hexo的个人技术博客搭建-——-Markdown编辑器Typora的设置以及腾讯云图床设置" class="headerlink" title="基于Hexo的个人技术博客搭建 ——  Markdown编辑器Typora的设置以及腾讯云图床设置"></a>基于Hexo的个人技术博客搭建 ——  Markdown编辑器Typora的设置以及腾讯云图床设置</h1><p>通过前面的几讲，我们已经成功的在本地搭建出来了一个博客网站，并且进行了美化。然而博客网站的目的在于发布我们自己的博客，因此我们还需要一个趁手的编辑器来帮助我们编写<code>Markdown</code>文章。</p><p>经过重重考虑，我最终的博客开发环境为：<code>Typora</code> + 腾讯云图床 + <code>Github</code>托管网页。</p><p>在本章将讲解Typora编辑器的设置和腾讯云图床的设置。下节将讲解腾讯云图床的设置。</p><h2 id="1-What-is-Typora-图床？"><a href="#1-What-is-Typora-图床？" class="headerlink" title="1. What is Typora/图床？"></a>1. What is Typora/图床？</h2><h3 id="1-Typora"><a href="#1-Typora" class="headerlink" title="1. Typora"></a>1. Typora</h3><p>首先是<code>维基百科</code>的介绍</p><blockquote><p><strong>From Wikipidia</strong></p><p>Typora是一款由Abner Lee开发的轻量级Markdown编辑器，适用于OS X、Windows和Linux三种操作系统。与其他Markdown编辑器不同的是，Typora没有采用源代码和预览双栏显示的方式，而是采用所见即所得的编辑方式，实现了即时预览的功能，但也可切换至源代码编辑模式。</p></blockquote><p>其实说白了，<code>Typora</code>和记事本没有任何的区别，都是拿来写文本文件的。只不过Typora是专门拿来写Markdown文件的。针对<code>Markdown</code>文件的编写，Typora的体验会非常好。</p><p>此外Typora是一个三平台通用的编辑器，而且非常轻量，因此对于大型的IDE而言打开速度会快很多</p><h3 id="2-图床"><a href="#2-图床" class="headerlink" title="2. 图床"></a>2. 图床</h3><p><code>百度百科</code>的介绍</p><blockquote><p><strong>From BaiduBaike</strong></p><p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p></blockquote><p>其实说白了，图床就相当于一个相册，类似于百度云等云盘的相册功能。只不过图床里的图片都会有一个链接，通过链接就能够访问、看到这张图片。例如下面的这张图片</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207132435763.png" alt="根据链接显示图像"></p><h2 id="2-Why-Typora-图床？"><a href="#2-Why-Typora-图床？" class="headerlink" title="2. Why Typora/图床？"></a>2. Why Typora/图床？</h2><h3 id="1-Typora-1"><a href="#1-Typora-1" class="headerlink" title="1. Typora"></a>1. Typora</h3><p>其实选择Typora的原因有很多，具体来说吸引我的原因有下面的几个：</p><ol><li><p><strong>好用</strong>：用Typora来写Markdown的体验非常流畅与直观。因为Markdown本身就是一个 标记语言，所以会有非常多的标记用来说明一段文本应该被展示的样子，具体来说效果就是下面的图片中我正在写的这篇文章的Markdown源码</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210210326416.png" alt="Markdown的源代码"></p><p>但是在Typora中，源码形式的Markdown会被直接解析并显示出对应的效果，因此会非常直观，方便书写。具体效果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210210717942.png" alt="Typora中的即时显示"></p></li></ol><ol><li><p><strong>多平台互通</strong>：因为我本身是需要进行软件程序开发、深度学习模型训练的，因此在Linux进行这些操作就会非常的舒服。而有的时候需要我去处理一些Word文本、PPT等等。这个时候就还是需要Windows上的全家桶。因此多个平台上Typora都可以使用，结合Typora以文件的形式保存配置信息，我们可以做到三个平台上Typora的无缝切换，不存在任何体验的割裂，因此非常的舒服</p></li><li><p><strong>好看</strong>：Typora是基于Node.js的程序，因此支持自己编写css来定义样式。所以我们可以自己设置Typora的外观。此外Typora还有一个不错的皮肤市场，因此我们其实可以从这个市场中下载皮肤然后进行使用。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207134405026.png" alt="Typora的皮肤市场"></p></li></ol><ol><li><p><strong>非常好的图床支持</strong>：稍后我们其实会讲到图床的好处和为什么需要图床，而<code>Typora</code>内置了<code>PicGo</code>，对各大主流的图床的支持都非常好，因此和图床搭配使用效果奇佳。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210211710899.png" alt="Typora中的图床设置"></p></li><li><p>……</p></li></ol><p>总之，Typora有着多种多样的优点吸引我，因此我的博客中也是使用Typora作为Markdown的编辑器。事实上，我从2019年开始就已经使用Typora了，可谓是资深用户。</p><p>需要注意的是，Typora在之前全都是测试版，从2021年11月23日起发布了1.0版本，并且从1.0版本以后成为收费软件，售价14.99美元，约合89RMB。</p><p>不过官方也承诺过1.0版本以前的版本都将继续保持免费，而1.0版本以后的版本都将保持收费。其实在现在最新的Typora免费版（大概是0.11）的功能和1.0版本基本没有差别，因此再没有推出大的更新之前/足够吸引我的功能之前还是继续使用免费版。其实免费版也已经够大家使用了。</p><p>下面也会讲解如何下载免费版。</p><h3 id="2-图床-1"><a href="#2-图床-1" class="headerlink" title="2. 图床"></a>2. 图床</h3><p>我们通过hexo搭建的博客其实是一个静态博客。静态博客就意味着博客中所有的网页资源都是静态的，在用户点击请求文章的时候，文字和图片同时被发送过去。然而我们的博客资源在传输的过程中，博客资源所在的服务器的传输带宽有限，因此我们如果把图片和博客放在同一个服务器上，传输的速度就会很慢。此外我们后面也会讲解用Github托管博客资源，所以我们每次进行本地推送和异地同步就会很浪费时间。</p><p>而由于图床是我们把图片存放在图床商家的服务器，通过一个链接就可以访问，因此使用图床就可以使得用户访问文章的时候，图片的带宽需求由图床服务器承担。而图床服务器一般带宽都会非常大。因此就可以加速页面的加载速度，同时方便我们进行推送和同步。</p><p>对于我个人而言，我使用的是<strong>腾讯云存储桶作为图床</strong>，而主要原因就是我的服务器也是腾讯云的，所以我懒得换来换去。<strong>其实任何的图床厂商都是可以的。</strong></p><p>下面我们会讲解如何创建腾讯云图床，以及在Typora中设置图床。对于其他的图床在Typora中的设置其实查一下都会有。</p><h2 id="3-Typora设置"><a href="#3-Typora设置" class="headerlink" title="3. Typora设置"></a>3. Typora设置</h2><p>对于Typora的设置，主要包含四个方面：下载免费版， 换个皮肤，设置快捷键以及图床设置。不过由于图床设置是和图床有关的，因此最后的图床设置在图床创建后面讲</p><h3 id="1-下载免费版"><a href="#1-下载免费版" class="headerlink" title="1. 下载免费版"></a>1. 下载免费版</h3><p>免费版其实在官网中就有列出来。<a href="https://typora.io/">官网</a>：<a href="https://typora.io/">https://typora.io/</a></p><p>我们点进去官网翻到最底下，有一个<code>所有的历史文件</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210214453168.png" alt="历史文件"></p><p>点进去之后点到开发测试版本</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210214545807.png" alt="开发测试版本"></p><p>然后同样在最下面的old release</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210215003642.png" alt="旧版本"></p><p>点进去之后就可以下载</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210215114073.png" alt="下载旧版本"></p><p>点击之后下载即可</p><h3 id="2-设置皮肤"><a href="#2-设置皮肤" class="headerlink" title="2. 设置皮肤"></a>2. 设置皮肤</h3><p>安装之后，我们就可以安装皮肤。前面说过，我们可以在市场上下载皮肤，其实皮肤就是css文件加上资源文件。所以我们安装皮肤其实就是把下载的这些资源粘贴到皮肤文件夹中。</p><p>我们首先打开资源文件夹，在左上角的<code>file</code>—&gt; <code>preference</code>中选择<code>Apprence</code>，然后选择打开<code>Theme Folder</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207141743141.png" alt="打开主题文件夹"></p><p>然后在皮肤市场中下载需要的皮肤，我下载的<code>Nord</code>，<code>Dracula</code>和<code>Mint</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207141909886.png" alt="下载皮肤"></p><p>然后把下载下的皮肤压缩文件解压之后复制到打开的主题文件夹中即可，需要注意的是，皮肤最重要的是css文件，而皮肤名的文件夹中放的是一些资源，所以我们需要把css放到正确的位置</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207142137820.png" alt="复制皮肤到皮肤文件夹中"></p><p>最后重启Typora就可以在左上角的Themes中选择皮肤</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207142227515.png" alt="选择皮肤"></p><p>选择<code>Mint</code>主题看看效果</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207142620434.png" alt="Mint主题效果"></p><h3 id="3-设置快捷键"><a href="#3-设置快捷键" class="headerlink" title="3. 设置快捷键"></a>3. 设置快捷键</h3><p>Typora的快捷键设置其实是通过一个json文件完成，因此我们在这个Json文件中编辑快捷键即可</p><p>需要注意的是，我们需要首先在英文版中查看需要设置快捷键的功能的名称，例如我们需要设置快捷插入代码框Code（我这里是以及设置过了）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207141509346.png" alt="查看功能名称"></p><p>然后我们打开Preference中的General，然后打开在keyBinding中设置功能和对应的键即可。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210222113923.png" alt="image-20211210222113923"></p><h2 id="4-腾讯云图床创建以及Typora配置"><a href="#4-腾讯云图床创建以及Typora配置" class="headerlink" title="4. 腾讯云图床创建以及Typora配置"></a>4. 腾讯云图床创建以及Typora配置</h2><p>关于腾讯云图床的配置，参考这篇<a href="https://blog.51cto.com/u_15070902/3764737">文章</a>：<a href="https://blog.51cto.com/u_15070902/3764737">https://blog.51cto.com/u_15070902/3764737</a></p><p>最通过这样的配置，我们就完成了Typora的设置与图床的搭配，现在开始我们就可以快乐的开始写博客了 <span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS杂篇 Melodic下Python3中使用CV_Bridge与TF</title>
      <link href="/2021/11/22/ros-za-pian-melodic-xia-python3-zhong-shi-yong-cv-bridge-yu-tf/"/>
      <url>/2021/11/22/ros-za-pian-melodic-xia-python3-zhong-shi-yong-cv-bridge-yu-tf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>TF与CV_Bridge是ROS中非常好用的工具，前者用于帮助我们进行坐标转换，后者帮助我们在ROS中使用OpenCV。然而在Melodic版本中Python3下使用这两个包却会报错，本文将解决这Python3CV_Bridge与TF的使用问题。</p></blockquote><span id="more"></span><h1 id="ROS杂篇-Melodic下Python3中使用CV-Bridge与TF"><a href="#ROS杂篇-Melodic下Python3中使用CV-Bridge与TF" class="headerlink" title="ROS杂篇 Melodic下Python3中使用CV_Bridge与TF"></a>ROS杂篇 Melodic下Python3中使用CV_Bridge与TF</h1><blockquote><p>前言：为什么要写这篇博客</p></blockquote><p>在使用ROS驱动机器人的时候，经常遇到的一个问题就是我们需要使用摄像头来获得视觉信息，并且在此基础上，指导机器人进行操作。</p><h2 id="Updates"><a href="#Updates" class="headerlink" title="Updates ! ! !"></a>Updates ! ! !</h2><p>由于最近一个周我的工作变动，目前需要在Ubuntu 20.04 LTS进行ROS开发，20.04中TF和CV_Bridge默认都支持Python3，因此目前我不需要解决这个问题。这篇文章以后更完</p>]]></content>
      
      
      <categories>
          
          <category> ROS杂篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> melodic </tag>
            
            <tag> OpenCv </tag>
            
            <tag> cv_bridge </tag>
            
            <tag> sensor_msgs </tag>
            
            <tag> roslaunch </tag>
            
            <tag> tf2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS杂篇 ROS中使用Kinect V2 Part2：iai-kinect使用</title>
      <link href="/2021/11/19/ros-za-pian-ros-zhong-shi-yong-kinect-v2-iai-kinect-shi-yong/"/>
      <url>/2021/11/19/ros-za-pian-ros-zhong-shi-yong-kinect-v2-iai-kinect-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇详细介绍了iai-kinect2功能包，在此基础上通过iai-kinect2获取深度图像，从而进行ROS中的开发。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211121155602208.png" alt="使用Kinect V2获取得到图像经过YOLO检测并与深度配准"></p><span id="more"></span><h1 id="ROS杂篇-ROS中使用Kinect-V2-Part2：iai-kinect2使用"><a href="#ROS杂篇-ROS中使用Kinect-V2-Part2：iai-kinect2使用" class="headerlink" title="ROS杂篇 ROS中使用Kinect V2 Part2：iai-kinect2使用"></a>ROS杂篇 ROS中使用Kinect V2 Part2：iai-kinect2使用</h1><blockquote><p>前言：为什么要写这篇博客</p></blockquote><p>在上一篇中，我们介绍了如何在<code>Ubuntu</code>上安装<code>Kinect V2</code>的开原驱动：<code>libfrenect2</code>，以及如何安装在<code>ROS</code>中使用<code>libfrenect2</code>获取深度图像的功能包<code>iai-kinect2</code>。然而在上一篇文章的最后，我们只是简单的使用了一下<code>iai-kinect2</code>功能包。但是我们通过<code>rostopic list</code>却看到了非常多的话题，那么这些话题之间到底是什么关系呢？又该如何基于<code>iai-kinect2</code>进行深度开发呢？</p><p>本节就将在上一篇的基础上，在介绍<code>iai-kinect2</code>的基础上，利用<code>iai-kinect2</code>进行开发。如果没有看过第一篇文章、没有配置好环境，先按照<a href="http://jackwang.cafe/2021/11/18/ros-za-pian-an-zhuang-kinect-v2-qu-dong/">第一篇文章中的教程</a>跟着来。</p><p>废话不多说，下面就开始吧。</p><h2 id="1-什么是iai-kinect2？"><a href="#1-什么是iai-kinect2？" class="headerlink" title="1. 什么是iai-kinect2？"></a>1. 什么是iai-kinect2？</h2><blockquote><p>我认为合理的学习方法：学什么前，先问是什么，再问为什么学（学习这个东西的目的），搞懂学了能为我们带来那些帮助，最后再开始学</p></blockquote><p>如果你有看过我的上一篇博客的话，你应该就会知道，<code>iai-kinect2</code>是<code>ROS</code>的一个功能包，他的作用在于调用了<code>libfreenect2</code>驱动来获得<code>Kinect V2</code>相机得到的深度图像以及通过<code>OpenGL</code>、<code>CUDA</code>、<code>CPU</code>等平台极大地提升了渲染速度和适应性。最终实现了多平台下深度图像30 FPS的性能。</p><p>下面是对<code>iai-kinect2</code>的更加详细的介绍</p><h3 id="A-谁开发的iai-kinect2"><a href="#A-谁开发的iai-kinect2" class="headerlink" title="A. 谁开发的iai-kinect2?"></a>A. 谁开发的iai-kinect2?</h3><p>iai-kinect2是由德国不莱梅大学（University of Bremen）的博士生Thiemo Wiedemeyer。他在2013年的时候去不莱梅大学的人工智能研究所读博的时候开发出了<code>iai-kinect2</code>。在2014年的时候，经过几个月的开发，他和他组里的另外一个负责串口相关部分的博士生合作，最终完成了这个非常好用的库，并在ROS的论坛上发布了这一消息。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120010505103.png" alt="Thiemo Wiedemeyer在ROS论坛上发布这个功能包的帖子"></p><h3 id="B-iai-kinect2的组成"><a href="#B-iai-kinect2的组成" class="headerlink" title="B. iai-kinect2的组成"></a>B. iai-kinect2的组成</h3><p>前面我们只是从大体上直到了<code>iai-kinect2</code>是一个<code>ROS</code>的功能包，他调用了<code>libfreenect2</code>来获取深度图像。其实更准确的说，<code>iai-kinect2</code>是<code>ROS</code>的一个<strong>元功能包</strong>。</p><blockquote><p><strong>什么是元功能包？</strong></p><p><code>ROS</code>中有一些基础的概念：工作空间、源码空间、编译空间、开发空间、功能包、元功能包、发行版等等。</p><p>通常我们工作是在一个工作空间中，这个工作空间中包含了我们开发的一切：我们的源代码、生成的库文件、生成的头文件、得到的可执行文件……而我们写的代码都以功能包的形式组织起来，我们在发布代码的时候就是以功能包的形式进行发布。而通常几个具有相关功能的功能包组合在一起就是一个元功能包，我们通过元功能包将几个功能包组合起来，使得他们成为一个整体来进行发布。</p><p>在下图中，我们所有的代码都在catkin_workspace这个工作空间中（挖个坑，以后写写文章讲讲什么是<code>catkin</code>）。而具体来说，我们的源代码存放在<code>src</code>源码空间中，我们通过<code>catkin_make</code>会对我们所有的源代码进行编译，编译过程中产生的中间文件，例如<code>Cmake</code>的<code>module</code>以及<code>Makefile</code>等等都在<code>build</code>编译空间中。我们最后的可执行文件和我们自己写的库文件都在<code>devel</code>开发空间中。对于源码空间中，一个package就负责实现一个具体的功能，例如读取摄像头、抓取物体等等。如果package1和package2有所关联，例如package1是读取摄像头的功能包，而package2是驱动机械臂的功能包，那么他们两个在一起可以完成机器人抓取物体这个功能，那么这个时候，我们就可以新建一个功能包，这个功能包什么都没有，只有表明这两个功能包在一起组成一个元功能包的配置信息，即描述元功能包架构的功能包。在下面就是iai-kinect2这个功能包</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/文件系统.jpg" alt="ROS中的基础概念/文件系统"></p></blockquote><p>具体来说，<code>iai-kinect2</code>这个元功能包由几个功能包组成：<code>iai-kinect2</code>（元功能包描述功能包）、<code>kinect2_bridge</code>（负责调用libfreenect2、OpenGL获取图像的功能包）、<code>kinect_calibration</code>（提供了Kinect V2相机GUI校准的功能包）、<code>kinect_registration</code>（负责点云和深度图像配准的功能包）以及<code>kinect_viewer</code>（提供了简单的可视化功能的功能包）。</p><p>具体功能包的架构可以看下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120012913705.png" alt="iai-kinect2元功能包的架构"></p><h3 id="C-iai-kinect2的功能"><a href="#C-iai-kinect2的功能" class="headerlink" title="C. iai-kinect2的功能"></a>C. iai-kinect2的功能</h3><p>关于<code>iai-kinect2</code>的功能，我们前面其实已经体验过了他的可视化和获取深度图像以及点云和彩色图像的配准。因此这里主要关注<code>iai-kinect2</code>中的标定功能。</p><blockquote><p>众所周知，我们利用相机除了拍照以外，还有一个重要的功能就是从相机获取的图像信息出发计算三维空间中物体的几何信息并由此重建和识别物体。这也是计算机视觉的基本任务之一。那么我们在进行推断的时候就存在一些问题，其中最主要的一个问题就是相机的镜头畸变，即由于相机的镜头是一个凹透镜导致物体间真实的距离被扭曲。因此我们需要通过一些手段来进行修正。进行修正之后会得到一些参数，利用这些参数我们就可以对畸变的图像进行修正，以实现获得物体间精准的位置。由于这个参数和相机的镜头、角度有关，因此他们又叫做相机参数。通过标定我们就能够获得这些参数。</p><p>例如在下图中，我们可以直到机器人和地板的线都应该是直线，但是由于畸变导致原本直的线歪曲，这个现象在图像边缘处尤为明显。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120021326327.png" alt="相机畸变修正的例子"></p><p>当然除了畸变以外还有世界坐标转相机坐标等等问题，他们统称为相机参数。</p><p>关于相机标定的更多内容，推荐参考搜狐上的博客：<a href="https://www.sohu.com/a/336803765_120071391">https://www.sohu.com/a/336803765_120071391</a></p></blockquote><p><code>iai-kinect2</code>中直接提供了用于相机标定的程序，因此我们可以直接在命令行中进行调用即可。关于如何进行校准，参考<a href="https://github.com/code-iai/iai_kinect2/tree/master/kinect2_calibration#calibrating-the-kinect-one">github上的readme</a></p><p>最终通过标定，可以实现的效果如下。可以看出来，原本倾斜的图像被校准了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/68747470733a2f2f61692e756e692d6272656d656e2e64652f5f6d656469612f6b696e656374325f636c6f75645f6e6f63616c69622e706e67" alt="未校准前的点云图像"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/68747470733a2f2f61692e756e692d6272656d656e2e64652f5f6d656469612f6b696e656374325f636c6f75645f63616c69622e706e67" alt="校准后的点云图像"></p><h2 id="2-iai-kinect2的使用"><a href="#2-iai-kinect2的使用" class="headerlink" title="2. iai-kinect2的使用"></a>2. iai-kinect2的使用</h2><p>我们在下面将对<code>iai-kinect2</code>的使用进行介绍，不过需要说明的是：由于<code>iai-kinect2</code>的代码非常好，将自己尽可能的低耦合，因此其所有的依赖都是<code>ROS</code>的标准消息。因此，我们学习iai-kinect2的使用主要是从下面两个方面去学习</p><ul><li><code>iai-kinect2</code>中使用的<code>ROS</code>的标准消息：<code>Image</code>和<code>CompressedImage</code></li><li><code>iai-kinect2</code>中每个话题的含义和作用</li></ul><h3 id="A-ROS中Image和CompressedImage"><a href="#A-ROS中Image和CompressedImage" class="headerlink" title="A. ROS中Image和CompressedImage"></a>A. ROS中Image和CompressedImage</h3><p><code>ROS</code>中为图像数据提供了两个官方的消息类型：<code>Image</code>和<code>CompressedImage</code>。其中<code>Image</code>是没有经过压缩的图片而<code>CompressedImage</code>则是经过压缩的图片。由与<code>ROS</code>中的所有的消息其实都是基于<code>std_msgs</code>提供的基础数据类型上定义的，因此<code>Image</code>和<code>CompressedImage</code>也不例外。具体来说，图片本身是用一个装着字节流的数组保存的，而图片的<code>frame_id</code>和对应的相机信息等等都是有对应的项。</p><h4 id="消息定义"><a href="#消息定义" class="headerlink" title="消息定义"></a>消息定义</h4><p>首先是<code>Image</code>消息的定义，可以看到<code>header</code>中提供时间戳等信息，而图像的长宽、字节序、编码方式等等内容都是用于帮助解码<code>data</code>字节流的。此外也能够看到，<code>ROS</code>中的图像每一个像素都是用一个8位无符号整数描述的。</p><pre class="line-numbers language-msg"><code class="language-msg"># This message contains an uncompressed image# (0, 0) is at top-left corner of image#Header header        # Header timestamp should be acquisition time of image                     # Header frame_id should be optical frame of camera                     # origin of frame should be optical center of camera                     # +x should point to the right in the image                     # +y should point down in the image                     # +z should point into to plane of the image                     # If the frame_id here and the frame_id of the CameraInfo                     # message associated with the image conflict                     # the behavior is undefineduint32 height         # image height, that is, number of rowsuint32 width          # image width, that is, number of columns# The legal values for encoding are in file src/image_encodings.cpp# If you want to standardize a new string format, join# ros-users@lists.sourceforge.net and send an email proposing a new encoding.string encoding       # Encoding of pixels -- channel meaning, ordering, size                      # taken from the list of strings in include/sensor_msgs/image_encodings.huint8 is_bigendian    # is this data bigendian?uint32 step           # Full row length in bytesuint8[] data          # actual matrix data, size is (step * rows)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似的，<code>CompressedImage</code>则是经过压缩的图像，具体的压缩方式就是使用<code>jpg</code>、<code>png</code>等编码格式，因此图像的编码方式是固定的</p><pre class="line-numbers language-tmsg"><code class="language-tmsg">Header header        # Header timestamp should be acquisition time of image                     # Header frame_id should be optical frame of camera                     # origin of frame should be optical center of camera                     # +x should point to the right in the image                     # +y should point down in the image                     # +z should point into to plane of the imagestring format        # Specifies the format of the data                     #   Acceptable values:                     #     jpeg, pnguint8[] data         # Compressed image buffer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后需要注意的是<code>iai-kinect2</code>中还用到了<code>camerainfo</code>这个<code>ROS</code>的官方消息，其内容如下，主要定义了相机的内外参数，获取图像的分辨率等信息</p><pre class="line-numbers language-msg"><code class="language-msg"># This message defines meta information for a camera. It should be in a# camera namespace on topic "camera_info" and accompanied by up to five# image topics named:##   image_raw - raw data from the camera driver, possibly Bayer encoded#   image            - monochrome, distorted#   image_color      - color, distorted#   image_rect       - monochrome, rectified#   image_rect_color - color, rectified## The image_pipeline contains packages (image_proc, stereo_image_proc)# for producing the four processed image topics from image_raw and# camera_info. The meaning of the camera parameters are described in# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.## The image_geometry package provides a user-friendly interface to# common operations using this meta information. If you want to, e.g.,# project a 3d point into image coordinates, we strongly recommend# using image_geometry.## If the camera is uncalibrated, the matrices D, K, R, P should be left# zeroed out. In particular, clients may assume that K[0] == 0.0# indicates an uncalibrated camera.########################################################################                     Image acquisition info                          ######################################################################### Time of image acquisition, camera coordinate frame IDHeader header    # Header timestamp should be acquisition time of image                 # Header frame_id should be optical frame of camera                 # origin of frame should be optical center of camera                 # +x should point to the right in the image                 # +y should point down in the image                 # +z should point into the plane of the image########################################################################                      Calibration Parameters                         ######################################################################### These are fixed during camera calibration. Their values will be the ## same in all messages until the camera is recalibrated. Note that    ## self-calibrating systems may "recalibrate" frequently.              ##                                                                     ## The internal parameters can be used to warp a raw (distorted) image ## to:                                                                 ##   1. An undistorted image (requires D and K)                        ##   2. A rectified image (requires D, K, R)                           ## The projection matrix P projects 3D points into the rectified image.######################################################################### The image dimensions with which the camera was calibrated. Normally# this will be the full camera resolution in pixels.uint32 heightuint32 width# The distortion model used. Supported models are listed in# sensor_msgs/distortion_models.h. For most cameras, "plumb_bob" - a# simple model of radial and tangential distortion - is sufficient.string distortion_model# The distortion parameters, size depending on the distortion model.# For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).float64[] D# Intrinsic camera matrix for the raw (distorted) images.#     [fx  0 cx]# K = [ 0 fy cy]#     [ 0  0  1]# Projects 3D points in the camera coordinate frame to 2D pixel# coordinates using the focal lengths (fx, fy) and principal point# (cx, cy).float64[9]  K # 3x3 row-major matrix# Rectification matrix (stereo cameras only)# A rotation matrix aligning the camera coordinate system to the ideal# stereo image plane so that epipolar lines in both stereo images are# parallel.float64[9]  R # 3x3 row-major matrix# Projection/camera matrix#     [fx'  0  cx' Tx]# P = [ 0  fy' cy' Ty]#     [ 0   0   1   0]# By convention, this matrix specifies the intrinsic (camera) matrix#  of the processed (rectified) image. That is, the left 3x3 portion#  is the normal camera intrinsic matrix for the rectified image.# It projects 3D points in the camera coordinate frame to 2D pixel#  coordinates using the focal lengths (fx', fy') and principal point#  (cx', cy') - these may differ from the values in K.# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will#  also have R = the identity and P[1:3,1:3] = K.# For a stereo pair, the fourth column [Tx Ty 0]' is related to the#  position of the optical center of the second camera in the first#  camera's frame. We assume Tz = 0 so both cameras are in the same#  stereo image plane. The first camera always has Tx = Ty = 0. For#  the right (second) camera of a horizontal stereo pair, Ty = 0 and#  Tx = -fx' * B, where B is the baseline between the cameras.# Given a 3D point [X Y Z]', the projection (x, y) of the point onto#  the rectified image is given by:#  [u v w]' = P * [X Y Z 1]'#         x = u / w#         y = v / w#  This holds for both images of a stereo pair.float64[12] P # 3x4 row-major matrix########################################################################                      Operational Parameters                         ######################################################################### These define the image region actually captured by the camera       ## driver. Although they affect the geometry of the output image, they ## may be changed freely without recalibrating the camera.             ######################################################################### Binning refers here to any camera setting which combines rectangular#  neighborhoods of pixels into larger "super-pixels." It reduces the#  resolution of the output image to#  (width / binning_x) x (height / binning_y).# The default values binning_x = binning_y = 0 is considered the same#  as binning_x = binning_y = 1 (no subsampling).uint32 binning_xuint32 binning_y# Region of interest (subwindow of full camera resolution), given in#  full resolution (unbinned) image coordinates. A particular ROI#  always denotes the same window of pixels on the camera sensor,#  regardless of binning settings.# The default setting of roi (all values 0) is considered the same as#  full resolution (roi.width = width, roi.height = height).RegionOfInterest roi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于其他传感器消息，参考<code>roswiki</code>的文章：<a href="http://wiki.ros.org/sensor_msgs">http://wiki.ros.org/sensor_msgs</a></p><p>关于全部的官方消息，参考<code>roswiki</code>文章：<a href="http://wiki.ros.org/common_msgs?distro=noetic">http://wiki.ros.org/common_msgs?distro=noetic</a></p><h4 id="使用cv-bridge转接给OpenCV"><a href="#使用cv-bridge转接给OpenCV" class="headerlink" title="使用cv_bridge转接给OpenCV"></a>使用cv_bridge转接给OpenCV</h4><p>需要注意的是，上面的方式的到的图像都是<code>ROS</code>中定义的图像的消息，而<code>ROS</code>中的图像的消息和<code>OpenCV</code>的并不一样，因此如果我们后续还要对图像进行处理的话，就需要将<code>ROS</code>中的图像转变为<code>OpenCV</code>的图像。为此我们就需要使用<code>CV_bridge</code>。</p><p>ROS中的图像和OpenCV中的图像不一样的地方在于，<code>ROS</code>是通过字节流以及辅助的解码信息来表示一张图像，而OpenCV则是通过其核心的<code>lplImage</code>数据结构来表示一张图像（<code>lpl</code>表示 <code>Intel Image Processing Library</code>）。<code>lplImage</code>的定义如下，当然我们没必要全部搞懂，看看定义知道不同即可。</p><p>此外<code>Python</code>中<code>OpenCV</code>的图像的表示是基于<code>Num Py</code>的，因此还会存在不一样的地方。</p><pre class="line-numbers language-c++"><code class="language-c++">typedef struct _IplImage      {          int  nSize;         /* IplImage大小 */          int  ID;            /* 版本 (=0)*/          int  nChannels;     /* 大多数OPENCV函数支持1,2,3 或 4 个通道 */          int  alphaChannel;  /* 被OpenCV忽略 */          int  depth;         /* 像素的位深度: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16U,                                IPL_DEPTH_16S, IPL_DEPTH_32S, IPL_DEPTH_32F and IPL_DEPTH_64F 可支持 */          char colorModel[4]; /* 被OpenCV忽略 */          char channelSeq[4]; /* 同上 */          int  dataOrder;     /* 0 - 交叉存取颜色通道, 1 - 分开的颜色通道.                                cvCreateImage只能创建交叉存取图像 */          int  origin;        /* 0 - 顶—左结构,                                1 - 底—左结构 (Windows bitmaps 风格) */          int  align;         /* 图像行排列 (4 or 8). OpenCV 忽略它，使用 widthStep 代替 */          int  width;         /* 图像宽像素数 */          int  height;        /* 图像高像素数*/          struct _IplROI *roi;/* 图像感兴趣区域. 当该值非空只对该区域进行处理 */          struct _IplImage *maskROI; /* 在 OpenCV中必须置NULL */          void  *imageId;     /* 同上*/          struct _IplTileInfo *tileInfo; /*同上*/          int  imageSize;     /* 图像数据大小(在交叉存取格式下imageSize=image->height*image->widthStep），单位字节*/          char *imageData;  /* 指向排列的图像数据 */          int  widthStep;   /* 排列的图像行大小，以字节为单位 */          int  BorderMode[4]; /* 边际结束模式, 被OpenCV忽略 */          int  BorderConst[4]; /* 同上 */          char *imageDataOrigin; /* 指针指向一个不同的图像数据结构（不是必须排列的），是为了纠正图像内存分配准备的 */      }      IplImage;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以<code>cv_bridge</code>的功能就是下面这张图中所表述的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/cv_bridge" alt="cv_bridge的作用"></p><p>更多关于<code>cv_bridge</code>的问题，参考<code>roswiki</code>：<a href="https://wiki.ros.org/cv_bridge">https://wiki.ros.org/cv_bridge</a></p><p>此外，需要注意的是，在<code>Melodic</code>下在<code>Python</code>中使用cv_bridge会报错无法加载一个so/dynamic啥啥啥，关于这个问题的解决，先挖个坑，以后再补。</p><h3 id="B-iai-kinect2中每个话题的含义和作用"><a href="#B-iai-kinect2中每个话题的含义和作用" class="headerlink" title="B. iai-kinect2中每个话题的含义和作用"></a>B. iai-kinect2中每个话题的含义和作用</h3><p>当我们以<code>launch</code>文件的形式运行<code>iai-kinect2</code>后，我们会看到很多的话题，这些话题其实分成三组：<code>hd</code>、<code>qhd</code>和<code>sd</code>。需要注意的是，每组话题下的<code>points</code>话题都只是只有通过<code>launch</code>文件运行才会看到的。</p><h4 id="HD话题"><a href="#HD话题" class="headerlink" title="HD话题"></a>HD话题</h4><p>HD话题其实指的是高分辨率的图像，由于<code>Kinect V2</code>相比<code>Kinect V1</code>，其图像极限分辨率1920x1080，因此HD话题中所有的图像都是极限分辨率1920x1080的图像</p><p>此外，HD话题下发布的color表示是RGB彩色图像、<code>color_rect</code>则是经过畸变处理（rectified）的图像，<code>compressed</code>的则是经过压缩的图像。depth则是深度图，<code>mono</code>则是单色灰度图。</p><pre class="line-numbers language-text"><code class="language-text">/kinect2/hd/camera_info/kinect2/hd/image_color/kinect2/hd/image_color/compressed/kinect2/hd/image_color_rect/kinect2/hd/image_color_rect/compressed/kinect2/hd/image_depth_rect/kinect2/hd/image_depth_rect/compressed/kinect2/hd/image_mono/kinect2/hd/image_mono/compressed/kinect2/hd/image_mono_rect/kinect2/hd/image_mono_rect/compressed/kinect2/hd/points<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="QHD话题"><a href="#QHD话题" class="headerlink" title="QHD话题"></a>QHD话题</h4><p>QHD话题的全称是Quater HD，即该话题是HD话题的1/4。原因在于HD话题下的图片实在是太大了，因此无论是数据的传输还是处理都很慢。所以QHD中的图像是对HD的图像进行降采样之后的图像，长宽各自降采样一半，所以是512x424的图片。因此图像处理起来速度很快</p><pre class="line-numbers language-text"><code class="language-text">/kinect2/qhd/camera_info/kinect2/qhd/image_color/kinect2/qhd/image_color/compressed/kinect2/qhd/image_color_rect/kinect2/qhd/image_color_rect/compressed/kinect2/qhd/image_depth_rect/kinect2/qhd/image_depth_rect/compressed/kinect2/qhd/image_mono/kinect2/qhd/image_mono/compressed/kinect2/qhd/image_mono_rect/kinect2/qhd/image_mono_rect/compressed/kinect2/qhd/points<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SD话题"><a href="#SD话题" class="headerlink" title="SD话题"></a>SD话题</h4><p>SD话题中的图像都是从相机获得的红外和深度图像，因此大小都是原本的大小：512x424，处理起来速度还是比较快的。</p><pre class="line-numbers language-text"><code class="language-text">/kinect2/sd/camera_info/kinect2/sd/image_color_rect/kinect2/sd/image_color_rect/compressed/kinect2/sd/image_depth/kinect2/sd/image_depth/compressed/kinect2/sd/image_depth_rect/kinect2/sd/image_depth_rect/compressed/kinect2/sd/image_ir/kinect2/sd/image_ir/compressed/kinect2/sd/image_ir_rect/kinect2/sd/image_ir_rect/compressed/kinect2/sd/points<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-launch启动节点时候指定参数"><a href="#C-launch启动节点时候指定参数" class="headerlink" title="C. launch启动节点时候指定参数"></a>C. launch启动节点时候指定参数</h3><p>由于iai-kinect2自成一套系统，因此我们没有必要也很难修改他的代码来完成我们需要的功能。为此<code>iai-kinect2</code>的<code>launch</code>文件支持在启动的时候指定参数，来实现不同的功能，具体所有的参数如下</p><pre class="line-numbers language-bash"><code class="language-bash">roslaunch kinect2_bridge kinect2_bridge.launch <span class="token punctuation">[</span>options:<span class="token operator">=</span>value<span class="token punctuation">]</span>base_name:<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">></span>    default: kinect2    info:    <span class="token keyword">set</span> base name <span class="token keyword">for</span> all topicssensor:<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">></span>    default:    info:    serial of the sensor to usefps_limit:<span class="token operator">=</span><span class="token operator">&lt;</span>double<span class="token operator">></span>    default: -1.0    info:    limit the frames per secondcalib_path:<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">></span>    default: /home/wiedemeyer/work/src/iai_kinect2/kinect2_bridge/data/    info:    path to the calibration filesuse_png:<span class="token operator">=</span><span class="token operator">&lt;</span>bool<span class="token operator">></span>    default: <span class="token boolean">false</span>    info:    Use PNG compression instead of TIFFjpeg_quality:<span class="token operator">=</span><span class="token operator">&lt;</span>int<span class="token operator">></span>    default: 90    info:    JPEG quality level from 0 to 100png_level:<span class="token operator">=</span><span class="token operator">&lt;</span>int<span class="token operator">></span>    default: 1    info:    PNG compression level from 0 to 9depth_method:<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">></span>    default: cuda    info:    Use specific depth processing: default, cpu, opengl, opencl, cuda, clkde, cudakdedepth_device:<span class="token operator">=</span><span class="token operator">&lt;</span>int<span class="token operator">></span>    default: -1    info:    openCL device to use <span class="token keyword">for</span> depth processingreg_method:<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">></span>    default: opencl    info:    Use specific depth registration: default, cpu, openclreg_device:<span class="token operator">=</span><span class="token operator">&lt;</span>int<span class="token operator">></span>    default: -1    info:    openCL device to use <span class="token keyword">for</span> depth registrationmax_depth:<span class="token operator">=</span><span class="token operator">&lt;</span>double<span class="token operator">></span>    default: 12.0    info:    max depth valuemin_depth:<span class="token operator">=</span><span class="token operator">&lt;</span>double<span class="token operator">></span>    default: 0.1    info:    min depth valuequeue_size:<span class="token operator">=</span><span class="token operator">&lt;</span>int<span class="token operator">></span>    default: 2    info:    queue size of publisherbilateral_filter:<span class="token operator">=</span><span class="token operator">&lt;</span>bool<span class="token operator">></span>    default: <span class="token boolean">true</span>    info:    <span class="token function">enable</span> bilateral filtering of depth imagesedge_aware_filter:<span class="token operator">=</span><span class="token operator">&lt;</span>bool<span class="token operator">></span>    default: <span class="token boolean">true</span>    info:    <span class="token function">enable</span> edge aware filtering of depth imagespublish_tf:<span class="token operator">=</span><span class="token operator">&lt;</span>bool<span class="token operator">></span>    default: <span class="token boolean">false</span>    info:    publish static tf transforms <span class="token keyword">for</span> camerabase_name_tf:<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">></span>    default: as base_name    info:    base name <span class="token keyword">for</span> the tf framesworker_threads:<span class="token operator">=</span><span class="token operator">&lt;</span>int<span class="token operator">></span>    default: 4    info:    number of threads used <span class="token keyword">for</span> processing the images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-iai-kinect2使用示例"><a href="#3-iai-kinect2使用示例" class="headerlink" title="3. iai-kinect2使用示例"></a>3. iai-kinect2使用示例</h2><p>经过上面的介绍，我们对于如何使用iai-kinect2来获得深度图像和点云应该有了认识，下面我们就给出几个使用的例子。</p><p>其实使用的具体流程很简单，就是去订阅HD、QHD、SD话题中的消息，然后使用CV_Bridge转换成OpenCV的图像，然后再使用OpenCV进行视频图像的处理。</p><h3 id="A-图像显示"><a href="#A-图像显示" class="headerlink" title="A. 图像显示"></a>A. 图像显示</h3><p>下面的这个程序是通过接受命令行参数来实现显示的节点，利用这个程序可以显示每个话题下的图像。不过有一个小问题是我本来想做的是可以同一时间多个窗口显示多个图像，这样效果会好很多。但是由于我电脑性能的问题跑起来很卡，但是显示单独的话题倒是很不错</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /home/jack/anaconda3/envs/ros/bin/python</span><span class="token triple-quoted-string string">""" 命令行快捷查看iai-kinect2图像的节点 """</span><span class="token triple-quoted-string string">"""@author: Jack Wang@copyright: Jack Wang@date: 2021-11-20"""</span><span class="token keyword">from</span> os <span class="token keyword">import</span> read<span class="token keyword">import</span> sys<span class="token keyword">import</span> argparse<span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">for</span> path_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"2.7"</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span>path_idx<span class="token punctuation">]</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>path_idx<span class="token punctuation">)</span>        <span class="token keyword">break</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> cv_bridge <span class="token keyword">import</span> CvBridge<span class="token keyword">from</span> sensor_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Image<span class="token punctuation">,</span> CompressedImage<span class="token keyword">class</span> <span class="token class-name">iaiKinect2Viewer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    bridge <span class="token operator">=</span> CvBridge<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>subcribers<span class="token punctuation">:</span> List<span class="token punctuation">[</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>windows_idx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">assert</span> len<span class="token punctuation">(</span>args<span class="token punctuation">.</span>topic<span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>args<span class="token punctuation">.</span>quality<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> f<span class="token string">"话题数不匹配"</span>        group_num <span class="token operator">=</span> len<span class="token punctuation">(</span>args<span class="token punctuation">.</span>topic<span class="token punctuation">)</span> <span class="token operator">//</span> len<span class="token punctuation">(</span>args<span class="token punctuation">.</span>quality<span class="token punctuation">)</span>        <span class="token keyword">for</span> quality <span class="token keyword">in</span> args<span class="token punctuation">.</span>quality<span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>group_num<span class="token punctuation">)</span><span class="token punctuation">:</span>                temp_topic <span class="token operator">=</span> args<span class="token punctuation">.</span>topic<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>add_subscriber<span class="token punctuation">(</span>quality<span class="token punctuation">,</span> temp_topic<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_subscriber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> quality<span class="token punctuation">:</span> str<span class="token punctuation">,</span> topic<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> quality <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"sd"</span><span class="token punctuation">,</span> <span class="token string">"qhd"</span><span class="token punctuation">,</span><span class="token string">"hd"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token string">"无效的话题组"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>quality<span class="token punctuation">,</span> topic<span class="token punctuation">)</span>        topic <span class="token operator">=</span> topic<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span>        prefix <span class="token operator">=</span> <span class="token string">"/kinect2"</span>        <span class="token keyword">if</span> <span class="token string">"color"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_color_rect"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"color"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_color_rect"</span><span class="token punctuation">,</span><span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"color"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token operator">not</span> <span class="token keyword">in</span>  topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_color"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"color"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token operator">not</span> <span class="token keyword">in</span>  topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_color"</span><span class="token punctuation">,</span> <span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"depth"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_depth_rect"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"depth"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_depth_rect"</span><span class="token punctuation">,</span> <span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"mono"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_mono_rect"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"mono"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_mono_rect"</span><span class="token punctuation">,</span><span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"mono"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token operator">not</span> <span class="token keyword">in</span>  topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_mono"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"mono"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token operator">not</span> <span class="token keyword">in</span>  topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_mono"</span><span class="token punctuation">,</span> <span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"ir"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_ir_rect"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"ir"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_ir_rect"</span><span class="token punctuation">,</span><span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"ir"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token operator">not</span> <span class="token keyword">in</span>  topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_ir"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"ir"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token operator">not</span> <span class="token keyword">in</span>  topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_ir"</span><span class="token punctuation">,</span> <span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> <span class="token boolean">False</span><span class="token punctuation">,</span> f<span class="token string">"无效的参数：qualitt={quality}, topic={topic}"</span>    <span class="token keyword">def</span> <span class="token function">show_images</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">,</span> window_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        cv_img <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>imgmsg_to_cv2<span class="token punctuation">(</span>img_msg<span class="token operator">=</span>img<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>f<span class="token string">"viewer_{window_idx}"</span><span class="token punctuation">,</span> cv_img<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>signal_shutdown<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"pressed esc"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">show_compressed_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">:</span> CompressedImage<span class="token punctuation">,</span> windows_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        cv_img <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>compressed_imgmsg_to_cv2<span class="token punctuation">(</span>cmprs_img_msg<span class="token operator">=</span>img<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>f<span class="token string">"viewer_{windows_idx}"</span><span class="token punctuation">,</span> cv_img<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>signal_shutdown<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"pressed esc"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">arg_parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> argparse<span class="token punctuation">.</span>Namespace<span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"本程序用于可视化显示iai-kinect2的不同话题中的图片，以对比他们的不同"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-q"</span><span class="token punctuation">,</span> <span class="token string">"--quality"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"quality"</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">"*"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"指定需要显示图像的话题组"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-t"</span><span class="token punctuation">,</span> <span class="token string">"--topic"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"topic"</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">"+"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"指定需要显示图像的话题"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> arg_parser<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>quality<span class="token punctuation">,</span> args<span class="token punctuation">.</span>topic<span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"ini_kinect2_viewer"</span><span class="token punctuation">)</span>    viewer <span class="token operator">=</span> iaiKinect2Viewer<span class="token punctuation">(</span>args<span class="token operator">=</span>args<span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用的话则在命令行中加上参数，<code>-q</code>表示图像的质量，即<code>qhd</code>、<code>sd</code>还是<code>hd</code>，<code>-t</code>表示显示的话题。写的时候是支持多个话题同时显示的，但是不知道哪里出问题了显示不出来</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示单个话题的图像：1/4 大小的灰度图</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ rosrun look_kenect2 look_images.py -q qhd -t mono<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120152240529.png" alt="qhd中mono里的黑白图像"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示单个话题的图像：1/4 大小的彩色图</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ rosrun look_kenect2 look_images.py -q qhd -t color<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120152424998.png" alt="qhd中color里的彩色图像"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示单个话题的图像：1/4 大小的深度图</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ rosrun look_kenect2 look_images.py -q qhd -t depth_compressed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要说明的是，qhd和hd中的深度图像如果不用compressed，即直接用的kinect采集到的的点的话，那么显示的非常卡，因为点云的数据实在是太大了，用而compressed中的数据则是iai-kinect2经过OpenCL、CUDA加速渲染之后得到的，因此帧率比较高。此外获取到的深度图每个像素都是一个以毫米为单位的距离值，因此使用OpenCV直接显示的话被做了归一化，所以越近的地方越黑，越远的地方越白，一些异常点，即没有反射的点距离被认为是摄像头获取距离的极限值（&gt;1200，即超过12米），因此这些异常点使得归一化之后基本都是黑的，我们自己使用的时候一定要先处理异常点然后再归一化，最后再显示</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120153143101.png" alt="qhd里的深度图"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示单个话题的图像：sd大小的红外图像</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ rosrun look_kenect2 look_images.py -q sd -t ir_rect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要说明的是，Kinect V2相机有一个红外发射器，一个红外接收器，因此距离越近，表面越光滑，接收器接收到反射的红外线越强，数值越高，对应就越白</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120154330718.png" alt="sd里的红外图"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示单个话题的图像：sd大小的色彩图</span>^<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ rosrun look_kenect2 look_images.py -q sd -t color_rect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>理论上来说，sd话题里显示的都是红外相机拍摄得到的图片，因此不会存在颜色，所以这里其实是把RGB相机拍到的图片和红外相机图片配准之后的结果</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120154705830.png" alt="sd里的color_rect"></p><h3 id="B-YOLO-V5进行物体检测"><a href="#B-YOLO-V5进行物体检测" class="headerlink" title="B. YOLO V5进行物体检测"></a>B. YOLO V5进行物体检测</h3><p>利用之前写好的YOLO V5，可以实现物体检测，然后根据深度图像来标注出物体的距离</p><p>YOLO V5的代码后面整理出来会放出来，这里先用一用，下面的代码需要注意的是rospy中的message_filter如果消息频率速度过快，甚至快过了message_filter处理的速度，那么就会导致两个消息无法对应起来，因此就永远不会调用回调函数，因此cv2.waitkey需要等10毫秒左右</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /home/jack/anaconda3/envs/ros/bin/python</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span class="token keyword">from</span> libyolo <span class="token keyword">import</span> YoloV5stemp_path <span class="token operator">=</span> None<span class="token keyword">for</span> path_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"2.7"</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span>path_idx<span class="token punctuation">]</span><span class="token punctuation">:</span>        temp_path <span class="token operator">=</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>path_idx<span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token keyword">if</span> temp_path <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>    sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_path<span class="token punctuation">)</span><span class="token keyword">import</span> rospy<span class="token keyword">import</span> message_filters<span class="token keyword">from</span> sensor_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> CompressedImage<span class="token keyword">from</span> cv_bridge <span class="token keyword">import</span> CvBridge<span class="token keyword">class</span> <span class="token class-name">DetectYoloKinect</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    yolo <span class="token operator">=</span> YoloV5s<span class="token punctuation">(</span>weight_path<span class="token operator">=</span>Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"models"</span><span class="token punctuation">,</span> <span class="token string">"yolov5s.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    bridge <span class="token operator">=</span> CvBridge<span class="token punctuation">(</span><span class="token punctuation">)</span>    font <span class="token operator">=</span> cv2<span class="token punctuation">.</span>FONT_HERSHEY_DUPLEX    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rgb_img_topic<span class="token punctuation">:</span> str<span class="token punctuation">,</span> depth_img_topic<span class="token punctuation">:</span> str<span class="token punctuation">,</span> if_detection_only<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>msg<span class="token operator">=</span>f<span class="token string">"{Fore.GREEN}启动物体检测节点！{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> if_detection_only<span class="token punctuation">:</span>            rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span>rgb_img_topic<span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>_detect_only_cb<span class="token punctuation">,</span>                             queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            rgb_subscriber <span class="token operator">=</span> message_filters<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>rgb_img_topic<span class="token punctuation">,</span> CompressedImage<span class="token punctuation">)</span>            depth_subscriber <span class="token operator">=</span> message_filters<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>depth_img_topic<span class="token punctuation">,</span> CompressedImage<span class="token punctuation">)</span>            sync <span class="token operator">=</span> message_filters<span class="token punctuation">.</span>ApproximateTimeSynchronizer<span class="token punctuation">(</span>fs<span class="token operator">=</span><span class="token punctuation">[</span>rgb_subscriber<span class="token punctuation">,</span> depth_subscriber<span class="token punctuation">]</span><span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>                                                               slop<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            sync<span class="token punctuation">.</span>registerCallback<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_multi_cb<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>last_time_rgb <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_detect_only_cb</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">:</span> CompressedImage<span class="token punctuation">)</span><span class="token punctuation">:</span>        cv_image<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>compressed_imgmsg_to_cv2<span class="token punctuation">(</span>cmprs_img_msg<span class="token operator">=</span>img<span class="token punctuation">)</span>        result_dict<span class="token punctuation">,</span> draw_img <span class="token operator">=</span> self<span class="token punctuation">.</span>yolo<span class="token punctuation">.</span>inference<span class="token punctuation">(</span>cv_image<span class="token punctuation">,</span> if_absolute<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> if_show<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        draw_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>draw_img<span class="token punctuation">,</span> f<span class="token string">"fps: {1 / (t2 - self.last_time_rgb):>5.2f}, seq_id: {img.header.seq}"</span><span class="token punctuation">,</span>                               <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>last_time_rgb <span class="token operator">=</span> t2        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"color_detections"</span><span class="token punctuation">,</span> draw_img<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>logwarn<span class="token punctuation">(</span><span class="token string">"按下了ESC键，终止节点..."</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>signal_shutdown<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"pressed esc"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_multi_cb</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rgb_img<span class="token punctuation">:</span> CompressedImage<span class="token punctuation">,</span> depth_img<span class="token punctuation">:</span> CompressedImage<span class="token punctuation">)</span><span class="token punctuation">:</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Getting into _multi_cb"</span><span class="token punctuation">)</span>        cv_rgb<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>compressed_imgmsg_to_cv2<span class="token punctuation">(</span>cmprs_img_msg<span class="token operator">=</span>rgb_img<span class="token punctuation">)</span>        cv_depth<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>compressed_imgmsg_to_cv2<span class="token punctuation">(</span>cmprs_img_msg<span class="token operator">=</span>depth_img<span class="token punctuation">)</span>        cv_depth_draw<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> np<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">[</span>cv_depth<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># to BGR</span>        cv_depth_draw <span class="token operator">=</span> <span class="token punctuation">(</span>cv_depth_draw <span class="token operator">-</span> cv_depth_draw<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>cv_depth_draw<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> cv_depth_draw<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># inference</span>        result_dict<span class="token punctuation">,</span> cv_rgb_draw <span class="token operator">=</span> self<span class="token punctuation">.</span>yolo<span class="token punctuation">.</span>inference<span class="token punctuation">(</span>cv_rgb<span class="token punctuation">,</span> if_absolute<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> if_show<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># log time</span>        t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        fps <span class="token operator">=</span> round<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> self<span class="token punctuation">.</span>last_time_rgb<span class="token punctuation">)</span><span class="token punctuation">,</span> ndigits<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>last_time_rgb <span class="token operator">=</span> t        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">"Done inference, start to draw"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># draw basic info</span>        cv_rgb_draw <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>cv_rgb_draw<span class="token punctuation">,</span> f<span class="token string">"FPS:{fps}, seq:{depth_img.header.seq}"</span><span class="token punctuation">,</span>                                  org<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fontFace<span class="token operator">=</span>self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> fontScale<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        cv_depth_draw <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>cv_depth_draw<span class="token punctuation">,</span> f<span class="token string">"FPS:{fps}, seq:{depth_img.header.seq}"</span><span class="token punctuation">,</span>                                    org<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fontFace<span class="token operator">=</span>self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> fontScale<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># draw depth</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">"Done draw basic, start draw depth"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> d_type<span class="token punctuation">,</span> items <span class="token keyword">in</span> result_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 周围100个点的平均，yolo的结果已经确保点在图像内</span>                depth <span class="token operator">=</span> self<span class="token punctuation">.</span>__get_depth<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token punctuation">:</span><span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y <span class="token punctuation">:</span><span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> depth_image<span class="token operator">=</span>cv_depth<span class="token punctuation">,</span> area_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>                x<span class="token punctuation">,</span> y <span class="token operator">=</span> int<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>y<span class="token punctuation">)</span>                cv_depth_draw <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>cv_depth_draw<span class="token punctuation">,</span> text<span class="token operator">=</span>f<span class="token string">"{d_type}, {depth / 10:>.2f}m"</span><span class="token punctuation">,</span> org<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token number">-5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                            fontFace<span class="token operator">=</span>self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> fontScale<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lineType<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                cv_depth_draw <span class="token operator">=</span> cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>cv_depth_draw<span class="token punctuation">,</span> center<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                           thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> lineType<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>msg<span class="token operator">=</span>f<span class="token string">"Done Drawing"</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"detection_result"</span><span class="token punctuation">,</span> cv_rgb_draw<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"depth_result"</span><span class="token punctuation">,</span> cv_depth_draw<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>logwarn<span class="token punctuation">(</span>msg<span class="token operator">=</span>f<span class="token string">"按下了ESC键，手动关闭了节点"</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>signal_shutdown<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"pressed esc"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">__get_depth</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> float<span class="token punctuation">,</span> y<span class="token punctuation">:</span> float<span class="token punctuation">,</span> depth_image<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> area_size<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> float<span class="token punctuation">:</span>        boundary <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token keyword">for</span> position <span class="token keyword">in</span>                    <span class="token punctuation">[</span>y <span class="token operator">-</span> area_size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">+</span> area_size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x <span class="token operator">-</span> area_size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x <span class="token operator">+</span> area_size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> depth_image<span class="token punctuation">[</span>boundary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>boundary<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boundary<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>boundary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"detect_yolo_kinect2"</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    dyk <span class="token operator">=</span> DetectYoloKinect<span class="token punctuation">(</span>rgb_img_topic<span class="token operator">=</span><span class="token string">"/kinect2/qhd/image_color/compressed"</span><span class="token punctuation">,</span>                           depth_img_topic<span class="token operator">=</span><span class="token string">"/kinect2/qhd/image_depth_rect/compressed"</span><span class="token punctuation">,</span> if_detection_only<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后得到的效果如下，可以看到YOLO还是可以的，不过有的时候会识别错误，例如把纸板识别成了沙发。而且在深度图中，越靠近边缘实际上越不准确，如果没有反射回来的话距离就被记为0。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211121155602208.png" alt="YOLO和深度图配准"></p>]]></content>
      
      
      <categories>
          
          <category> ROS杂篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> Kinect V2 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> melodic </tag>
            
            <tag> OpenCv </tag>
            
            <tag> cv_bridge </tag>
            
            <tag> sensor_msgs </tag>
            
            <tag> iai-kinect2 </tag>
            
            <tag> roslaunch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS杂篇 ROS中使用Kinect V2 Part1：安装+使用</title>
      <link href="/2021/11/17/ros-za-pian-an-zhuang-kinect-v2-qu-dong/"/>
      <url>/2021/11/17/ros-za-pian-an-zhuang-kinect-v2-qu-dong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Kinect是非常流行的获取深度、彩色、点云的相机。本文介绍了Kinect相机的具体性能，以及如何在ROS调用Kinect相机。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118214830894.png" alt="最终效果图"></p><span id="more"></span><h1 id="ROS杂篇-ROS中使用Kinect-V2-Part1：安装-使用"><a href="#ROS杂篇-ROS中使用Kinect-V2-Part1：安装-使用" class="headerlink" title="ROS杂篇 ROS中使用Kinect V2 Part1：安装+使用"></a>ROS杂篇 ROS中使用Kinect V2 Part1：安装+使用</h1><blockquote><p>前言：为什么要写这篇博客</p></blockquote><p>由于我目前的工作需要我编写服务机器人的代码，而服务机器人就免不了需要视觉信息来指导机器人完成服务。包括RGB彩色相机获得的彩色图像、深度相机获得的深度图像等等各种视觉传感器。对于简单的RGB相机拍摄到的RGB彩色图像，由于全球统一的接口，因此有很多工具都可以帮助我们从<code>/dev/video*</code>中读取到彩色图像。通过OpenCV的<code>VideoCapture</code>就可以读到。然而问题的关键在于，针对一些特定的设备，例如深度相机，目前全球尚无统一的标准，因此在数据流中图像的格式各个厂家都是不一样的。因此这个时候想要读取到这些特殊相机的图像就需要花一番功夫了。尤其是在硬件厂商不提供Linux的驱动的时候更难受。</p><p>由于我具体的开发平台配置就是 <code>Ubuntu 18.04</code> + <code>ROS Melodic</code> + <code>Kinect V2</code>相机。<strong>所以特地写这篇博客记录一下ROS中如何配置Kinect V2相机</strong></p><p><strong>下文针对Ubutnu 18.04 + ROS Melodic 验证可行</strong></p><h2 id="1-什么是-Kinect-相机？"><a href="#1-什么是-Kinect-相机？" class="headerlink" title="1. 什么是 Kinect 相机？"></a>1. 什么是 Kinect 相机？</h2><blockquote><p>正如我一向的态度，学什么、做什么前先问问为什么要学/做，再问问自己学/做的是什么。为什么要做上面已经回答了，因为我需要用它。那接下来就是要做的是什么？</p></blockquote><p>个人的角度来说，<code>Kinect</code> 相机就是一款特殊的相机，他可以读取到RGB彩色图像和深度图像，通过<code>Kinect</code>相机采集到的图像和深度信息，我们就能够快乐的进行开发~</p><p>虽然<code>Kinect V2</code>在2017年由于<code>Xbox</code>取消了<code>Kinect</code>的接口而停产，但是发现到<code>Kinect</code>相机价值的微软随后推出的 <code>Kinect V3</code> 和 <code>Kinect DK</code> 都是专门为科研推出的设备。（我有幸用过 <code>Kinect DK</code>，上面部署了现成的 <code>Human Motion Estimation</code> 的模型，可以直接获得人体的关键点，非常好用）</p><blockquote><p>摘自<code>维基百科</code></p><p><strong>Kinect</strong>是由<a href="https://zh.wikipedia.org/wiki/微軟">微软</a>开发，应用于<a href="https://zh.wikipedia.org/wiki/Xbox_360">Xbox 360</a>和<a href="https://zh.wikipedia.org/wiki/Xbox_One">Xbox One</a>主机的周边设备。它让玩家不需要手持或踩踏<a href="https://zh.wikipedia.org/wiki/控制器">控制器</a>，而是使用<a href="https://zh.wikipedia.org/wiki/语音指令">语音指令</a>或<a href="https://zh.wikipedia.org/wiki/手势">手势</a>来操作Xbox 360和Xbox One的系统界面。它也能捕捉玩家全身上下的动作，用身体来进行游戏，带给玩家“免控制器的游戏与娱乐体验”。此设备是<a href="https://zh.wikipedia.org/wiki/微軟研究院">微软研究院</a>的研究成果之一。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118142428272.png" alt="维基百科上对Kinect相机的介绍"></p></blockquote><p>可以看得出来，<code>Kinect</code>相机最初其实是由Windows为<code>Xbox</code>游戏机准备的外设，通过Kinect相机可以玩一些体感游戏。不过多好的设备当然是要我们来折腾的，拿来单纯玩游戏就有点太奢侈了。</p><p>不过正式用于Kinect相机是微软家的产品，按照微软的尿性大概是不会给开源驱动的（虽然这几年微软逐渐在拥抱开源，可是KinectV1、V2都是2010年的产品啊），事实也的确如此。Kinect目前微软官方的驱动只有在Windows上才有。这也就是为什么我们稍后等下需要安装<code>Kinect V2</code>的驱动。</p><h2 id="2-Kinect-相机介绍"><a href="#2-Kinect-相机介绍" class="headerlink" title="2. Kinect 相机介绍"></a>2. Kinect 相机介绍</h2><blockquote><p>以下内容参考博客：<a href="https://www.cnblogs.com/traceplus/p/4136297.html">https://www.cnblogs.com/traceplus/p/4136297.html</a></p></blockquote><h3 id="A-Kinect-V1"><a href="#A-Kinect-V1" class="headerlink" title="A. Kinect V1"></a>A. Kinect V1</h3><p>2012年美国微软发售的<code>Kinect V1</code>，因为可以很方便就能取得Depth（深度）和 skeleton（人物姿势）等信息，被全世界的开发者和研究人员关注。</p><p><code>Kinect V1</code>的Depth传感器，采用了<code>Light Coding</code>的方式，读取投射的红外线的<code>pattern</code>，通过<code>pattern</code>的变形来取得Depth的信息。为此，Depth传感器分为投射红外线的IR Projector（左）和读取的IR Camera（右）。此外还有<code>Kinect V1</code>中间还搭载了RGB相机。</p><p><code>Light Coding</code>是以色列的<code>PrimeSense</code>公司的Depth传感器技术，于2013年被美国苹果公司收购。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/012317367015237.jpg" alt="Kinect V1的图片"></p><h3 id="B-Kinect-V2"><a href="#B-Kinect-V2" class="headerlink" title="B. Kinect V2"></a>B. Kinect V2</h3><p><code>Kinect V2</code>获得Depth信息采用的则是<code>Time of Flight(TOF)</code>的方式，通过从投射的红外线反射后返回的时间来取得Depth信息。红外发射器和接收器在面板底部，因此看不到外观，不过<code>Color Camera</code>旁边是红外线<code>Camera</code>(左)和投射脉冲变调红外线的<code>Porjector</code>（右）。</p><p>微软过去收购过基于<code>TOF</code>方式的深度传感器技术的公司（注：应该是指的3DV），已经在使用这个技术，不过没有详细的公布。</p><p>（额外插一句，TOF是目前大多数点云数据获取的方式）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/012317384052450.jpg" alt="Kinect V2"></p><h3 id="C-两者对比"><a href="#C-两者对比" class="headerlink" title="C.两者对比"></a>C.两者对比</h3><p><strong>首先是两者的参数</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118144936589.png" alt="Kinect V1 和 V2 性能对比"></p><p><strong>然后需要注意的是两者的接口</strong></p><ul><li>V1的要求是USB2.0理论传输速率是60MB/s，v2是USB3.0理论传输速率是500MB/s。</li><li>对于<code>Kinect V1</code>，对XRGB四通道图像，30fps的帧率下每秒所需传输的数据大小为640 x 480 x 4 x 30约为35M；再加上USHORT格式的深度图，30fps，每秒传输数据量为320 x 240 x 2 x 30约为4M。总计约为40MB/s，因为带宽有限，所以在保证画面帧率稳定的情况下，分辨率只能如此，而且基本上必须独占一个USB接口。</li><li>对于<code>Kinect V2</code>的情况，彩色图像1920 x 1080 x 4 x 30 约为237M，深度图像512 x 424 x 2 x 30约为12M，总计约为250M/s。所以非USB3.0不可，否则传输不了这么大的数据量。</li></ul><h2 id="3-安装Kinect驱动-ROS中间件"><a href="#3-安装Kinect驱动-ROS中间件" class="headerlink" title="3. 安装Kinect驱动+ROS中间件"></a>3. 安装Kinect驱动+ROS中间件</h2><h3 id="A-概述"><a href="#A-概述" class="headerlink" title="A. 概述"></a>A. 概述</h3><p>首先需要说明的是开发的方式，因为Kinect相机是物理硬件，所以获取到的是二进制数据流，我们首先需要使用驱动将二进制数据流转换为有意义的图像，然后在我们自己的程序针在这些图像的基础上去进行开发。</p><ul><li><strong>将二进制数据流转换为图像的程序对应下图的Kinect Driver</strong></li><li><strong>我们自己的程序对应下图的<code>Application</code></strong></li><li><strong>需要注意的是，在ROS中通常只会有一个程序调用Kinect Driver，因此不考虑右边的工作模型。右边的模型只有多人、多任务同时要调用Kinect</strong> <strong>Driver时候才会有用，针对单任务其实没有啥影响</strong></li></ul><p>在<code>Kinect</code>标准的<code>Windows</code>上，<code>Kinect</code>的驱动是Windows上直接下载的，然后<code>Windows</code>还提供了<code>Kinect</code>的SDK，里面有现成的人体骨架识别的<code>API</code>，所以可以直接用。<strong>但是在Linux的ROS上想要使用Kinect相机的话，把二进制数据流转换为图像的驱动需要我们自己写，然后SDK+程序得自己开发</strong>。</p><ul><li>幸运的是，已经有人写好了<code>Kinect</code>的驱动，因此我们直接下载驱动即可。但是<code>Kinect</code>驱动只能帮助我们能在<code>Ubuntu</code>上获得Kinect的图像，所以接下来我们需要做的第二件事就是编写一个<code>ROS</code>调用<code>Kinect</code>的节点来调用<code>Kinect</code>驱动，并将获得的图像以话题的形式发布到<code>ROS</code>中去。</li><li>更加幸运的是，这一步也已经有人帮我们做好了，我们需要需要做的下载、编译这个调用Kinect驱动获得图像、并以<code>ROS</code>话题形式发布的<code>ROS</code>功能包（相当于中间件）。</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/012317438589516.png" alt="开发方式"></p><p>因此，整个安装流程分成两步，</p><ol><li>安装 <code>Kinect</code> 的驱动</li><li>安装<code>ROS</code>功能包</li></ol><h3 id="B-安装Kinect-V2驱动——libfreenect2"><a href="#B-安装Kinect-V2驱动——libfreenect2" class="headerlink" title="B. 安装Kinect V2驱动——libfreenect2"></a>B. 安装Kinect V2驱动——libfreenect2</h3><p>首先需要安装<code>Kinect</code>在<code>Ubuntu</code>上的驱动：<code>libfreenect2</code>。</p><p>这个驱动是<code>Github</code>上开源的用<code>C++</code>和<code>Cmake</code>写的<code>Kinect V2</code>的驱动，所以我们稍后克隆下来之后安装一下依赖，然后配置<code>CMake</code>生成<code>Makefile</code>、然后make编译，最后make install安装库即可。</p><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><p>实现用apt包管理器安装下稍后编译时候的依赖</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential cmake pkg-config libturbojpeg libjpeg-turbo8-dev mesa-common-dev freeglut3-dev libxrandr-dev libxi-dev libglfw3-dev libglfw3-dev libopenni2-dev libusb-dev libturbojpeg0-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于我已经安装过了，所以这一步我不会安装任何东西。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118172852901.png" alt="安装依赖"></p><h4 id="2-下载源码"><a href="#2-下载源码" class="headerlink" title="2. 下载源码"></a>2. 下载源码</h4><p><code>git</code>直接下载源码即可，如果下载的慢的话，要么科学上网，要么先用国内的码云gitee克隆一下，然后再下载码云的仓库。关于如何使用码云加速<code>github</code>下载可以参考我的这篇文章（挖个坑，以后补）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">git</span> clone https://github.com/OpenKinect/libfreenect2.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118173143020.png" alt="下载源码"></p><p>下载之后的项目文件结构，可以看出来，是一个非常经典的<code>CMake</code>的项目</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118173557080.png" alt="下载后的项目结构"></p><h4 id="3-配置-amp-编译"><a href="#3-配置-amp-编译" class="headerlink" title="3. 配置&amp;编译"></a>3. 配置&amp;编译</h4><p>对于一个<code>CMake</code>工程，得到项目最后的成果，即最终的动态链接库/共享库、可执行文件一共需要两步。第一步是配置（<code>Config</code>），第二步是构建（<code>Build</code>）。配置指的是设置项目的一些配置，比如说编译器使用的语法标准、是否禁止编译器在编译阶段优化代码等等。这里不展开讲了，具体内容可以参考我的<code>CMake</code>系列文章（挖个坑）。</p><p>首先创建一个编译空间</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">cd</span> libfreenect2/<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2$ <span class="token function">mkdir</span> build<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2$ <span class="token function">cd</span> build/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来再使用<code>CMake</code>针对<code>build</code>文件夹外的<code>CMakeLists</code>进行配置，需要注意的是，由于我已经配好了<code>Nvidia</code>的显卡驱动和<code>CUDA</code>，因此我指定使用<code>CUDA</code>编译，这样运行的时候就会有加速。此外配置的时候要指定安装到的位置，这个安装到的位置稍后安装ROS功能包的时候会用到，所以不建议修改，用默认的就行。</p><p>具体来说我们都是在命令行使用-D参数来指定<code>CMake</code>的宏及其值(D=define)，<code>CMakeLists</code>中会检查这些宏的值。如果你不是<code>CUDA</code>的话就把后面指定<code>CUDA</code>的宏删掉即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ cmake <span class="token punctuation">..</span> -DCMAKE_INSTALL_PREFIX<span class="token operator">=</span><span class="token variable">$HOME</span>/freenect2 -DENABLE_CXX11<span class="token operator">=</span>ON -DCUDA_PROPAGATE_HOST_FLAGS<span class="token operator">=</span>off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118184945046.png" alt="CMake配置工程"></p><p>可以看到<code>CMake</code>配置的流程还是很清晰的，首先会去寻找系统中的编译器版本然后再去检查当前编译器是否至此指定版本的语法，接下来去寻找包等等。全部配置过程没有问题的话就会显示最后的三句话，当前<code>build</code>编译空间下也多出来很多中间文件。<code>Makefile</code>就是稍后<code>make</code>解析的对象。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118185449344.png" alt="配置的结果"></p><p>然后我们make编译即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我这里的编译可以说是顺风顺水，主要原因其实是我已经配置过一遍了，这是写教程时候删掉了全部的文件重头再来的结果。<strong>其实在第一次配的时候在编译这里遇到了两三个问题</strong>，不过我都解决掉了，现在没有办法把这些问题复现出来。这里挖个坑，下一次装机补上。主要的两个问题是第一次会报错不存在一个叫<code>libGL.so</code>的共享库，第二次则是在最后编译到100%之后链接的时候报错说没有定义的引用：<code>undefined reference to _glapi_tls_Current</code>。</p><p>其实这两个问题都和<code>OpenGL</code>这个图形库有关（<code>Graphic Librar</code>y）。图形负责渲染材质等等，是将数据显示到我们的显示器上的库，包括看到的桌面、窗口等等都是用图形库渲染出来的。而<code>Kinect</code>捕获到的数据要转成图片显示，就必然会用到<code>OpenGL</code>这个库。第一个报错是因为管道断开（<code>libGL.so</code>是一个软连接），重新链接就行，第二个报错则是因为<code>libGL.so</code>链接到的共享库版本太老，指定一个更新的即可。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118185715177.png" alt="编译的过程"></p><p>最后，由于<code>libfreenect2</code>最终生成的是一个驱动，因此他最终生成的结果不仅有可执行文件，还有共享库，我们需要<code>make install</code>来安装一下共享库。说是安装，其实就是把共享库复制到指定的位置去，一般的项目都是把共享库复制到系统链接时候的搜索路径，这样编译的时候系统会自动的去搜索。<strong>不过由于我们上面CMake在配置的时候指定了安装位置，因此他其实会安装到我们的家目录下面</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从命令的输出确实能够看到安装的位置就是我们的家目录</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118190908729.png" alt="安装的结果"></p><h4 id="4-设置USB规则"><a href="#4-设置USB规则" class="headerlink" title="4. 设置USB规则"></a>4. 设置USB规则</h4><p>由于<code>libfreenect2</code>是一个驱动，因此他需要和底层的硬件做交互，所以需要设置一下<code>USB</code>规则。在<code>Linux</code>中所有的串口都是由一个叫<code>udev</code>的程序负责的，他相当于<code>Windows</code>的设备管理器。这里挖个坑，以后补上关于<code>udev</code>的内容。更多细节可以参考<a href="https://www.jianshu.com/p/dd6cecd7755a">这篇简书的博客</a></p><blockquote><p><strong>以下内容引用自简书博客</strong></p><p><strong>udev在linux的那个位置</strong></p><p>udev的守护进程在linux的位置在systemd中的位置如下所示，举个例子：如果向pc中插入一个usb设备，kernel在总线上发现这个设备，使用dirver初始化，在sysfs创建device目录等操作之后，将通知用户空间的udev，然后上层的显示层才能看到这个usb设备，并最终将它显示在desktop上：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/330043-6ecf51d6a519b4fe.png" alt="Systemd守护进程所处的位置"></p></blockquote><p>我们直接把规则文件复制到<code>udev</code>的配置文件夹下即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> <span class="token punctuation">..</span>/platform/linux/udev/90-kinect2.rules /etc/udev/rules.d/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-验证安装"><a href="#5-验证安装" class="headerlink" title="5. 验证安装"></a>5. 验证安装</h4><p>最后上面的步骤一步步做下来，应该是没有问题的，不过在编译驱动的时候我们观察到make最后在生成一个叫做<code>Protonect</code>的可执行文件。这个程序其实就是验证安装的程序。我们接上<code>Kinect</code>的连接线，然后运行这个程序，如果安装成功就能够看到下面的图片</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ ./bin/Protonect<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>四张图中左上角是深度图，左下角是RGB图像，右下角是点云的图像，右上角是带有RGB的点云的图像。需要注意的是，点云的图像是通过深度图推算出来的。深度图只有一个Depth通道，数值越大表示越远，看起来就越黑。而点云图是XYZ三个通道，分别表示点相对相机的的XYZ坐标。而右上角的点云则是RGBXYZ六个通道图片。右边看到，有<code>CUDA</code>加速喧嚷延迟基本都在10ms左右，速度还是非常快的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118193300100.png" alt="验证程序的运行结果"></p><h4 id="6-安装驱动可能遇到的问题"><a href="#6-安装驱动可能遇到的问题" class="headerlink" title="6. 安装驱动可能遇到的问题"></a>6. 安装驱动可能遇到的问题</h4><p>暂时没有，留待下次重装系统时候补充。</p><h3 id="C-安装ROS-Kinect深度相机功能包——iai-kinect2"><a href="#C-安装ROS-Kinect深度相机功能包——iai-kinect2" class="headerlink" title="C. 安装ROS Kinect深度相机功能包——iai_kinect2"></a>C. 安装ROS Kinect深度相机功能包——iai_kinect2</h3><p>就像在<code>Melodic</code>上使用<code>CV_Bridge</code>一样（挖个<code>Melodic</code>编译<code>CV_Bridge</code>的坑，以后补上），<code>iai_kinect2</code>也需要我们从<code>github</code>上下载源码然后编译。</p><p>在编译之后，我们想要通过Kinect获得深度图像、点云图像等等直接启动这个<code>iai_kinect2</code>中的节点就行。这个节点将会调用libfreenect，并将获取到的图像发布到指定的话题里，因此我们订阅指定的话题即可得到数据。</p><h4 id="1-下载并编译功能包"><a href="#1-下载并编译功能包" class="headerlink" title="1. 下载并编译功能包"></a>1. 下载并编译功能包</h4><p>由于iai-<code>kinect2</code>本质上是<code>ROS</code>的一个功能包，而<code>ROS</code>的功能包的发布都是以功能包的形式发布的，因此我们只需要把这个功能包下载到工作空间中并进行编译即可。为了不污染我们自己的工作空间，避免每次都要编译这个包，我们新创建一个叫做<code>install_iai_kinect</code>的工作空间的安装这个包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">mkdir</span> install_iai_kinect2<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">cd</span> install_iai_kinect2/<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ <span class="token function">mkdir</span> src<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ <span class="token function">cd</span> src/<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src$ catkin_init_workspace <span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src$ <span class="token function">cd</span> <span class="token punctuation">..</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ catkin_make<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118205323865.png" alt="初始化之后的工作空间"></p><p>然后git下载功能并安装依赖，注意这里如果前面改了<code>libfreenect</code>的安装路径的话，这里编译的时候要添加一个<code>CMake</code>的宏来指定<code>libfreenect</code>的路径，参考<a href="https://github.com/code-iai/iai_kinect2#install">文章</a>。</p><p>此外，在使用<code>rosdep</code>安装的时候会遇到一个“报错”（见下），这个其实是正常的，因为<code>kinect2_brideg</code>、<code>kinect2_cailbration</code>、<code>kinect2_caliration</code>、<code>kinect2_viewer</code>这四个节点被<code>rosdep</code>认为是功能包了，但他们其实都只是<code>iai_kinect2</code>的一部分。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ <span class="token function">cd</span> src/<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src$ <span class="token function">git</span> clone https://github.com/code-iai/iai_kinect2.git<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src$ <span class="token function">cd</span> iai_kinect2<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src/iai_kinect2$ rosdep <span class="token function">install</span> -r --from-paths <span class="token keyword">.</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src/iai_kinect2$ <span class="token function">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ catkin_make -DCMAKE_BUILD_TYPE<span class="token operator">=</span><span class="token string">"Release"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ERROR: the following packages/stacks could not have their rosdepc keys resolved<br>to system dependencies:<br>kinect2_bridge: Cannot locate rosdep definition for [kinect2_registration]<br>kinect2_calibration: Cannot locate rosdep definition for [kinect2_bridge]<br>kinect2_viewer: Cannot locate rosdep definition for [kinect2_bridge]<br>iai_kinect2: Cannot locate rosdep definition for [kinect2_registration]</p></blockquote><p>最后没有error就成功安装功能包了，但是不要忘记<code>source</code>一下，因为这个功能包不在<code>ROS</code>的元功能包中。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118205948236.png" alt="编译的结果"></p><h4 id="2-验证安装"><a href="#2-验证安装" class="headerlink" title="2. 验证安装"></a>2. 验证安装</h4><p>同样，经历过上面的步骤之后，我们脸上<code>Kinect V2</code>的连接线来跑跑节点，看看有没有问题。类似于<code>cv_bridge</code>，<code>iai-kinect2</code>编译之后会得到一个<code>kinect_bridge</code>，我们利用其中的launch文件来测试一下。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ <span class="token function">source</span> devel/setup.bash <span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ roslaunch kinect2_bridge kinect2_bridge.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118204334851.png" alt="launch启动整个kinect_bridge"></p><p>然后我们再开一个终端来看看节点图</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ rqt_graph<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看起来还不错，可以看到<code>kinect_bridge</code>其实只是一个交互的节点，他的后端数据处理都是依靠的其他的节点，<code>kinect2</code>负责调用<code>libfreenect</code>驱动，剩下的hd、sd、qhd分别负责处理高中低分辨率的图像。</p><p>不过由于rqt是通过rosmaster中的注册信息来画节点图的，因此没有被订阅的话题无法被显示出来，我们看看所有的话题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118203224904.png" alt="Kinect_Bridge节点图"></p><p>新开一个终端</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~$ rostopic list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到有很多的话题，不过其实所有的话题分成三组，<code>hd</code>表示高分辨率，<code>qhd</code>表示中分辨率，<code>sd</code>表示低分辨率</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118203435667.png" alt="Kinect_Bridge发布的所有的画图"></p><p>最后其实<code>kinect_bridge</code>提供了可视化的节点，不过首先需要对kinect相机进行校准，否则是有偏差的，不过我们这里只是为了验证，因此跑起来看看</p><pre class="line-numbers language-bash"><code class="language-bash">rosrun kinect2_viewer kinect2_viewer kinect2 sd cloud<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看起来效果还不错，不过由于订阅的是低分辨的图片，因此图片放大之后实际上像素间就会出现一些缺失的黑色点</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118203934128.png" alt="可视化的结果"></p><h4 id="3-安装时候的一些说明"><a href="#3-安装时候的一些说明" class="headerlink" title="3. 安装时候的一些说明"></a>3. 安装时候的一些说明</h4><blockquote><h4 id="1-编译的时候弹出来警告"><a href="#1-编译的时候弹出来警告" class="headerlink" title="1. 编译的时候弹出来警告"></a>1. 编译的时候弹出来警告</h4><p>具体的警告如下图。只是警告而已，不是错误，不用管。因为<code>catkin</code>作为<code>cmake</code>的上级编译系统，最后还是调用的<code>g++</code>，<code>g++</code>在编译的是帮我们检查代码，警告我们哪里语法不规范啥的，没必要管，能用就行。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118202235817.png" alt="编译时候的警告"></p></blockquote><h4 id="4-安装功能包可能会遇到的问题"><a href="#4-安装功能包可能会遇到的问题" class="headerlink" title="4. 安装功能包可能会遇到的问题"></a>4. 安装功能包可能会遇到的问题</h4><blockquote><h4 id="1-CMake-Error-at-usr-lib-x86-64-linux-gnu-cmake-Qt5Gui-Qt5GuiConfig-cmake-27-message-：Qt5的报错"><a href="#1-CMake-Error-at-usr-lib-x86-64-linux-gnu-cmake-Qt5Gui-Qt5GuiConfig-cmake-27-message-：Qt5的报错" class="headerlink" title="1. CMake Error at /usr/lib/x86_64-linux-gnu/cmake/Qt5Gui/Qt5GuiConfig.cmake:27 (message)：Qt5的报错"></a>1. <strong>CMake Error at /usr/lib/x86_64-linux-gnu/cmake/Qt5Gui/Qt5GuiConfig.cmake:27 (message)</strong>：Qt5的报错</h4><p>具体报错如下图，即缺少了<code>libEGL.so</code>这个共享库</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118200845339.png" alt="Qt5报错"></p><p><strong>解决方法：</strong></p><p>和上面安装驱动时候遇到的报错差不多，估计是一个尿性，即软连接断了，先去<code>/usr/lib/x86-linux-gnu</code>下看看。果然，红色的字体，断开的链接。即<code>/usr/lib/x86_64-linux-gnu/libEGL.so</code>这个软连接本来指向的文件没了。不过看这个样子有一个1.1.0版本的，估计是某次<code>apt upgrade</code>时候更新了这个库。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ ll /usr/lib/x86_64-linux-gnu/libEGL.so*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118201305342.png" alt="libEGL.so断开的软连接"></p><p>那么解决思路就很简单了，我们先删掉原有的断掉的链接，然后让他再指向新版本就行了，毕竟新版本一般都是向后兼容的。除了<code>Python2</code>到<code>Python3</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ <span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib/x86_64-linux-gnu/libEGL.so <span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ <span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/lib/x86_64-linux-gnu/libEGL.so.1.1.0 /usr/lib/x86_64-linux-gnu/libEGL.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在看着就没问题了，管道对了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118201854870.png" alt="重置libEGL.so的指向"></p><p>然后再进行编译即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118202028422.png" alt="功能包可以正常编译"></p></blockquote><h2 id="4-使用kinect-bridge"><a href="#4-使用kinect-bridge" class="headerlink" title="4. 使用kinect_bridge"></a>4. 使用kinect_bridge</h2><p>使用<code>kinect_bridge</code>其实特别简单，就是订阅话题而已，为此我们快速写一个<code>Python</code>脚本测试，注意测试时候新建的功能包的依赖不要加<code>iai_kinect2</code>，因为<code>kinect_bridge</code>实现了低耦合性，所有的消息全部都是<code>ROS</code>中的标准消息类型，因此没有提供任何ROS编译之后可以引用的库。<strong>下面是是一个错误的示例</strong>。（挖个坑，以后出一个关于<code>Vscode</code>开发<code>ROS</code>的环境搭建，真的<code>VScode</code>越用越爽）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118210715487.png" alt="功能包的依赖"></p><p>正因为<code>kinect_bridge</code>中的消息全部都是<code>ROS</code>的标准消息，所有的图像都是<code>sensor_msgs/Image</code>或者<code>sensor_msgs/CompressedImage</code>。而点云则是<code>sensor_msgs/PointCloud2</code>，我们可以非常快速的写一个测试代码，代码见下（<strong>注意如果你要写C++的话不要在iai_bridge的工作空间中编译，会报错，因为Kinect_Bridge没有提供ROS编译、安装相关的CMake指令</strong>）</p><p>关于<code>ROS</code>中使用<code>conda</code>、还有<code>cv_bridge</code>、<code>ROS</code>使用<code>Python</code>等问题先挖个坑，后面补上文章</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /home/jack/anaconda3/envs/ros/bin/python</span><span class="token triple-quoted-string string">"""rospy 中使用 通过 kinect 获取点云的示例代码 """</span><span class="token triple-quoted-string string">"""@author: Jack Wang@copyright: Jack Wang@time: 2021-11-18"""</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> datetime<span class="token keyword">import</span> time<span class="token keyword">import</span> cv2<span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span class="token comment" spellcheck="true"># 我在 Python3 下编译了cv_bridge，所以要避免import了下载ROS时候一并下载的系统的Python2.7的cv_bridge</span><span class="token keyword">for</span> path_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"2.7"</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span>path_idx<span class="token punctuation">]</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>path_idx<span class="token punctuation">)</span>        <span class="token keyword">break</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> sensor_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Image<span class="token keyword">from</span> cv_bridge <span class="token keyword">import</span> CvBridge<span class="token keyword">class</span> <span class="token class-name">MyKinectViewer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    bridge <span class="token operator">=</span> CvBridge<span class="token punctuation">(</span><span class="token punctuation">)</span>    today<span class="token punctuation">:</span> str <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span>    start_sec<span class="token punctuation">:</span> float <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    font <span class="token operator">=</span> cv2<span class="token punctuation">.</span>FONT_HERSHEY_DUPLEX    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>msg<span class="token operator">=</span>f<span class="token string">"{Fore.GREEN}启动KinectBridge订阅节点！{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        subcriber <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/kinect2/sd/image_color_rect"</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>image_cb<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">image_cb</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">:</span> Image<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        cv_img <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>imgmsg_to_cv2<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        cv_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>cv_img<span class="token punctuation">,</span> f<span class="token string">"{self.today}, start times: {time.time()-self.start_sec:>.2f}"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span>        cv_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>cv_img<span class="token punctuation">,</span> f<span class="token string">"-- by Jack Wang"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"kinect_test"</span><span class="token punctuation">,</span> cv_img<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}关闭节点{Style.RESET_ALL}"</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>signal_shutdown<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"pressed esc"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"kinect_test"</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    mkv <span class="token operator">=</span> MyKinectViewer<span class="token punctuation">(</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出来，效果还不错</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118214830894.png" alt="节点效果图"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118214855870.png" alt="按下ESC键退出节点"></p><p>结合我之前写的<code>YOLO V5</code>的<code>ROS</code>图像处理节点，最后可以实现的效果（<code>Yolo V5</code>的<code>ROS</code>节点代码后面会发出来）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118220436969.png" alt="image-20211118220436969"></p><p>至此，本文全部结束，我们首先介绍了什么是<code>Kinect</code>相机；然后就<code>Kinect</code>相机的参数、工作原理进行了介绍；接下来讲解了如何在<code>Linux(Ubuntu)</code>上安装<code>Kinect V2</code>相机的驱动：<code>libfreenect2</code>和安装<code>ROS</code>中的<code>Kinect</code>相机调用节点；在最后我们给出了一个简单的小例子，来演示如何使用<code>iai-kinect2</code>功能包得到的图像数据。</p><p>关于iai-kinect2的更多使用教程，请看下一篇文章：<code>ROS</code>中<code>iai-kinect2</code>功能包的使用。</p><p>6200字，码字不易~，欢迎打赏~，一起推动开源事业进步</p>]]></content>
      
      
      <categories>
          
          <category> ROS杂篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> Kinect V2 </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> melodic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo的个人技术博客搭建 —— Part 3 matery主题下的Hexo博客优化.md</title>
      <link href="/2021/11/14/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-3-matery-zhu-ti-xia-de-hexo-you-hua-md-md/"/>
      <url>/2021/11/14/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-3-matery-zhu-ti-xia-de-hexo-you-hua-md-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>hexo本身只是提供了一个博客的框架，博客网站的美化和优化还是需要靠自己配置主题。本文讲解如何利用Matery主题对Hexo搭建的博客进行深度优化</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207132452913.png" alt="最终效果展示图"></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Part-3-matery主题下的Hexo博客优化"><a href="#基于Hexo的个人技术博客搭建-——-Part-3-matery主题下的Hexo博客优化" class="headerlink" title="基于Hexo的个人技术博客搭建 ——  Part 3 matery主题下的Hexo博客优化"></a>基于Hexo的个人技术博客搭建 ——  Part 3 matery主题下的Hexo博客优化</h1><p>在前面的一章中，我们已经通过<code>hexo</code>在本地搭建出了一个博客。但是目前，这个博客还存在一些问题</p><ol><li><strong>目前博客网站运行在本地，所以只有我们自己能看到</strong></li><li><strong>Hexo默认的博客不够美观、功能不够多</strong></li></ol><p>针对上面两个我们，本章和下一章就将进行解决。本章首先解决第二个问题，即优化Hexo博客。</p><h2 id="1-为什么使用其他的Hexo主题？"><a href="#1-为什么使用其他的Hexo主题？" class="headerlink" title="1. 为什么使用其他的Hexo主题？"></a>1. 为什么使用其他的Hexo主题？</h2><p>在前面一章中我们讲过，<code>Hexo</code>主题的工作原理其实就是<code>Hexo</code>的主题里面写的<code>JavaScript</code>和<code>CSS</code>覆盖掉了<code>hexo</code>的<code>JavaScript</code>和<code>CSS</code>。而CSS决定了<code>Hexo</code>博客的外观，因此是否美观实际上取决于主题里的<code>CSS</code>。同样JavaScript决定了网页和我们的交互，因此网页的功能如何实际上也取决与我们的主题。因此，一个优秀的主题是有一个完美的<code>Hexo</code>博客的先决条件。有了一个优秀的主题，我们的博客不仅更加美观，功能也会更加强大。</p><p>因此我们对<code>Hexo</code>博客进行优化，实际上就是使用其他主题，并对这些主题进行配置、</p><p>后面，就将以<code>Hexo</code>的<code>matery</code>主题为例，进行优化</p><h2 id="2-基于Matery主题的Hexo博客优化"><a href="#2-基于Matery主题的Hexo博客优化" class="headerlink" title="2. 基于Matery主题的Hexo博客优化"></a>2. 基于Matery主题的Hexo博客优化</h2><p><code>Matery</code>主题是由国内的闪烁之狐（blinkfox）制作的一款美观的主题，包括我在写这篇博客时候我的博客所用的主题就是<code>Matery</code>。</p><p>之所以使用<code>Matery</code>主题，美观只是一个方面，更重要的是<code>Matery</code>以插件的形式提供了非常多优秀的程序，通过这些程序使得我们能够极大地优化我们的网站。</p><p>访问闪烁之狐的<a href="http://blinkfox.com/">Hexo博客</a>和他的<code>Matery</code>主题的<a href="https://github.com/blinkfox/hexo-theme-matery">Github</a>查看更多的信息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115010655463.png" alt="闪烁之狐的Matery主题示例"></p><p>接下来我们就将基于<code>Matery</code>主题来对我们的<code>Hexo</code>博客进行优化</p><blockquote><p>注意，下面的很多教程在<code>Matery</code>的<code>Github</code>上已经有介绍了，因此下面的介绍更多的是关注<code>Matery Github</code>上没有讲到的点</p></blockquote><h3 id="1-安装Matery"><a href="#1-安装Matery" class="headerlink" title="1. 安装Matery"></a>1. 安装Matery</h3><p><code>Matery</code>的<code>Github</code>中的中文说明已经讲过了，在<code>Hexo</code>博客文件夹下的<code>theme</code>文件夹<code>clone</code> 下<code>Matery</code>项目即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">cd</span> themes/<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test/themes$ <span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成之后，我们hexo博客看看效果</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test/themes$ <span class="token function">cd</span> <span class="token punctuation">..</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>发现和之前的博客并没有任何变化</strong>，这是因为我们需要在<code>Hexo</code>的配置文件中指定使用<code>Matery</code>主题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115011512753.png" alt="博客没有任何变化"></p><h3 id="2-切换Matery主题"><a href="#2-切换Matery主题" class="headerlink" title="2. 切换Matery主题"></a>2. 切换Matery主题</h3><p><code>vim</code>修改<code>hexo</code>博客根目录下的<code>_config.yml</code>，将<code>theme</code>的值改为 <code>hexo-theme-matery</code>，这样就启用了Matery主题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115011735922.png" alt="修改之后的值"></p><p>接下来运行一下博客，就能够看到效果了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，默认配置就已经非常漂亮了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115011929561.png" alt="Matery主题的首页"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115012203467.png" alt="Matery主题的底部"></p><p>但是这个默认的主题也有一些小问题，需要我们去修改，比如说网站的左上角的logo，中间浮动打印的语句，中间的github链接需要修改成我们自己的，我的梦想栏的语句需要修改成自己的，右下角的联系方式需要改成我们自己的……</p><p>除了这些个人信息配置以外，还有最关键的一点就是右上角选项卡除了<code>首页</code>以外，其他的点击都会直接没有对应的界面显示。<strong>这是因为Matery默认没有这些界面，需要我们自己配置</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115012428235.png" alt="点击后显示错误"></p><h3 id="3-添加缺失的页面"><a href="#3-添加缺失的页面" class="headerlink" title="3. 添加缺失的页面"></a>3. 添加缺失的页面</h3><p>在前面的一章中，我们讲到<code>hexo</code>中一篇博客的源文件是一个<code>.md</code>文件，通过使用<code>hexo generta</code>命令，hexo自动的为我们的博文生成一个网页以及对应的资源文件。而其实在<code>hexo</code>，中一个页面对应的也是一个<code>.md</code>文件，同样我们稍后使用<code>hexo generta</code>来生成新的页面。只不过页面对应的<code>.md</code>文件会和博客的<code>.md</code>存在一些不同</p><p>下面就将以添加<code>关于</code>界面为例，讲解Hexo的页面工作原理的同时带领读者配置<code>Matery</code>的页面</p><h4 id="A-添加关于About页面"><a href="#A-添加关于About页面" class="headerlink" title="A. 添加关于About页面"></a>A. 添加<code>关于About</code>页面</h4><p>我们首先在根目录下使用<code>hexo new page xxx</code>命令来生成一个新的页面。同样为了后续的讲解，我们首先保存下现在的目录结构</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> before_about.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> after_about.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> before_about.txt <span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们需要修改刚刚新生成的<code>.md</code>来说明这个是一个页面而非博客，这样稍后生成博客的时候就会生成出来一个新的页面</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim source/about/index.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将<code>index.md</code>修改为如下内容，当然日期可以按照你自己的来</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: aboutdate: 2021-11-15 01:37:51type: "about"<span class="token title important">layout: "about"<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115014047478.png" alt="修改后的index.md"></p><p>接下来我们生成一下添加后的博客，别忘了生成之前<code>clean</code>一下，清除掉之前的博客。同时下面由于要讲解原理，因此生成后我们输出一下生成之后的目录结构</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo clean<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo gen<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> after_about.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们运行下博客看看效果</p><p>可以看到，此时点击<code>关于</code>就可以正常显示处页面了，底部则显示出我们的制作的项目</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115014533558.png" alt="正常显示的关于页面"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115014620968.png" alt="关于页面的底部"></p><p>当然，这些信息都是默认的信息，我们稍后是肯定需要修改成我们自己的。不过在这之前，先别着急，我们先了解一下<code>hexo</code>是怎么样新生成一个页面的</p><h4 id="B-Hexo是怎么样生成新的页面的？"><a href="#B-Hexo是怎么样生成新的页面的？" class="headerlink" title="B. Hexo是怎么样生成新的页面的？"></a>B. Hexo是怎么样生成新的页面的？</h4><p>我们利用上面两次输出的目录结构，来看看添加、生成页面之后博客目录结构的变化</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim -d before_about.txt after_about.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先是发布的博客的<code>public</code>文件夹下多了非常多的东西。除了我们之前添加的第一篇博客外，还多出了<code>about</code>、<code>css</code>、<code>js</code>等一些文件夹</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115015145727.png" alt="Public文件夹的变化"></p><p>此外，我们的源代码文件夹中也多了<code>about</code>文件夹和在其下面的<code>index.md</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115015222432.png" alt="source文件夹下的不同"></p><p>实际上到这里你应该能够猜出来了，<code>hexo</code>和<code>matery</code>生成新的页面的工作原理就是：</p><ul><li>首先<code>hexo</code>认为<code>source</code>文件夹下的一个文件夹就是一个页面，这个页面必须要有一个<code>index.md</code>来说明这个页面的信息，例如上面指定生成页面使用的模板</li><li>其次，<code>matery</code>在生成项目的时候，会在public下生成新的网站的配置文件来修改默认的页面。因此我们的确可以修改这个<code>public</code>下面的<code>matery</code>生成的资源文件。但是并不推荐这样做，因为所有的修改在后续<code>generate</code>之后就会丢失。与此相比，下面会介绍更好的修改、配置<code>matery</code>主题的方式</li></ul><p>最后，我们依照<code>Matery Github</code>（<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">链接</a>）中的<code>README</code>的指引，如法炮制添加剩下的所有页面。</p><p>完成了之后，你可以尽情的探索一下新得到的页面。</p><h3 id="4-配置Matery主题"><a href="#4-配置Matery主题" class="headerlink" title="4. 配置Matery主题"></a>4. 配置Matery主题</h3><p>上面我们通过简单的Matery主题的配置得到了一些界面，下面我们就将进一步配置Matery主题。</p><p>授人以鱼不如授人以渔，因此下面我会首先讲解Matery主题的配置是如何工作的而非单纯的罗列，在讲解完原理之后会留下我参考过的不错的链接，读者可以去里面根据自己的需求配置。</p><p>下面将以安装文章字数插件为例进行讲解。</p><h4 id="A-文章字数统计"><a href="#A-文章字数统计" class="headerlink" title="A. 文章字数统计"></a>A. 文章字数统计</h4><p>细心地读者已经发现，在我们上面的博客底部其实是没有文章字数统计的，而闪烁之狐的实例网页中却具有文章字数统计。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115021145362.png" alt="我们的界面"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115021216163.png" alt="闪烁之狐的网站"></p><p>实际上，这个功能是依靠第三方插件<code>+Matery</code>配置完成的。我们首先下载这个插件，不过注意，我们在前面安装了<code>cnpm</code>，因此使用<code>cnpm</code>安装即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ cnpm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成之后，我们还要修改<code>theme</code>文件夹下<code>Matery</code>主题的配置文件来激活插件，<strong>注意是Matey主题的配置文件</strong>。因为页面的样式信息都是Matery负责的。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim themes/hexo-theme-matery/_config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改为</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115021824246.png" alt="修改后的_config.yml"></p><p>然后我们同样clean之后generate看看效果</p><p>可以看到，已经出现统计信息了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115021949461.png" alt="底部具有了统计信息"></p><h4 id="B-Matery的配置是如何工作的？"><a href="#B-Matery的配置是如何工作的？" class="headerlink" title="B. Matery的配置是如何工作的？"></a>B. Matery的配置是如何工作的？</h4><p>事实上，<code>Matery</code>主题依靠其主题文件夹下的<code>_config.yml</code>来进行配置。这个文件中提供了诸如：网站上方选项卡的选项、个人信息、头像、logo等资源文件位置这类的配置，还有是否激活xx插件、xx效果等配置。因此我们通过<code>Matery</code>的<code>_config.yml</code>来进行配置。</p><p>在我们配置完了之后，在<code>generate</code>的过程中，<code>matery</code>就会根据我们的配置来生成对应的文件。可以说是非常方便。</p><p>例如我们修改在关于页面中显示的个人信息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115023301903.png" alt="修改个人信息"></p><p>同样，我们修改之后clean、gen、server来看看效果</p><p>可以看到，相关信息已经被修改了，不过由于我没有改头像，因此头像没有变</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115023432763.png" alt="修改后的效果"></p><p>此外，由于闪烁之狐大佬良好的代码风格，因此在<code>Matery</code>的配置文件夹下，几乎可以看到所有的配置以及修改方式~。大家可以多试试</p><p>此外，推荐一个我参考过的博客，他也是基于<code>Matery</code>进行了配置和优化，并且自己改了一些<code>JavaScript</code>，以实现更好的效果，<a href="https://m3df.xyz/2020/06/13/e9fff968/">零下三度的极寒的博客</a></p><p>最后，本章到了这里就结束了。在本章我们首先讲解了为什么要使用第三方的<code>Hexo</code>主题，以及为什么使用<code>Matery</code>主题。接下来我们结合两个案例讲解了如何对<code>Matery</code>主题进行配置并解释了<code>Matery</code>配置的工作原理，在明白工作原理之后，大家去修改自己的博客网站就会得心应手很多。最后我们提供了其他的参考链接来帮助大家配置自己的博客网站。</p><p>在下一章中，我们将讲解如何低成本的把自己的博客部署到公网上去，使得所有人都能够访问你的博客。</p><p>码字不易，3100字，欢迎打赏~，一起推动开源事业~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人技术博客搭建 —— Part 2 Hexo快速建站以网站基础信息配置</title>
      <link href="/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-2-hexo-shi-yong-he-ji-chu-pei-zhi-md/"/>
      <url>/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-2-hexo-shi-yong-he-ji-chu-pei-zhi-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文首先讲解如何使用Hexo快速搭建出一个博客网站，接下来对<code>Hexo</code>搭建的博客网站进行介绍，最后对Hexo搭建的博客网站进行网站基础信息的设置。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113193858319.png" alt="快速建站最终实现的效果"></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Part-2-Hexo快速建站以网站基础信息配置"><a href="#基于Hexo的个人技术博客搭建-——-Part-2-Hexo快速建站以网站基础信息配置" class="headerlink" title="基于Hexo的个人技术博客搭建 —— Part 2 Hexo快速建站以网站基础信息配置"></a>基于Hexo的个人技术博客搭建 —— Part 2 Hexo快速建站以网站基础信息配置</h1><p>在前面的章节中，我们已经讲解了配置<code>Hexo</code>的开发环境，本节将讲解如何使用Hexo快速建立自己的个人博客以及对个人博客进行基本信息设置</p><h2 id="1-Hexo快速建站"><a href="#1-Hexo快速建站" class="headerlink" title="1. Hexo快速建站"></a>1. Hexo快速建站</h2><blockquote><p>前面说过，<code>Hexo</code>搭建得到的博客本质上就是一个文件夹，因此<code>Hexo</code>进行的各种操作都是对这个文件夹里的文件进行操作。</p></blockquote><h3 id="1-初始化博客-——-hexo-init"><a href="#1-初始化博客-——-hexo-init" class="headerlink" title="1. 初始化博客 ——  hexo init"></a>1. 初始化博客 ——  <code>hexo init</code></h3><p><code>Hexo</code>提供了init命令来初始化一个博客，为此我们首先新建一个目录用来存放博客的所有文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">mkdir</span> blog-test<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ hexo init blog-test/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>hexo init</code>本质上就是去<code>github</code>上克隆<code>hexo starter</code>项目</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113194931504.png" alt="hexo init初始化博客的过程"></p><h3 id="2-运行博客-——-hexo-server"><a href="#2-运行博客-——-hexo-server" class="headerlink" title="2. 运行博客 —— hexo server"></a>2. 运行博客 —— <code>hexo server</code></h3><p>接下来，在博客所在的文件夹的根目录下运行<code>hexo server</code>，来启动<code>hexo</code>的服务程序，这样就可以显示出我们的博客网站。<code>hexo</code>默认是带有一个欢迎界面的，因此即便我们什么都不做也可以正常的运行</p><pre><code>(base) jack@jack-Alienware-m15-R3:~/project$ cd blog-test/(base) jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo server</code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113195611688.png" alt="image-20211113195611688"></p><p>运行之后浏览器中访问该端口就能够看到默认的界面，不过默认的界面的问题还是比较多的，比如网站用的默认主题并不是非常好看、网站的信息都不是，后面我们会慢慢优化。这里看到的效果如下</p><p>可以看到左下角的版权信息是默认的人名，左上角的选项卡选项也很少，右侧的菜单栏消息也很少，下一步我们就将慢慢改掉默认的界面</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113205754034.png" alt="朴素的Hexo"></p><p>为了等下讲解<code>Hexo</code>的原理，我们这里先创建三个文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> before_gen.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> after_gen.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> added_gen.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> before_gen.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-生成博客-——-hexo-clean-amp-hexo-generate"><a href="#3-生成博客-——-hexo-clean-amp-hexo-generate" class="headerlink" title="3. 生成博客 —— hexo clean &amp; hexo generate"></a>3. 生成博客 —— <code>hexo clean</code> &amp; <code>hexo generate</code></h3><p>前面说道，<code>Hexo</code>的工作原理是通过<code>Markdown</code>引擎将<code>Markdown</code>格式的文本渲染成<code>HTML</code>，因此每一次我们在写完文章之后都需要生成一下博文，注意<code>hexo</code>提供了简写命令，因此g、gen、generate都是可以的</p><pre><code>(base) jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo gen</code></pre><p>可以看到生成了不少文件内容</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113215116668.png" alt="hexo gen生成博文"></p><p>最后输出一下目录方便后面查看hexo的运行原理</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> after_gen.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-新加一篇博客-——-hexo-new"><a href="#4-新加一篇博客-——-hexo-new" class="headerlink" title="4. 新加一篇博客 —— hexo new"></a>4. 新加一篇博客 —— <code>hexo new</code></h3><p>我们自己添加博客，需要使用<code>hexo new 文章名</code>，如果文章名称中含有特殊字符，需要用<code>''</code>包裹起来</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo new 第一篇博文<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新添加的博客在<code>source/_posts/</code>下，使用编辑器打开即可，后面会写一个<code>Typora + 腾讯云床</code>的博客编写环境教程，挖个坑</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token keyword">echo</span> <span class="token string">"# 大标题"</span> <span class="token operator">>></span> source/_posts/第一篇博文.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来继续生成博客，然后我们启动server来看看我们新写的博文，server的简写是s</p><p>注意，在生成前需要用clean清除一下中间的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo clean<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo gen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113220005285.png" alt="新添加一篇博文"></p><p>可以看到多了一篇文章</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113220330894.png" alt="添加文章之后的结果"></p><p>同样，我们记录一下，方便后面讲解原理</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> added_gen.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上就是关于<code>Hexo</code>的一些基础命令使用</p><h2 id="2-Hexo的运行原理"><a href="#2-Hexo的运行原理" class="headerlink" title="2. Hexo的运行原理"></a>2. Hexo的运行原理</h2><h3 id="1-Hexo的目录结构"><a href="#1-Hexo的目录结构" class="headerlink" title="1. Hexo的目录结构"></a>1. Hexo的目录结构</h3><p>我们通过<code>tree</code>命令来查看</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree -L 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，每个文件/文件夹的作用为：</p><ul><li><code>_config.yml</code>：网站的<strong>基础配置</strong>信息，可以在这里配置网站的一些基本参数，例如作者等等。<strong>之所以是基础配置信息，是因为使用不同的主题将会在极大程度上修改、覆盖这里的配置信息</strong>。</li><li><code>package.json</code>：Hexo生成网页、运行服务器等的应用程序信息。<code>EJS</code>, <code>Stylus</code> 和 <code>Markdown renderer</code> 已默认安装，可以由我们自由移除。</li><li><code>scaffolds</code>：模版文件夹。当您生成、新建文章时，<code>Hexo</code> 会根据 <code>scaffold</code> 来建立文件。<strong>不建议修改</strong></li><li><code>source</code>：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</li><li><code>themes</code>：主题文件夹。<code>Hexo</code> 会根据主题来生成静态页面。</li></ul><p>这些文件、文件夹中对我们而言最重要的就是<code>_config.yml</code>、<code>themes</code>、<code>source</code>这三个，其他的其实一般我们用不到也不需要改</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114095916621.png" alt="Hexo博客的架构"></p><h3 id="2-Hexo是如何生成和发布的博文"><a href="#2-Hexo是如何生成和发布的博文" class="headerlink" title="2. Hexo是如何生成和发布的博文"></a>2. Hexo是如何生成和发布的博文</h3><p>上面从整体上介绍了<code>Hexo</code>的目录结构。下面我们将深入了解一下<code>Hexo</code>生成博文的原理。</p><p>我们上面使用tree生成了三次目录结构，接下来我们查看下生成博文和添加博文之后博客项目的变化，使用<code>vim -d</code>比较下三个文件的内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim -d before_gen.txt after_gen.txt added_gen.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，我们编写的博客都被添加到了<code>source/_posts</code>文件夹下，而我们运行<code>hexo generate</code>后生成的静态博文网页资源就都放在<code>public</code>文件夹下，具体来说，文章放在以日期为名的系列文件夹下，<code>CSS</code>等资源文件则是单独放置</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113223040926.png" alt="hexo new、add之后文件目录的变化"></p><h3 id="3-Hexo是如何管理主题的"><a href="#3-Hexo是如何管理主题的" class="headerlink" title="3. Hexo是如何管理主题的"></a>3. Hexo是如何管理主题的</h3><p>下面我们通过我当前的这个博客来了解下<code>Hexo</code>是如何管理主题的，以及主题是如何工作的</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/hexo-blogs$ tree themes/  -L 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，<code>theme</code>文件夹下，一个文件夹就是一个主题。一个主题内部又有其自身的结构，不同的目录有不同的作用。例如<code>language</code>负责不同语言的博文的设置，<code>source</code>则存放主题的<code>css</code>、<code>js</code>等资源文件，<code>_config.yml</code>则负责主题的配置。</p><p><strong>因此在后续我们美化、深度定制Hexo时候就是修改下载好的主题</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114021748798.png" alt="Hexo的主题目录"></p><h2 id="3-Hexo-基础信息配置"><a href="#3-Hexo-基础信息配置" class="headerlink" title="3. Hexo 基础信息配置"></a>3. Hexo 基础信息配置</h2><p>前面我们讲到，<code>Hexo</code>自身的<code>_config.yml</code>虽然负责整个项目的配置，但是通常会被我们自己下载的主题的<code>_config.yml</code>所覆盖，因此我们只在Hexo的<code>_config.yml</code>中进行一些基础信息的配置，以便于我们为我们的博客打上自己的信息。</p><p>首先通过<code>vim</code>或者其他编辑器打开根目录下的<code>_config.yml</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim _config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114022512202.png" alt="Hexo 根目录下的配置文件"></p><h3 id="1-个人信息设置"><a href="#1-个人信息设置" class="headerlink" title="1. 个人信息设置"></a>1. 个人信息设置</h3><p>我们只需要修改 <code># Site</code>中的信息即可，这样将网站的默认信息改为我们自己的信息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114023546668.png" alt="修改后的个人信息"></p><h3 id="2-URL修改"><a href="#2-URL修改" class="headerlink" title="2. URL修改"></a>2. URL修改</h3><p>注意，<code># URL</code>下的内容修改则在未来将会在别人从我们的网站中复制内容之后作为后续的内容提醒版权，此外也会在文章底部说明版权。</p><p>我们暂时先不做这个修改，等后续博客上线、具有具体的域名/网址后再进行修改。</p><p>进行完上面所有的配置之后，我们就可以查看最终的效果了，我们开启下server查看效果</p><p>可以看到首页的文字和页脚的信息已经改掉了，当然，每篇文章里作者的信息也已经改变了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114023717905.png" alt="修改后的首页"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114023757242.png" alt="修改后的页脚信息"></p><p>至此，本章就已经结束了。本章我们首先讲解了<code>Hexo</code>的基础命令，然后研究了<code>Hexo</code>的目录结构和工作原理，方便我们后续修改，最后我们对网站的基础信息做了修改，更多的网站内容和信息的设置详见下一章~</p><p>码字不易，2200多字，欢迎打赏~，一起推动开源事业进步~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人技术博客搭建 —— Part 1 Hexo介绍以及环境搭建</title>
      <link href="/2021/11/12/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-1-hexo-jie-shao-yi-ji-huan-jing-da-jian-md/"/>
      <url>/2021/11/12/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-1-hexo-jie-shao-yi-ji-huan-jing-da-jian-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍什么是Hexo，为什么我们要使用Hexo搭建我们的博客以及Hexo环境搭建</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113024418805.png" alt="Hexo官网"></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-Part-1-Hexo介绍以及环境搭建-md"><a href="#基于Hexo的个人技术博客搭建-Part-1-Hexo介绍以及环境搭建-md" class="headerlink" title="基于Hexo的个人技术博客搭建-Part 1 Hexo介绍以及环境搭建.md"></a>基于Hexo的个人技术博客搭建-Part 1 Hexo介绍以及环境搭建.md</h1><p>在前一章概述中，我们讲解了为什么我认为一个Geek需要一个个人技术博客，并且简单的展示了最终效果，在接下来的章节里，我将一步步的介绍如何打造这样的效果。</p><h2 id="1-What-is-Hexo"><a href="#1-What-is-Hexo" class="headerlink" title="1. What is Hexo"></a>1. What is Hexo</h2><blockquote><p>等等，什么是<code>Hexo</code>？</p></blockquote><p>在开始学习前，我们需要<strong>首先</strong>知道我们将要学的东西是什么以及学习它能带来的好处（为什么要学他），这样我们学起来会轻松很多。因为这样做我们首先对需要学的东西搭建了一个大的框架，后续的学习都是在填充它，不断丰满这个框架，并且也有了充足的动力去学习。</p><ul><li>正如<code>Hexo</code>官网上所说：<strong>Hexo是一个快速、简洁且高效的博客框架</strong>。（<del>虽然这个官网充满了不少广告</del>）</li></ul><p>所谓框架，即指已经为我们构建了基本的博客工具和博客结构（框架），我们后续只需要在这个框架上不断的填充（发布自己的文章）、修改（修改<code>Hexo</code>的代码）。因为<code>Hexo</code>开源，因此我们实际上可以针对<code>Hexo</code>进行任意程度的自定义修改，只有你想不到，没有你改不了。非常庆幸的是，<code>Hexo</code>的作者是台湾人，因此他的官方文档的中文支持是非常好的，这也为我们使用<code>Hexo</code>提供了便利。</p><ol><li><code>Hexo</code>是基于<code>Node.js</code>开发的应用（因此我们稍后在安装的时候会安装<code>Node.js</code>的环境）。借助于<code>Node.js</code>，<code>Hexo</code>可以快速的渲染出漂亮的文章</li></ol><blockquote><p><strong>什么是<code>Node.js</code></strong></p><p>说清这个问题，要说的可不少。接触过网络的人都应该知道，前端页面是由<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>三大技术/三件套支持的，其中<code>HTML</code>负责定义网页改在哪个地方显示什么内容，<code>CSS</code>定义哪个地方的哪个内容该以什么样的方式显示，<code>JavaScript</code>则定义当你与这个内容交互的时候会有什么样的效果。</p><p>举个简单例子，在<a href="https://www.baidu.com/">百度</a>的首页，</p><ol><li>为什么百度的Logo会显示在中间，而备案等网站信息显示在底部？—&gt; <code>HTML</code></li><li>为什么百度的背景是白色的，而不是黑色？  —&gt; <code>CSS</code></li><li>为什么鼠标悬停在左上角的更多的时候会弹出来浮窗？  —&gt; <code>JavaScript</code></li></ol><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113031023828.png" alt="百度的首页"></p><p>正是因为有了这三件套，我们的网页变得多姿多彩了起来，有有价值的信息(<code>HTML</code>)、漂亮的页面(<code>CSS</code>)和友好的交互(<code>JavaScript</code>)。</p><p>然而，渐渐地，<strong>本来地位平等的三件套逐渐开始出现区别</strong>。<code>HTML</code>和<code>CSS</code>都是静态的，在编写结束之后用户能看到的内容就已经固定（关于模板稍后再说），当用户访问这个网页，看到的就是其中的内容；然而<code>JavaScript</code>却由于需要处理的用户的操作不同而做不同的处理，例如在百度的页面中，如果我不是悬浮而是右击怎么办？如果我不是悬浮而是掠过怎么办？正是由于需要处理诸多用户导致的多种多样的Event，<code>JavaScript</code>也具有了if-else等编程语言常见的语句。<strong>渐渐地，随着技术的进步，JavaScript需要处理的问题越来越多，在其能力变强的同时，JavaScript也变得越来越像一门编程语言</strong>。</p><p>然而，这个时候的<code>JavaScript</code>还并不能独当一面。因为在最早的网页中，<code>JavaScript</code>、<code>HTML</code>、<code>CSS</code>是绑定的三件套，当用户访问某个网页，服务器会将该网页的三件套发送给用户，然后由<strong>用户的浏览器解析、渲染、执行HTML、CSS、JavaScript三件套</strong>，从而显示网页。因此这个时候的<code>JavaScript</code>是无法脱离浏览器的。我们从另一个角度考虑，由于JavaScript是由浏览器解析执行的，因此其可以看做是一门解释性语言，在执行<code>JavaScript</code>的时候，CPU执行的机器码来自于其<code>解释器</code>——浏览器。</p><p>后来随着，<code>JavaScript</code>的功能越来越强大，简单的在网页中进行交互已经完全发挥其能力了。因此就出现了诸多项目，这些项目独立于传统浏览器，基于浏览器的<code>JavaScript</code>解析器内核（学名：引擎）亦或是自己编写了<code>JavaScript</code>的解析器来执行<code>JavaScript</code>。至此，<code>JavaScript</code>已经能够独立于浏览器被单独执行了，而非必须在浏览器中以网页的形式打开。</p><p>在前面介绍了那么多之后，终于，到了我们的主角，<code>Node.js</code>。大名鼎鼎的<code>Node.js</code>其实就是基于<code>Chrome V8</code> 引擎的 <code>JavaScript</code> 运行时环境。简单的来说，它能够利用<code>Chrome V8</code>引擎来解析、执行<code>JavaScript</code>。<code>Node.js</code>可以粗暴的理解成<code>JavaScript</code>的解释器。基于此，<code>JavaScript</code>在很多方面都很像<code>Python</code>，包括包管理器、解释器等等</p></blockquote><ol><li><code>Hexo</code>利用<code>Markdown</code>来作为源文章，其内置<code>Markdown</code>的渲染引擎，我们只需要书写Markdown，而后通过<code>Hexo</code>就能够生成<code>HTML</code>等前端文件，非常方便</li></ol><blockquote><p>正如下面这张图，这篇文章也是我用Markdown写出来的，在后续部分除了网站搭建以外，还会讲讲如何搭建写作环境，以实现畅快写作</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113110048831.png" alt="我的Markdown写作环境：Typora+腾讯云图床+Dracula主题"></p></blockquote><ol><li>Hexo搭建出的博客网站是一个静态网站，这就意味着单纯<code>Hexo</code>本身只能提供博客的显示、有限的交互，如果需要登录、发表评论这类需要后端程序支持的运用，就需要第三方插件了。如果非常需要这些功能，要么使用<code>WordPress</code>，要么折腾<code>Hexo</code>的插件</li></ol><p>到这里，你应该明白了<code>Hexo</code>是一个基于<code>Node.js</code>的程序，他帮助我们渲染文章、管理文章，通过这个<code>Hexo</code>我们可以快速、低成本的部署自己的博客</p><h2 id="2-Why-is-Hexo"><a href="#2-Why-is-Hexo" class="headerlink" title="2. Why is Hexo"></a>2. Why is Hexo</h2><blockquote><p>Ok，我知道了什么<code>Hexo</code>，可是为什么要用它它？</p></blockquote><p>事实上，选取<code>Hexo</code>作为我们的博客网站框架来帮助我们搭建技术博客有很多好处：</p><ol><li><code>Hexo</code>框架的学习成本非常低，学起来非常快速，命令行几条语句就能够学会。在整个<code>博客搭建过程</code>中，学习<code>Hexo</code>可能只占很少的时间，主要时间在于挑选一个好看的主题并自己修改、添加自己的个人信息</li><li><code>Hexo</code>搭建的博客非常易于管理。<code>Hexo</code>管理的博客本质上是一个文件夹。因为Hexo搭建出的只是静态博客网站，因此不需要后端程序，所以网站所有的资源（<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>）都放在一个文件夹里就行。如果中间配置出问题了，那么直接删掉整个文件夹就行。</li><li><code>Hexo</code>搭建的博客部署、迁移非常方便。同样是由于Hexo管理的博客网站是一个文件夹，因此我们可利用Git<code>来保存</code>、同步你的博客。此外，由于<code>Github</code>和<code>Gitee</code>提供静态网页的<code>Page</code>服务，所以我们其实可以利用<code>Github</code>和<code>Gitee</code>等<code>Git</code>托管网站来托管我们的网站。防止网络攻击这些都由他们帮我们做好了。</li><li><code>Hexo</code>搭建的博客成本非常低。正是因为我们利用<code>Github</code>和<code>Gitee</code>来托管我们的网站，因此我们只需要花钱买域名和图床即可，买公网服务器什么的全部省掉了。</li><li><code>Hexo</code>具有非常多美观的主题。通过这些主题，我们只需要进行配置和有限的修改就能够做出来非常美观的博客网站。</li></ol><blockquote><p><code>Hexo</code>的官网上提供了非常多的主题（<a href="https://hexo.io/themes/">点击查看</a>），截止我写这篇文章的时候一共有348个官方收录的主题。除此以外还有非常多的未被收录的主题，强推我现在正在用的由<code>闪烁之狐</code>制作的<code>Matery</code>主题，后面也会讲解如何配置<code>Matery</code>主题，这是Matery主题的<a href="http://blinkfox.com/">展示网站</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113112326777.png" alt="Hexo官网收录的主题"></p></blockquote><ol><li>……（暂时只想到这几个点）</li></ol><h2 id="3-Hexo环境搭建"><a href="#3-Hexo环境搭建" class="headerlink" title="3. Hexo环境搭建"></a>3. Hexo环境搭建</h2><blockquote><p>开发第一步：搭建环境</p></blockquote><p>注意，由于我本人长期使用<code>Debian/Ubuntu</code>来做开发，因此以下教程都将是基于<code>Ubuntu</code>编写的教程。如果你是其他<code>Linux</code>发行版用户，适度修改即可；如果你是<code>Windows</code>用户，那么你还需要配置不少东西，知乎、简书上你还得查查。</p><p>下面我们就将一步步搭建Hexo环境出来</p><h3 id="1-安装Node-js环境"><a href="#1-安装Node-js环境" class="headerlink" title="1. 安装Node.js环境"></a>1. 安装Node.js环境</h3><p>前面说道，<code>Hexo</code>是基于<code>Node.js</code>开发的程序，因此其运行就需要<code>Node.js</code>，所以我们第一步就是安装<code>Node.js</code></p><blockquote><p>注意：官网上说明，<code>Hexo</code>需要的<code>Node.js</code>的版本不低于<strong>10.13</strong>，强烈建议<code>Node.js</code><strong>12.0</strong>以上的版本</p></blockquote><p>我们首先用<code>apt</code>查一下Ubuntu的仓库里的nodejs的版本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~$ <span class="token function">sudo</span> apt search nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113124733292.png" alt="apt搜索nodejs的结果"></p><p>不难看出来，<code>apt</code>仓库里的<code>nodejs</code>的版本过低，因此我们需要自己从<code>nodejs</code>官网上下载新版本的<code>nodejs</code>，<a href="https://nodejs.org/zh-cn/">官网传送门</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113124918179.png" alt="Node.js的官网"></p><p>在我写这篇文章的时候最新版是16.13，由于遵循Linux的传统，双数版本是LTS（Long Time Supported）版本，而单数版本都是尝鲜（Beta）版本，所以选择<strong>稳定版即可</strong></p><p>下载之后解压会得到一个文件夹，这个文件夹里<code>bin</code>目录放的就是官方替我们已经编译好了的二进制可执行文件，可以看到除了node，别的都是软连接</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ tree -L 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意，我这里是已经安装过了<code>Node.js</code>，正常情况下是没有<code>cnpm</code>的，稍后会安装<code>cnpm</code></p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113125500195.png" alt="解压之后的文件夹"></p><p>由于后续需要在命令行中调用<code>Node.js</code>，因此还要把这个<code>bin</code>文件的路径加入到<code>Shell</code>搜索可执行文件路径的<code>PATH</code>环境变量中，这里图方便直接在.<code>bashrc</code>中添加了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ vim ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113125903583.png" alt="添加了Node.js的PATH"></p><p>这样未来在命令行就可以正常的调用<code>node.js</code>和附带的<code>npm</code>了，测试一波</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113130048060.png" alt="测试Node.js"></p><p>OK，装完了<code>Node.js</code>，下一步</p><h3 id="2-安装cnpm"><a href="#2-安装cnpm" class="headerlink" title="2. 安装cnpm"></a>2. 安装cnpm</h3><p>前面讲到，Node.js中利用了Chrome V8引擎从而实现了JavaScript的运行时环境，从而做到了类似于解释器的效果。做过<code>Python</code>的人应该都会知道<code>pip</code>和<code>conda</code>，他们都是<code>Python</code>的包管理器（当然conda还可以管理环境）。通过<code>pip install xxx</code>或者<code>conda install xxx</code>就能安装Python的第三方库。</p><p><code>Node.js</code>也提供了类似的包管理工具，即<code>npm（Node.js Package Management）</code>，通过npm我们就能够安装<code>Node.js</code>的第三方库。</p><p>但是这些包管理工具的共性就是下载的这些库都是在包管理工具官网上维护的包，我们使用<code>xxx install xxx</code>的时候，会去<code>xxx</code>的包管理网站上搜索<code>xxx</code>包，然后下载。问题的关键就出在了下载这一步，由于这些包管理网站服务器都在国外，因此国内下载就会很慢。为此，我们通过换源来解决，即指定去国内的包管理网站上下载。在<code>pip</code>中我们可以指定<code>-i</code>参数，从而指定去清华源或者中科大源下载<code>Python</code>第三方包。而<code>npm</code>我们同样也可以指定<code>--registry</code>参数，从而指定国内的源（一般都是淘宝源）。</p><p>但是每次都使用<code>--registry</code>参数有点蠢，我们直接使用淘宝做好的<code>cnpm</code>包管理工具就行。<code>cnpm</code>和<code>npm</code>在作用上是一样的，不过对国内用户做了很不错的优化。</p><p>我们首先通过npm指定<code>--registry</code>参数来安装<code>cnpm</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ <span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span><span class="token string">"https://registry.npm.taobao.org"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍等片刻即可，警告是已经安装的别的包报的错，都后面没啥影响，因为我已经安装过了cnpm，所以下面的截图和你的可能不一样</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113131609169.png" alt="安装cnpm"></p><p>安装之后检查下安装是否成功，当然由于路径等环境不一样，输出结果也不太一样，但是能够正常输出就表示安装对了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ cnpm --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113131849887.png" alt="检查cnpm是否安装成功"></p><p>OK，下一步安装Git</p><h3 id="3-安装git"><a href="#3-安装git" class="headerlink" title="3. 安装git"></a>3. 安装git</h3><p>由于<code>Hexo</code>内置了博客的同步、部署等功能，因此<code>Hexo</code>依赖于<code>git</code>，所以我们首先需要安装<code>git</code></p><p>安装git就简单了，直接<code>apt</code>安装即可，同样由于我已经安装过了，所以输出会不一样</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ <span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113132146054.png" alt="apt安装git"></p><p>同样，查看下<code>git</code>的版本确认安装成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ <span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113132257442.png" alt="确认git安装成功"></p><h3 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h3><p>在前面所有必备的环境安装成功后，下面将安装<code>Hexo</code></p><p>前面由于已经安装了<code>cnpm</code>，因此我们直接使用<code>cnpm</code>来安装<code>Hexo</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ cnpm <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍等片刻就安装好了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113132546043.png" alt="安装hexo"></p><p>为了后续我们能够直接在命令行调用<code>hexo</code>的命令，我们把<code>hexo</code>的可执行文件添加到<code>PATH</code>中去</p><p>注意，<code>npm</code>和<code>cnpm</code>的工作原理都是把下载的包放到<code>node.js</code>所在的根目录的<code>lib</code>中，和<code>pip</code>是异曲同工之秒，我们打开之前node.js在的文件夹就能看到</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113133034708.png" alt="hexo的安装位置"></p><p>同样用<code>vim</code>编辑<code>.bashrc</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113133331507.png" alt="添加hexo可执行文件"></p><p>最后命令行查看下hexo的版本确认成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ hexo --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113133455333.png" alt="确认hexo安装成功"></p><p>至此，我们已经成功搭建了Hexo的环境。</p><p>本章结束~</p><p>本章我们首先讲解了什么是<code>hexo</code>，然后讲解了为什么我们要使用<code>hexo</code>，最后讲解了如何安装<code>hexo</code>。</p><p>下一节预告：<code>Hexo使用以及配置</code></p><p>码字不易，4000字，欢迎打赏~，一起为开源事业做贡献~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人技术博客搭建 —— Part 0 概述</title>
      <link href="/2021/11/12/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-0-gai-shu/"/>
      <url>/2021/11/12/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-0-gai-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列文章面向前端小白，希望以尽量简单而又不啰嗦的语言介绍如何搭建<code>基于Hexo的个人技术博客</code></p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211112180102412.png" alt=""></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Part-0-概述"><a href="#基于Hexo的个人技术博客搭建-——-Part-0-概述" class="headerlink" title="基于Hexo的个人技术博客搭建 —— Part 0 概述"></a>基于Hexo的个人技术博客搭建 —— Part 0 概述</h1><p>作为一个热爱开源的技术爱好者，我热爱学习新的技术、也热衷分享自己掌握的技术。然而分享却并非易事，想要将你的开源技术以个人技术博客的形式分享到互联网上需要有以下的诸多步骤：</p><ol><li>掌握HTML、CSS、JavaScript、Vue.js、Node.js等前端技术，至少能够写出来一个静态网站；或者在静态网页的基础上掌握Nginx、Apache等等后端技术，为前端提供登陆等功能以实现一个动态网站。</li><li>购买具有公网IP的服务器以运行你的网站，使得任何想要访问你网站的人都能够通过公网上的服务器来访问你的网站。</li><li>购买一个域名并为其添加DNS解析、安装SSL证书</li><li>Optional：中国域名<strong>xxxx.xxxx.cn</strong>下的网站需要进行备案</li><li>配置你的服务器以避免来自公网上的攻击</li><li>……</li></ol><p>完成了以上诸多步骤，你的技术网站才能够被其他人访问，别人才能够正常的来阅读你的技术博客。<strong>如此繁琐的程序，往往在前几步就吓退了不少人</strong>。也正是因为如此，就出现了不少帮助我们分享技术的工具，例如：帮助我们快速搭建博客而不需要自己掌握前端技术的<code>WordPress</code>、帮助我们维护文章的<code>CSDN</code>、<code>知乎</code>、<code>简书</code>等等；然而这些工具，也有他们的缺点</p><ul><li><code>WordPress</code>：尽管<code>WordPress</code>使得我们可以可视化的建立、管理前端页面。但是首先，上面的流程中诸多步骤仍然需要自己来完成，购买公网服务器、购买域名等等都是不小的开销；其次<code>WordPress</code>类似于<code>Vscode</code>，具有一个强大的插件系统，即软件本身只具有一定的功能，更多的功能需要靠插件来实现。然而和<code>Vscode</code>不同的是<code>WordPress</code>上好用的插件是要收费的，而且价格不菲（<del>忽略掉万能的淘宝</del>）</li><li><code>CSDN</code>、<code>简书</code>、<code>博客园</code>：尽管类似于<code>CSDN</code>、<code>简书</code>、<code>博客园</code>等这类博客网站已经帮助我们完成了网站安全防护、搜索引擎优化、文章编辑发布和管理等功能，他们的问题存在于盗帖实在太过于严重，很多时候搜索自己需要解决的问题，结果搜出来的全都是一模一样的、爬虫复制粘贴的文章，对解决问题毫无帮助，自己的文章和这些垃圾文章在一起，实在是于心不忍；其次，作为<strong>一名优秀的程序员，拥有自己的技术博客网站将会极大地帮助自己的未来，无论是求职也好亦或是求学……</strong></li></ul><p>因此自己搭建一个博客就非常有必要了。</p><p>本系列最终将通过一系列文章，来帮助你低成本（<strong>可能也就几块钱</strong>）的构建出属于你自己的、美观的个人技术博客</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211112180102412.png" alt="最终效果展示"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021-Spring-hw2-Phoneme-Classiﬁcation</title>
      <link href="/2021/02/01/li-hong-yi-ml2021-spring-hw2-phoneme-classification-md/"/>
      <url>/2021/02/01/li-hong-yi-ml2021-spring-hw2-phoneme-classification-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解李宏毅ML2021 Spring的Homework2： Phoneme Classification</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213151600181.png" alt="作业二：Phoneme Classification"></p><h1 id="李宏毅ML2021-Spring-hw2：-Phoneme-Classification"><a href="#李宏毅ML2021-Spring-hw2：-Phoneme-Classification" class="headerlink" title="李宏毅ML2021-Spring-hw2： Phoneme Classification"></a>李宏毅ML2021-Spring-hw2： Phoneme Classification</h1><p>比较汗颜，上一个作业是在两个月之前了。这段时间发生了挺多的事情：一个是要期末考试了，所以忙于复习；西安出现了疫情封城了一个月；新年回老家过春节；写课程的笔记……</p><p>所以就把第二个作业的笔记耽误了，不过现在继续补上</p><h2 id="1-Homework-Objective"><a href="#1-Homework-Objective" class="headerlink" title="1. Homework Objective"></a>1. Homework Objective</h2><p>作业二的目的在于：</p><ul><li>Finish a classification task.</li><li>进一步熟悉基本的DNN训练技术：调参、特征选择、正则化</li><li>进一步熟悉Pytorch的使用</li></ul><h2 id="2-Task-Introduction"><a href="#2-Task-Introduction" class="headerlink" title="2. Task Introduction"></a>2. Task Introduction</h2><p>本次任务要求我们根据一段语音序列，来对一个Phoneme（音位）进行分类。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213152948374.png" alt="Phoneme Classification"></p><h3 id="1-What-is-Phoneme"><a href="#1-What-is-Phoneme" class="headerlink" title="1. What is Phoneme?"></a>1. What is Phoneme?</h3><p>下面是<strong>百度百科</strong>的介绍</p><blockquote><p><strong>From Baidubaike</strong>：</p><p>音位（phoneme），是人类某一种语言中能够区别意义的最小语音单位，是音位学分析的基础概念。每种语言都有一套自己的音位系统。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213152701223.png" alt="百度百科的介绍"></p></blockquote><p>下面是Wikipedia的介绍：</p><blockquote><p><strong>From Wikipedia</strong>:</p><p>音位（英语：Phoneme）又译音素，是人类语言中能够区别意义的最小声音单位，是音位学分析的基础概念。一个字或词可由一至数个音节组成，一个音节可由一至数个“音段”（元音、辅音等）组成。音位与音段很类似，然而音位的基本定义是要能区分语义，如果两个声音所代表是同一个词汇、同样的意义，则异音可被视为同一个音位；反过来说，一个词的任何一个音位若被换成别的，那么它就不再是原来的那个词，意义也会随之改变。有意义的词都可由音位组成，然而代换其中任何音位却不能保证产生有意义的词，也有可能变成无意义的一串音。每个语言都有自己的一组音位，这也就是这个语言的语音系统，音位可用来研究某个特定语言中如何将音组合成词。音位有时被译为“音素”，然而音素一词在中文里的用法较为混乱，不一定都是指音位。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213152837082.png" alt="维基百科的介绍"></p></blockquote><p>简单的来说，Phoneme就是发音中的最小单元。例如下面这张图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213153022432.png" alt="Phoneme Example"></p><p>由于不同的语言有不同的Phoneme System，而本次作业是针对英语进行Phoneme Classification。</p><p>英语中Phoneme有最基本的39个Phoneme Unit，所以我们这次的任务是一个39 class 的 Classification任务</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213153509688.png" alt="Phoneme of English"></p><h3 id="2-Data-Description"><a href="#2-Data-Description" class="headerlink" title="2. Data Description"></a>2. Data Description</h3><p>本次作业的所有的数据都是从 <code>TIMIT Acoustic-Phonetic Continuous Speech Corpus</code>，这个语音的数据集中抽取来的。数据集的<a href="https://catalog.ldc.upenn.edu/LDC93S1">官网</a>为：<a href="https://catalog.ldc.upenn.edu/LDC93S1">https://catalog.ldc.upenn.edu/LDC93S1</a></p><p>然而声音在计算机中的表示是通过采集设备，对连续的声音数据进行离散化，以位深、采样率等手段转换成离散的数据存储在计算机中。因此我们直接从可以播放的声音信号直接去做分类对我们来说太难了一点。所以助教首先对数据进行了Preprocess，将声音处理成Vector，从而使得我们可以进行训练。</p><h4 id="1-Data-Preprocessing"><a href="#1-Data-Preprocessing" class="headerlink" title="1. Data Preprocessing"></a>1. Data Preprocessing</h4><p>给定一段声音信号，助教通过移动窗口(Sliding Window)的方式将他们转换为向量。</p><p>具体做法是给定一段语音，假设长度为1.025秒。那么这一秒的语音一共是1025ms，那么取window的长度为25ms，window滑动的step是10ms，那么window从声音的最左端滑动到最右端，一共有(1025-25) / 10 = 100 个Window（注意最后延伸了25帧）。</p><p>100个window通过一定的方法（下面会讲）进行处理，就将每个windows的10ms的语音波形信号转换成了一个具有d个dimension的向量。因此，通过Sliding Window的方式就把一段语音转换为一堆向量。</p><p>具体来说，把一个window转换为一个vector的算法有很多，例如助教图里举的MFCC、filter bank等算法。而不同的算法转换出来的向量的dimension是不同的，例如MFCC转换出来的向量有39个维度，而filter bank转换出来的向量有80个维度。</p><p>助教采用的算法是MFCC，因此我们最后得到的一段语音（例如一个单词）是100 * 39的一个矩阵，或者说是100个39维的列向量拼在一起。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213154150184.png" alt="Sliding Windows"></p><h4 id="2-Mel-Frequency-Cepstral-1Coefﬁcients-MFCC"><a href="#2-Mel-Frequency-Cepstral-1Coefﬁcients-MFCC" class="headerlink" title="2. Mel Frequency Cepstral 1Coefﬁcients (MFCC)"></a>2. Mel Frequency Cepstral 1Coefﬁcients (MFCC)</h4><p>具体的MFCC的计算方式如下，首先对于波信号的声音信号通过离散傅里叶变换（Discrete Furiour Transformation）把时域信号转变为频域信号，而后通过filter bank得到这段声音在不同频率上的特征。</p><p>最后对这些特征取log之后计算DCT，就得到了一段声音信号对应的MFCC向量。</p><p>关于MFCC，可以参考<a href="http://ocw.aca.ntu.edu.tw/ntu-ocw/ocw/cou/104S204">李琳山老师讲的课</a>：<a href="http://ocw.aca.ntu.edu.tw/ntu-ocw/ocw/cou/104S204">http://ocw.aca.ntu.edu.tw/ntu-ocw/ocw/cou/104S204</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213155309327.png" alt="MFCC的处理流程"></p><h4 id="3-More-Information-About-the-Data"><a href="#3-More-Information-About-the-Data" class="headerlink" title="3. More Information About the Data"></a>3. More Information About the Data</h4><p>我们上面说，我们在进行Classification的对象是一个Phoneme，即我们现在要对一个长度为39维的vector进行39分类。</p><p>然而在真实情况下，Phoneme并不是单独存在的，而是和前后的Phoneme在一起，构成一个单词。所以，助教给的一个training example中的feature除了当前的Phoneme以外，还会有这个Phoneme的前五个和后五个Phoneme，一共11个Phoneme在一起，构成一个input。然后把这个matrix按列flatten成一个vector，就成了我们使用numpy解码之后的得到的input</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220201152213407.png" alt="我们最终得到的一个input"></p><p>所以，对数据在进入网络前进行后处理可能会有所帮助。</p><p>而且，因为已经告诉了大家这个数据集是怎样得到的，因此自己复现出来上面的步骤然后找到测试数据的label是严格禁止的，也不能手动听声音或者用其他的方法得到phoneme的label</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220201152917063.png" alt="More information about the data"></p><h3 id="3-Dataset-amp-Data-Format"><a href="#3-Dataset-amp-Data-Format" class="headerlink" title="3. Dataset &amp; Data Format"></a>3. Dataset &amp; Data Format</h3><p>本次题目所使用的dataset是来自于一个叫做<a href="https://catalog.ldc.upenn.edu/LDC93S1">TIMIT</a>的数据集，在语音识别领域里面称为Corpus。它是英文的一个Corpus。</p><p>助教已经对原始数据集进行了处理，得到了我们上面说的每一个input都是11*39长度的向量。我们的数据集最后是三个文件，分别是：</p><ul><li>train_11.npy：训练数据的feature</li><li>train_label_11.npy：训练数据的label</li><li>test_11.npy：测试数据的feature</li></ul><p>此外我们也不能使用额外的数据</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220201154529517.png" alt="Dataset &amp; Data Format"></p><h3 id="4-Baselines"><a href="#4-Baselines" class="headerlink" title="4. Baselines"></a>4. Baselines</h3><p>助教在Colab上提供了Sample Code，我们直接跑就可以过Baseline。</p><p>如果要过Strong Baseline的话，助教给了下面的几个tip：</p><ul><li>改变网络的架构</li><li>训练阶段调参：Batchsize、Optimizer、Learning Rate、epoch……</li><li>一些Tricks：Batch Normalization、Dropout、regularization</li></ul><p>因为这次是分类任务，因此计算分数就是按照准确率来给分，所以越大越好</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220201155131992.png" alt="Baselines"></p><h2 id="3-My-Solution"><a href="#3-My-Solution" class="headerlink" title="3. My Solution"></a>3. My Solution</h2><p>下面是我关于本次任务的理解和更新</p><h3 id="1-Thoughs"><a href="#1-Thoughs" class="headerlink" title="1. Thoughs"></a>1. Thoughs</h3><p>这个是一个classification的任务，最后的输出是一个类别的one-hot向量，所以网络最后一层输出是和类别数量相同长度的一个向量。</p><p>然后因为要归一化，或者说引入概率（虽然只有Sigmoid才是从概率推到得到的），对最后的输出使用softmax，使得最终类别的概率向量的总和为1，而每个Dimension都小于1。</p><p>然后从所有的类别中选取出来（伪）概率最大的类（argmax）别作为网络最终输出的类别。</p><p>需要额外注意的是，Cross-Entropy Loss中已经帮我们集成了Softmax来算，因此训练的时候我们没有必要自己算softmax，但是在生成submission.csv的时候还是需要的自己算的。</p><p>除了这个基础的问题以外，还可以试试Self-Attention来提升性能。</p><h3 id="2-Updates"><a href="#2-Updates" class="headerlink" title="2. Updates"></a>2. Updates</h3><h4 id="1-2022-2-5：完成了基本的框架-triangular-flag-on-post"><a href="#1-2022-2-5：完成了基本的框架-triangular-flag-on-post" class="headerlink" title="1. 2022.2.5：完成了基本的框架:triangular_flag_on_post:"></a>1. 2022.2.5：完成了基本的框架<span class="github-emoji"><span>🚩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><ul><li><strong>进展</strong>：完成了基本的框架的搭建，开始了Baseline的训练。完成的框架包括训练代码，网络的定义，dataset和得到提交文件的代码；这次使用了TensorBoard来监控训练过程，避免了自己用Matplotlib要花费大量的时间来写和训练无关的可视化代码</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20220205174140429.png" alt="用TensorBoard监控训练"></p>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Homeworks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
