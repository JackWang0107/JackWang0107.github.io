<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>李宏毅ML2021-Spring-hw1：Covid19 Cases Prediction</title>
      <link href="/2021/12/11/li-hong-yi-ml2021-spring-hw1-covid19-cases-prediction-md/"/>
      <url>/2021/12/11/li-hong-yi-ml2021-spring-hw1-covid19-cases-prediction-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解李宏毅ML2021 Spring的Homework1： Covid19 Cases Prediction</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207150639649.png" alt="作业一：COVID-19 Cases Prediction"></p><h1 id="李宏毅ML2021-Spring-hw1：Covid19-Cases-Prediction"><a href="#李宏毅ML2021-Spring-hw1：Covid19-Cases-Prediction" class="headerlink" title="李宏毅ML2021-Spring-hw1：Covid19 Cases Prediction"></a>李宏毅ML2021-Spring-hw1：Covid19 Cases Prediction</h1><h2 id="1-Homework-Objectives"><a href="#1-Homework-Objectives" class="headerlink" title="1. Homework Objectives"></a>1. Homework Objectives</h2><p>作业一的目的在于：</p><ul><li>明白如何使用DNN解决Regression问题</li><li>掌握基本的DNN训练技术：调参、特征选择、正则化</li><li>熟悉Pytorch的使用</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207151013750.png" alt="Objectives of Homework1"></p><h2 id="2-Task-Description"><a href="#2-Task-Description" class="headerlink" title="2. Task Description"></a>2. Task Description</h2><p>本次任务要求我们对每日的新冠肺炎的确诊人数进行预测。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207151406811.png" alt="Task Description"></p><h3 id="1-Survey-Methods"><a href="#1-Survey-Methods" class="headerlink" title="1. Survey Methods"></a>1. Survey Methods</h3><p>数据集的来源是CMU的研究员在社交媒体上发布调查问卷，问卷的内容包括了心理健康状态、流感类似症状疾病患者人数。而后根据受访者居住的地区来监测美国所有州的所有城市的情况。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211211163552345.png" alt="Survey Method"></p><h3 id="2-Data-Inspection"><a href="#2-Data-Inspection" class="headerlink" title="2. Data Inspection"></a>2. Data Inspection</h3><p>本次任务的数据集是csv文件</p><p>在训练数据中，训练数据的csv文件中每一行就是一个example。example的前40维是对于城市的one-hot编码，然后每一个样本会给出来三天的调查情况。</p><p>其中，<strong>前两天的确诊人数是我们的training的一个feature，而第三天的确诊人数则是我们需要预测的label</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207151633099.png" alt="Training Data Inspection"></p><p>而对于测试数据，则只有前面的feature，没有最后的label，最后我们需要将生成的label以csv文件的形式提交</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211211164704231.png" alt="Testing Data Inspection"></p><h3 id="3-Evaluation-Metrics"><a href="#3-Evaluation-Metrics" class="headerlink" title="3. Evaluation Metrics"></a>3. Evaluation Metrics</h3><p>针对本次任务，使用的衡量标准是Rooted Mean Square Error（RMSE），所以最后在kaggle上得到的分数是越低越好。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207152032106.png" alt="Evaluation Metric"></p><h3 id="4-Baselines"><a href="#4-Baselines" class="headerlink" title="4. Baselines"></a>4. Baselines</h3><p>这次任务有三个BaseLine</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207151811659.png" alt="Task Baseline"></p><h2 id="3-My-Solution"><a href="#3-My-Solution" class="headerlink" title="3. My Solution"></a>3. My Solution</h2><p>下面是我关于本次任务的理解和更新</p><h3 id="1-Thoughs"><a href="#1-Thoughs" class="headerlink" title="1. Thoughs"></a>1. Thoughs</h3><p>这个是一个regression的任务，最后的输出是一个数字，所以网络最后一层out_feature是1即可</p><p>然后这些特征之间有可能有一些特征是和确诊人数的确相关的，有一些是和确诊人数完全无关的，甚至是random的，所以这一些特征可能会影响最后的判断，所以后面需要进行特征选择或者让模型自己选出来重要的特征，然后给重要的特征大的权重。类似于attention</p><p>然后可以试试generative的方法，让模型在训练一段时间之后自己生成，即训练判断模型的基础上再生成一个生成模型。生成模型用GAN去生成数据，然后让判断模型去学习。</p><p>最后可以试试不确定性的方法。</p><h3 id="2-Updates"><a href="#2-Updates" class="headerlink" title="2. Updates"></a>2. Updates</h3><h4 id="2021-12-11：完成了基本框架"><a href="#2021-12-11：完成了基本框架" class="headerlink" title="2021-12-11：完成了基本框架"></a>2021-12-11：完成了基本框架</h4><ul><li><strong>进展</strong>：完成了基本的框架的搭建，明天开始训练。完成的框架包括训练代码，网络的定义，dataset和得到提交文件的代码</li></ul><pre class="line-numbers language-shell"><code class="language-shell">(torch) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/deeplearning/hw1_1-regression$ tree src/src/├── dataset.py├── gen_submission.py├── networks.py├── pathconfig.py└── train.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2021-12-12-update1：训练时loss不下降-cry"><a href="#2021-12-12-update1：训练时loss不下降-cry" class="headerlink" title="2021-12-12 update1：训练时loss不下降:cry:"></a>2021-12-12 update1：训练时loss不下降<span class="github-emoji"><span>😢</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><ul><li><p><strong>问题</strong>：开始训练，但是训练的时候遇到了一些问题，训练的时候loss一直没有下降，例如下面这张图<img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212115234546.png" alt="loss没有下降"></p></li><li><p>解决办法：最后经过检查，是batchsize的问题，dataloader的忘记设置batchsize和shuffle了，所以出了问题，这个数据集里单个样本随机波动太大，不像图像是比较通用的，随机波动小，单个example也能学到东西。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212115505406.png" alt="出问题的代码"><br>最后修改掉之后就可以正常训练了，以后一定要注意小batchsize带来的小样本梯度随机波动问题<br><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212115710477.png" alt="修改之后的代码"></p><p>最后可以正常训练<img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212115901900.png" alt="正常开始训练"></p><p>最后在379个epoch时候停下来了，提交一发<img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212120026808.png" alt="最后的训练结果"></p></li></ul><h4 id="2021-12-12-update2-提交分数起飞-boom"><a href="#2021-12-12-update2-提交分数起飞-boom" class="headerlink" title="2021-12-12 update2: 提交分数起飞:boom:"></a>2021-12-12 update2: 提交分数起飞<span class="github-emoji"><span>💥</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><ul><li><p><strong>问题</strong>：接上一个问题，完成了之后提交结果，分数很烂</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212140536683.png" alt="分数很低"></p></li><li><p><strong>解决办法</strong>：最后经过检查，是网络在训练的时候，对训练数据的feature和label都进行了正则化，使其服从均值为0，标准差为1的分布，这样在训练过程中的梯度的分布也会更加均匀。但是这样做的问题就是网络预测的进过标准化之后的label，所以使用测试数据生成结果的时候得到的也是标准化之后的结果，需要加上label的均值和标准差，但是由于是测试数据，所以没有标准差和均值，而<strong>测试数据和训练数据不是独立同分布的</strong>。所以不能直接加上测试数据的标准差和方差</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212143542126.png" alt="修改前的错误代码，对label也做了标准化"></p><p>修改之后不给label做标准化，再训练一次然后提交</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212151141477.png" alt="修改后不对label做标准化"></p><p>再进行一次训练</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212151509152.png" alt="修改后的训练"></p><p>最后提交的结果，相比于一开始有了很大的进步</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212151837238.png" alt="提交结果"></p></li></ul><h4 id="2021-12-12-update3-Simple-baseline-triangular-flag-on-post"><a href="#2021-12-12-update3-Simple-baseline-triangular-flag-on-post" class="headerlink" title="2021-12-12 update3:  Simple baseline:triangular_flag_on_post:"></a>2021-12-12 update3:  Simple baseline<span class="github-emoji"><span>🚩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><p>大胜利<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><ul><li><p><strong>思路</strong>：尝试了一下仅仅使用前两天的确诊人数作为feature来训练，最后提升巨大，由于我在代码里预留了dim2use，所以直接加上前两的确诊人数的feature和州，一共42个dimension再来一次</p><p><strong>所以前面的猜想确实成立，即存在一些和确诊人数完全无关的特征，这些特征会极大地影响模型的表现</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212155208705.png" alt="加上前两天的确诊人数"></p></li><li><p><strong>效果</strong>：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212155232450.png" alt="巨大的进步"></p></li></ul><h4 id="2021-12-12-update4-特征选择的思考-Medium-Baseline-triangular-flag-on-post"><a href="#2021-12-12-update4-特征选择的思考-Medium-Baseline-triangular-flag-on-post" class="headerlink" title="2021-12-12 update4: 特征选择的思考 Medium Baseline :triangular_flag_on_post:"></a>2021-12-12 update4: 特征选择的思考 Medium Baseline <span class="github-emoji"><span>🚩</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><ul><li><p><strong>想法</strong>：因为在前面使用了州和前两天，得到的分数非常的高，所以利用了特征选择的手段，试了一下不同的特征，得到的结果如下</p><ul><li><p><strong>使用了州和前两天</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212163655980.png" alt="使用州和前两天"></p></li><li><p><strong>使用了得分前15的特征</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212163737608.png" alt="得分前15的特征"></p></li><li><p><strong>使用了得分大于500的特征</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212163814031.png" alt="得分大于500的特征"></p></li><li><p><strong>只使用前两天得病的人数</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212163858827.png" alt="只使用前两天得病的人数"></p></li></ul><p>而特征选择时候前90个特征的得分如下，可以看到，前两个特征（前两天确诊的人数）的分数是远远大于剩下的特征，也就难怪训练出来最后一个的得分最高</p><pre class="line-numbers language-shell"><code class="language-shell">                    Specs          Score76       tested_positive.1  148069.65827858         tested_positive   69603.87259143            hh_cmnty_cli    9235.49209461          hh_cmnty_cli.1    9209.01955879          hh_cmnty_cli.2    9097.37517244          nohh_cmnty_cli    8395.42130062        nohh_cmnty_cli.1    8343.25592780        nohh_cmnty_cli.2    8208.17643541                     cli    6388.90684959                   cli.1    6374.54800077                   cli.2    6250.00870242                     ili    5998.92288060                   ili.1    5937.58857678                   ili.2    5796.94767293      worried_finances.2     833.61319175      worried_finances.1     811.91646057        worried_finances     788.07693188        public_transit.2     686.73653970        public_transit.1     681.56290252          public_transit     678.83478984                  shop.2     561.76405166                  shop.1     553.87672748                    shop     546.5533950                       id     328.68231192    worried_become_ill.2     208.12264718                      MA     205.67260374    worried_become_ill.1     203.47307256      worried_become_ill     199.19546186            spent_time.2     193.92668968            spent_time.1     188.76375150              spent_time     183.14522921                      MS     164.45080730                      OK     160.7761357                       CT     146.60954017                      MD     123.5469725                       CA     122.36156229                      OH      92.60376324                      NV      86.48058110                      ID      85.60427553                 anxious      83.53223222                      MO      80.57186136                      UT      76.09237971               anxious.1      75.0735223                       AZ      72.80367685            restaurant.2      71.04775467            restaurant.1      70.08674323                      NE      69.08267649              restaurant      69.02759335                      TX      68.60934789               anxious.2      64.5877442                       AK      64.39624232                      PA      63.0960936                       CO      47.44609615                      KY      43.15197213                      IA      42.0966008                       FL      39.97677827                      NY      38.26168438                      WA      35.19877531                      OR      30.42481982  travel_outside_state.2      29.42480819                      MI      27.61129464  travel_outside_state.1      27.47727446    travel_outside_state      25.78825114                      KS      18.69999455           felt_isolated      18.34572833                      RI      18.22380073         felt_isolated.1      18.05009891         felt_isolated.2      17.89572034                      SC      15.17410045            wearing_mask      13.10686263          wearing_mask.1      11.66081520                      MN      11.13468587           large_event.2      10.9953231                       AL      10.91595281          wearing_mask.2      10.42354439                      WV       9.40700369           large_event.1       9.13166925                      NJ       8.63782437                      VA       8.32844951             large_event       7.4492279                       GA       7.30044783     work_outside_home.2       4.17440465     work_outside_home.1       3.88715654               depressed       3.83787911                      IL       3.83412347       work_outside_home       3.28351372             depressed.1       2.96797128                      NC       2.8773594                       AR       2.54622390             depressed.2       2.362492Int64Index([76, 58, 43, 61, 79, 44, 62, 80, 41, 59, 77, 42, 60, 78, 93, 75, 57,            88, 70, 52, 84, 66, 48,  0, 92, 18, 74, 56, 86, 68, 50, 21, 30,  7,            17,  5, 29, 24, 10, 53, 22, 36, 71,  3, 85, 67, 23, 49, 35, 89,  2,            32,  6, 15, 13,  8, 27, 38, 31, 82, 19, 64, 46, 14, 55, 33, 73, 91,            34, 45, 63, 20, 87,  1, 81, 39, 69, 25, 37, 51,  9, 83, 65, 54, 11,            47, 72, 28,  4, 90],           dtype='int64')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2021-12-12-update5-大进步-tada"><a href="#2021-12-12-update5-大进步-tada" class="headerlink" title="2021-12-12 update5: 大进步:tada:"></a>2021-12-12 update5: 大进步<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><ul><li><p><strong>思路</strong>：因为前面实验了一下使用不同的特征，发现只有前两个特征，所以我感觉特征选择可能走到了头，需要新的思路来进一步提升模型的表现。因此从模型本身下手，更换了网络模型，从助教的baseline换成了残差模型，同样还是只有两个特征</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212170623668.png" alt="网络模型"></p></li><li><p><strong>效果</strong>：最后的效果的提升还是巨大的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212170744439.png" alt="image-20211212170744439"></p></li></ul><h4 id="2021-12-12-update6-关于优化器"><a href="#2021-12-12-update6-关于优化器" class="headerlink" title="2021-12-12 update6: 关于优化器"></a>2021-12-12 update6: 关于优化器</h4><ul><li><p><strong>思路</strong>：前面改了一下网络结构，使得精度有了不错的提升。我在特征选择后面又想到了一个思路，就是换一个优化器，所以在实验完网络结构之后我又实验了一下优化器，看看优化器会不会对训练又帮助，所以把SGD换成了AdamW，AdamW比Adam少了对bias的求导，所以方向避免出错。</p><p>换优化器其实我也是实验了不少次，因为使用SGD的时候，不管超参数怎么变，总会在51个epoch的时候出现一次最优值。虽然有的超参数经过比较长的epoch之后会有新的最优值，但是51这个epoch常常会出现，不管我怎么变超参数。</p><p>所以我怀疑51个epoch的时候对于SGD优化器，已经到了一个比较wide的谷底，这个时候很难跳出去，所以有的时候会直接在这里停下来。</p><p>作为弥补我换了一个优化器，换成了AdamW，因为AdamW跳出saddle point的能力要强不少</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212173038313.png" alt="一些训练轮次"></p></li><li><p><strong>结果</strong>：更换优化器之后，训练轮次要长很多，而且最初的十多个epoch会有震荡，还在loss 空间的高处</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/train_log.png" alt="AdamW的训练过程"></p><p>上面的图其实看不太出来，因为横轴30000多个step，但是SGD的训练图在开始部分是直线下冲的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/train_log1.png" alt="train_log1"></p><p>最后的结果是成功冲进了1分以内的误差</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212173834843.png" alt="1分以内"></p></li></ul><h4 id="2012-12-12-update7-关于正则化"><a href="#2012-12-12-update7-关于正则化" class="headerlink" title="2012-12-12 update7: 关于正则化"></a>2012-12-12 update7: 关于正则化</h4><ul><li><p><strong>思路</strong>：前面在想的时候其实还想到了第三个思路，就是在网络中加入正则化方法，一个是加入dropout，一个是加入batch normalization，因为目前这两个是公认的不错的的正则化方法。而使用正则化方法能够帮助加速训练、提高收敛精度。然而在训练时候却发现不太对劲。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212175933758.png" alt="不太对劲的正则化"></p><p>可以看到，使用batch norm 和 dropout，收敛速度不降反升。这个和大家的公认有所差别，我百思不得其解<span class="github-emoji"><span>😕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>最后怀疑是AdamW优化器的问题。因为AdamW优化器中有限制梯度的项，而dropout会mask掉一些神经元，导致梯度在这里为0，而batch norm则是炸平梯度空间。所以怀疑问题出在这里，优化器换回SGD，好家伙，这个速度，比纯SGD快多了（下面的图第一个日志写错了，应该是batch norm）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211212180324925.png" alt="image-20211212180324925"></p></li></ul><h4 id="2021-12-13-update1-Strong-Network，More-Complex-data"><a href="#2021-12-13-update1-Strong-Network，More-Complex-data" class="headerlink" title="2021-12-13 update1: Strong Network，More Complex data"></a>2021-12-13 update1: Strong Network，More Complex data</h4><ul><li><p><strong>问题</strong>：昨天在最后使用adam优化器和residual模块的配合，训练阶段使用特征选择选出来的前两天的确诊人数，一共2个dimension的feature作为输入进行训练，最后得到的精度0.98左右。昨天的炼丹就到此为止了。昨天晚上在复盘的时候想到，老师上课讲过的模型训练攻略里说的内容。</p><ol><li>而在复盘的时候想起来，昨天的炼丹过程其实提升最大的有两段，第一段就是在一开始使用助教的baseline的时候，使用特征抽取选取了前两天的特征，loss在training data上的损失就收敛到1.x左右了。可是使用baseline在这之后不管怎么样都始终无法进入到0.x的大关。而关于Optimization中也实验过了正则化、调参、换优化器等等手段。但是模型的表现还是没有下降。</li><li>第二个阶段就是换了residual的模型，性能立马又有了提升。但是同样的，residual的模型各种optimization的方法都已经试过了，最后还是卡在了0.98左右。</li></ol><p>最后想想老师讲的课，突然明白，在一开始的时候，model的能力不够强，所以没有办法学好14个重要特征。因此选择前两天的确诊人数作为feature，性能有了很大的提升。这个时候的问题可能是baseline model 的model bias了，即模型的能力不够强。后来歪打正着换了一个模型，同样的数据和参数下训练，性能立马有了提升，所以确信是baseline模型的问题。</p><p>可是后来不管怎么调，residual的模型性能也上不去了。后来其实我也试了一下wide的模型，wide + residual的模型，最后性能都不是很好。这个时候我突然想起来，因为baseline里面是两个feature表现最好，所以我就直接用了两个dimension的feature来train residual的一系列model。后来换model单纯的只是希望能够得到能力更强的model。</p><p>但是问题却在于，能力更强的model确实能够得到更好的performance，但是我并不知道residual是否达到了他的上限，即有可能是我只用了前两天的确诊人数，这样的training data对residual太弱了，他完全学有余力。</p><p>刚好我也没有像baseline一样进行特征选择的测试，所以我其实并不知道residual的model是否达到他的上限了。所以今天我试着使用了更多的training data，即使用了所有大于5000分的数据，一共14个维度</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213003527934.png" alt="用更多的数据来训练residual model"></p></li><li><p><strong>结果</strong>：最后经过训练之后提交，大进步<span class="github-emoji"><span>🎉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213003658575.png" alt="image-20211213003658575"></p></li></ul><h4 id="2021-12-13-update2-temp-final"><a href="#2021-12-13-update2-temp-final" class="headerlink" title="2021-12-13 update2: temp final"></a>2021-12-13 update2: temp final</h4><p>搞到现在，做了一下，现在最优的成绩是下面的，基本上就是残差模块的数量问题，关于伪标签其实我感觉如果用test的data来做的话，就会有过拟合test数据的嫌疑。所以目前想的是等用generative的方法来做，目前暂时就先到这里</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211213015919490.png" alt="目前的最优成绩"></p><h2 id="4-My-Codes"><a href="#4-My-Codes" class="headerlink" title="4. My Codes"></a>4. My Codes</h2><p>下面是我的代码</p><h3 id="1-代码结构"><a href="#1-代码结构" class="headerlink" title="1. 代码结构"></a>1. 代码结构</h3><p>整个代码的结构如下</p><pre class="line-numbers language-shell"><code class="language-shell">(torch) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/deeplearning/hw1_1-regression$ tree -d -L 2.├── checkpoint│&nbsp;&nbsp; ├── Baseline│&nbsp;&nbsp; ├── DeeperNet│&nbsp;&nbsp; ├── DeeperNormalizedNet│&nbsp;&nbsp; ├── OtherNet│&nbsp;&nbsp; └── WideNet├── data├── log│&nbsp;&nbsp; ├── Baseline│&nbsp;&nbsp; ├── DeeperNet│&nbsp;&nbsp; ├── DeeperNormalizedNet│&nbsp;&nbsp; ├── OtherNet│&nbsp;&nbsp; └── WideNet├── src│&nbsp;&nbsp; ├── config│&nbsp;&nbsp; └── __pycache__└── submission    ├── Baseline    ├── DeeperNet    ├── DeeperNormalizedNet    ├── OtherNet    └── WideNet22 directories<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中:</p><ul><li><p>src里都是源代码</p></li><li><p>checkpoint、log和submission都如其名</p></li><li><p>每次进行训练的时候，都会根据模型（网络）名创建一个文件夹，在里面放对应的训练日志、提交结果、参数文件等等。以log为例，每次得到的结果都是根据日期和时间创建的文件夹。只有正确训练结束才会三个文件，分别为训练摘要、训练图像以及训练的过程中的loss。</p><pre class="line-numbers language-shell"><code class="language-shell">(torch) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/deeplearning/hw1_1-regression$ tree log/DeeperNet/log/DeeperNet/├── 2021-12-12 16_52_47├── 2021-12-12 16_53_13├── 2021-12-12 16_53_38├── 2021-12-12 16_54_21├── 2021-12-12 16_55_03│&nbsp;&nbsp; └── message.txt├── 2021-12-12 16_56_25│&nbsp;&nbsp; └── message.txt├── 2021-12-12 16_56_50│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log1.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 17_12_44├── 2021-12-12 17_12_57│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 17_16_00│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 17_16_56│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 17_17_49│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 17_20_12├── 2021-12-12 17_20_34│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 17_41_30│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 18_17_42│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 18_21_58├── 2021-12-12 18_22_24│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 18_28_27│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 19_17_44│&nbsp;&nbsp; └── message.txt├── 2021-12-12 19_18_15│&nbsp;&nbsp; └── message.txt├── 2021-12-12 19_18_42│&nbsp;&nbsp; └── message.txt├── 2021-12-12 19_19_12│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 19_20_16│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 19_25_46│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 19_27_36│&nbsp;&nbsp; └── message.txt├── 2021-12-12 19_28_20│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 19_33_37│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 19_37_51│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 19_42_24│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 19_48_44│&nbsp;&nbsp; └── message.txt├── 2021-12-12 19_48_59│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 19_52_28│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 19_56_30│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 20_05_07├── 2021-12-12 20_05_46│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 20_10_02│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 20_12_20│&nbsp;&nbsp; └── message.txt├── 2021-12-12 20_13_33│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 20_16_43│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-12 20_21_37│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-13 00_46_42│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-13 00_59_08│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-13 01_34_47│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-13 01_39_11│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-13 01_48_12│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl├── 2021-12-13 01_51_22│&nbsp;&nbsp; ├── message.txt│&nbsp;&nbsp; ├── train_log.png│&nbsp;&nbsp; └── train_val.loss.pkl└── 2021-12-13 01_55_10    ├── message.txt    ├── train_log.png    └── train_val.loss.pkl48 directories, 104 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>直接提交submission中生成的文件即可</p></li></ul><h3 id="2-src中文件作用"><a href="#2-src中文件作用" class="headerlink" title="2. src中文件作用"></a>2. src中文件作用</h3><p>src中有这些文件</p><pre class="line-numbers language-shell"><code class="language-shell">(torch) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/deeplearning/hw1_1-regression$ tree src/ -L 1src/├── config├── dataset.py├── feature_selection.py├── gen_submission.py├── networks.py├── pathconfig.py├── __pycache__└── train.py2 directories, 6 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li>train是训练代码</li><li>gen_submission是生成结果的代码</li><li>networks是所有的网络的代码</li><li>feature_selection 是做特征工程的时候代码</li></ul><p>具体的代码在下面给出来</p><h3 id="3-data中的数据"><a href="#3-data中的数据" class="headerlink" title="3. data中的数据"></a>3. data中的数据</h3><p>data中需要把训练、测试数据放进去就行了</p><pre class="line-numbers language-shell"><code class="language-shell">(torch) jack@jack-Alienware-m15-R3:/media/jack/JackCode/project/deeplearning/hw1_1-regression$ tree data/data/├── covid.test.csv├── covid.train.csv└── sampleSubmission.csv0 directories, 3 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实最后只会用到test 和 train</p><h3 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h3><p>用的时候要注意，gen_submission要改参数文件的路径。此外自己想写网络的话需要继承_NetworkBase，然后重写dtype</p><p>训练网络和生成结果的时候一种网络一个函数即可</p><h4 id="1-pathconfig-py"><a href="#1-pathconfig-py" class="headerlink" title="1. pathconfig.py"></a>1. pathconfig.py</h4><p>自动决定所有的路径</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">:</span><span class="token operator">=</span>Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">:</span>    sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">green</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token string">"{Fore.GREEN}{s}{Fore.RESET}"</span><span class="token keyword">def</span> <span class="token function">red</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token string">"{Fore.RED}{s}{Fore.RESET}"</span><span class="token keyword">def</span> <span class="token function">yellow</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> f<span class="token string">"{Fore.YELLOW}{s}{Fore.RESET}"</span><span class="token keyword">class</span> <span class="token class-name">Paths</span><span class="token punctuation">:</span>    base_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parents<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    src_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> base_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span>    log_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> base_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"log"</span><span class="token punctuation">)</span>    data_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> base_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">)</span>    checkpoint_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> base_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"checkpoint"</span><span class="token punctuation">)</span>    submission_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> base_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"submission"</span><span class="token punctuation">)</span>    train_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> data_path <span class="token operator">/</span> <span class="token string">"covid.train.csv"</span>    test_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> data_path <span class="token operator">/</span> <span class="token string">"covid.test.csv"</span>    config_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> src_path <span class="token operator">/</span> <span class="token string">"config"</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> Paths<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> key<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"_path"</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> value<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        value<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pc <span class="token operator">=</span> Paths<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span>base_path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-feature-selection-py"><a href="#2-feature-selection-py" class="headerlink" title="2. feature_selection.py"></a>2. feature_selection.py</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_selection <span class="token keyword">import</span> SelectKBest<span class="token punctuation">,</span> f_regression<span class="token keyword">from</span> pathconfig <span class="token keyword">import</span> Pathsdata <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>Paths<span class="token punctuation">.</span>train_path<span class="token punctuation">)</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> x<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> x<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 根据得分函数计算出来的分数选取前五个</span>bestfeatures <span class="token operator">=</span> SelectKBest<span class="token punctuation">(</span>score_func<span class="token operator">=</span>f_regression<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>fit <span class="token operator">=</span> bestfeatures<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>dfscores <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>fit<span class="token punctuation">.</span>scores_<span class="token punctuation">)</span>dfcolumns <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>x<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#concat two dataframes for better visualization </span>featureScores <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>dfcolumns<span class="token punctuation">,</span>dfscores<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>featureScores<span class="token punctuation">.</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Specs'</span><span class="token punctuation">,</span><span class="token string">'Score'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#naming the dataframe columns</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_rows'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>featureScores<span class="token punctuation">.</span>nlargest<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token string">'Score'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#print 15 best features</span><span class="token keyword">print</span><span class="token punctuation">(</span>featureScores<span class="token punctuation">.</span>nlargest<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token string">"Score"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-dataset-py"><a href="#3-dataset-py" class="headerlink" title="3. dataset.py"></a>3. dataset.py</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> random<span class="token keyword">import</span> typing<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> data<span class="token keyword">from</span> pathconfig <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">CovidDataset</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> split<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">,</span> dim2use<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>Iterable<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token operator">=</span>None<span class="token punctuation">,</span> val_ratio<span class="token punctuation">:</span> float<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        dim2use <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">93</span><span class="token punctuation">)</span> <span class="token keyword">if</span> dim2use <span class="token keyword">is</span> None <span class="token keyword">else</span> dim2use        <span class="token keyword">assert</span> split <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> red<span class="token punctuation">(</span>f<span class="token string">"无效的数据集类别：{split}"</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span>t<span class="token punctuation">:</span><span class="token operator">=</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">93</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> red<span class="token punctuation">(</span>f<span class="token string">"无效的feature dimension， 最大只有 93 维(0-92), dim2use={dim2use[t]} > 92"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># read file</span>        self<span class="token punctuation">.</span>split<span class="token punctuation">:</span> str <span class="token operator">=</span> split        <span class="token keyword">if</span> self<span class="token punctuation">.</span>split <span class="token operator">==</span> <span class="token string">"test"</span><span class="token punctuation">:</span>            raw_csv<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>Paths<span class="token punctuation">.</span>test_path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            raw_csv<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>Paths<span class="token punctuation">.</span>train_path<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">)</span><span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;</span> val_ratio <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>                val_idx<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>population<span class="token operator">=</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>raw_csv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token operator">=</span>int<span class="token punctuation">(</span>val_ratio <span class="token operator">*</span> len<span class="token punctuation">(</span>raw_csv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                train_idx<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>raw_csv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> set<span class="token punctuation">(</span>val_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> Paths<span class="token punctuation">.</span>config_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"train_val.pkl"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>yellow<span class="token punctuation">(</span><span class="token string">"覆盖train_val.pkl"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span>Paths<span class="token punctuation">.</span>config_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"train_val.pkl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>obj<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"train"</span><span class="token punctuation">:</span>train_idx<span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">:</span>val_idx<span class="token punctuation">}</span><span class="token punctuation">,</span> file<span class="token operator">=</span>f<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token keyword">with</span> open<span class="token punctuation">(</span>Paths<span class="token punctuation">.</span>config_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"train_val.pkl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                        p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>file<span class="token operator">=</span>f<span class="token punctuation">)</span>                        train_idx<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token string">"train"</span><span class="token punctuation">]</span>                        val_idx<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token string">"val"</span><span class="token punctuation">]</span>                <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>                    <span class="token keyword">assert</span> <span class="token boolean">False</span><span class="token punctuation">,</span> red<span class="token punctuation">(</span>f<span class="token string">"不存在train_validation的config文件，请先指定val_ratio生成train_val的config"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> split <span class="token operator">==</span> <span class="token string">"val"</span><span class="token punctuation">:</span>                raw_csv <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span>val_idx<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                raw_csv <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span>train_idx<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># standard</span>        self<span class="token punctuation">.</span>mean <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>std <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>mean<span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>std        <span class="token keyword">if</span> self<span class="token punctuation">.</span>split <span class="token operator">!=</span> <span class="token string">"test"</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>data<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> dim2use<span class="token punctuation">]</span>            self<span class="token punctuation">.</span>label<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>data<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> raw_csv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> dim2use<span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> int<span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">:</span> int<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> typing<span class="token punctuation">.</span>Tuple<span class="token punctuation">[</span>np<span class="token punctuation">.</span>ndarray<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>split <span class="token operator">!=</span> <span class="token string">"test"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>label<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># cd = CovidDataset(split="train", val_ratio=0.1)</span>    <span class="token comment" spellcheck="true"># cd = CovidDataset(split="val", dim2use=range(10))</span>    <span class="token comment" spellcheck="true"># cd = CovidDataset(split="test", dim2use=range(10))</span>    cd <span class="token operator">=</span> CovidDataset<span class="token punctuation">(</span>split<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">,</span> dim2use<span class="token operator">=</span>None<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cd<span class="token punctuation">.</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> cd<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-networks-py"><a href="#4-networks-py" class="headerlink" title="4. networks.py"></a>4. networks.py</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">class</span> <span class="token class-name">_NetworkBase</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dtype <span class="token operator">=</span> None        self<span class="token punctuation">.</span>net<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>Module <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Baseline</span><span class="token punctuation">(</span>_NetworkBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_features<span class="token punctuation">:</span>int<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span>in_features<span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> son <span class="token keyword">in</span> self<span class="token punctuation">.</span>net<span class="token punctuation">.</span>named_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            weight<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>Parameter            <span class="token keyword">if</span> <span class="token punctuation">(</span>weight<span class="token punctuation">:</span><span class="token operator">=</span>getattr<span class="token punctuation">(</span>son<span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dtype<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>dtype <span class="token operator">=</span> weight<span class="token punctuation">.</span>dtype        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># x: [batch, channel]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DeeperNet</span><span class="token punctuation">(</span>_NetworkBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_features<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>input_trainsform <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span>in_features<span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=64),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=64),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=64),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block4 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=64),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>output <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.LeakyReLU(),</span>            <span class="token comment" spellcheck="true"># nn.Linear(in_features=32, out_features=1)</span>        <span class="token punctuation">)</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> son <span class="token keyword">in</span> self<span class="token punctuation">.</span>input_trainsform<span class="token punctuation">.</span>named_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            weight<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>Parameter            <span class="token keyword">if</span> <span class="token punctuation">(</span>weight<span class="token punctuation">:</span><span class="token operator">=</span>getattr<span class="token punctuation">(</span>son<span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dtype<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>dtype <span class="token operator">=</span> weight<span class="token punctuation">.</span>dtype        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>input_trainsform<span class="token punctuation">(</span>raw_x<span class="token punctuation">)</span>        y1 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> x        y2 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block2<span class="token punctuation">(</span>y1<span class="token punctuation">)</span> <span class="token operator">+</span> y1         <span class="token comment" spellcheck="true"># y3 = self.residual_block3(y2) + y2</span>        <span class="token comment" spellcheck="true"># y4 = self.residual_block4(y3) + y3</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>output<span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DeeperNormalizedNet</span><span class="token punctuation">(</span>_NetworkBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_features<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>input_trainsform <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span>in_features<span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=64),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=64),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># nn.BatchNorm1d(num_features=128),</span>            <span class="token comment" spellcheck="true"># nn.Dropout(),</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>output <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> son <span class="token keyword">in</span> self<span class="token punctuation">.</span>input_trainsform<span class="token punctuation">.</span>named_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            weight<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>Parameter            <span class="token keyword">if</span> <span class="token punctuation">(</span>weight<span class="token punctuation">:</span><span class="token operator">=</span>getattr<span class="token punctuation">(</span>son<span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dtype<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>dtype <span class="token operator">=</span> weight<span class="token punctuation">.</span>dtype        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>input_trainsform<span class="token punctuation">(</span>raw_x<span class="token punctuation">)</span>        y1 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> x        y2 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block2<span class="token punctuation">(</span>y1<span class="token punctuation">)</span> <span class="token operator">+</span> y1        <span class="token keyword">return</span> self<span class="token punctuation">.</span>output<span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">WideNet</span><span class="token punctuation">(</span>_NetworkBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_features<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>input_trainsform <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span>in_features<span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>residual_block3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>output <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> son <span class="token keyword">in</span> self<span class="token punctuation">.</span>input_trainsform<span class="token punctuation">.</span>named_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            weight<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>Parameter            <span class="token keyword">if</span> <span class="token punctuation">(</span>weight<span class="token punctuation">:</span><span class="token operator">=</span>getattr<span class="token punctuation">(</span>son<span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dtype<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>dtype <span class="token operator">=</span> weight<span class="token punctuation">.</span>dtype        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raw_x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>input_trainsform<span class="token punctuation">(</span>raw_x<span class="token punctuation">)</span>        y11 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block1<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> x        y12 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block2<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> x        y1 <span class="token operator">=</span> <span class="token punctuation">(</span>y11 <span class="token operator">+</span> y12<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        y2 <span class="token operator">=</span> self<span class="token punctuation">.</span>residual_block3<span class="token punctuation">(</span>y1<span class="token punctuation">)</span> <span class="token operator">+</span> y1        <span class="token keyword">return</span> self<span class="token punctuation">.</span>output<span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">OtherNet</span><span class="token punctuation">(</span>_NetworkBase<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_features<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span>in_features<span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm1d<span class="token punctuation">(</span>num_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> out_features<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token keyword">for</span> name<span class="token punctuation">,</span> son <span class="token keyword">in</span> self<span class="token punctuation">.</span>net<span class="token punctuation">.</span>named_children<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            weight<span class="token punctuation">:</span> nn<span class="token punctuation">.</span>parameter<span class="token punctuation">.</span>Parameter            <span class="token keyword">if</span> <span class="token punctuation">(</span>weight<span class="token punctuation">:</span><span class="token operator">=</span>getattr<span class="token punctuation">(</span>son<span class="token punctuation">,</span> <span class="token string">"weight"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>dtype<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>dtype <span class="token operator">=</span> weight<span class="token punctuation">.</span>dtype        <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># x: [batch, channel]</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    baseline <span class="token operator">=</span> Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">93</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>dtype<span class="token operator">=</span>baseline<span class="token punctuation">.</span>dtype<span class="token punctuation">,</span> device<span class="token operator">=</span>baseline<span class="token punctuation">.</span>device<span class="token punctuation">)</span>    baseline<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-train-py"><a href="#5-train-py" class="headerlink" title="5. train.py"></a>5. train.py</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">import</span> typing<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>axes <span class="token keyword">import</span> Axes<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>cuda<span class="token keyword">import</span> torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">import</span> optimizer<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> data<span class="token keyword">import</span> networks<span class="token keyword">from</span> pathconfig <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> dataset <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">Trainer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> network<span class="token punctuation">:</span> networks<span class="token punctuation">.</span>_NetworkBase<span class="token punctuation">,</span> dim2use<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>int<span class="token punctuation">]</span><span class="token operator">=</span>None<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>start_time<span class="token punctuation">:</span> str <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>select_device<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>reproducibile<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>network <span class="token operator">=</span> network<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>suffix<span class="token punctuation">:</span> str <span class="token operator">=</span> self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__        self<span class="token punctuation">.</span>log_folder<span class="token punctuation">:</span> Path <span class="token operator">=</span> Paths<span class="token punctuation">.</span>log_path <span class="token operator">/</span> self<span class="token punctuation">.</span>suffix <span class="token operator">/</span> self<span class="token punctuation">.</span>start_time<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">:</span> Path <span class="token operator">=</span> Paths<span class="token punctuation">.</span>checkpoint_path <span class="token operator">/</span> self<span class="token punctuation">.</span>suffix <span class="token operator">/</span> f<span class="token string">"{self.start_time}.pt"</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>log_folder<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>log_folder<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># train</span>        self<span class="token punctuation">.</span>train_loader <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>CovidDataset<span class="token punctuation">(</span>split<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>val_loader <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>CovidDataset<span class="token punctuation">(</span>split<span class="token operator">=</span><span class="token string">"val"</span><span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># mse for regression</span>        self<span class="token punctuation">.</span>lossfunc <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span>reduction<span class="token operator">=</span><span class="token string">"mean"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.lossfunc = nn.(reduction="mean")</span>        <span class="token comment" spellcheck="true"># visualize</span>        self<span class="token punctuation">.</span>train_loss<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>float<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>val_loss<span class="token punctuation">:</span> typing<span class="token punctuation">.</span>List<span class="token punctuation">[</span>float<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>min_val_loss<span class="token punctuation">:</span> float <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">"inf"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">:</span> Axes        _<span class="token punctuation">,</span> self<span class="token punctuation">.</span>axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">select_device</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>device <span class="token operator">=</span> <span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span>        <span class="token keyword">def</span> <span class="token function">reproducibile</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> seed<span class="token punctuation">:</span> int<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token operator">=</span>seed<span class="token punctuation">)</span>        torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token operator">=</span>seed<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># no optimization for convolution</span>        torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>benchmark <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true"># use default convolution algorithm</span>        torch<span class="token punctuation">.</span>backends<span class="token punctuation">.</span>cudnn<span class="token punctuation">.</span>deterministic <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>device <span class="token operator">==</span> <span class="token string">"cuda"</span><span class="token punctuation">:</span>            torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token operator">=</span>seed<span class="token punctuation">)</span>            torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token operator">=</span>seed<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">visualize</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val_loss<span class="token punctuation">:</span> float<span class="token punctuation">,</span> train_loss<span class="token punctuation">:</span> float<span class="token punctuation">)</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>ion<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>cla<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>set_ylim<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">400.0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"steps"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"loss / MSE"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span>f<span class="token string">"{self.suffix}-{self.start_time}"</span><span class="token punctuation">)</span>                x_train <span class="token operator">=</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>        x_val <span class="token operator">=</span> x_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loss<span class="token punctuation">)</span> <span class="token operator">//</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>val_loss<span class="token punctuation">)</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> self<span class="token punctuation">.</span>train_loss<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"tab:red"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"train loss"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_val<span class="token punctuation">,</span> self<span class="token punctuation">.</span>val_loss<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">"tab:cyan"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"val loss"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>f<span class="token string">"min_val_loss: {self.min_val_loss:>5.4f}"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span>f<span class="token string">"val/train loss: {val_loss:>5.4f}/{train_loss:>5.4f}"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>text<span class="token punctuation">(</span>x<span class="token operator">=</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loss<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> s<span class="token operator">=</span>f<span class="token string">"Current loss: {self.train_loss[-1]:>5.4f}"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>axes<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.05</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>ioff<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> epoch<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Saving model at {Fore.GREEN}{Style.BRIGHT}{epoch}{Style.RESET_ALL} epoch, val_loss = {Fore.GREEN}{Style.BRIGHT}{self.min_val_loss}{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token operator">=</span>self<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">lossfunc_l2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> target<span class="token punctuation">,</span> pred<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">:</span>        loss <span class="token operator">=</span> self<span class="token punctuation">.</span>lossfunc<span class="token punctuation">(</span>target<span class="token punctuation">,</span> pred<span class="token punctuation">)</span>        norm_loss <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> param <span class="token keyword">in</span> self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            norm_loss <span class="token operator">+=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>param<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> loss <span class="token operator">+</span> norm_loss <span class="token operator">*</span> <span class="token number">0.00075</span>        @torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">validation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        loss <span class="token operator">=</span> <span class="token number">0</span>        x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor        y<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor        self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> self<span class="token punctuation">.</span>val_loader<span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>            y_pred<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>network<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># loss += self.lossfunc(y, y_pred.squeeze()).sqrt()</span>            <span class="token comment" spellcheck="true"># loss = self.lossfunc_l2(y, y_pred.squeeze())</span>            loss <span class="token operator">+=</span> self<span class="token punctuation">.</span>lossfunc<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        l<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor        self<span class="token punctuation">.</span>val_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">:</span><span class="token operator">=</span><span class="token punctuation">(</span>loss<span class="token operator">/</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>val_loader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> l    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lr<span class="token punctuation">:</span> float<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> wd<span class="token punctuation">:</span> float<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> n_epoch<span class="token punctuation">:</span> int<span class="token operator">=</span><span class="token number">3000</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> early_stop<span class="token punctuation">:</span> int<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        msg<span class="token punctuation">:</span> str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入本次训练的日志记录："</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># optimizer = optim.SGD(self.network.parameters(), lr=lr, weight_decay=wd, momentum=momentum)</span>        optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>AdamW<span class="token punctuation">(</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>lr<span class="token punctuation">,</span> weight_decay<span class="token operator">=</span>wd<span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>log_folder<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"message.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>msg<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token string">"epoch: {n_epoch}, lr: {lr}, wd: {wd}, early_stop: {early_stop}, optimizer: {optimizer.__class__.__name__}\n"</span><span class="token punctuation">)</span>        early_stop_cnt <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span>n_epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor            y<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor            self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>            train_loss<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> self<span class="token punctuation">.</span>train_loader<span class="token punctuation">:</span>                optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>                x<span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>self<span class="token punctuation">.</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>                y_pred<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>network<span class="token punctuation">(</span>x<span class="token punctuation">)</span>                loss<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor <span class="token operator">=</span> self<span class="token punctuation">.</span>lossfunc<span class="token punctuation">(</span>y<span class="token punctuation">,</span> y_pred<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># loss = self.lossfunc_l2(y, y_pred.squeeze())</span>                <span class="token comment" spellcheck="true"># loss = loss.sqrt()</span>                loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>                optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                train_loss <span class="token operator">+=</span> loss<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>train_loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            train_loss <span class="token operator">=</span> <span class="token punctuation">(</span>train_loss <span class="token operator">/</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>train_loader<span class="token punctuation">)</span><span class="token punctuation">)</span>            val_loss <span class="token operator">=</span> self<span class="token punctuation">.</span>validation<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> val_loss <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>min_val_loss<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>min_val_loss <span class="token operator">=</span> val_loss                early_stop_cnt <span class="token operator">=</span> <span class="token number">0</span>                self<span class="token punctuation">.</span>save<span class="token punctuation">(</span>epoch<span class="token operator">=</span>epoch<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                early_stop_cnt <span class="token operator">+=</span> <span class="token number">1</span>            self<span class="token punctuation">.</span>visualize<span class="token punctuation">(</span>val_loss<span class="token operator">=</span>val_loss<span class="token punctuation">,</span> train_loss<span class="token operator">=</span>train_loss<span class="token punctuation">)</span>            <span class="token keyword">if</span> early_stop_cnt <span class="token operator">>=</span> early_stop<span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>green<span class="token punctuation">(</span>f<span class="token string">"Training stopped at {epoch}"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>green<span class="token punctuation">(</span><span class="token string">"Saving trainig log"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>log_folder<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"train_val.loss.pkl"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>                <span class="token punctuation">{</span>                    <span class="token string">"val"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>val_loss<span class="token punctuation">,</span>                    <span class="token string">"train"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>train_loss<span class="token punctuation">,</span>                    <span class="token string">"min_val"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>min_val_loss                <span class="token punctuation">}</span><span class="token punctuation">,</span> file<span class="token operator">=</span>f            <span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>self<span class="token punctuation">.</span>log_folder<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"train_log.png"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># @torch.no_grad()</span>    <span class="token comment" spellcheck="true"># def get_presudo</span><span class="token keyword">def</span> <span class="token function">baseline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> networks<span class="token punctuation">.</span>Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">93</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>b<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span>wd<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">previous2day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dim2use<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> networks<span class="token punctuation">.</span>Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>b<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">selected_feature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    b <span class="token operator">=</span> networks<span class="token punctuation">.</span>Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>b<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">residual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58]) - 1</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58, 43, 61, 79, 44, 62, 80, 41, 59, 77, 42, 60, 78, 93, 75, 57, 88, 70, 52, 84, 66, 48]) - 1</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([75, 57, 61, 79, 43, 78, 60, 42, 91, 73, 83, 80, 68, 62, 40, 86, 65, 77, 85, 67, 55, 49])</span>    d <span class="token operator">=</span> networks<span class="token punctuation">.</span>DeeperNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>d<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span>wd<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    d <span class="token operator">=</span> networks<span class="token punctuation">.</span>DeeperNormalizedNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>d<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span>wd<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">wider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    w <span class="token operator">=</span> networks<span class="token punctuation">.</span>WideNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>w<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span>wd<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    o <span class="token operator">=</span> networks<span class="token punctuation">.</span>OtherNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>network<span class="token operator">=</span>o<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span>    t<span class="token punctuation">.</span>train<span class="token punctuation">(</span>wd<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># baseline()</span>    <span class="token comment" spellcheck="true"># previous2day()</span>    <span class="token comment" spellcheck="true"># selected_feature()</span>    residual<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># other()</span>    <span class="token comment" spellcheck="true"># normalized()</span>    <span class="token comment" spellcheck="true"># wider()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-gen-submission-py"><a href="#6-gen-submission-py" class="headerlink" title="6. gen_submission.py"></a>6. gen_submission.py</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> typing<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">as</span> data<span class="token keyword">from</span> dataset <span class="token keyword">import</span> CovidDataset<span class="token keyword">import</span> networks<span class="token keyword">from</span> pathconfig <span class="token keyword">import</span> <span class="token operator">*</span>@torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen_submission</span><span class="token punctuation">(</span>network<span class="token punctuation">:</span>networks<span class="token punctuation">.</span>_NetworkBase<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>None<span class="token punctuation">,</span> save_path<span class="token punctuation">:</span> Path<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    test_loader <span class="token operator">=</span> data<span class="token punctuation">.</span>DataLoader<span class="token punctuation">(</span>dataset<span class="token operator">=</span>CovidDataset<span class="token punctuation">(</span>split<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    x<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor    <span class="token keyword">for</span> x <span class="token keyword">in</span> test_loader<span class="token punctuation">:</span>        x <span class="token operator">=</span> x<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token operator">=</span><span class="token string">"cuda"</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>network<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span>        y_pred<span class="token punctuation">:</span> torch<span class="token punctuation">.</span>Tensor <span class="token operator">=</span> network<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        result<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>y_pred<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> save_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        save_path<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>parents<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>save_path<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>save_path<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"id,tested_positive\n"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> id<span class="token punctuation">,</span> r <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token string">"{id},{r}\n"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen_baseline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">93</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/Baseline/2021-12-12 15_29_31.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>None<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen2day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/Baseline/2021-12-12 15_40_58.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dim2use <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dim2use<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">feature_selection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58, 43, 61, 79, 44, 62, 80, 41, 59, 77, 42, 60, 78, 93]) - 1</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>Baseline<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/Baseline/2021-12-12 16_33_04.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">residual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58, 43, 61, 79, 44, 62, 80, 41, 59, 77, 42, 60, 78, 93]) - 1</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58]) - 1</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([75, 57, 61, 79, 43, 78, 60, 42, 91, 73, 83, 80, 68, 62, 40, 86, 65, 77, 85, 67, 55, 49])</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58, 43, 61, 79, 44, 62, 80, 41, 59, 77, 42, 60, 78, 93, 75, 57, 88, 70, 52, 84, 66, 48]) - 1</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([75, 57])</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>DeeperNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/DeeperNet/2021-12-13 01_55_10.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># dim2use = np.array([76, 58, 43, 61, 79, 44, 62, 80, 41, 59, 77, 42, 60, 78, 93]) - 1</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>DeeperNormalizedNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/DeeperNormalizedNet/2021-12-12 17_55_08.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">wider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>WideNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/WideNet/2021-12-12 18_12_38.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">other</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dim2use <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    net <span class="token operator">=</span> networks<span class="token punctuation">.</span>OtherNet<span class="token punctuation">(</span>in_features<span class="token operator">=</span>len<span class="token punctuation">(</span>dim2use<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>    net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>s<span class="token punctuation">:</span><span class="token operator">=</span>Paths<span class="token punctuation">.</span>checkpoint_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"../checkpoint/OtherNet/2021-12-13 00_49_48.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    gen_submission<span class="token punctuation">(</span>network<span class="token operator">=</span>net<span class="token punctuation">,</span> dim2use<span class="token operator">=</span>dim2use<span class="token punctuation">,</span> save_path<span class="token operator">=</span>Paths<span class="token punctuation">.</span>submission_path<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span>net<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> s<span class="token punctuation">.</span>stem<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">".csv"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># gen_baseline()</span>    <span class="token comment" spellcheck="true"># gen2day()</span>    <span class="token comment" spellcheck="true"># feature_selection()</span>    <span class="token comment" spellcheck="true"># other()</span>    residual<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># normalize()</span>    <span class="token comment" spellcheck="true"># wider()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Homeworks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Neural Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>李宏毅ML2021 Spring homeworks: hw0 -- 概述</title>
      <link href="/2021/12/11/li-hong-yi-ml2021-spring-hw0-gai-shu/"/>
      <url>/2021/12/11/li-hong-yi-ml2021-spring-hw0-gai-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文讲解李宏毅ML2021 Spring homeworks系列文章的写作原因以及系列文章的写作目的</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207145714311.png" alt="课程官网"></p><span id="more"></span><h1 id="李宏毅ML2021-Spring-homeworks-hw0-–-概述"><a href="#李宏毅ML2021-Spring-homeworks-hw0-–-概述" class="headerlink" title="李宏毅ML2021 Spring homeworks: hw0 – 概述"></a>李宏毅ML2021 Spring homeworks: hw0 – 概述</h1><p>李宏毅老师的Machine Learning 2021 Spring的课程李宏毅老师以及上传到他的Youtube上了，并且系列作业也已经经过整理向公众开放。今年的ML课程完全关注Deep Learning，此外结合了Kaggle的许多实战。因此本系列文章记录了我在完成作业时候的心得与体会。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/44fe603d253c2586def6d0e832b5efd6_r.jpg" alt="ML与DL的关系"></p><h2 id="1-写作初心"><a href="#1-写作初心" class="headerlink" title="1. 写作初心"></a>1. 写作初心</h2><p>在2019年我刚进入大学的时候，那个时候深度学习已经火热起来了。在那个时候我就通过观看李宏毅老师的Machine Learning的系列课程从而对机器学习和深度学习入门了。</p><p>然而可惜的是，由于种种原因，在2019年的时候，李宏毅老师的ML系列课程我最终没有坚持下来全部看完。</p><p>一方面是受到了当时学识的限制。在那时候刚刚进入大学，刚刚开始学习线性代数，对概率论、图论、凸优化、计算机、多元高等数学等内容完全没有接触过。</p><p>另外一方面当时更加关注与计算机底层LInux等内容的学习；最后是大一时候的课是真的多。</p><p>因此最终没有听完2019年的课程，非常的可惜。</p><p>现在因为降级转入计算机专业的原因，有了很多的时间；此外自己在业余时间也已经把许多计算机的课程、深度学习的数学原理课程都已经学过了，编程能力也有了非常大的提升。</p><p>又恰逢2021年李宏毅老师的课程上架。因此决定这一次详细的学完所有课程并完成对应的作业。</p><p>所有的作业都以博客的形式来记录我炼丹的点滴。希望能够见证我这一段时间的投入和付出。</p><h2 id="2-Who-is-Hung-yi-Lee"><a href="#2-Who-is-Hung-yi-Lee" class="headerlink" title="2. Who is Hung-yi Lee"></a>2. Who is Hung-yi Lee</h2><p>As now we are going to have classes of Hung-yi Lee, we’d better have some knowledge of him.</p><p>首先是<code>Wikipedia</code>的介绍</p><blockquote><p><strong>From wikipedia</strong></p><p>李宏毅（1985年或1986年－），台湾地区计算机科学家，国立台湾大学电机工程学系副教授，研究领域包括语意理解、语音辨识、机器学习、深度学习等。</p><p>李宏毅在大学二年级时，因对电机系许多课程感到困惑，曾一度非常沮丧迷惘，甚至萌生了退学的念头。他当时选了一门“数字通信处理”课程，发现自己难以听懂，但他并未放弃，不弃选不退修，最终豁然开朗，“原来用手机拨电话给别人时，中间发生的事就是这些信号处理。”找到学习的兴趣后，李宏毅开始跟随中央研究院李琳山院士做项目，随后于2010年从国立台湾大学取得硕士学位，2012年取得博士学位。2012年9月至2013年8月间，李宏毅于中央研究院资讯科技创新研究中心担任博士后研究员。2013年9月以客座科学家身份前往麻省理工学院计算机科学暨人工智能实验室。2014年返台，担任台湾大学电机工程学系教师至今。</p><p>2015年，李宏毅开始在台湾大学讲授机器学习课程，选课人数通常爆满，有400多人来修。于是，李宏毅将学生分在两间教室，一间现场看老师上课，另一间同步看直播。由于直播上课的诸多限制，李宏毅养成了录制课程影片的习惯。一开始李宏毅将影片上传至个人主页，后来由于萤幕侧录软件的序号过期，无法导出MP4，但有导出至YouTube的选项，于是李宏毅开始将课程影片上传至YouTube。此举不仅帮助了台湾大学的学生，还意外嘉惠台湾大学以外的学生。在其影片下方，还有中国大陆的学生留言感谢，表示已经听完全部课程，并留下笔记连结。截至2021年9月30日，李宏毅的YouTube频道有8.99万位订阅者，最热门的影片有56万次观看。</p><p>李宏毅擅长用浅显易懂的语言，以学生喜爱的精灵宝可梦、凉宫春日等动漫来讲解复杂的机器学习技术，因此被亲切地称为“精灵宝可梦大师”。中华民国电脑学会称李宏毅为“第一个公开有系统地完整深入讲解深度学习技术的学者，使得华文的深度学习教学与英文世界并驾齐驱。”</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207143939983.png" alt="维基百科对老师的介绍"></p><p>从维基百科的介绍中能够看出来，李宏毅老师讲解机器学习的课程非常的有趣和生动，因此广受欢迎。我在当初也是受到了李宏毅老师早年的课程的熏陶，才进入了ML/DL的大门。</p><h2 id="3-Why-is-Hung-yi-Lee"><a href="#3-Why-is-Hung-yi-Lee" class="headerlink" title="3. Why is Hung-yi Lee"></a>3. Why is Hung-yi Lee</h2><p>为什么选择李宏毅老师的课程而非其他老师的课程？</p><p>首先是因为李宏毅老师的课程非常的通俗易懂，在讲课的时候老师会举各种各样的例子，宝可梦、全职猎人、凉宫春日等等，贴近与学生的距离。</p><p>其次是因为老师的ML的课程从16年到现在以及过去了5年时间了，在这五年中老师的课程已经经过了长久的打磨，因此会具备丰富的经验，所以学起来的时候体验会好很多。</p><p>最后就是关于我个人的原因，因为先前没有学完老师2019年的课程，感到非常遗憾，所想要在2021年完成老师的课程，弥补当年的遗憾。</p><h2 id="4-How-to-learn"><a href="#4-How-to-learn" class="headerlink" title="4. How to learn"></a>4. How to learn</h2><p>本系列文章将会记录每个作业的说明，我对每个作业的理解以及我在完成作业时的Update，在最后会附带上完整的项目代码。</p><p>所以每一个博客对应的一个作业，其结构大概类似于下面：</p><ol><li>作业介绍</li><li>我的作业动态</li><li>最终代码</li></ol>]]></content>
      
      
      <categories>
          
          <category> 李宏毅ML2021 Spring Homeworks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> Hungyi Li </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> CNN </tag>
            
            <tag> Attention </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo的个人技术博客搭建 Part 4 Markdown编辑器Typora的设置以及腾讯云图床设置</title>
      <link href="/2021/12/10/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-4-markdown-bian-ji-qi-typora-de-she-zhi-yi-ji-teng-xun-yun-tu-chuang-she-zhi/"/>
      <url>/2021/12/10/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-4-markdown-bian-ji-qi-typora-de-she-zhi-yi-ji-teng-xun-yun-tu-chuang-she-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前面我们通过hexo在本地搭建出了静态博客网站的框架，那么我们还需要一个合适的Markdown编辑器来帮助我们快乐的写博客</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211211015803341.png" alt="最终效果图:Nord主题"></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Markdown编辑器Typora的设置以及腾讯云图床设置"><a href="#基于Hexo的个人技术博客搭建-——-Markdown编辑器Typora的设置以及腾讯云图床设置" class="headerlink" title="基于Hexo的个人技术博客搭建 ——  Markdown编辑器Typora的设置以及腾讯云图床设置"></a>基于Hexo的个人技术博客搭建 ——  Markdown编辑器Typora的设置以及腾讯云图床设置</h1><p>通过前面的几讲，我们已经成功的在本地搭建出来了一个博客网站，并且进行了美化。然而博客网站的目的在于发布我们自己的博客，因此我们还需要一个趁手的编辑器来帮助我们编写<code>Markdown</code>文章。</p><p>经过重重考虑，我最终的博客开发环境为：<code>Typora</code> + 腾讯云图床 + <code>Github</code>托管网页。</p><p>在本章将讲解Typora编辑器的设置和腾讯云图床的设置。下节将讲解腾讯云图床的设置。</p><h2 id="1-What-is-Typora-图床？"><a href="#1-What-is-Typora-图床？" class="headerlink" title="1. What is Typora/图床？"></a>1. What is Typora/图床？</h2><h3 id="1-Typora"><a href="#1-Typora" class="headerlink" title="1. Typora"></a>1. Typora</h3><p>首先是<code>维基百科</code>的介绍</p><blockquote><p><strong>From Wikipidia</strong></p><p>Typora是一款由Abner Lee开发的轻量级Markdown编辑器，适用于OS X、Windows和Linux三种操作系统。与其他Markdown编辑器不同的是，Typora没有采用源代码和预览双栏显示的方式，而是采用所见即所得的编辑方式，实现了即时预览的功能，但也可切换至源代码编辑模式。</p></blockquote><p>其实说白了，<code>Typora</code>和记事本没有任何的区别，都是拿来写文本文件的。只不过Typora是专门拿来写Markdown文件的。针对<code>Markdown</code>文件的编写，Typora的体验会非常好。</p><p>此外Typora是一个三平台通用的编辑器，而且非常轻量，因此对于大型的IDE而言打开速度会快很多</p><h3 id="2-图床"><a href="#2-图床" class="headerlink" title="2. 图床"></a>2. 图床</h3><p><code>百度百科</code>的介绍</p><blockquote><p><strong>From BaiduBaike</strong></p><p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于有空间距离等因素决定访问速度很慢影响图片显示速度。国内也分为单线空间、多线空间和cdn加速三种。</p></blockquote><p>其实说白了，图床就相当于一个相册，类似于百度云等云盘的相册功能。只不过图床里的图片都会有一个链接，通过链接就能够访问、看到这张图片。例如下面的这张图片</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207132435763.png" alt="根据链接显示图像"></p><h2 id="2-Why-Typora-图床？"><a href="#2-Why-Typora-图床？" class="headerlink" title="2. Why Typora/图床？"></a>2. Why Typora/图床？</h2><h3 id="1-Typora-1"><a href="#1-Typora-1" class="headerlink" title="1. Typora"></a>1. Typora</h3><p>其实选择Typora的原因有很多，具体来说吸引我的原因有下面的几个：</p><ol><li><p><strong>好用</strong>：用Typora来写Markdown的体验非常流畅与直观。因为Markdown本身就是一个 标记语言，所以会有非常多的标记用来说明一段文本应该被展示的样子，具体来说效果就是下面的图片中我正在写的这篇文章的Markdown源码</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210210326416.png" alt="Markdown的源代码"></p><p>但是在Typora中，源码形式的Markdown会被直接解析并显示出对应的效果，因此会非常直观，方便书写。具体效果如下</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210210717942.png" alt="Typora中的即时显示"></p></li></ol><ol start="2"><li><p><strong>多平台互通</strong>：因为我本身是需要进行软件程序开发、深度学习模型训练的，因此在Linux进行这些操作就会非常的舒服。而有的时候需要我去处理一些Word文本、PPT等等。这个时候就还是需要Windows上的全家桶。因此多个平台上Typora都可以使用，结合Typora以文件的形式保存配置信息，我们可以做到三个平台上Typora的无缝切换，不存在任何体验的割裂，因此非常的舒服</p></li><li><p><strong>好看</strong>：Typora是基于Node.js的程序，因此支持自己编写css来定义样式。所以我们可以自己设置Typora的外观。此外Typora还有一个不错的皮肤市场，因此我们其实可以从这个市场中下载皮肤然后进行使用。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207134405026.png" alt="Typora的皮肤市场"></p></li></ol><ol start="4"><li><p><strong>非常好的图床支持</strong>：稍后我们其实会讲到图床的好处和为什么需要图床，而<code>Typora</code>内置了<code>PicGo</code>，对各大主流的图床的支持都非常好，因此和图床搭配使用效果奇佳。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210211710899.png" alt="Typora中的图床设置"></p></li><li><p>……</p></li></ol><p>总之，Typora有着多种多样的优点吸引我，因此我的博客中也是使用Typora作为Markdown的编辑器。事实上，我从2019年开始就已经使用Typora了，可谓是资深用户。</p><p>需要注意的是，Typora在之前全都是测试版，从2021年11月23日起发布了1.0版本，并且从1.0版本以后成为收费软件，售价14.99美元，约合89RMB。</p><p>不过官方也承诺过1.0版本以前的版本都将继续保持免费，而1.0版本以后的版本都将保持收费。其实在现在最新的Typora免费版（大概是0.11）的功能和1.0版本基本没有差别，因此再没有推出大的更新之前/足够吸引我的功能之前还是继续使用免费版。其实免费版也已经够大家使用了。</p><p>下面也会讲解如何下载免费版。</p><h3 id="2-图床-1"><a href="#2-图床-1" class="headerlink" title="2. 图床"></a>2. 图床</h3><p>我们通过hexo搭建的博客其实是一个静态博客。静态博客就意味着博客中所有的网页资源都是静态的，在用户点击请求文章的时候，文字和图片同时被发送过去。然而我们的博客资源在传输的过程中，博客资源所在的服务器的传输带宽有限，因此我们如果把图片和博客放在同一个服务器上，传输的速度就会很慢。此外我们后面也会讲解用Github托管博客资源，所以我们每次进行本地推送和异地同步就会很浪费时间。</p><p>而由于图床是我们把图片存放在图床商家的服务器，通过一个链接就可以访问，因此使用图床就可以使得用户访问文章的时候，图片的带宽需求由图床服务器承担。而图床服务器一般带宽都会非常大。因此就可以加速页面的加载速度，同时方便我们进行推送和同步。</p><p>对于我个人而言，我使用的是<strong>腾讯云存储桶作为图床</strong>，而主要原因就是我的服务器也是腾讯云的，所以我懒得换来换去。<strong>其实任何的图床厂商都是可以的。</strong></p><p>下面我们会讲解如何创建腾讯云图床，以及在Typora中设置图床。对于其他的图床在Typora中的设置其实查一下都会有。</p><h2 id="3-Typora设置"><a href="#3-Typora设置" class="headerlink" title="3. Typora设置"></a>3. Typora设置</h2><p>对于Typora的设置，主要包含四个方面：下载免费版， 换个皮肤，设置快捷键以及图床设置。不过由于图床设置是和图床有关的，因此最后的图床设置在图床创建后面讲</p><h3 id="1-下载免费版"><a href="#1-下载免费版" class="headerlink" title="1. 下载免费版"></a>1. 下载免费版</h3><p>免费版其实在官网中就有列出来。<a href="https://typora.io/">官网</a>：<a href="https://typora.io/">https://typora.io/</a></p><p>我们点进去官网翻到最底下，有一个<code>所有的历史文件</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210214453168.png" alt="历史文件"></p><p>点进去之后点到开发测试版本</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210214545807.png" alt="开发测试版本"></p><p>然后同样在最下面的old release</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210215003642.png" alt="旧版本"></p><p>点进去之后就可以下载</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210215114073.png" alt="下载旧版本"></p><p>点击之后下载即可</p><h3 id="2-设置皮肤"><a href="#2-设置皮肤" class="headerlink" title="2. 设置皮肤"></a>2. 设置皮肤</h3><p>安装之后，我们就可以安装皮肤。前面说过，我们可以在市场上下载皮肤，其实皮肤就是css文件加上资源文件。所以我们安装皮肤其实就是把下载的这些资源粘贴到皮肤文件夹中。</p><p>我们首先打开资源文件夹，在左上角的<code>file</code>–&gt; <code>preference</code>中选择<code>Apprence</code>，然后选择打开<code>Theme Folder</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207141743141.png" alt="打开主题文件夹"></p><p>然后在皮肤市场中下载需要的皮肤，我下载的<code>Nord</code>，<code>Dracula</code>和<code>Mint</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207141909886.png" alt="下载皮肤"></p><p>然后把下载下的皮肤压缩文件解压之后复制到打开的主题文件夹中即可，需要注意的是，皮肤最重要的是css文件，而皮肤名的文件夹中放的是一些资源，所以我们需要把css放到正确的位置</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207142137820.png" alt="复制皮肤到皮肤文件夹中"></p><p>最后重启Typora就可以在左上角的Themes中选择皮肤</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207142227515.png" alt="选择皮肤"></p><p>选择<code>Mint</code>主题看看效果</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207142620434.png" alt="Mint主题效果"></p><h3 id="3-设置快捷键"><a href="#3-设置快捷键" class="headerlink" title="3. 设置快捷键"></a>3. 设置快捷键</h3><p>Typora的快捷键设置其实是通过一个json文件完成，因此我们在这个Json文件中编辑快捷键即可</p><p>需要注意的是，我们需要首先在英文版中查看需要设置快捷键的功能的名称，例如我们需要设置快捷插入代码框Code（我这里是以及设置过了）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207141509346.png" alt="查看功能名称"></p><p>然后我们打开Preference中的General，然后打开在keyBinding中设置功能和对应的键即可。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211210222113923.png" alt="image-20211210222113923"></p><h2 id="4-腾讯云图床创建以及Typora配置"><a href="#4-腾讯云图床创建以及Typora配置" class="headerlink" title="4. 腾讯云图床创建以及Typora配置"></a>4. 腾讯云图床创建以及Typora配置</h2><p>关于腾讯云图床的配置，参考这篇<a href="https://blog.51cto.com/u_15070902/3764737">文章</a>：<a href="https://blog.51cto.com/u_15070902/3764737">https://blog.51cto.com/u_15070902/3764737</a></p><p>最通过这样的配置，我们就完成了Typora的设置与图床的搭配，现在开始我们就可以快乐的开始写博客了 <span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS杂篇 Melodic下Python3中使用CV_Bridge与TF</title>
      <link href="/2021/11/23/ros-za-pian-melodic-xia-python3-zhong-shi-yong-cv-bridge-yu-tf/"/>
      <url>/2021/11/23/ros-za-pian-melodic-xia-python3-zhong-shi-yong-cv-bridge-yu-tf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>TF与CV_Bridge是ROS中非常好用的工具，前者用于帮助我们进行坐标转换，后者帮助我们在ROS中使用OpenCV。然而在Melodic版本中Python3下使用这两个包却会报错，本文将解决这Python3CV_Bridge与TF的使用问题。</p></blockquote><span id="more"></span><h1 id="ROS杂篇-Melodic下Python3中使用CV-Bridge与TF"><a href="#ROS杂篇-Melodic下Python3中使用CV-Bridge与TF" class="headerlink" title="ROS杂篇 Melodic下Python3中使用CV_Bridge与TF"></a>ROS杂篇 Melodic下Python3中使用CV_Bridge与TF</h1><blockquote><p>前言：为什么要写这篇博客</p></blockquote><p>在使用ROS驱动机器人的时候，经常遇到的一个问题就是我们需要使用摄像头来获得视觉信息，并且在此基础上，指导机器人进行操作。</p><h2 id="Updates"><a href="#Updates" class="headerlink" title="Updates ! ! !"></a>Updates ! ! !</h2><p>由于最近一个周我的工作变动，目前需要在Ubuntu 20.04 LTS进行ROS开发，20.04中TF和CV_Bridge默认都支持Python3，因此目前我不需要解决这个问题。这篇文章以后更完</p>]]></content>
      
      
      <categories>
          
          <category> ROS杂篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> cv_bridge </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> melodic </tag>
            
            <tag> OpenCv </tag>
            
            <tag> tf2 </tag>
            
            <tag> sensor_msgs </tag>
            
            <tag> roslaunch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS杂篇 ROS中使用Kinect V2 Part2：iai-kinect使用</title>
      <link href="/2021/11/19/ros-za-pian-ros-zhong-shi-yong-kinect-v2-iai-kinect-shi-yong/"/>
      <url>/2021/11/19/ros-za-pian-ros-zhong-shi-yong-kinect-v2-iai-kinect-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇详细介绍了iai-kinect2功能包，在此基础上通过iai-kinect2获取深度图像，从而进行ROS中的开发。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211121155602208.png" alt="使用Kinect V2获取得到图像经过YOLO检测并与深度配准"></p><span id="more"></span><h1 id="ROS杂篇-ROS中使用Kinect-V2-Part2：iai-kinect2使用"><a href="#ROS杂篇-ROS中使用Kinect-V2-Part2：iai-kinect2使用" class="headerlink" title="ROS杂篇 ROS中使用Kinect V2 Part2：iai-kinect2使用"></a>ROS杂篇 ROS中使用Kinect V2 Part2：iai-kinect2使用</h1><blockquote><p>前言：为什么要写这篇博客</p></blockquote><p>在上一篇中，我们介绍了如何在<code>Ubuntu</code>上安装<code>Kinect V2</code>的开原驱动：<code>libfrenect2</code>，以及如何安装在<code>ROS</code>中使用<code>libfrenect2</code>获取深度图像的功能包<code>iai-kinect2</code>。然而在上一篇文章的最后，我们只是简单的使用了一下<code>iai-kinect2</code>功能包。但是我们通过<code>rostopic list</code>却看到了非常多的话题，那么这些话题之间到底是什么关系呢？又该如何基于<code>iai-kinect2</code>进行深度开发呢？</p><p>本节就将在上一篇的基础上，在介绍<code>iai-kinect2</code>的基础上，利用<code>iai-kinect2</code>进行开发。如果没有看过第一篇文章、没有配置好环境，先按照<a href="http://jackwang.cafe/2021/11/18/ros-za-pian-an-zhuang-kinect-v2-qu-dong/">第一篇文章中的教程</a>跟着来。</p><p>废话不多说，下面就开始吧。</p><h2 id="1-什么是iai-kinect2？"><a href="#1-什么是iai-kinect2？" class="headerlink" title="1. 什么是iai-kinect2？"></a>1. 什么是iai-kinect2？</h2><blockquote><p>我认为合理的学习方法：学什么前，先问是什么，再问为什么学（学习这个东西的目的），搞懂学了能为我们带来那些帮助，最后再开始学</p></blockquote><p>如果你有看过我的上一篇博客的话，你应该就会知道，<code>iai-kinect2</code>是<code>ROS</code>的一个功能包，他的作用在于调用了<code>libfreenect2</code>驱动来获得<code>Kinect V2</code>相机得到的深度图像以及通过<code>OpenGL</code>、<code>CUDA</code>、<code>CPU</code>等平台极大地提升了渲染速度和适应性。最终实现了多平台下深度图像30 FPS的性能。</p><p>下面是对<code>iai-kinect2</code>的更加详细的介绍</p><h3 id="A-谁开发的iai-kinect2"><a href="#A-谁开发的iai-kinect2" class="headerlink" title="A. 谁开发的iai-kinect2?"></a>A. 谁开发的iai-kinect2?</h3><p>iai-kinect2是由德国不莱梅大学（University of Bremen）的博士生Thiemo Wiedemeyer。他在2013年的时候去不莱梅大学的人工智能研究所读博的时候开发出了<code>iai-kinect2</code>。在2014年的时候，经过几个月的开发，他和他组里的另外一个负责串口相关部分的博士生合作，最终完成了这个非常好用的库，并在ROS的论坛上发布了这一消息。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120010505103.png" alt="Thiemo Wiedemeyer在ROS论坛上发布这个功能包的帖子"></p><h3 id="B-iai-kinect2的组成"><a href="#B-iai-kinect2的组成" class="headerlink" title="B. iai-kinect2的组成"></a>B. iai-kinect2的组成</h3><p>前面我们只是从大体上直到了<code>iai-kinect2</code>是一个<code>ROS</code>的功能包，他调用了<code>libfreenect2</code>来获取深度图像。其实更准确的说，<code>iai-kinect2</code>是<code>ROS</code>的一个<strong>元功能包</strong>。</p><blockquote><p><strong>什么是元功能包？</strong></p><p><code>ROS</code>中有一些基础的概念：工作空间、源码空间、编译空间、开发空间、功能包、元功能包、发行版等等。</p><p>通常我们工作是在一个工作空间中，这个工作空间中包含了我们开发的一切：我们的源代码、生成的库文件、生成的头文件、得到的可执行文件……而我们写的代码都以功能包的形式组织起来，我们在发布代码的时候就是以功能包的形式进行发布。而通常几个具有相关功能的功能包组合在一起就是一个元功能包，我们通过元功能包将几个功能包组合起来，使得他们成为一个整体来进行发布。</p><p>在下图中，我们所有的代码都在catkin_workspace这个工作空间中（挖个坑，以后写写文章讲讲什么是<code>catkin</code>）。而具体来说，我们的源代码存放在<code>src</code>源码空间中，我们通过<code>catkin_make</code>会对我们所有的源代码进行编译，编译过程中产生的中间文件，例如<code>Cmake</code>的<code>module</code>以及<code>Makefile</code>等等都在<code>build</code>编译空间中。我们最后的可执行文件和我们自己写的库文件都在<code>devel</code>开发空间中。对于源码空间中，一个package就负责实现一个具体的功能，例如读取摄像头、抓取物体等等。如果package1和package2有所关联，例如package1是读取摄像头的功能包，而package2是驱动机械臂的功能包，那么他们两个在一起可以完成机器人抓取物体这个功能，那么这个时候，我们就可以新建一个功能包，这个功能包什么都没有，只有表明这两个功能包在一起组成一个元功能包的配置信息，即描述元功能包架构的功能包。在下面就是iai-kinect2这个功能包</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.jpg" alt="ROS中的基础概念/文件系统"></p></blockquote><p>具体来说，<code>iai-kinect2</code>这个元功能包由几个功能包组成：<code>iai-kinect2</code>（元功能包描述功能包）、<code>kinect2_bridge</code>（负责调用libfreenect2、OpenGL获取图像的功能包）、<code>kinect_calibration</code>（提供了Kinect V2相机GUI校准的功能包）、<code>kinect_registration</code>（负责点云和深度图像配准的功能包）以及<code>kinect_viewer</code>（提供了简单的可视化功能的功能包）。</p><p>具体功能包的架构可以看下图</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120012913705.png" alt="iai-kinect2元功能包的架构"></p><h3 id="C-iai-kinect2的功能"><a href="#C-iai-kinect2的功能" class="headerlink" title="C. iai-kinect2的功能"></a>C. iai-kinect2的功能</h3><p>关于<code>iai-kinect2</code>的功能，我们前面其实已经体验过了他的可视化和获取深度图像以及点云和彩色图像的配准。因此这里主要关注<code>iai-kinect2</code>中的标定功能。</p><blockquote><p>众所周知，我们利用相机除了拍照以外，还有一个重要的功能就是从相机获取的图像信息出发计算三维空间中物体的几何信息并由此重建和识别物体。这也是计算机视觉的基本任务之一。那么我们在进行推断的时候就存在一些问题，其中最主要的一个问题就是相机的镜头畸变，即由于相机的镜头是一个凹透镜导致物体间真实的距离被扭曲。因此我们需要通过一些手段来进行修正。进行修正之后会得到一些参数，利用这些参数我们就可以对畸变的图像进行修正，以实现获得物体间精准的位置。由于这个参数和相机的镜头、角度有关，因此他们又叫做相机参数。通过标定我们就能够获得这些参数。</p><p>例如在下图中，我们可以直到机器人和地板的线都应该是直线，但是由于畸变导致原本直的线歪曲，这个现象在图像边缘处尤为明显。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120021326327.png" alt="相机畸变修正的例子"></p><p>当然除了畸变以外还有世界坐标转相机坐标等等问题，他们统称为相机参数。</p><p>关于相机标定的更多内容，推荐参考搜狐上的博客：<a href="https://www.sohu.com/a/336803765_120071391">https://www.sohu.com/a/336803765_120071391</a></p></blockquote><p><code>iai-kinect2</code>中直接提供了用于相机标定的程序，因此我们可以直接在命令行中进行调用即可。关于如何进行校准，参考<a href="https://github.com/code-iai/iai_kinect2/tree/master/kinect2_calibration#calibrating-the-kinect-one">github上的readme</a></p><p>最终通过标定，可以实现的效果如下。可以看出来，原本倾斜的图像被校准了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/68747470733a2f2f61692e756e692d6272656d656e2e64652f5f6d656469612f6b696e656374325f636c6f75645f6e6f63616c69622e706e67" alt="未校准前的点云图像"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/68747470733a2f2f61692e756e692d6272656d656e2e64652f5f6d656469612f6b696e656374325f636c6f75645f63616c69622e706e67" alt="校准后的点云图像"></p><h2 id="2-iai-kinect2的使用"><a href="#2-iai-kinect2的使用" class="headerlink" title="2. iai-kinect2的使用"></a>2. iai-kinect2的使用</h2><p>我们在下面将对<code>iai-kinect2</code>的使用进行介绍，不过需要说明的是：由于<code>iai-kinect2</code>的代码非常好，将自己尽可能的低耦合，因此其所有的依赖都是<code>ROS</code>的标准消息。因此，我们学习iai-kinect2的使用主要是从下面两个方面去学习</p><ul><li><code>iai-kinect2</code>中使用的<code>ROS</code>的标准消息：<code>Image</code>和<code>CompressedImage</code></li><li><code>iai-kinect2</code>中每个话题的含义和作用</li></ul><h3 id="A-ROS中Image和CompressedImage"><a href="#A-ROS中Image和CompressedImage" class="headerlink" title="A. ROS中Image和CompressedImage"></a>A. ROS中Image和CompressedImage</h3><p><code>ROS</code>中为图像数据提供了两个官方的消息类型：<code>Image</code>和<code>CompressedImage</code>。其中<code>Image</code>是没有经过压缩的图片而<code>CompressedImage</code>则是经过压缩的图片。由与<code>ROS</code>中的所有的消息其实都是基于<code>std_msgs</code>提供的基础数据类型上定义的，因此<code>Image</code>和<code>CompressedImage</code>也不例外。具体来说，图片本身是用一个装着字节流的数组保存的，而图片的<code>frame_id</code>和对应的相机信息等等都是有对应的项。</p><h4 id="消息定义"><a href="#消息定义" class="headerlink" title="消息定义"></a>消息定义</h4><p>首先是<code>Image</code>消息的定义，可以看到<code>header</code>中提供时间戳等信息，而图像的长宽、字节序、编码方式等等内容都是用于帮助解码<code>data</code>字节流的。此外也能够看到，<code>ROS</code>中的图像每一个像素都是用一个8位无符号整数描述的。</p><pre class="line-numbers language-msg"><code class="language-msg"># This message contains an uncompressed image# (0, 0) is at top-left corner of image#Header header        # Header timestamp should be acquisition time of image                     # Header frame_id should be optical frame of camera                     # origin of frame should be optical center of camera                     # +x should point to the right in the image                     # +y should point down in the image                     # +z should point into to plane of the image                     # If the frame_id here and the frame_id of the CameraInfo                     # message associated with the image conflict                     # the behavior is undefineduint32 height         # image height, that is, number of rowsuint32 width          # image width, that is, number of columns# The legal values for encoding are in file src/image_encodings.cpp# If you want to standardize a new string format, join# ros-users@lists.sourceforge.net and send an email proposing a new encoding.string encoding       # Encoding of pixels -- channel meaning, ordering, size                      # taken from the list of strings in include/sensor_msgs/image_encodings.huint8 is_bigendian    # is this data bigendian?uint32 step           # Full row length in bytesuint8[] data          # actual matrix data, size is (step * rows)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似的，<code>CompressedImage</code>则是经过压缩的图像，具体的压缩方式就是使用<code>jpg</code>、<code>png</code>等编码格式，因此图像的编码方式是固定的</p><pre class="line-numbers language-tmsg"><code class="language-tmsg">Header header        # Header timestamp should be acquisition time of image                     # Header frame_id should be optical frame of camera                     # origin of frame should be optical center of camera                     # +x should point to the right in the image                     # +y should point down in the image                     # +z should point into to plane of the imagestring format        # Specifies the format of the data                     #   Acceptable values:                     #     jpeg, pnguint8[] data         # Compressed image buffer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后需要注意的是<code>iai-kinect2</code>中还用到了<code>camerainfo</code>这个<code>ROS</code>的官方消息，其内容如下，主要定义了相机的内外参数，获取图像的分辨率等信息</p><pre class="line-numbers language-msg"><code class="language-msg"># This message defines meta information for a camera. It should be in a# camera namespace on topic "camera_info" and accompanied by up to five# image topics named:##   image_raw - raw data from the camera driver, possibly Bayer encoded#   image            - monochrome, distorted#   image_color      - color, distorted#   image_rect       - monochrome, rectified#   image_rect_color - color, rectified## The image_pipeline contains packages (image_proc, stereo_image_proc)# for producing the four processed image topics from image_raw and# camera_info. The meaning of the camera parameters are described in# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.## The image_geometry package provides a user-friendly interface to# common operations using this meta information. If you want to, e.g.,# project a 3d point into image coordinates, we strongly recommend# using image_geometry.## If the camera is uncalibrated, the matrices D, K, R, P should be left# zeroed out. In particular, clients may assume that K[0] == 0.0# indicates an uncalibrated camera.########################################################################                     Image acquisition info                          ######################################################################### Time of image acquisition, camera coordinate frame IDHeader header    # Header timestamp should be acquisition time of image                 # Header frame_id should be optical frame of camera                 # origin of frame should be optical center of camera                 # +x should point to the right in the image                 # +y should point down in the image                 # +z should point into the plane of the image########################################################################                      Calibration Parameters                         ######################################################################### These are fixed during camera calibration. Their values will be the ## same in all messages until the camera is recalibrated. Note that    ## self-calibrating systems may "recalibrate" frequently.              ##                                                                     ## The internal parameters can be used to warp a raw (distorted) image ## to:                                                                 ##   1. An undistorted image (requires D and K)                        ##   2. A rectified image (requires D, K, R)                           ## The projection matrix P projects 3D points into the rectified image.######################################################################### The image dimensions with which the camera was calibrated. Normally# this will be the full camera resolution in pixels.uint32 heightuint32 width# The distortion model used. Supported models are listed in# sensor_msgs/distortion_models.h. For most cameras, "plumb_bob" - a# simple model of radial and tangential distortion - is sufficient.string distortion_model# The distortion parameters, size depending on the distortion model.# For "plumb_bob", the 5 parameters are: (k1, k2, t1, t2, k3).float64[] D# Intrinsic camera matrix for the raw (distorted) images.#     [fx  0 cx]# K = [ 0 fy cy]#     [ 0  0  1]# Projects 3D points in the camera coordinate frame to 2D pixel# coordinates using the focal lengths (fx, fy) and principal point# (cx, cy).float64[9]  K # 3x3 row-major matrix# Rectification matrix (stereo cameras only)# A rotation matrix aligning the camera coordinate system to the ideal# stereo image plane so that epipolar lines in both stereo images are# parallel.float64[9]  R # 3x3 row-major matrix# Projection/camera matrix#     [fx'  0  cx' Tx]# P = [ 0  fy' cy' Ty]#     [ 0   0   1   0]# By convention, this matrix specifies the intrinsic (camera) matrix#  of the processed (rectified) image. That is, the left 3x3 portion#  is the normal camera intrinsic matrix for the rectified image.# It projects 3D points in the camera coordinate frame to 2D pixel#  coordinates using the focal lengths (fx', fy') and principal point#  (cx', cy') - these may differ from the values in K.# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will#  also have R = the identity and P[1:3,1:3] = K.# For a stereo pair, the fourth column [Tx Ty 0]' is related to the#  position of the optical center of the second camera in the first#  camera's frame. We assume Tz = 0 so both cameras are in the same#  stereo image plane. The first camera always has Tx = Ty = 0. For#  the right (second) camera of a horizontal stereo pair, Ty = 0 and#  Tx = -fx' * B, where B is the baseline between the cameras.# Given a 3D point [X Y Z]', the projection (x, y) of the point onto#  the rectified image is given by:#  [u v w]' = P * [X Y Z 1]'#         x = u / w#         y = v / w#  This holds for both images of a stereo pair.float64[12] P # 3x4 row-major matrix########################################################################                      Operational Parameters                         ######################################################################### These define the image region actually captured by the camera       ## driver. Although they affect the geometry of the output image, they ## may be changed freely without recalibrating the camera.             ######################################################################### Binning refers here to any camera setting which combines rectangular#  neighborhoods of pixels into larger "super-pixels." It reduces the#  resolution of the output image to#  (width / binning_x) x (height / binning_y).# The default values binning_x = binning_y = 0 is considered the same#  as binning_x = binning_y = 1 (no subsampling).uint32 binning_xuint32 binning_y# Region of interest (subwindow of full camera resolution), given in#  full resolution (unbinned) image coordinates. A particular ROI#  always denotes the same window of pixels on the camera sensor,#  regardless of binning settings.# The default setting of roi (all values 0) is considered the same as#  full resolution (roi.width = width, roi.height = height).RegionOfInterest roi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于其他传感器消息，参考<code>roswiki</code>的文章：<a href="http://wiki.ros.org/sensor_msgs">http://wiki.ros.org/sensor_msgs</a></p><p>关于全部的官方消息，参考<code>roswiki</code>文章：<a href="http://wiki.ros.org/common_msgs?distro=noetic">http://wiki.ros.org/common_msgs?distro=noetic</a></p><h4 id="使用cv-bridge转接给OpenCV"><a href="#使用cv-bridge转接给OpenCV" class="headerlink" title="使用cv_bridge转接给OpenCV"></a>使用cv_bridge转接给OpenCV</h4><p>需要注意的是，上面的方式的到的图像都是<code>ROS</code>中定义的图像的消息，而<code>ROS</code>中的图像的消息和<code>OpenCV</code>的并不一样，因此如果我们后续还要对图像进行处理的话，就需要将<code>ROS</code>中的图像转变为<code>OpenCV</code>的图像。为此我们就需要使用<code>CV_bridge</code>。</p><p>ROS中的图像和OpenCV中的图像不一样的地方在于，<code>ROS</code>是通过字节流以及辅助的解码信息来表示一张图像，而OpenCV则是通过其核心的<code>lplImage</code>数据结构来表示一张图像（<code>lpl</code>表示 <code>Intel Image Processing Library</code>）。<code>lplImage</code>的定义如下，当然我们没必要全部搞懂，看看定义知道不同即可。</p><p>此外<code>Python</code>中<code>OpenCV</code>的图像的表示是基于<code>Num Py</code>的，因此还会存在不一样的地方。</p><pre class="line-numbers language-c++"><code class="language-c++">typedef struct _IplImage      {          int  nSize;         /* IplImage大小 */          int  ID;            /* 版本 (=0)*/          int  nChannels;     /* 大多数OPENCV函数支持1,2,3 或 4 个通道 */          int  alphaChannel;  /* 被OpenCV忽略 */          int  depth;         /* 像素的位深度: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16U,                                IPL_DEPTH_16S, IPL_DEPTH_32S, IPL_DEPTH_32F and IPL_DEPTH_64F 可支持 */          char colorModel[4]; /* 被OpenCV忽略 */          char channelSeq[4]; /* 同上 */          int  dataOrder;     /* 0 - 交叉存取颜色通道, 1 - 分开的颜色通道.                                cvCreateImage只能创建交叉存取图像 */          int  origin;        /* 0 - 顶—左结构,                                1 - 底—左结构 (Windows bitmaps 风格) */          int  align;         /* 图像行排列 (4 or 8). OpenCV 忽略它，使用 widthStep 代替 */          int  width;         /* 图像宽像素数 */          int  height;        /* 图像高像素数*/          struct _IplROI *roi;/* 图像感兴趣区域. 当该值非空只对该区域进行处理 */          struct _IplImage *maskROI; /* 在 OpenCV中必须置NULL */          void  *imageId;     /* 同上*/          struct _IplTileInfo *tileInfo; /*同上*/          int  imageSize;     /* 图像数据大小(在交叉存取格式下imageSize=image->height*image->widthStep），单位字节*/          char *imageData;  /* 指向排列的图像数据 */          int  widthStep;   /* 排列的图像行大小，以字节为单位 */          int  BorderMode[4]; /* 边际结束模式, 被OpenCV忽略 */          int  BorderConst[4]; /* 同上 */          char *imageDataOrigin; /* 指针指向一个不同的图像数据结构（不是必须排列的），是为了纠正图像内存分配准备的 */      }      IplImage;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以<code>cv_bridge</code>的功能就是下面这张图中所表述的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/cv_bridge" alt="cv_bridge的作用"></p><p>更多关于<code>cv_bridge</code>的问题，参考<code>roswiki</code>：<a href="https://wiki.ros.org/cv_bridge">https://wiki.ros.org/cv_bridge</a></p><p>此外，需要注意的是，在<code>Melodic</code>下在<code>Python</code>中使用cv_bridge会报错无法加载一个so/dynamic啥啥啥，关于这个问题的解决，先挖个坑，以后再补。</p><h3 id="B-iai-kinect2中每个话题的含义和作用"><a href="#B-iai-kinect2中每个话题的含义和作用" class="headerlink" title="B. iai-kinect2中每个话题的含义和作用"></a>B. iai-kinect2中每个话题的含义和作用</h3><p>当我们以<code>launch</code>文件的形式运行<code>iai-kinect2</code>后，我们会看到很多的话题，这些话题其实分成三组：<code>hd</code>、<code>qhd</code>和<code>sd</code>。需要注意的是，每组话题下的<code>points</code>话题都只是只有通过<code>launch</code>文件运行才会看到的。</p><h4 id="HD话题"><a href="#HD话题" class="headerlink" title="HD话题"></a>HD话题</h4><p>HD话题其实指的是高分辨率的图像，由于<code>Kinect V2</code>相比<code>Kinect V1</code>，其图像极限分辨率1920x1080，因此HD话题中所有的图像都是极限分辨率1920x1080的图像</p><p>此外，HD话题下发布的color表示是RGB彩色图像、<code>color_rect</code>则是经过畸变处理（rectified）的图像，<code>compressed</code>的则是经过压缩的图像。depth则是深度图，<code>mono</code>则是单色灰度图。</p><pre class="line-numbers language-text"><code class="language-text">/kinect2/hd/camera_info/kinect2/hd/image_color/kinect2/hd/image_color/compressed/kinect2/hd/image_color_rect/kinect2/hd/image_color_rect/compressed/kinect2/hd/image_depth_rect/kinect2/hd/image_depth_rect/compressed/kinect2/hd/image_mono/kinect2/hd/image_mono/compressed/kinect2/hd/image_mono_rect/kinect2/hd/image_mono_rect/compressed/kinect2/hd/points<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="QHD话题"><a href="#QHD话题" class="headerlink" title="QHD话题"></a>QHD话题</h4><p>QHD话题的全称是Quater HD，即该话题是HD话题的1/4。原因在于HD话题下的图片实在是太大了，因此无论是数据的传输还是处理都很慢。所以QHD中的图像是对HD的图像进行降采样之后的图像，长宽各自降采样一半，所以是512x424的图片。因此图像处理起来速度很快</p><pre class="line-numbers language-text"><code class="language-text">/kinect2/qhd/camera_info/kinect2/qhd/image_color/kinect2/qhd/image_color/compressed/kinect2/qhd/image_color_rect/kinect2/qhd/image_color_rect/compressed/kinect2/qhd/image_depth_rect/kinect2/qhd/image_depth_rect/compressed/kinect2/qhd/image_mono/kinect2/qhd/image_mono/compressed/kinect2/qhd/image_mono_rect/kinect2/qhd/image_mono_rect/compressed/kinect2/qhd/points<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SD话题"><a href="#SD话题" class="headerlink" title="SD话题"></a>SD话题</h4><p>SD话题中的图像都是从相机获得的红外和深度图像，因此大小都是原本的大小：512x424，处理起来速度还是比较快的。</p><pre class="line-numbers language-text"><code class="language-text">/kinect2/sd/camera_info/kinect2/sd/image_color_rect/kinect2/sd/image_color_rect/compressed/kinect2/sd/image_depth/kinect2/sd/image_depth/compressed/kinect2/sd/image_depth_rect/kinect2/sd/image_depth_rect/compressed/kinect2/sd/image_ir/kinect2/sd/image_ir/compressed/kinect2/sd/image_ir_rect/kinect2/sd/image_ir_rect/compressed/kinect2/sd/points<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C-launch启动节点时候指定参数"><a href="#C-launch启动节点时候指定参数" class="headerlink" title="C. launch启动节点时候指定参数"></a>C. launch启动节点时候指定参数</h3><p>由于iai-kinect2自成一套系统，因此我们没有必要也很难修改他的代码来完成我们需要的功能。为此<code>iai-kinect2</code>的<code>launch</code>文件支持在启动的时候指定参数，来实现不同的功能，具体所有的参数如下</p><pre class="line-numbers language-bash"><code class="language-bash">roslaunch kinect2_bridge kinect2_bridge.launch <span class="token punctuation">[</span>options:<span class="token operator">=</span>value<span class="token punctuation">]</span>base_name:<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">></span>    default: kinect2    info:    <span class="token keyword">set</span> base name <span class="token keyword">for</span> all topicssensor:<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">></span>    default:    info:    serial of the sensor to usefps_limit:<span class="token operator">=</span><span class="token operator">&lt;</span>double<span class="token operator">></span>    default: -1.0    info:    limit the frames per secondcalib_path:<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">></span>    default: /home/wiedemeyer/work/src/iai_kinect2/kinect2_bridge/data/    info:    path to the calibration filesuse_png:<span class="token operator">=</span><span class="token operator">&lt;</span>bool<span class="token operator">></span>    default: <span class="token boolean">false</span>    info:    Use PNG compression instead of TIFFjpeg_quality:<span class="token operator">=</span><span class="token operator">&lt;</span>int<span class="token operator">></span>    default: 90    info:    JPEG quality level from 0 to 100png_level:<span class="token operator">=</span><span class="token operator">&lt;</span>int<span class="token operator">></span>    default: 1    info:    PNG compression level from 0 to 9depth_method:<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">></span>    default: cuda    info:    Use specific depth processing: default, cpu, opengl, opencl, cuda, clkde, cudakdedepth_device:<span class="token operator">=</span><span class="token operator">&lt;</span>int<span class="token operator">></span>    default: -1    info:    openCL device to use <span class="token keyword">for</span> depth processingreg_method:<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">></span>    default: opencl    info:    Use specific depth registration: default, cpu, openclreg_device:<span class="token operator">=</span><span class="token operator">&lt;</span>int<span class="token operator">></span>    default: -1    info:    openCL device to use <span class="token keyword">for</span> depth registrationmax_depth:<span class="token operator">=</span><span class="token operator">&lt;</span>double<span class="token operator">></span>    default: 12.0    info:    max depth valuemin_depth:<span class="token operator">=</span><span class="token operator">&lt;</span>double<span class="token operator">></span>    default: 0.1    info:    min depth valuequeue_size:<span class="token operator">=</span><span class="token operator">&lt;</span>int<span class="token operator">></span>    default: 2    info:    queue size of publisherbilateral_filter:<span class="token operator">=</span><span class="token operator">&lt;</span>bool<span class="token operator">></span>    default: <span class="token boolean">true</span>    info:    <span class="token function">enable</span> bilateral filtering of depth imagesedge_aware_filter:<span class="token operator">=</span><span class="token operator">&lt;</span>bool<span class="token operator">></span>    default: <span class="token boolean">true</span>    info:    <span class="token function">enable</span> edge aware filtering of depth imagespublish_tf:<span class="token operator">=</span><span class="token operator">&lt;</span>bool<span class="token operator">></span>    default: <span class="token boolean">false</span>    info:    publish static tf transforms <span class="token keyword">for</span> camerabase_name_tf:<span class="token operator">=</span><span class="token operator">&lt;</span>string<span class="token operator">></span>    default: as base_name    info:    base name <span class="token keyword">for</span> the tf framesworker_threads:<span class="token operator">=</span><span class="token operator">&lt;</span>int<span class="token operator">></span>    default: 4    info:    number of threads used <span class="token keyword">for</span> processing the images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-iai-kinect2使用示例"><a href="#3-iai-kinect2使用示例" class="headerlink" title="3. iai-kinect2使用示例"></a>3. iai-kinect2使用示例</h2><p>经过上面的介绍，我们对于如何使用iai-kinect2来获得深度图像和点云应该有了认识，下面我们就给出几个使用的例子。</p><p>其实使用的具体流程很简单，就是去订阅HD、QHD、SD话题中的消息，然后使用CV_Bridge转换成OpenCV的图像，然后再使用OpenCV进行视频图像的处理。</p><h3 id="A-图像显示"><a href="#A-图像显示" class="headerlink" title="A. 图像显示"></a>A. 图像显示</h3><p>下面的这个程序是通过接受命令行参数来实现显示的节点，利用这个程序可以显示每个话题下的图像。不过有一个小问题是我本来想做的是可以同一时间多个窗口显示多个图像，这样效果会好很多。但是由于我电脑性能的问题跑起来很卡，但是显示单独的话题倒是很不错</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /home/jack/anaconda3/envs/ros/bin/python</span><span class="token triple-quoted-string string">""" 命令行快捷查看iai-kinect2图像的节点 """</span><span class="token triple-quoted-string string">"""@author: Jack Wang@copyright: Jack Wang@date: 2021-11-20"""</span><span class="token keyword">from</span> os <span class="token keyword">import</span> read<span class="token keyword">import</span> sys<span class="token keyword">import</span> argparse<span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">for</span> path_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"2.7"</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span>path_idx<span class="token punctuation">]</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>path_idx<span class="token punctuation">)</span>        <span class="token keyword">break</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> cv_bridge <span class="token keyword">import</span> CvBridge<span class="token keyword">from</span> sensor_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Image<span class="token punctuation">,</span> CompressedImage<span class="token keyword">class</span> <span class="token class-name">iaiKinect2Viewer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    bridge <span class="token operator">=</span> CvBridge<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>subcribers<span class="token punctuation">:</span> List<span class="token punctuation">[</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>windows_idx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">assert</span> len<span class="token punctuation">(</span>args<span class="token punctuation">.</span>topic<span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>args<span class="token punctuation">.</span>quality<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> f<span class="token string">"话题数不匹配"</span>        group_num <span class="token operator">=</span> len<span class="token punctuation">(</span>args<span class="token punctuation">.</span>topic<span class="token punctuation">)</span> <span class="token operator">//</span> len<span class="token punctuation">(</span>args<span class="token punctuation">.</span>quality<span class="token punctuation">)</span>        <span class="token keyword">for</span> quality <span class="token keyword">in</span> args<span class="token punctuation">.</span>quality<span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>group_num<span class="token punctuation">)</span><span class="token punctuation">:</span>                temp_topic <span class="token operator">=</span> args<span class="token punctuation">.</span>topic<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>add_subscriber<span class="token punctuation">(</span>quality<span class="token punctuation">,</span> temp_topic<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_subscriber</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> quality<span class="token punctuation">:</span> str<span class="token punctuation">,</span> topic<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> quality <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">"sd"</span><span class="token punctuation">,</span> <span class="token string">"qhd"</span><span class="token punctuation">,</span><span class="token string">"hd"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token string">"无效的话题组"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>quality<span class="token punctuation">,</span> topic<span class="token punctuation">)</span>        topic <span class="token operator">=</span> topic<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span>        prefix <span class="token operator">=</span> <span class="token string">"/kinect2"</span>        <span class="token keyword">if</span> <span class="token string">"color"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_color_rect"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"color"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_color_rect"</span><span class="token punctuation">,</span><span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"color"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token operator">not</span> <span class="token keyword">in</span>  topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_color"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"color"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token operator">not</span> <span class="token keyword">in</span>  topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_color"</span><span class="token punctuation">,</span> <span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"depth"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_depth_rect"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"depth"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_depth_rect"</span><span class="token punctuation">,</span> <span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"mono"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_mono_rect"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"mono"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_mono_rect"</span><span class="token punctuation">,</span><span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"mono"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token operator">not</span> <span class="token keyword">in</span>  topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_mono"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"mono"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token operator">not</span> <span class="token keyword">in</span>  topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_mono"</span><span class="token punctuation">,</span> <span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"ir"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_ir_rect"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"ir"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_ir_rect"</span><span class="token punctuation">,</span><span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"ir"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token operator">not</span> <span class="token keyword">in</span>  topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token operator">not</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_ir"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_images<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">elif</span> <span class="token string">"ir"</span> <span class="token keyword">in</span> topic <span class="token operator">and</span> <span class="token string">"rect"</span> <span class="token operator">not</span> <span class="token keyword">in</span>  topic <span class="token operator">and</span> <span class="token string">"compressed"</span> <span class="token keyword">in</span> topic<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>subcribers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/"</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> quality<span class="token punctuation">,</span> <span class="token string">"image_ir"</span><span class="token punctuation">,</span> <span class="token string">"compressed"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>show_compressed_image<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> callback_args<span class="token operator">=</span>self<span class="token punctuation">.</span>windows_idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>windows_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> <span class="token boolean">False</span><span class="token punctuation">,</span> f<span class="token string">"无效的参数：qualitt={quality}, topic={topic}"</span>    <span class="token keyword">def</span> <span class="token function">show_images</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">,</span> window_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        cv_img <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>imgmsg_to_cv2<span class="token punctuation">(</span>img_msg<span class="token operator">=</span>img<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>f<span class="token string">"viewer_{window_idx}"</span><span class="token punctuation">,</span> cv_img<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>signal_shutdown<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"pressed esc"</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">show_compressed_image</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">:</span> CompressedImage<span class="token punctuation">,</span> windows_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        cv_img <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>compressed_imgmsg_to_cv2<span class="token punctuation">(</span>cmprs_img_msg<span class="token operator">=</span>img<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>f<span class="token string">"viewer_{windows_idx}"</span><span class="token punctuation">,</span> cv_img<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>signal_shutdown<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"pressed esc"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">arg_parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> argparse<span class="token punctuation">.</span>Namespace<span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"本程序用于可视化显示iai-kinect2的不同话题中的图片，以对比他们的不同"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-q"</span><span class="token punctuation">,</span> <span class="token string">"--quality"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"quality"</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">"*"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"指定需要显示图像的话题组"</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-t"</span><span class="token punctuation">,</span> <span class="token string">"--topic"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"topic"</span><span class="token punctuation">,</span> nargs<span class="token operator">=</span><span class="token string">"+"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"指定需要显示图像的话题"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> arg_parser<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>quality<span class="token punctuation">,</span> args<span class="token punctuation">.</span>topic<span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"ini_kinect2_viewer"</span><span class="token punctuation">)</span>    viewer <span class="token operator">=</span> iaiKinect2Viewer<span class="token punctuation">(</span>args<span class="token operator">=</span>args<span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用的话则在命令行中加上参数，<code>-q</code>表示图像的质量，即<code>qhd</code>、<code>sd</code>还是<code>hd</code>，<code>-t</code>表示显示的话题。写的时候是支持多个话题同时显示的，但是不知道哪里出问题了显示不出来</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示单个话题的图像：1/4 大小的灰度图</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ rosrun look_kenect2 look_images.py -q qhd -t mono<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120152240529.png" alt="qhd中mono里的黑白图像"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示单个话题的图像：1/4 大小的彩色图</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ rosrun look_kenect2 look_images.py -q qhd -t color<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120152424998.png" alt="qhd中color里的彩色图像"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示单个话题的图像：1/4 大小的深度图</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ rosrun look_kenect2 look_images.py -q qhd -t depth_compressed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要说明的是，qhd和hd中的深度图像如果不用compressed，即直接用的kinect采集到的的点的话，那么显示的非常卡，因为点云的数据实在是太大了，用而compressed中的数据则是iai-kinect2经过OpenCL、CUDA加速渲染之后得到的，因此帧率比较高。此外获取到的深度图每个像素都是一个以毫米为单位的距离值，因此使用OpenCV直接显示的话被做了归一化，所以越近的地方越黑，越远的地方越白，一些异常点，即没有反射的点距离被认为是摄像头获取距离的极限值（&gt;1200，即超过12米），因此这些异常点使得归一化之后基本都是黑的，我们自己使用的时候一定要先处理异常点然后再归一化，最后再显示</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120153143101.png" alt="qhd里的深度图"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示单个话题的图像：sd大小的红外图像</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ rosrun look_kenect2 look_images.py -q sd -t ir_rect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要说明的是，Kinect V2相机有一个红外发射器，一个红外接收器，因此距离越近，表面越光滑，接收器接收到反射的红外线越强，数值越高，对应就越白</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120154330718.png" alt="sd里的红外图"></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示单个话题的图像：sd大小的色彩图</span>^<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ rosrun look_kenect2 look_images.py -q sd -t color_rect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>理论上来说，sd话题里显示的都是红外相机拍摄得到的图片，因此不会存在颜色，所以这里其实是把RGB相机拍到的图片和红外相机图片配准之后的结果</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211120154705830.png" alt="sd里的color_rect"></p><h3 id="B-YOLO-V5进行物体检测"><a href="#B-YOLO-V5进行物体检测" class="headerlink" title="B. YOLO V5进行物体检测"></a>B. YOLO V5进行物体检测</h3><p>利用之前写好的YOLO V5，可以实现物体检测，然后根据深度图像来标注出物体的距离</p><p>YOLO V5的代码后面整理出来会放出来，这里先用一用，下面的代码需要注意的是rospy中的message_filter如果消息频率速度过快，甚至快过了message_filter处理的速度，那么就会导致两个消息无法对应起来，因此就永远不会调用回调函数，因此cv2.waitkey需要等10毫秒左右</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /home/jack/anaconda3/envs/ros/bin/python</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> time<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span class="token keyword">from</span> libyolo <span class="token keyword">import</span> YoloV5stemp_path <span class="token operator">=</span> None<span class="token keyword">for</span> path_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"2.7"</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span>path_idx<span class="token punctuation">]</span><span class="token punctuation">:</span>        temp_path <span class="token operator">=</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>path_idx<span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token keyword">if</span> temp_path <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>    sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp_path<span class="token punctuation">)</span><span class="token keyword">import</span> rospy<span class="token keyword">import</span> message_filters<span class="token keyword">from</span> sensor_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> CompressedImage<span class="token keyword">from</span> cv_bridge <span class="token keyword">import</span> CvBridge<span class="token keyword">class</span> <span class="token class-name">DetectYoloKinect</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    yolo <span class="token operator">=</span> YoloV5s<span class="token punctuation">(</span>weight_path<span class="token operator">=</span>Path<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">.</span>resolve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>joinpath<span class="token punctuation">(</span><span class="token string">"models"</span><span class="token punctuation">,</span> <span class="token string">"yolov5s.pt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    bridge <span class="token operator">=</span> CvBridge<span class="token punctuation">(</span><span class="token punctuation">)</span>    font <span class="token operator">=</span> cv2<span class="token punctuation">.</span>FONT_HERSHEY_DUPLEX    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rgb_img_topic<span class="token punctuation">:</span> str<span class="token punctuation">,</span> depth_img_topic<span class="token punctuation">:</span> str<span class="token punctuation">,</span> if_detection_only<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>msg<span class="token operator">=</span>f<span class="token string">"{Fore.GREEN}启动物体检测节点！{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> if_detection_only<span class="token punctuation">:</span>            rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span>rgb_img_topic<span class="token punctuation">,</span> data_class<span class="token operator">=</span>CompressedImage<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>_detect_only_cb<span class="token punctuation">,</span>                             queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            rgb_subscriber <span class="token operator">=</span> message_filters<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>rgb_img_topic<span class="token punctuation">,</span> CompressedImage<span class="token punctuation">)</span>            depth_subscriber <span class="token operator">=</span> message_filters<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>depth_img_topic<span class="token punctuation">,</span> CompressedImage<span class="token punctuation">)</span>            sync <span class="token operator">=</span> message_filters<span class="token punctuation">.</span>ApproximateTimeSynchronizer<span class="token punctuation">(</span>fs<span class="token operator">=</span><span class="token punctuation">[</span>rgb_subscriber<span class="token punctuation">,</span> depth_subscriber<span class="token punctuation">]</span><span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>                                                               slop<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            sync<span class="token punctuation">.</span>registerCallback<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_multi_cb<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>last_time_rgb <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_detect_only_cb</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">:</span> CompressedImage<span class="token punctuation">)</span><span class="token punctuation">:</span>        cv_image<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>compressed_imgmsg_to_cv2<span class="token punctuation">(</span>cmprs_img_msg<span class="token operator">=</span>img<span class="token punctuation">)</span>        result_dict<span class="token punctuation">,</span> draw_img <span class="token operator">=</span> self<span class="token punctuation">.</span>yolo<span class="token punctuation">.</span>inference<span class="token punctuation">(</span>cv_image<span class="token punctuation">,</span> if_absolute<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> if_show<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        draw_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>draw_img<span class="token punctuation">,</span> f<span class="token string">"fps: {1 / (t2 - self.last_time_rgb):>5.2f}, seq_id: {img.header.seq}"</span><span class="token punctuation">,</span>                               <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>last_time_rgb <span class="token operator">=</span> t2        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"color_detections"</span><span class="token punctuation">,</span> draw_img<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>logwarn<span class="token punctuation">(</span><span class="token string">"按下了ESC键，终止节点..."</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>signal_shutdown<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"pressed esc"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_multi_cb</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> rgb_img<span class="token punctuation">:</span> CompressedImage<span class="token punctuation">,</span> depth_img<span class="token punctuation">:</span> CompressedImage<span class="token punctuation">)</span><span class="token punctuation">:</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Getting into _multi_cb"</span><span class="token punctuation">)</span>        cv_rgb<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>compressed_imgmsg_to_cv2<span class="token punctuation">(</span>cmprs_img_msg<span class="token operator">=</span>rgb_img<span class="token punctuation">)</span>        cv_depth<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>compressed_imgmsg_to_cv2<span class="token punctuation">(</span>cmprs_img_msg<span class="token operator">=</span>depth_img<span class="token punctuation">)</span>        cv_depth_draw<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray <span class="token operator">=</span> np<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">[</span>cv_depth<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># to BGR</span>        cv_depth_draw <span class="token operator">=</span> <span class="token punctuation">(</span>cv_depth_draw <span class="token operator">-</span> cv_depth_draw<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>cv_depth_draw<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> cv_depth_draw<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># inference</span>        result_dict<span class="token punctuation">,</span> cv_rgb_draw <span class="token operator">=</span> self<span class="token punctuation">.</span>yolo<span class="token punctuation">.</span>inference<span class="token punctuation">(</span>cv_rgb<span class="token punctuation">,</span> if_absolute<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> if_show<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># log time</span>        t <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        fps <span class="token operator">=</span> round<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span>t <span class="token operator">-</span> self<span class="token punctuation">.</span>last_time_rgb<span class="token punctuation">)</span><span class="token punctuation">,</span> ndigits<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>last_time_rgb <span class="token operator">=</span> t        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">"Done inference, start to draw"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># draw basic info</span>        cv_rgb_draw <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>cv_rgb_draw<span class="token punctuation">,</span> f<span class="token string">"FPS:{fps}, seq:{depth_img.header.seq}"</span><span class="token punctuation">,</span>                                  org<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fontFace<span class="token operator">=</span>self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> fontScale<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        cv_depth_draw <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>cv_depth_draw<span class="token punctuation">,</span> f<span class="token string">"FPS:{fps}, seq:{depth_img.header.seq}"</span><span class="token punctuation">,</span>                                    org<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fontFace<span class="token operator">=</span>self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> fontScale<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># draw depth</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>msg<span class="token operator">=</span><span class="token string">"Done draw basic, start draw depth"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> d_type<span class="token punctuation">,</span> items <span class="token keyword">in</span> result_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 周围100个点的平均，yolo的结果已经确保点在图像内</span>                depth <span class="token operator">=</span> self<span class="token punctuation">.</span>__get_depth<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token punctuation">:</span><span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>y <span class="token punctuation">:</span><span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> depth_image<span class="token operator">=</span>cv_depth<span class="token punctuation">,</span> area_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>                x<span class="token punctuation">,</span> y <span class="token operator">=</span> int<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>y<span class="token punctuation">)</span>                cv_depth_draw <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>cv_depth_draw<span class="token punctuation">,</span> text<span class="token operator">=</span>f<span class="token string">"{d_type}, {depth / 10:>.2f}m"</span><span class="token punctuation">,</span> org<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token number">-5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                            fontFace<span class="token operator">=</span>self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> fontScale<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lineType<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                cv_depth_draw <span class="token operator">=</span> cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>cv_depth_draw<span class="token punctuation">,</span> center<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                           thickness<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> lineType<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>msg<span class="token operator">=</span>f<span class="token string">"Done Drawing"</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"detection_result"</span><span class="token punctuation">,</span> cv_rgb_draw<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"depth_result"</span><span class="token punctuation">,</span> cv_depth_draw<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>logwarn<span class="token punctuation">(</span>msg<span class="token operator">=</span>f<span class="token string">"按下了ESC键，手动关闭了节点"</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>signal_shutdown<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"pressed esc"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">__get_depth</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> float<span class="token punctuation">,</span> y<span class="token punctuation">:</span> float<span class="token punctuation">,</span> depth_image<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> area_size<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> float<span class="token punctuation">:</span>        boundary <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token keyword">for</span> position <span class="token keyword">in</span>                    <span class="token punctuation">[</span>y <span class="token operator">-</span> area_size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">+</span> area_size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x <span class="token operator">-</span> area_size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x <span class="token operator">+</span> area_size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> depth_image<span class="token punctuation">[</span>boundary<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>boundary<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> boundary<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>boundary<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"detect_yolo_kinect2"</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    dyk <span class="token operator">=</span> DetectYoloKinect<span class="token punctuation">(</span>rgb_img_topic<span class="token operator">=</span><span class="token string">"/kinect2/qhd/image_color/compressed"</span><span class="token punctuation">,</span>                           depth_img_topic<span class="token operator">=</span><span class="token string">"/kinect2/qhd/image_depth_rect/compressed"</span><span class="token punctuation">,</span> if_detection_only<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后得到的效果如下，可以看到YOLO还是可以的，不过有的时候会识别错误，例如把纸板识别成了沙发。而且在深度图中，越靠近边缘实际上越不准确，如果没有反射回来的话距离就被记为0。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211121155602208.png" alt="YOLO和深度图配准"></p>]]></content>
      
      
      <categories>
          
          <category> ROS杂篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> cv_bridge </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> melodic </tag>
            
            <tag> OpenCv </tag>
            
            <tag> sensor_msgs </tag>
            
            <tag> roslaunch </tag>
            
            <tag> Kinect V2 </tag>
            
            <tag> iai-kinect2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS杂篇 ROS中使用Kinect V2 Part1：安装+使用</title>
      <link href="/2021/11/18/ros-za-pian-an-zhuang-kinect-v2-qu-dong/"/>
      <url>/2021/11/18/ros-za-pian-an-zhuang-kinect-v2-qu-dong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Kinect是非常流行的获取深度、彩色、点云的相机。本文介绍了Kinect相机的具体性能，以及如何在ROS调用Kinect相机。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118214830894.png" alt="最终效果图"></p><span id="more"></span><h1 id="ROS杂篇-ROS中使用Kinect-V2-Part1：安装-使用"><a href="#ROS杂篇-ROS中使用Kinect-V2-Part1：安装-使用" class="headerlink" title="ROS杂篇 ROS中使用Kinect V2 Part1：安装+使用"></a>ROS杂篇 ROS中使用Kinect V2 Part1：安装+使用</h1><blockquote><p>前言：为什么要写这篇博客</p></blockquote><p>由于我目前的工作需要我编写服务机器人的代码，而服务机器人就免不了需要视觉信息来指导机器人完成服务。包括RGB彩色相机获得的彩色图像、深度相机获得的深度图像等等各种视觉传感器。对于简单的RGB相机拍摄到的RGB彩色图像，由于全球统一的接口，因此有很多工具都可以帮助我们从<code>/dev/video*</code>中读取到彩色图像。通过OpenCV的<code>VideoCapture</code>就可以读到。然而问题的关键在于，针对一些特定的设备，例如深度相机，目前全球尚无统一的标准，因此在数据流中图像的格式各个厂家都是不一样的。因此这个时候想要读取到这些特殊相机的图像就需要花一番功夫了。尤其是在硬件厂商不提供Linux的驱动的时候更难受。</p><p>由于我具体的开发平台配置就是 <code>Ubuntu 18.04</code> + <code>ROS Melodic</code> + <code>Kinect V2</code>相机。<strong>所以特地写这篇博客记录一下ROS中如何配置Kinect V2相机</strong></p><p><strong>下文针对Ubutnu 18.04 + ROS Melodic 验证可行</strong></p><h2 id="1-什么是-Kinect-相机？"><a href="#1-什么是-Kinect-相机？" class="headerlink" title="1. 什么是 Kinect 相机？"></a>1. 什么是 Kinect 相机？</h2><blockquote><p>正如我一向的态度，学什么、做什么前先问问为什么要学/做，再问问自己学/做的是什么。为什么要做上面已经回答了，因为我需要用它。那接下来就是要做的是什么？</p></blockquote><p>个人的角度来说，<code>Kinect</code> 相机就是一款特殊的相机，他可以读取到RGB彩色图像和深度图像，通过<code>Kinect</code>相机采集到的图像和深度信息，我们就能够快乐的进行开发~</p><p>虽然<code>Kinect V2</code>在2017年由于<code>Xbox</code>取消了<code>Kinect</code>的接口而停产，但是发现到<code>Kinect</code>相机价值的微软随后推出的 <code>Kinect V3</code> 和 <code>Kinect DK</code> 都是专门为科研推出的设备。（我有幸用过 <code>Kinect DK</code>，上面部署了现成的 <code>Human Motion Estimation</code> 的模型，可以直接获得人体的关键点，非常好用）</p><blockquote><p>摘自<code>维基百科</code></p><p><strong>Kinect</strong>是由<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%BB%9F">微软</a>开发，应用于<a href="https://zh.wikipedia.org/wiki/Xbox_360">Xbox 360</a>和<a href="https://zh.wikipedia.org/wiki/Xbox_One">Xbox One</a>主机的周边设备。它让玩家不需要手持或踩踏<a href="https://zh.wikipedia.org/wiki/%E6%8E%A7%E5%88%B6%E5%99%A8">控制器</a>，而是使用<a href="https://zh.wikipedia.org/wiki/%E8%AF%AD%E9%9F%B3%E6%8C%87%E4%BB%A4">语音指令</a>或<a href="https://zh.wikipedia.org/wiki/%E6%89%8B%E5%8A%BF">手势</a>来操作Xbox 360和Xbox One的系统界面。它也能捕捉玩家全身上下的动作，用身体来进行游戏，带给玩家“免控制器的游戏与娱乐体验”。此设备是<a href="https://zh.wikipedia.org/wiki/%E5%BE%AE%E8%BB%9F%E7%A0%94%E7%A9%B6%E9%99%A2">微软研究院</a>的研究成果之一。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118142428272.png" alt="维基百科上对Kinect相机的介绍"></p></blockquote><p>可以看得出来，<code>Kinect</code>相机最初其实是由Windows为<code>Xbox</code>游戏机准备的外设，通过Kinect相机可以玩一些体感游戏。不过多好的设备当然是要我们来折腾的，拿来单纯玩游戏就有点太奢侈了。</p><p>不过正式用于Kinect相机是微软家的产品，按照微软的尿性大概是不会给开源驱动的（虽然这几年微软逐渐在拥抱开源，可是KinectV1、V2都是2010年的产品啊），事实也的确如此。Kinect目前微软官方的驱动只有在Windows上才有。这也就是为什么我们稍后等下需要安装<code>Kinect V2</code>的驱动。</p><h2 id="2-Kinect-相机介绍"><a href="#2-Kinect-相机介绍" class="headerlink" title="2. Kinect 相机介绍"></a>2. Kinect 相机介绍</h2><blockquote><p>以下内容参考博客：<a href="https://www.cnblogs.com/traceplus/p/4136297.html">https://www.cnblogs.com/traceplus/p/4136297.html</a></p></blockquote><h3 id="A-Kinect-V1"><a href="#A-Kinect-V1" class="headerlink" title="A. Kinect V1"></a>A. Kinect V1</h3><p>2012年美国微软发售的<code>Kinect V1</code>，因为可以很方便就能取得Depth（深度）和 skeleton（人物姿势）等信息，被全世界的开发者和研究人员关注。</p><p><code>Kinect V1</code>的Depth传感器，采用了<code>Light Coding</code>的方式，读取投射的红外线的<code>pattern</code>，通过<code>pattern</code>的变形来取得Depth的信息。为此，Depth传感器分为投射红外线的IR Projector（左）和读取的IR Camera（右）。此外还有<code>Kinect V1</code>中间还搭载了RGB相机。</p><p><code>Light Coding</code>是以色列的<code>PrimeSense</code>公司的Depth传感器技术，于2013年被美国苹果公司收购。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/012317367015237.jpg" alt="Kinect V1的图片"></p><h3 id="B-Kinect-V2"><a href="#B-Kinect-V2" class="headerlink" title="B. Kinect V2"></a>B. Kinect V2</h3><p><code>Kinect V2</code>获得Depth信息采用的则是<code>Time of Flight(TOF)</code>的方式，通过从投射的红外线反射后返回的时间来取得Depth信息。红外发射器和接收器在面板底部，因此看不到外观，不过<code>Color Camera</code>旁边是红外线<code>Camera</code>(左)和投射脉冲变调红外线的<code>Porjector</code>（右）。</p><p>微软过去收购过基于<code>TOF</code>方式的深度传感器技术的公司（注：应该是指的3DV），已经在使用这个技术，不过没有详细的公布。</p><p>（额外插一句，TOF是目前大多数点云数据获取的方式）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/012317384052450.jpg" alt="Kinect V2"></p><h3 id="C-两者对比"><a href="#C-两者对比" class="headerlink" title="C.两者对比"></a>C.两者对比</h3><p><strong>首先是两者的参数</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118144936589.png" alt="Kinect V1 和 V2 性能对比"></p><p><strong>然后需要注意的是两者的接口</strong></p><ul><li>V1的要求是USB2.0理论传输速率是60MB/s，v2是USB3.0理论传输速率是500MB/s。</li><li>对于<code>Kinect V1</code>，对XRGB四通道图像，30fps的帧率下每秒所需传输的数据大小为640 x 480 x 4 x 30约为35M；再加上USHORT格式的深度图，30fps，每秒传输数据量为320 x 240 x 2 x 30约为4M。总计约为40MB/s，因为带宽有限，所以在保证画面帧率稳定的情况下，分辨率只能如此，而且基本上必须独占一个USB接口。</li><li>对于<code>Kinect V2</code>的情况，彩色图像1920 x 1080 x 4 x 30 约为237M，深度图像512 x 424 x 2 x 30约为12M，总计约为250M/s。所以非USB3.0不可，否则传输不了这么大的数据量。</li></ul><h2 id="3-安装Kinect驱动-ROS中间件"><a href="#3-安装Kinect驱动-ROS中间件" class="headerlink" title="3. 安装Kinect驱动+ROS中间件"></a>3. 安装Kinect驱动+ROS中间件</h2><h3 id="A-概述"><a href="#A-概述" class="headerlink" title="A. 概述"></a>A. 概述</h3><p>首先需要说明的是开发的方式，因为Kinect相机是物理硬件，所以获取到的是二进制数据流，我们首先需要使用驱动将二进制数据流转换为有意义的图像，然后在我们自己的程序针在这些图像的基础上去进行开发。</p><ul><li><strong>将二进制数据流转换为图像的程序对应下图的Kinect Driver</strong></li><li><strong>我们自己的程序对应下图的<code>Application</code></strong></li><li><strong>需要注意的是，在ROS中通常只会有一个程序调用Kinect Driver，因此不考虑右边的工作模型。右边的模型只有多人、多任务同时要调用Kinect</strong> <strong>Driver时候才会有用，针对单任务其实没有啥影响</strong></li></ul><p>在<code>Kinect</code>标准的<code>Windows</code>上，<code>Kinect</code>的驱动是Windows上直接下载的，然后<code>Windows</code>还提供了<code>Kinect</code>的SDK，里面有现成的人体骨架识别的<code>API</code>，所以可以直接用。<strong>但是在Linux的ROS上想要使用Kinect相机的话，把二进制数据流转换为图像的驱动需要我们自己写，然后SDK+程序得自己开发</strong>。</p><ul><li>幸运的是，已经有人写好了<code>Kinect</code>的驱动，因此我们直接下载驱动即可。但是<code>Kinect</code>驱动只能帮助我们能在<code>Ubuntu</code>上获得Kinect的图像，所以接下来我们需要做的第二件事就是编写一个<code>ROS</code>调用<code>Kinect</code>的节点来调用<code>Kinect</code>驱动，并将获得的图像以话题的形式发布到<code>ROS</code>中去。</li><li>更加幸运的是，这一步也已经有人帮我们做好了，我们需要需要做的下载、编译这个调用Kinect驱动获得图像、并以<code>ROS</code>话题形式发布的<code>ROS</code>功能包（相当于中间件）。</li></ul><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/012317438589516.png" alt="开发方式"></p><p>因此，整个安装流程分成两步，</p><ol><li>安装 <code>Kinect</code> 的驱动</li><li>安装<code>ROS</code>功能包</li></ol><h3 id="B-安装Kinect-V2驱动——libfreenect2"><a href="#B-安装Kinect-V2驱动——libfreenect2" class="headerlink" title="B. 安装Kinect V2驱动——libfreenect2"></a>B. 安装Kinect V2驱动——libfreenect2</h3><p>首先需要安装<code>Kinect</code>在<code>Ubuntu</code>上的驱动：<code>libfreenect2</code>。</p><p>这个驱动是<code>Github</code>上开源的用<code>C++</code>和<code>Cmake</code>写的<code>Kinect V2</code>的驱动，所以我们稍后克隆下来之后安装一下依赖，然后配置<code>CMake</code>生成<code>Makefile</code>、然后make编译，最后make install安装库即可。</p><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1. 安装依赖"></a>1. 安装依赖</h4><p>实现用apt包管理器安装下稍后编译时候的依赖</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential cmake pkg-config libturbojpeg libjpeg-turbo8-dev mesa-common-dev freeglut3-dev libxrandr-dev libxi-dev libglfw3-dev libglfw3-dev libopenni2-dev libusb-dev libturbojpeg0-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于我已经安装过了，所以这一步我不会安装任何东西。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118172852901.png" alt="安装依赖"></p><h4 id="2-下载源码"><a href="#2-下载源码" class="headerlink" title="2. 下载源码"></a>2. 下载源码</h4><p><code>git</code>直接下载源码即可，如果下载的慢的话，要么科学上网，要么先用国内的码云gitee克隆一下，然后再下载码云的仓库。关于如何使用码云加速<code>github</code>下载可以参考我的这篇文章（挖个坑，以后补）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">git</span> clone https://github.com/OpenKinect/libfreenect2.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118173143020.png" alt="下载源码"></p><p>下载之后的项目文件结构，可以看出来，是一个非常经典的<code>CMake</code>的项目</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118173557080.png" alt="下载后的项目结构"></p><h4 id="3-配置-amp-编译"><a href="#3-配置-amp-编译" class="headerlink" title="3. 配置&amp;编译"></a>3. 配置&amp;编译</h4><p>对于一个<code>CMake</code>工程，得到项目最后的成果，即最终的动态链接库/共享库、可执行文件一共需要两步。第一步是配置（<code>Config</code>），第二步是构建（<code>Build</code>）。配置指的是设置项目的一些配置，比如说编译器使用的语法标准、是否禁止编译器在编译阶段优化代码等等。这里不展开讲了，具体内容可以参考我的<code>CMake</code>系列文章（挖个坑）。</p><p>首先创建一个编译空间</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">cd</span> libfreenect2/<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2$ <span class="token function">mkdir</span> build<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2$ <span class="token function">cd</span> build/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来再使用<code>CMake</code>针对<code>build</code>文件夹外的<code>CMakeLists</code>进行配置，需要注意的是，由于我已经配好了<code>Nvidia</code>的显卡驱动和<code>CUDA</code>，因此我指定使用<code>CUDA</code>编译，这样运行的时候就会有加速。此外配置的时候要指定安装到的位置，这个安装到的位置稍后安装ROS功能包的时候会用到，所以不建议修改，用默认的就行。</p><p>具体来说我们都是在命令行使用-D参数来指定<code>CMake</code>的宏及其值(D=define)，<code>CMakeLists</code>中会检查这些宏的值。如果你不是<code>CUDA</code>的话就把后面指定<code>CUDA</code>的宏删掉即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ cmake <span class="token punctuation">..</span> -DCMAKE_INSTALL_PREFIX<span class="token operator">=</span><span class="token variable">$HOME</span>/freenect2 -DENABLE_CXX11<span class="token operator">=</span>ON -DCUDA_PROPAGATE_HOST_FLAGS<span class="token operator">=</span>off<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118184945046.png" alt="CMake配置工程"></p><p>可以看到<code>CMake</code>配置的流程还是很清晰的，首先会去寻找系统中的编译器版本然后再去检查当前编译器是否至此指定版本的语法，接下来去寻找包等等。全部配置过程没有问题的话就会显示最后的三句话，当前<code>build</code>编译空间下也多出来很多中间文件。<code>Makefile</code>就是稍后<code>make</code>解析的对象。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118185449344.png" alt="配置的结果"></p><p>然后我们make编译即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我这里的编译可以说是顺风顺水，主要原因其实是我已经配置过一遍了，这是写教程时候删掉了全部的文件重头再来的结果。<strong>其实在第一次配的时候在编译这里遇到了两三个问题</strong>，不过我都解决掉了，现在没有办法把这些问题复现出来。这里挖个坑，下一次装机补上。主要的两个问题是第一次会报错不存在一个叫<code>libGL.so</code>的共享库，第二次则是在最后编译到100%之后链接的时候报错说没有定义的引用：<code>undefined reference to _glapi_tls_Current</code>。</p><p>其实这两个问题都和<code>OpenGL</code>这个图形库有关（<code>Graphic Librar</code>y）。图形负责渲染材质等等，是将数据显示到我们的显示器上的库，包括看到的桌面、窗口等等都是用图形库渲染出来的。而<code>Kinect</code>捕获到的数据要转成图片显示，就必然会用到<code>OpenGL</code>这个库。第一个报错是因为管道断开（<code>libGL.so</code>是一个软连接），重新链接就行，第二个报错则是因为<code>libGL.so</code>链接到的共享库版本太老，指定一个更新的即可。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118185715177.png" alt="编译的过程"></p><p>最后，由于<code>libfreenect2</code>最终生成的是一个驱动，因此他最终生成的结果不仅有可执行文件，还有共享库，我们需要<code>make install</code>来安装一下共享库。说是安装，其实就是把共享库复制到指定的位置去，一般的项目都是把共享库复制到系统链接时候的搜索路径，这样编译的时候系统会自动的去搜索。<strong>不过由于我们上面CMake在配置的时候指定了安装位置，因此他其实会安装到我们的家目录下面</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从命令的输出确实能够看到安装的位置就是我们的家目录</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118190908729.png" alt="安装的结果"></p><h4 id="4-设置USB规则"><a href="#4-设置USB规则" class="headerlink" title="4. 设置USB规则"></a>4. 设置USB规则</h4><p>由于<code>libfreenect2</code>是一个驱动，因此他需要和底层的硬件做交互，所以需要设置一下<code>USB</code>规则。在<code>Linux</code>中所有的串口都是由一个叫<code>udev</code>的程序负责的，他相当于<code>Windows</code>的设备管理器。这里挖个坑，以后补上关于<code>udev</code>的内容。更多细节可以参考<a href="https://www.jianshu.com/p/dd6cecd7755a">这篇简书的博客</a></p><blockquote><p><strong>以下内容引用自简书博客</strong></p><p><strong>udev在linux的那个位置</strong></p><p>udev的守护进程在linux的位置在systemd中的位置如下所示，举个例子：如果向pc中插入一个usb设备，kernel在总线上发现这个设备，使用dirver初始化，在sysfs创建device目录等操作之后，将通知用户空间的udev，然后上层的显示层才能看到这个usb设备，并最终将它显示在desktop上：</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/330043-6ecf51d6a519b4fe.png" alt="Systemd守护进程所处的位置"></p></blockquote><p>我们直接把规则文件复制到<code>udev</code>的配置文件夹下即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> <span class="token punctuation">..</span>/platform/linux/udev/90-kinect2.rules /etc/udev/rules.d/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-验证安装"><a href="#5-验证安装" class="headerlink" title="5. 验证安装"></a>5. 验证安装</h4><p>最后上面的步骤一步步做下来，应该是没有问题的，不过在编译驱动的时候我们观察到make最后在生成一个叫做<code>Protonect</code>的可执行文件。这个程序其实就是验证安装的程序。我们接上<code>Kinect</code>的连接线，然后运行这个程序，如果安装成功就能够看到下面的图片</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/libfreenect2/build$ ./bin/Protonect <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>四张图中左上角是深度图，左下角是RGB图像，右下角是点云的图像，右上角是带有RGB的点云的图像。需要注意的是，点云的图像是通过深度图推算出来的。深度图只有一个Depth通道，数值越大表示越远，看起来就越黑。而点云图是XYZ三个通道，分别表示点相对相机的的XYZ坐标。而右上角的点云则是RGBXYZ六个通道图片。右边看到，有<code>CUDA</code>加速喧嚷延迟基本都在10ms左右，速度还是非常快的</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118193300100.png" alt="验证程序的运行结果"></p><h4 id="6-安装驱动可能遇到的问题"><a href="#6-安装驱动可能遇到的问题" class="headerlink" title="6. 安装驱动可能遇到的问题"></a>6. 安装驱动可能遇到的问题</h4><p>暂时没有，留待下次重装系统时候补充。</p><h3 id="C-安装ROS-Kinect深度相机功能包——iai-kinect2"><a href="#C-安装ROS-Kinect深度相机功能包——iai-kinect2" class="headerlink" title="C. 安装ROS Kinect深度相机功能包——iai_kinect2"></a>C. 安装ROS Kinect深度相机功能包——iai_kinect2</h3><p>就像在<code>Melodic</code>上使用<code>CV_Bridge</code>一样（挖个<code>Melodic</code>编译<code>CV_Bridge</code>的坑，以后补上），<code>iai_kinect2</code>也需要我们从<code>github</code>上下载源码然后编译。</p><p>在编译之后，我们想要通过Kinect获得深度图像、点云图像等等直接启动这个<code>iai_kinect2</code>中的节点就行。这个节点将会调用libfreenect，并将获取到的图像发布到指定的话题里，因此我们订阅指定的话题即可得到数据。</p><h4 id="1-下载并编译功能包"><a href="#1-下载并编译功能包" class="headerlink" title="1. 下载并编译功能包"></a>1. 下载并编译功能包</h4><p>由于iai-<code>kinect2</code>本质上是<code>ROS</code>的一个功能包，而<code>ROS</code>的功能包的发布都是以功能包的形式发布的，因此我们只需要把这个功能包下载到工作空间中并进行编译即可。为了不污染我们自己的工作空间，避免每次都要编译这个包，我们新创建一个叫做<code>install_iai_kinect</code>的工作空间的安装这个包</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">mkdir</span> install_iai_kinect2<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">cd</span> install_iai_kinect2/<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ <span class="token function">mkdir</span> src<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ <span class="token function">cd</span> src/<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src$ catkin_init_workspace <span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src$ <span class="token function">cd</span> <span class="token punctuation">..</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ catkin_make<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118205323865.png" alt="初始化之后的工作空间"></p><p>然后git下载功能并安装依赖，注意这里如果前面改了<code>libfreenect</code>的安装路径的话，这里编译的时候要添加一个<code>CMake</code>的宏来指定<code>libfreenect</code>的路径，参考<a href="https://github.com/code-iai/iai_kinect2#install">文章</a>。</p><p>此外，在使用<code>rosdep</code>安装的时候会遇到一个“报错”（见下），这个其实是正常的，因为<code>kinect2_brideg</code>、<code>kinect2_cailbration</code>、<code>kinect2_caliration</code>、<code>kinect2_viewer</code>这四个节点被<code>rosdep</code>认为是功能包了，但他们其实都只是<code>iai_kinect2</code>的一部分。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ <span class="token function">cd</span> src/<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src$ <span class="token function">git</span> clone https://github.com/code-iai/iai_kinect2.git<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src$ <span class="token function">cd</span> iai_kinect2<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src/iai_kinect2$ rosdep <span class="token function">install</span> -r --from-paths <span class="token keyword">.</span><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2/src/iai_kinect2$ <span class="token function">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/<span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai_kinect2$ catkin_make -DCMAKE_BUILD_TYPE<span class="token operator">=</span><span class="token string">"Release"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ERROR: the following packages/stacks could not have their rosdepc keys resolved<br>to system dependencies:<br>kinect2_bridge: Cannot locate rosdep definition for [kinect2_registration]<br>kinect2_calibration: Cannot locate rosdep definition for [kinect2_bridge]<br>kinect2_viewer: Cannot locate rosdep definition for [kinect2_bridge]<br>iai_kinect2: Cannot locate rosdep definition for [kinect2_registration]</p></blockquote><p>最后没有error就成功安装功能包了，但是不要忘记<code>source</code>一下，因为这个功能包不在<code>ROS</code>的元功能包中。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118205948236.png" alt="编译的结果"></p><h4 id="2-验证安装"><a href="#2-验证安装" class="headerlink" title="2. 验证安装"></a>2. 验证安装</h4><p>同样，经历过上面的步骤之后，我们脸上<code>Kinect V2</code>的连接线来跑跑节点，看看有没有问题。类似于<code>cv_bridge</code>，<code>iai-kinect2</code>编译之后会得到一个<code>kinect_bridge</code>，我们利用其中的launch文件来测试一下。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ <span class="token function">source</span> devel/setup.bash <span class="token punctuation">(</span>ros<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ roslaunch kinect2_bridge kinect2_bridge.launch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118204334851.png" alt="launch启动整个kinect_bridge"></p><p>然后我们再开一个终端来看看节点图</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ rqt_graph <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看起来还不错，可以看到<code>kinect_bridge</code>其实只是一个交互的节点，他的后端数据处理都是依靠的其他的节点，<code>kinect2</code>负责调用<code>libfreenect</code>驱动，剩下的hd、sd、qhd分别负责处理高中低分辨率的图像。</p><p>不过由于rqt是通过rosmaster中的注册信息来画节点图的，因此没有被订阅的话题无法被显示出来，我们看看所有的话题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118203224904.png" alt="Kinect_Bridge节点图"></p><p>新开一个终端</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~$ rostopic list <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到有很多的话题，不过其实所有的话题分成三组，<code>hd</code>表示高分辨率，<code>qhd</code>表示中分辨率，<code>sd</code>表示低分辨率</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118203435667.png" alt="Kinect_Bridge发布的所有的画图"></p><p>最后其实<code>kinect_bridge</code>提供了可视化的节点，不过首先需要对kinect相机进行校准，否则是有偏差的，不过我们这里只是为了验证，因此跑起来看看</p><pre class="line-numbers language-bash"><code class="language-bash">rosrun kinect2_viewer kinect2_viewer kinect2 sd cloud<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>看起来效果还不错，不过由于订阅的是低分辨的图片，因此图片放大之后实际上像素间就会出现一些缺失的黑色点</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118203934128.png" alt="可视化的结果"></p><h4 id="3-安装时候的一些说明"><a href="#3-安装时候的一些说明" class="headerlink" title="3. 安装时候的一些说明"></a>3. 安装时候的一些说明</h4><blockquote><h4 id="1-编译的时候弹出来警告"><a href="#1-编译的时候弹出来警告" class="headerlink" title="1. 编译的时候弹出来警告"></a>1. 编译的时候弹出来警告</h4><p>具体的警告如下图。只是警告而已，不是错误，不用管。因为<code>catkin</code>作为<code>cmake</code>的上级编译系统，最后还是调用的<code>g++</code>，<code>g++</code>在编译的是帮我们检查代码，警告我们哪里语法不规范啥的，没必要管，能用就行。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118202235817.png" alt="编译时候的警告"></p></blockquote><h4 id="4-安装功能包可能会遇到的问题"><a href="#4-安装功能包可能会遇到的问题" class="headerlink" title="4. 安装功能包可能会遇到的问题"></a>4. 安装功能包可能会遇到的问题</h4><blockquote><h4 id="1-CMake-Error-at-usr-lib-x86-64-linux-gnu-cmake-Qt5Gui-Qt5GuiConfig-cmake-27-message-：Qt5的报错"><a href="#1-CMake-Error-at-usr-lib-x86-64-linux-gnu-cmake-Qt5Gui-Qt5GuiConfig-cmake-27-message-：Qt5的报错" class="headerlink" title="1. **CMake Error at /usr/lib/x86_64-linux-gnu/cmake/Qt5Gui/Qt5GuiConfig.cmake:27 (message)**：Qt5的报错"></a>1. **CMake Error at /usr/lib/x86_64-linux-gnu/cmake/Qt5Gui/Qt5GuiConfig.cmake:27 (message)**：Qt5的报错</h4><p>具体报错如下图，即缺少了<code>libEGL.so</code>这个共享库</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118200845339.png" alt="Qt5报错"></p><p><strong>解决方法：</strong></p><p>和上面安装驱动时候遇到的报错差不多，估计是一个尿性，即软连接断了，先去<code>/usr/lib/x86-linux-gnu</code>下看看。果然，红色的字体，断开的链接。即<code>/usr/lib/x86_64-linux-gnu/libEGL.so</code>这个软连接本来指向的文件没了。不过看这个样子有一个1.1.0版本的，估计是某次<code>apt upgrade</code>时候更新了这个库。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ ll /usr/lib/x86_64-linux-gnu/libEGL.so* <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118201305342.png" alt="libEGL.so断开的软连接"></p><p>那么解决思路就很简单了，我们先删掉原有的断掉的链接，然后让他再指向新版本就行了，毕竟新版本一般都是向后兼容的。除了<code>Python2</code>到<code>Python3</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ <span class="token function">sudo</span> <span class="token function">rm</span> /usr/lib/x86_64-linux-gnu/libEGL.so <span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/install_iai-kinect$ <span class="token function">sudo</span> <span class="token function">ln</span> -s /usr/lib/x86_64-linux-gnu/libEGL.so.1.1.0 /usr/lib/x86_64-linux-gnu/libEGL.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在看着就没问题了，管道对了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118201854870.png" alt="重置libEGL.so的指向"></p><p>然后再进行编译即可</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118202028422.png" alt="功能包可以正常编译"></p></blockquote><h2 id="4-使用kinect-bridge"><a href="#4-使用kinect-bridge" class="headerlink" title="4. 使用kinect_bridge"></a>4. 使用kinect_bridge</h2><p>使用<code>kinect_bridge</code>其实特别简单，就是订阅话题而已，为此我们快速写一个<code>Python</code>脚本测试，注意测试时候新建的功能包的依赖不要加<code>iai_kinect2</code>，因为<code>kinect_bridge</code>实现了低耦合性，所有的消息全部都是<code>ROS</code>中的标准消息类型，因此没有提供任何ROS编译之后可以引用的库。<strong>下面是是一个错误的示例</strong>。（挖个坑，以后出一个关于<code>Vscode</code>开发<code>ROS</code>的环境搭建，真的<code>VScode</code>越用越爽）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118210715487.png" alt="功能包的依赖"></p><p>正因为<code>kinect_bridge</code>中的消息全部都是<code>ROS</code>的标准消息，所有的图像都是<code>sensor_msgs/Image</code>或者<code>sensor_msgs/CompressedImage</code>。而点云则是<code>sensor_msgs/PointCloud2</code>，我们可以非常快速的写一个测试代码，代码见下（<strong>注意如果你要写C++的话不要在iai_bridge的工作空间中编译，会报错，因为Kinect_Bridge没有提供ROS编译、安装相关的CMake指令</strong>）</p><p>关于<code>ROS</code>中使用<code>conda</code>、还有<code>cv_bridge</code>、<code>ROS</code>使用<code>Python</code>等问题先挖个坑，后面补上文章</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /home/jack/anaconda3/envs/ros/bin/python</span><span class="token triple-quoted-string string">"""rospy 中使用 通过 kinect 获取点云的示例代码 """</span><span class="token triple-quoted-string string">"""@author: Jack Wang@copyright: Jack Wang@time: 2021-11-18"""</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> datetime<span class="token keyword">import</span> time<span class="token keyword">import</span> cv2<span class="token keyword">from</span> colorama <span class="token keyword">import</span> Fore<span class="token punctuation">,</span> Style<span class="token comment" spellcheck="true"># 我在 Python3 下编译了cv_bridge，所以要避免import了下载ROS时候一并下载的系统的Python2.7的cv_bridge</span><span class="token keyword">for</span> path_idx <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">"2.7"</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span>path_idx<span class="token punctuation">]</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>path_idx<span class="token punctuation">)</span>        <span class="token keyword">break</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> sensor_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Image<span class="token keyword">from</span> cv_bridge <span class="token keyword">import</span> CvBridge<span class="token keyword">class</span> <span class="token class-name">MyKinectViewer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    bridge <span class="token operator">=</span> CvBridge<span class="token punctuation">(</span><span class="token punctuation">)</span>    today<span class="token punctuation">:</span> str <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__str__<span class="token punctuation">(</span><span class="token punctuation">)</span>    start_sec<span class="token punctuation">:</span> float <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    font <span class="token operator">=</span> cv2<span class="token punctuation">.</span>FONT_HERSHEY_DUPLEX    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>msg<span class="token operator">=</span>f<span class="token string">"{Fore.GREEN}启动KinectBridge订阅节点！{Style.RESET_ALL}"</span><span class="token punctuation">)</span>        subcriber <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"/kinect2/sd/image_color_rect"</span><span class="token punctuation">,</span> data_class<span class="token operator">=</span>Image<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>image_cb<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">image_cb</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">:</span> Image<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>        cv_img <span class="token operator">=</span> self<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>imgmsg_to_cv2<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        cv_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>cv_img<span class="token punctuation">,</span> f<span class="token string">"{self.today}, start times: {time.time()-self.start_sec:>.2f}"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">380</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span>        cv_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>cv_img<span class="token punctuation">,</span> f<span class="token string">"-- by Jack Wang"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">270</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>font<span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"kinect_test"</span><span class="token punctuation">,</span> cv_img<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">:</span>            rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>f<span class="token string">"{Fore.GREEN}关闭节点{Style.RESET_ALL}"</span><span class="token punctuation">)</span>            rospy<span class="token punctuation">.</span>signal_shutdown<span class="token punctuation">(</span>reason<span class="token operator">=</span><span class="token string">"pressed esc"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"kinect_test"</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    mkv <span class="token operator">=</span> MyKinectViewer<span class="token punctuation">(</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出来，效果还不错</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118214830894.png" alt="节点效果图"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118214855870.png" alt="按下ESC键退出节点"></p><p>结合我之前写的<code>YOLO V5</code>的<code>ROS</code>图像处理节点，最后可以实现的效果（<code>Yolo V5</code>的<code>ROS</code>节点代码后面会发出来）</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211118220436969.png" alt="image-20211118220436969"></p><p>至此，本文全部结束，我们首先介绍了什么是<code>Kinect</code>相机；然后就<code>Kinect</code>相机的参数、工作原理进行了介绍；接下来讲解了如何在<code>Linux(Ubuntu)</code>上安装<code>Kinect V2</code>相机的驱动：<code>libfreenect2</code>和安装<code>ROS</code>中的<code>Kinect</code>相机调用节点；在最后我们给出了一个简单的小例子，来演示如何使用<code>iai-kinect2</code>功能包得到的图像数据。</p><p>关于iai-kinect2的更多使用教程，请看下一篇文章：<code>ROS</code>中<code>iai-kinect2</code>功能包的使用。</p><p>6200字，码字不易~，欢迎打赏~，一起推动开源事业进步</p>]]></content>
      
      
      <categories>
          
          <category> ROS杂篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ROS </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> melodic </tag>
            
            <tag> Kinect V2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo的个人技术博客搭建 —— Part-3 matery主题下的Hexo博客优化.md</title>
      <link href="/2021/11/14/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-3-matery-zhu-ti-xia-de-hexo-you-hua-md-md/"/>
      <url>/2021/11/14/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-3-matery-zhu-ti-xia-de-hexo-you-hua-md-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>hexo本身只是提供了一个博客的框架，博客网站的美化和优化还是需要靠自己配置主题。本讲将带领读者利用Matery主题对Hexo搭建的博客进行深度优化</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211207132452913.png" alt="最终效果展示图"></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Part-3-matery主题下的Hexo博客优化"><a href="#基于Hexo的个人技术博客搭建-——-Part-3-matery主题下的Hexo博客优化" class="headerlink" title="基于Hexo的个人技术博客搭建 ——  Part 3 matery主题下的Hexo博客优化"></a>基于Hexo的个人技术博客搭建 ——  Part 3 matery主题下的Hexo博客优化</h1><p>在前面的一章中，我们已经通过<code>hexo</code>在本地搭建出了一个博客。但是目前，这个博客还存在一些问题</p><ol><li><strong>目前博客网站运行在本地，所以只有我们自己能看到</strong></li><li><strong>Hexo默认的博客不够美观、功能不够多</strong></li></ol><p>针对上面两个我们，本章和下一章就将进行解决。本章首先解决第二个问题，即优化Hexo博客。</p><h2 id="1-为什么使用其他的Hexo主题？"><a href="#1-为什么使用其他的Hexo主题？" class="headerlink" title="1. 为什么使用其他的Hexo主题？"></a>1. 为什么使用其他的Hexo主题？</h2><p>在前面一章中我们讲过，<code>Hexo</code>主题的工作原理其实就是<code>Hexo</code>的主题里面写的<code>JavaScript</code>和<code>CSS</code>覆盖掉了<code>hexo</code>的<code>JavaScript</code>和<code>CSS</code>。而CSS决定了<code>Hexo</code>博客的外观，因此是否美观实际上取决于主题里的<code>CSS</code>。同样JavaScript决定了网页和我们的交互，因此网页的功能如何实际上也取决与我们的主题。因此，一个优秀的主题是有一个完美的<code>Hexo</code>博客的先决条件。有了一个优秀的主题，我们的博客不仅更加美观，功能也会更加强大。</p><p>因此我们对<code>Hexo</code>博客进行优化，实际上就是使用其他主题，并对这些主题进行配置、</p><p>后面，就将以<code>Hexo</code>的<code>matery</code>主题为例，进行优化</p><h2 id="2-基于Matery主题的Hexo博客优化"><a href="#2-基于Matery主题的Hexo博客优化" class="headerlink" title="2. 基于Matery主题的Hexo博客优化"></a>2. 基于Matery主题的Hexo博客优化</h2><p><code>Matery</code>主题是由国内的闪烁之狐（blinkfox）制作的一款美观的主题，包括我在写这篇博客时候我的博客所用的主题就是<code>Matery</code>。</p><p>之所以使用<code>Matery</code>主题，美观只是一个方面，更重要的是<code>Matery</code>以插件的形式提供了非常多优秀的程序，通过这些程序使得我们能够极大地优化我们的网站。</p><p>访问闪烁之狐的<a href="http://blinkfox.com/">Hexo博客</a>和他的<code>Matery</code>主题的<a href="https://github.com/blinkfox/hexo-theme-matery">Github</a>查看更多的信息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115010655463.png" alt="闪烁之狐的Matery主题示例"></p><p>接下来我们就将基于<code>Matery</code>主题来对我们的<code>Hexo</code>博客进行优化</p><blockquote><p>注意，下面的很多教程在<code>Matery</code>的<code>Github</code>上已经有介绍了，因此下面的介绍更多的是关注<code>Matery Github</code>上没有讲到的点</p></blockquote><h3 id="1-安装Matery"><a href="#1-安装Matery" class="headerlink" title="1. 安装Matery"></a>1. 安装Matery</h3><p><code>Matery</code>的<code>Github</code>中的中文说明已经讲过了，在<code>Hexo</code>博客文件夹下的<code>theme</code>文件夹<code>clone</code> 下<code>Matery</code>项目即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">cd</span> themes/<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test/themes$ <span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成之后，我们hexo博客看看效果</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test/themes$ <span class="token function">cd</span> <span class="token punctuation">..</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>发现和之前的博客并没有任何变化</strong>，这是因为我们需要在<code>Hexo</code>的配置文件中指定使用<code>Matery</code>主题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115011512753.png" alt="博客没有任何变化"></p><h3 id="2-切换Matery主题"><a href="#2-切换Matery主题" class="headerlink" title="2. 切换Matery主题"></a>2. 切换Matery主题</h3><p><code>vim</code>修改<code>hexo</code>博客根目录下的<code>_config.yml</code>，将<code>theme</code>的值改为 <code>hexo-theme-matery</code>，这样就启用了Matery主题</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115011735922.png" alt="修改之后的值"></p><p>接下来运行一下博客，就能够看到效果了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，默认配置就已经非常漂亮了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115011929561.png" alt="Matery主题的首页"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115012203467.png" alt="Matery主题的底部"></p><p>但是这个默认的主题也有一些小问题，需要我们去修改，比如说网站的左上角的logo，中间浮动打印的语句，中间的github链接需要修改成我们自己的，我的梦想栏的语句需要修改成自己的，右下角的联系方式需要改成我们自己的……</p><p>除了这些个人信息配置以外，还有最关键的一点就是右上角选项卡除了<code>首页</code>以外，其他的点击都会直接没有对应的界面显示。<strong>这是因为Matery默认没有这些界面，需要我们自己配置</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115012428235.png" alt="点击后显示错误"></p><h3 id="3-添加缺失的页面"><a href="#3-添加缺失的页面" class="headerlink" title="3. 添加缺失的页面"></a>3. 添加缺失的页面</h3><p>在前面的一章中，我们讲到<code>hexo</code>中一篇博客的源文件是一个<code>.md</code>文件，通过使用<code>hexo generta</code>命令，hexo自动的为我们的博文生成一个网页以及对应的资源文件。而其实在<code>hexo</code>，中一个页面对应的也是一个<code>.md</code>文件，同样我们稍后使用<code>hexo generta</code>来生成新的页面。只不过页面对应的<code>.md</code>文件会和博客的<code>.md</code>存在一些不同</p><p>下面就将以添加<code>关于</code>界面为例，讲解Hexo的页面工作原理的同时带领读者配置<code>Matery</code>的页面</p><h4 id="A-添加关于About页面"><a href="#A-添加关于About页面" class="headerlink" title="A. 添加关于About页面"></a>A. 添加<code>关于About</code>页面</h4><p>我们首先在根目录下使用<code>hexo new page xxx</code>命令来生成一个新的页面。同样为了后续的讲解，我们首先保存下现在的目录结构</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> before_about.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> after_about.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> before_about.txt <span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们需要修改刚刚新生成的<code>.md</code>来说明这个是一个页面而非博客，这样稍后生成博客的时候就会生成出来一个新的页面</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim source/about/index.md <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将<code>index.md</code>修改为如下内容，当然日期可以按照你自己的来</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: aboutdate: 2021-11-15 01:37:51type: "about"<span class="token title important">layout: "about"<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115014047478.png" alt="修改后的index.md"></p><p>接下来我们生成一下添加后的博客，别忘了生成之前<code>clean</code>一下，清除掉之前的博客。同时下面由于要讲解原理，因此生成后我们输出一下生成之后的目录结构</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo clean<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo gen<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> after_about.txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们运行下博客看看效果</p><p>可以看到，此时点击<code>关于</code>就可以正常显示处页面了，底部则显示出我们的制作的项目</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115014533558.png" alt="正常显示的关于页面"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115014620968.png" alt="关于页面的底部"></p><p>当然，这些信息都是默认的信息，我们稍后是肯定需要修改成我们自己的。不过在这之前，先别着急，我们先了解一下<code>hexo</code>是怎么样新生成一个页面的</p><h4 id="B-Hexo是怎么样生成新的页面的？"><a href="#B-Hexo是怎么样生成新的页面的？" class="headerlink" title="B. Hexo是怎么样生成新的页面的？"></a>B. Hexo是怎么样生成新的页面的？</h4><p>我们利用上面两次输出的目录结构，来看看添加、生成页面之后博客目录结构的变化</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim -d before_about.txt after_about.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先是发布的博客的<code>public</code>文件夹下多了非常多的东西。除了我们之前添加的第一篇博客外，还多出了<code>about</code>、<code>css</code>、<code>js</code>等一些文件夹</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115015145727.png" alt="Public文件夹的变化"></p><p>此外，我们的源代码文件夹中也多了<code>about</code>文件夹和在其下面的<code>index.md</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115015222432.png" alt="source文件夹下的不同"></p><p>实际上到这里你应该能够猜出来了，<code>hexo</code>和<code>matery</code>生成新的页面的工作原理就是：</p><ul><li>首先<code>hexo</code>认为<code>source</code>文件夹下的一个文件夹就是一个页面，这个页面必须要有一个<code>index.md</code>来说明这个页面的信息，例如上面指定生成页面使用的模板</li><li>其次，<code>matery</code>在生成项目的时候，会在public下生成新的网站的配置文件来修改默认的页面。因此我们的确可以修改这个<code>public</code>下面的<code>matery</code>生成的资源文件。但是并不推荐这样做，因为所有的修改在后续<code>generate</code>之后就会丢失。与此相比，下面会介绍更好的修改、配置<code>matery</code>主题的方式</li></ul><p>最后，我们依照<code>Matery Github</code>（<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">链接</a>）中的<code>README</code>的指引，如法炮制添加剩下的所有页面。</p><p>完成了之后，你可以尽情的探索一下新得到的页面。</p><h3 id="4-配置Matery主题"><a href="#4-配置Matery主题" class="headerlink" title="4. 配置Matery主题"></a>4. 配置Matery主题</h3><p>上面我们通过简单的Matery主题的配置得到了一些界面，下面我们就将进一步配置Matery主题。</p><p>授人以鱼不如授人以渔，因此下面我会首先讲解Matery主题的配置是如何工作的而非单纯的罗列，在讲解完原理之后会留下我参考过的不错的链接，读者可以去里面根据自己的需求配置。</p><p>下面将以安装文章字数插件为例进行讲解。</p><h4 id="A-文章字数统计"><a href="#A-文章字数统计" class="headerlink" title="A. 文章字数统计"></a>A. 文章字数统计</h4><p>细心地读者已经发现，在我们上面的博客底部其实是没有文章字数统计的，而闪烁之狐的实例网页中却具有文章字数统计。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115021145362.png" alt="我们的界面"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115021216163.png" alt="闪烁之狐的网站"></p><p>实际上，这个功能是依靠第三方插件<code>+Matery</code>配置完成的。我们首先下载这个插件，不过注意，我们在前面安装了<code>cnpm</code>，因此使用<code>cnpm</code>安装即可</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ cnpm i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成之后，我们还要修改<code>theme</code>文件夹下<code>Matery</code>主题的配置文件来激活插件，<strong>注意是Matey主题的配置文件</strong>。因为页面的样式信息都是Matery负责的。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim themes/hexo-theme-matery/_config.yml <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改为</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115021824246.png" alt="修改后的_config.yml"></p><p>然后我们同样clean之后generate看看效果</p><p>可以看到，已经出现统计信息了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115021949461.png" alt="底部具有了统计信息"></p><h4 id="B-Matery的配置是如何工作的？"><a href="#B-Matery的配置是如何工作的？" class="headerlink" title="B. Matery的配置是如何工作的？"></a>B. Matery的配置是如何工作的？</h4><p>事实上，<code>Matery</code>主题依靠其主题文件夹下的<code>_config.yml</code>来进行配置。这个文件中提供了诸如：网站上方选项卡的选项、个人信息、头像、logo等资源文件位置这类的配置，还有是否激活xx插件、xx效果等配置。因此我们通过<code>Matery</code>的<code>_config.yml</code>来进行配置。</p><p>在我们配置完了之后，在<code>generate</code>的过程中，<code>matery</code>就会根据我们的配置来生成对应的文件。可以说是非常方便。</p><p>例如我们修改在关于页面中显示的个人信息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115023301903.png" alt="修改个人信息"></p><p>同样，我们修改之后clean、gen、server来看看效果</p><p>可以看到，相关信息已经被修改了，不过由于我没有改头像，因此头像没有变</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211115023432763.png" alt="修改后的效果"></p><p>此外，由于闪烁之狐大佬良好的代码风格，因此在<code>Matery</code>的配置文件夹下，几乎可以看到所有的配置以及修改方式~。大家可以多试试</p><p>此外，推荐一个我参考过的博客，他也是基于<code>Matery</code>进行了配置和优化，并且自己改了一些<code>JavaScript</code>，以实现更好的效果，<a href="https://m3df.xyz/2020/06/13/e9fff968/">零下三度的极寒的博客</a></p><p>最后，本章到了这里就结束了。在本章我们首先讲解了为什么要使用第三方的<code>Hexo</code>主题，以及为什么使用<code>Matery</code>主题。接下来我们结合两个案例讲解了如何对<code>Matery</code>主题进行配置并解释了<code>Matery</code>配置的工作原理，在明白工作原理之后，大家去修改自己的博客网站就会得心应手很多。最后我们提供了其他的参考链接来帮助大家配置自己的博客网站。</p><p>在下一章中，我们将讲解如何低成本的把自己的博客部署到公网上去，使得所有人都能够访问你的博客。</p><p>码字不易，3100字，欢迎打赏~，一起推动开源事业~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人技术博客搭建 —— Part 2 Hexo快速建站以网站基础信息配置</title>
      <link href="/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-2-hexo-shi-yong-he-ji-chu-pei-zhi-md/"/>
      <url>/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-2-hexo-shi-yong-he-ji-chu-pei-zhi-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解如何使用Hexo快速搭建出一个博客网站，接下来对<code>Hexo</code>搭建的博客网站进行介绍，最后对Hexo搭建的博客网站进行网站基础信息的设置。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113193858319.png" alt="快速建站最终实现的效果"></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Part-2-Hexo快速建站以网站基础信息配置"><a href="#基于Hexo的个人技术博客搭建-——-Part-2-Hexo快速建站以网站基础信息配置" class="headerlink" title="基于Hexo的个人技术博客搭建 —— Part 2 Hexo快速建站以网站基础信息配置"></a>基于Hexo的个人技术博客搭建 —— Part 2 Hexo快速建站以网站基础信息配置</h1><p>在前面的章节中，我们已经讲解了配置<code>Hexo</code>的开发环境，本节将讲解如何使用Hexo快速建立自己的个人博客以及对个人博客进行基本信息设置</p><h2 id="1-Hexo快速建站"><a href="#1-Hexo快速建站" class="headerlink" title="1. Hexo快速建站"></a>1. Hexo快速建站</h2><blockquote><p>前面说过，<code>Hexo</code>搭建得到的博客本质上就是一个文件夹，因此<code>Hexo</code>进行的各种操作都是对这个文件夹里的文件进行操作。</p></blockquote><h3 id="1-初始化博客-——-hexo-init"><a href="#1-初始化博客-——-hexo-init" class="headerlink" title="1. 初始化博客 ——  hexo init"></a>1. 初始化博客 ——  <code>hexo init</code></h3><p><code>Hexo</code>提供了init命令来初始化一个博客，为此我们首先新建一个目录用来存放博客的所有文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">mkdir</span> blog-test<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ hexo init blog-test/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>hexo init</code>本质上就是去<code>github</code>上克隆<code>hexo starter</code>项目</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113194931504.png" alt="hexo init初始化博客的过程"></p><h3 id="2-运行博客-——-hexo-server"><a href="#2-运行博客-——-hexo-server" class="headerlink" title="2. 运行博客 —— hexo server"></a>2. 运行博客 —— <code>hexo server</code></h3><p>接下来，在博客所在的文件夹的根目录下运行<code>hexo server</code>，来启动<code>hexo</code>的服务程序，这样就可以显示出我们的博客网站。<code>hexo</code>默认是带有一个欢迎界面的，因此即便我们什么都不做也可以正常的运行</p><pre><code>(base) jack@jack-Alienware-m15-R3:~/project$ cd blog-test/(base) jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo server</code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113195611688.png" alt="image-20211113195611688"></p><p>运行之后浏览器中访问该端口就能够看到默认的界面，不过默认的界面的问题还是比较多的，比如网站用的默认主题并不是非常好看、网站的信息都不是，后面我们会慢慢优化。这里看到的效果如下</p><p>可以看到左下角的版权信息是默认的人名，左上角的选项卡选项也很少，右侧的菜单栏消息也很少，下一步我们就将慢慢改掉默认的界面</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113205754034.png" alt="朴素的Hexo"></p><p>为了等下讲解<code>Hexo</code>的原理，我们这里先创建三个文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> before_gen.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> after_gen.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> added_gen.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> before_gen.txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-生成博客-——-hexo-clean-amp-hexo-generate"><a href="#3-生成博客-——-hexo-clean-amp-hexo-generate" class="headerlink" title="3. 生成博客 —— hexo clean &amp; hexo generate"></a>3. 生成博客 —— <code>hexo clean</code> &amp; <code>hexo generate</code></h3><p>前面说道，<code>Hexo</code>的工作原理是通过<code>Markdown</code>引擎将<code>Markdown</code>格式的文本渲染成<code>HTML</code>，因此每一次我们在写完文章之后都需要生成一下博文，注意<code>hexo</code>提供了简写命令，因此g、gen、generate都是可以的</p><pre><code>(base) jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo gen</code></pre><p>可以看到生成了不少文件内容</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113215116668.png" alt="hexo gen生成博文"></p><p>最后输出一下目录方便后面查看hexo的运行原理</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> after_gen.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-新加一篇博客-——-hexo-new"><a href="#4-新加一篇博客-——-hexo-new" class="headerlink" title="4. 新加一篇博客 —— hexo new"></a>4. 新加一篇博客 —— <code>hexo new</code></h3><p>我们自己添加博客，需要使用<code>hexo new 文章名</code>，如果文章名称中含有特殊字符，需要用<code>''</code>包裹起来</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo new 第一篇博文<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新添加的博客在<code>source/_posts/</code>下，使用编辑器打开即可，后面会写一个<code>Typora + 腾讯云床</code>的博客编写环境教程，挖个坑</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token keyword">echo</span> <span class="token string">"# 大标题"</span> <span class="token operator">>></span> source/_posts/第一篇博文.md <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来继续生成博客，然后我们启动server来看看我们新写的博文，server的简写是s</p><p>注意，在生成前需要用clean清除一下中间的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo clean<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo gen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113220005285.png" alt="新添加一篇博文"></p><p>可以看到多了一篇文章</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113220330894.png" alt="添加文章之后的结果"></p><p>同样，我们记录一下，方便后面讲解原理</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> added_gen.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上就是关于<code>Hexo</code>的一些基础命令使用</p><h2 id="2-Hexo的运行原理"><a href="#2-Hexo的运行原理" class="headerlink" title="2. Hexo的运行原理"></a>2. Hexo的运行原理</h2><h3 id="1-Hexo的目录结构"><a href="#1-Hexo的目录结构" class="headerlink" title="1. Hexo的目录结构"></a>1. Hexo的目录结构</h3><p>我们通过<code>tree</code>命令来查看</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree -L 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，每个文件/文件夹的作用为：</p><ul><li><code>_config.yml</code>：网站的<strong>基础配置</strong>信息，可以在这里配置网站的一些基本参数，例如作者等等。<strong>之所以是基础配置信息，是因为使用不同的主题将会在极大程度上修改、覆盖这里的配置信息</strong>。</li><li><code>package.json</code>：Hexo生成网页、运行服务器等的应用程序信息。<code>EJS</code>, <code>Stylus</code> 和 <code>Markdown renderer</code> 已默认安装，可以由我们自由移除。</li><li><code>scaffolds</code>：模版文件夹。当您生成、新建文章时，<code>Hexo</code> 会根据 <code>scaffold</code> 来建立文件。<strong>不建议修改</strong></li><li><code>source</code>：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</li><li><code>themes</code>：主题文件夹。<code>Hexo</code> 会根据主题来生成静态页面。</li></ul><p>这些文件、文件夹中对我们而言最重要的就是<code>_config.yml</code>、<code>themes</code>、<code>source</code>这三个，其他的其实一般我们用不到也不需要改</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114095916621.png" alt="Hexo博客的架构"></p><h3 id="2-Hexo是如何生成和发布的博文"><a href="#2-Hexo是如何生成和发布的博文" class="headerlink" title="2. Hexo是如何生成和发布的博文"></a>2. Hexo是如何生成和发布的博文</h3><p>上面从整体上介绍了<code>Hexo</code>的目录结构。下面我们将深入了解一下<code>Hexo</code>生成博文的原理。</p><p>我们上面使用tree生成了三次目录结构，接下来我们查看下生成博文和添加博文之后博客项目的变化，使用<code>vim -d</code>比较下三个文件的内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim -d before_gen.txt after_gen.txt added_gen.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，我们编写的博客都被添加到了<code>source/_posts</code>文件夹下，而我们运行<code>hexo generate</code>后生成的静态博文网页资源就都放在<code>public</code>文件夹下，具体来说，文章放在以日期为名的系列文件夹下，<code>CSS</code>等资源文件则是单独放置</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113223040926.png" alt="hexo new、add之后文件目录的变化"></p><h3 id="3-Hexo是如何管理主题的"><a href="#3-Hexo是如何管理主题的" class="headerlink" title="3. Hexo是如何管理主题的"></a>3. Hexo是如何管理主题的</h3><p>下面我们通过我当前的这个博客来了解下<code>Hexo</code>是如何管理主题的，以及主题是如何工作的</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/hexo-blogs$ tree themes/  -L 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，<code>theme</code>文件夹下，一个文件夹就是一个主题。一个主题内部又有其自身的结构，不同的目录有不同的作用。例如<code>language</code>负责不同语言的博文的设置，<code>source</code>则存放主题的<code>css</code>、<code>js</code>等资源文件，<code>_config.yml</code>则负责主题的配置。</p><p><strong>因此在后续我们美化、深度定制Hexo时候就是修改下载好的主题</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114021748798.png" alt="Hexo的主题目录"></p><h2 id="3-Hexo-基础信息配置"><a href="#3-Hexo-基础信息配置" class="headerlink" title="3. Hexo 基础信息配置"></a>3. Hexo 基础信息配置</h2><p>前面我们讲到，<code>Hexo</code>自身的<code>_config.yml</code>虽然负责整个项目的配置，但是通常会被我们自己下载的主题的<code>_config.yml</code>所覆盖，因此我们只在Hexo的<code>_config.yml</code>中进行一些基础信息的配置，以便于我们为我们的博客打上自己的信息。</p><p>首先通过<code>vim</code>或者其他编辑器打开根目录下的<code>_config.yml</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim _config.yml <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114022512202.png" alt="Hexo 根目录下的配置文件"></p><h3 id="1-个人信息设置"><a href="#1-个人信息设置" class="headerlink" title="1. 个人信息设置"></a>1. 个人信息设置</h3><p>我们只需要修改 <code># Site</code>中的信息即可，这样将网站的默认信息改为我们自己的信息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114023546668.png" alt="修改后的个人信息"></p><h3 id="2-URL修改"><a href="#2-URL修改" class="headerlink" title="2. URL修改"></a>2. URL修改</h3><p>注意，<code># URL</code>下的内容修改则在未来将会在别人从我们的网站中复制内容之后作为后续的内容提醒版权，此外也会在文章底部说明版权。</p><p>我们暂时先不做这个修改，等后续博客上线、具有具体的域名/网址后再进行修改。</p><p>进行完上面所有的配置之后，我们就可以查看最终的效果了，我们开启下server查看效果</p><p>可以看到首页的文字和页脚的信息已经改掉了，当然，每篇文章里作者的信息也已经改变了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114023717905.png" alt="修改后的首页"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114023757242.png" alt="修改后的页脚信息"></p><p>至此，本章就已经结束了。本章我们首先讲解了<code>Hexo</code>的基础命令，然后研究了<code>Hexo</code>的目录结构和工作原理，方便我们后续修改，最后我们对网站的基础信息做了修改，更多的网站内容和信息的设置详见下一章~</p><p>码字不易，2200多字，欢迎打赏~，一起推动开源事业进步~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人技术博客搭建-Part 1 Hexo介绍以及环境搭建</title>
      <link href="/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-1-hexo-jie-shao-yi-ji-huan-jing-da-jian-md/"/>
      <url>/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-1-hexo-jie-shao-yi-ji-huan-jing-da-jian-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍什么是Hexo，为什么我们要使用Hexo搭建我们的博客以及Hexo环境搭建</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113024418805.png" alt="Hexo官网"></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-Part-1-Hexo介绍以及环境搭建-md"><a href="#基于Hexo的个人技术博客搭建-Part-1-Hexo介绍以及环境搭建-md" class="headerlink" title="基于Hexo的个人技术博客搭建-Part 1 Hexo介绍以及环境搭建.md"></a>基于Hexo的个人技术博客搭建-Part 1 Hexo介绍以及环境搭建.md</h1><p>在前一章概述中，我们讲解了为什么我认为一个Geek需要一个个人技术博客，并且简单的展示了最终效果，在接下来的章节里，我将一步步的介绍如何打造这样的效果。</p><h2 id="1-What-is-Hexo"><a href="#1-What-is-Hexo" class="headerlink" title="1. What is Hexo"></a>1. What is Hexo</h2><blockquote><p>等等，什么是<code>Hexo</code>？</p></blockquote><p>在开始学习前，我们需要<strong>首先</strong>知道我们将要学的东西是什么以及学习它能带来的好处（为什么要学他），这样我们学起来会轻松很多。因为这样做我们首先对需要学的东西搭建了一个大的框架，后续的学习都是在填充它，不断丰满这个框架，并且也有了充足的动力去学习。</p><ul><li>正如<code>Hexo</code>官网上所说：<strong>Hexo是一个快速、简洁且高效的博客框架</strong>。（<del>虽然这个官网充满了不少广告</del>）</li></ul><p>所谓框架，即指已经为我们构建了基本的博客工具和博客结构（框架），我们后续只需要在这个框架上不断的填充（发布自己的文章）、修改（修改<code>Hexo</code>的代码）。因为<code>Hexo</code>开源，因此我们实际上可以针对<code>Hexo</code>进行任意程度的自定义修改，只有你想不到，没有你改不了。非常庆幸的是，<code>Hexo</code>的作者是台湾人，因此他的官方文档的中文支持是非常好的，这也为我们使用<code>Hexo</code>提供了便利。</p><ol><li><code>Hexo</code>是基于<code>Node.js</code>开发的应用（因此我们稍后在安装的时候会安装<code>Node.js</code>的环境）。借助于<code>Node.js</code>，<code>Hexo</code>可以快速的渲染出漂亮的文章</li></ol><blockquote><p><strong>什么是<code>Node.js</code></strong></p><p>说清这个问题，要说的可不少。接触过网络的人都应该知道，前端页面是由<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>三大技术/三件套支持的，其中<code>HTML</code>负责定义网页改在哪个地方显示什么内容，<code>CSS</code>定义哪个地方的哪个内容该以什么样的方式显示，<code>JavaScript</code>则定义当你与这个内容交互的时候会有什么样的效果。</p><p>举个简单例子，在<a href="https://www.baidu.com/">百度</a>的首页，</p><ol><li>为什么百度的Logo会显示在中间，而备案等网站信息显示在底部？–&gt; <code>HTML</code></li><li>为什么百度的背景是白色的，而不是黑色？  –&gt; <code>CSS</code></li><li>为什么鼠标悬停在左上角的更多的时候会弹出来浮窗？  –&gt; <code>JavaScript</code></li></ol><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113031023828.png" alt="百度的首页"></p><p>正是因为有了这三件套，我们的网页变得多姿多彩了起来，有有价值的信息(<code>HTML</code>)、漂亮的页面(<code>CSS</code>)和友好的交互(<code>JavaScript</code>)。</p><p>然而，渐渐地，<strong>本来地位平等的三件套逐渐开始出现区别</strong>。<code>HTML</code>和<code>CSS</code>都是静态的，在编写结束之后用户能看到的内容就已经固定（关于模板稍后再说），当用户访问这个网页，看到的就是其中的内容；然而<code>JavaScript</code>却由于需要处理的用户的操作不同而做不同的处理，例如在百度的页面中，如果我不是悬浮而是右击怎么办？如果我不是悬浮而是掠过怎么办？正是由于需要处理诸多用户导致的多种多样的Event，<code>JavaScript</code>也具有了if-else等编程语言常见的语句。<strong>渐渐地，随着技术的进步，JavaScript需要处理的问题越来越多，在其能力变强的同时，JavaScript也变得越来越像一门编程语言</strong>。</p><p>然而，这个时候的<code>JavaScript</code>还并不能独当一面。因为在最早的网页中，<code>JavaScript</code>、<code>HTML</code>、<code>CSS</code>是绑定的三件套，当用户访问某个网页，服务器会将该网页的三件套发送给用户，然后由<strong>用户的浏览器解析、渲染、执行HTML、CSS、JavaScript三件套</strong>，从而显示网页。因此这个时候的<code>JavaScript</code>是无法脱离浏览器的。我们从另一个角度考虑，由于JavaScript是由浏览器解析执行的，因此其可以看做是一门解释性语言，在执行<code>JavaScript</code>的时候，CPU执行的机器码来自于其<code>解释器</code>——浏览器。</p><p>后来随着，<code>JavaScript</code>的功能越来越强大，简单的在网页中进行交互已经完全发挥其能力了。因此就出现了诸多项目，这些项目独立于传统浏览器，基于浏览器的<code>JavaScript</code>解析器内核（学名：引擎）亦或是自己编写了<code>JavaScript</code>的解析器来执行<code>JavaScript</code>。至此，<code>JavaScript</code>已经能够独立于浏览器被单独执行了，而非必须在浏览器中以网页的形式打开。</p><p>在前面介绍了那么多之后，终于，到了我们的主角，<code>Node.js</code>。大名鼎鼎的<code>Node.js</code>其实就是基于<code>Chrome V8</code> 引擎的 <code>JavaScript</code> 运行时环境。简单的来说，它能够利用<code>Chrome V8</code>引擎来解析、执行<code>JavaScript</code>。<code>Node.js</code>可以粗暴的理解成<code>JavaScript</code>的解释器。基于此，<code>JavaScript</code>在很多方面都很像<code>Python</code>，包括包管理器、解释器等等</p></blockquote><ol start="2"><li><code>Hexo</code>利用<code>Markdown</code>来作为源文章，其内置<code>Markdown</code>的渲染引擎，我们只需要书写Markdown，而后通过<code>Hexo</code>就能够生成<code>HTML</code>等前端文件，非常方便</li></ol><blockquote><p>正如下面这张图，这篇文章也是我用Markdown写出来的，在后续部分除了网站搭建以外，还会讲讲如何搭建写作环境，以实现畅快写作</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113110048831.png" alt="我的Markdown写作环境：Typora+腾讯云图床+Dracula主题"></p></blockquote><ol start="3"><li>Hexo搭建出的博客网站是一个静态网站，这就意味着单纯<code>Hexo</code>本身只能提供博客的显示、有限的交互，如果需要登录、发表评论这类需要后端程序支持的运用，就需要第三方插件了。如果非常需要这些功能，要么使用<code>WordPress</code>，要么折腾<code>Hexo</code>的插件</li></ol><p>到这里，你应该明白了<code>Hexo</code>是一个基于<code>Node.js</code>的程序，他帮助我们渲染文章、管理文章，通过这个<code>Hexo</code>我们可以快速、低成本的部署自己的博客</p><h2 id="2-Why-is-Hexo"><a href="#2-Why-is-Hexo" class="headerlink" title="2. Why is Hexo"></a>2. Why is Hexo</h2><blockquote><p>Ok，我知道了什么<code>Hexo</code>，可是为什么要用它它？</p></blockquote><p>事实上，选取<code>Hexo</code>作为我们的博客网站框架来帮助我们搭建技术博客有很多好处：</p><ol><li><code>Hexo</code>框架的学习成本非常低，学起来非常快速，命令行几条语句就能够学会。在整个<code>博客搭建过程</code>中，学习<code>Hexo</code>可能只占很少的时间，主要时间在于挑选一个好看的主题并自己修改、添加自己的个人信息</li><li><code>Hexo</code>搭建的博客非常易于管理。<code>Hexo</code>管理的博客本质上是一个文件夹。因为Hexo搭建出的只是静态博客网站，因此不需要后端程序，所以网站所有的资源（<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>）都放在一个文件夹里就行。如果中间配置出问题了，那么直接删掉整个文件夹就行。</li><li><code>Hexo</code>搭建的博客部署、迁移非常方便。同样是由于Hexo管理的博客网站是一个文件夹，因此我们可利用Git<code>来保存</code>、同步你的博客。此外，由于<code>Github</code>和<code>Gitee</code>提供静态网页的<code>Page</code>服务，所以我们其实可以利用<code>Github</code>和<code>Gitee</code>等<code>Git</code>托管网站来托管我们的网站。防止网络攻击这些都由他们帮我们做好了。</li><li><code>Hexo</code>搭建的博客成本非常低。正是因为我们利用<code>Github</code>和<code>Gitee</code>来托管我们的网站，因此我们只需要花钱买域名和图床即可，买公网服务器什么的全部省掉了。</li><li><code>Hexo</code>具有非常多美观的主题。通过这些主题，我们只需要进行配置和有限的修改就能够做出来非常美观的博客网站。</li></ol><blockquote><p><code>Hexo</code>的官网上提供了非常多的主题（<a href="https://hexo.io/themes/">点击查看</a>），截止我写这篇文章的时候一共有348个官方收录的主题。除此以外还有非常多的未被收录的主题，强推我现在正在用的由<code>闪烁之狐</code>制作的<code>Matery</code>主题，后面也会讲解如何配置<code>Matery</code>主题，这是Matery主题的<a href="http://blinkfox.com/">展示网站</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113112326777.png" alt="Hexo官网收录的主题"></p></blockquote><ol start="6"><li>……（暂时只想到这几个点）</li></ol><h2 id="3-Hexo环境搭建"><a href="#3-Hexo环境搭建" class="headerlink" title="3. Hexo环境搭建"></a>3. Hexo环境搭建</h2><blockquote><p>开发第一步：搭建环境</p></blockquote><p>注意，由于我本人长期使用<code>Debian/Ubuntu</code>来做开发，因此以下教程都将是基于<code>Ubuntu</code>编写的教程。如果你是其他<code>Linux</code>发行版用户，适度修改即可；如果你是<code>Windows</code>用户，那么你还需要配置不少东西，知乎、简书上你还得查查。</p><p>下面我们就将一步步搭建Hexo环境出来</p><h3 id="1-安装Node-js环境"><a href="#1-安装Node-js环境" class="headerlink" title="1. 安装Node.js环境"></a>1. 安装Node.js环境</h3><p>前面说道，<code>Hexo</code>是基于<code>Node.js</code>开发的程序，因此其运行就需要<code>Node.js</code>，所以我们第一步就是安装<code>Node.js</code></p><blockquote><p>注意：官网上说明，<code>Hexo</code>需要的<code>Node.js</code>的版本不低于<strong>10.13</strong>，强烈建议<code>Node.js</code><strong>12.0</strong>以上的版本</p></blockquote><p>我们首先用<code>apt</code>查一下Ubuntu的仓库里的nodejs的版本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~$ <span class="token function">sudo</span> apt search nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113124733292.png" alt="apt搜索nodejs的结果"></p><p>不难看出来，<code>apt</code>仓库里的<code>nodejs</code>的版本过低，因此我们需要自己从<code>nodejs</code>官网上下载新版本的<code>nodejs</code>，<a href="https://nodejs.org/zh-cn/">官网传送门</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113124918179.png" alt="Node.js的官网"></p><p>在我写这篇文章的时候最新版是16.13，由于遵循Linux的传统，双数版本是LTS（Long Time Supported）版本，而单数版本都是尝鲜（Beta）版本，所以选择<strong>稳定版即可</strong></p><p>下载之后解压会得到一个文件夹，这个文件夹里<code>bin</code>目录放的就是官方替我们已经编译好了的二进制可执行文件，可以看到除了node，别的都是软连接</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ tree -L 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意，我这里是已经安装过了<code>Node.js</code>，正常情况下是没有<code>cnpm</code>的，稍后会安装<code>cnpm</code></p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113125500195.png" alt="解压之后的文件夹"></p><p>由于后续需要在命令行中调用<code>Node.js</code>，因此还要把这个<code>bin</code>文件的路径加入到<code>Shell</code>搜索可执行文件路径的<code>PATH</code>环境变量中，这里图方便直接在.<code>bashrc</code>中添加了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ vim ~/.bashrc  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113125903583.png" alt="添加了Node.js的PATH"></p><p>这样未来在命令行就可以正常的调用<code>node.js</code>和附带的<code>npm</code>了，测试一波</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ node <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113130048060.png" alt="测试Node.js"></p><p>OK，装完了<code>Node.js</code>，下一步</p><h3 id="2-安装cnpm"><a href="#2-安装cnpm" class="headerlink" title="2. 安装cnpm"></a>2. 安装cnpm</h3><p>前面讲到，Node.js中利用了Chrome V8引擎从而实现了JavaScript的运行时环境，从而做到了类似于解释器的效果。做过<code>Python</code>的人应该都会知道<code>pip</code>和<code>conda</code>，他们都是<code>Python</code>的包管理器（当然conda还可以管理环境）。通过<code>pip install xxx</code>或者<code>conda install xxx</code>就能安装Python的第三方库。</p><p><code>Node.js</code>也提供了类似的包管理工具，即<code>npm（Node.js Package Management）</code>，通过npm我们就能够安装<code>Node.js</code>的第三方库。</p><p>但是这些包管理工具的共性就是下载的这些库都是在包管理工具官网上维护的包，我们使用<code>xxx install xxx</code>的时候，会去<code>xxx</code>的包管理网站上搜索<code>xxx</code>包，然后下载。问题的关键就出在了下载这一步，由于这些包管理网站服务器都在国外，因此国内下载就会很慢。为此，我们通过换源来解决，即指定去国内的包管理网站上下载。在<code>pip</code>中我们可以指定<code>-i</code>参数，从而指定去清华源或者中科大源下载<code>Python</code>第三方包。而<code>npm</code>我们同样也可以指定<code>--registry</code>参数，从而指定国内的源（一般都是淘宝源）。</p><p>但是每次都使用<code>--registry</code>参数有点蠢，我们直接使用淘宝做好的<code>cnpm</code>包管理工具就行。<code>cnpm</code>和<code>npm</code>在作用上是一样的，不过对国内用户做了很不错的优化。</p><p>我们首先通过npm指定<code>--registry</code>参数来安装<code>cnpm</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ <span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span><span class="token string">"https://registry.npm.taobao.org"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍等片刻即可，警告是已经安装的别的包报的错，都后面没啥影响，因为我已经安装过了cnpm，所以下面的截图和你的可能不一样</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113131609169.png" alt="安装cnpm"></p><p>安装之后检查下安装是否成功，当然由于路径等环境不一样，输出结果也不太一样，但是能够正常输出就表示安装对了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ cnpm --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113131849887.png" alt="检查cnpm是否安装成功"></p><p>OK，下一步安装Git</p><h3 id="3-安装git"><a href="#3-安装git" class="headerlink" title="3. 安装git"></a>3. 安装git</h3><p>由于<code>Hexo</code>内置了博客的同步、部署等功能，因此<code>Hexo</code>依赖于<code>git</code>，所以我们首先需要安装<code>git</code></p><p>安装git就简单了，直接<code>apt</code>安装即可，同样由于我已经安装过了，所以输出会不一样</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ <span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113132146054.png" alt="apt安装git"></p><p>同样，查看下<code>git</code>的版本确认安装成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ <span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113132257442.png" alt="确认git安装成功"></p><h3 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h3><p>在前面所有必备的环境安装成功后，下面将安装<code>Hexo</code></p><p>前面由于已经安装了<code>cnpm</code>，因此我们直接使用<code>cnpm</code>来安装<code>Hexo</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ cnpm <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍等片刻就安装好了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113132546043.png" alt="安装hexo"></p><p>为了后续我们能够直接在命令行调用<code>hexo</code>的命令，我们把<code>hexo</code>的可执行文件添加到<code>PATH</code>中去</p><p>注意，<code>npm</code>和<code>cnpm</code>的工作原理都是把下载的包放到<code>node.js</code>所在的根目录的<code>lib</code>中，和<code>pip</code>是异曲同工之秒，我们打开之前node.js在的文件夹就能看到</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113133034708.png" alt="hexo的安装位置"></p><p>同样用<code>vim</code>编辑<code>.bashrc</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113133331507.png" alt="添加hexo可执行文件"></p><p>最后命令行查看下hexo的版本确认成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ hexo --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113133455333.png" alt="确认hexo安装成功"></p><p>至此，我们已经成功搭建了Hexo的环境。</p><p>本章结束~</p><p>本章我们首先讲解了什么是<code>hexo</code>，然后讲解了为什么我们要使用<code>hexo</code>，最后讲解了如何安装<code>hexo</code>。</p><p>下一节预告：<code>Hexo使用以及配置</code></p><p>码字不易，4000字，欢迎打赏~，一起为开源事业做贡献~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人技术博客搭建 —— Part 0 概述</title>
      <link href="/2021/11/12/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-0-gai-shu/"/>
      <url>/2021/11/12/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-0-gai-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列文章面向前端小白，希望以尽量简单而又不啰嗦的语言介绍如何搭建<code>基于Hexo的个人技术博客</code></p></blockquote><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Part-0-概述"><a href="#基于Hexo的个人技术博客搭建-——-Part-0-概述" class="headerlink" title="基于Hexo的个人技术博客搭建 —— Part 0 概述"></a>基于Hexo的个人技术博客搭建 —— Part 0 概述</h1><p>作为一个热爱开源的技术爱好者，我热爱学习新的技术、也热衷分享自己掌握的技术。然而分享却并非易事，想要将你的开源技术以个人技术博客的形式分享到互联网上需要有以下的诸多步骤：</p><ol><li>掌握HTML、CSS、JavaScript、Vue.js、Node.js等前端技术，至少能够写出来一个静态网站；或者在静态网页的基础上掌握Nginx、Apache等等后端技术，为前端提供登陆等功能以实现一个动态网站。</li><li>购买具有公网IP的服务器以运行你的网站，使得任何想要访问你网站的人都能够通过公网上的服务器来访问你的网站。</li><li>购买一个域名并为其添加DNS解析、安装SSL证书</li><li>Optional：中国域名<strong>xxxx.xxxx.cn</strong>下的网站需要进行备案</li><li>配置你的服务器以避免来自公网上的攻击</li><li>……</li></ol><p>完成了以上诸多步骤，你的技术网站才能够被其他人访问，别人才能够正常的来阅读你的技术博客。<strong>如此繁琐的程序，往往在前几步就吓退了不少人</strong>。也正是因为如此，就出现了不少帮助我们分享技术的工具，例如：帮助我们快速搭建博客而不需要自己掌握前端技术的<code>WordPress</code>、帮助我们维护文章的<code>CSDN</code>、<code>知乎</code>、<code>简书</code>等等；然而这些工具，也有他们的缺点</p><ul><li><code>WordPress</code>：尽管<code>WordPress</code>使得我们可以可视化的建立、管理前端页面。但是首先，上面的流程中诸多步骤仍然需要自己来完成，购买公网服务器、购买域名等等都是不小的开销；其次<code>WordPress</code>类似于<code>Vscode</code>，具有一个强大的插件系统，即软件本身只具有一定的功能，更多的功能需要靠插件来实现。然而和<code>Vscode</code>不同的是<code>WordPress</code>上好用的插件是要收费的，而且价格不菲（<del>忽略掉万能的淘宝</del>）</li><li><code>CSDN</code>、<code>简书</code>、<code>博客园</code>：尽管类似于<code>CSDN</code>、<code>简书</code>、<code>博客园</code>等这类博客网站已经帮助我们完成了网站安全防护、搜索引擎优化、文章编辑发布和管理等功能，他们的问题存在于盗帖实在太过于严重，很多时候搜索自己需要解决的问题，结果搜出来的全都是一模一样的、爬虫复制粘贴的文章，对解决问题毫无帮助，自己的文章和这些垃圾文章在一起，实在是于心不忍；其次，作为<strong>一名优秀的程序员，拥有自己的技术博客网站将会极大地帮助自己的未来，无论是求职也好亦或是求学……</strong></li></ul><p>因此自己搭建一个博客就非常有必要了。</p><p>本系列最终将通过一系列文章，来帮助你低成本（<strong>可能也就几块钱</strong>）的构建出属于你自己的、美观的个人技术博客</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211112180102412.png" alt="最终效果展示"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
