<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于Hexo的个人技术博客搭建 —— Part 2 Hexo快速建站以网站基础信息配置</title>
      <link href="/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-2-hexo-shi-yong-he-ji-chu-pei-zhi-md/"/>
      <url>/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-2-hexo-shi-yong-he-ji-chu-pei-zhi-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要讲解如何使用Hexo快速搭建出一个博客网站，接下来对<code>Hexo</code>搭建的博客网站进行介绍，最后对Hexo搭建的博客网站进行网站基础信息的设置。</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113193858319.png" alt="快速建站最终实现的效果"></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Part-2-Hexo快速建站以网站基础信息配置"><a href="#基于Hexo的个人技术博客搭建-——-Part-2-Hexo快速建站以网站基础信息配置" class="headerlink" title="基于Hexo的个人技术博客搭建 —— Part 2 Hexo快速建站以网站基础信息配置"></a>基于Hexo的个人技术博客搭建 —— Part 2 Hexo快速建站以网站基础信息配置</h1><p>在前面的章节中，我们已经讲解了配置<code>Hexo</code>的开发环境，本节将讲解如何使用Hexo快速建立自己的个人博客以及对个人博客进行基本信息设置</p><h2 id="1-Hexo快速建站"><a href="#1-Hexo快速建站" class="headerlink" title="1. Hexo快速建站"></a>1. Hexo快速建站</h2><blockquote><p>前面说过，<code>Hexo</code>搭建得到的博客本质上就是一个文件夹，因此<code>Hexo</code>进行的各种操作都是对这个文件夹里的文件进行操作。</p></blockquote><h3 id="1-初始化博客-——-hexo-init"><a href="#1-初始化博客-——-hexo-init" class="headerlink" title="1. 初始化博客 ——  hexo init"></a>1. 初始化博客 ——  <code>hexo init</code></h3><p><code>Hexo</code>提供了init命令来初始化一个博客，为此我们首先新建一个目录用来存放博客的所有文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ <span class="token function">mkdir</span> blog-test<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project$ hexo init blog-test/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><code>hexo init</code>本质上就是去<code>github</code>上克隆<code>hexo starter</code>项目</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113194931504.png" alt="hexo init初始化博客的过程"></p><h3 id="2-运行博客-——-hexo-server"><a href="#2-运行博客-——-hexo-server" class="headerlink" title="2. 运行博客 —— hexo server"></a>2. 运行博客 —— <code>hexo server</code></h3><p>接下来，在博客所在的文件夹的根目录下运行<code>hexo server</code>，来启动<code>hexo</code>的服务程序，这样就可以显示出我们的博客网站。<code>hexo</code>默认是带有一个欢迎界面的，因此即便我们什么都不做也可以正常的运行</p><pre><code>(base) jack@jack-Alienware-m15-R3:~/project$ cd blog-test/(base) jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo server</code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113195611688.png" alt="image-20211113195611688"></p><p>运行之后浏览器中访问该端口就能够看到默认的界面，不过默认的界面的问题还是比较多的，比如网站用的默认主题并不是非常好看、网站的信息都不是，后面我们会慢慢优化。这里看到的效果如下</p><p>可以看到左下角的版权信息是默认的人名，左上角的选项卡选项也很少，右侧的菜单栏消息也很少，下一步我们就将慢慢改掉默认的界面</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113205754034.png" alt="朴素的Hexo"></p><p>为了等下讲解<code>Hexo</code>的原理，我们这里先创建三个文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> before_gen.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> after_gen.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token function">touch</span> added_gen.txt<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> before_gen.txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-生成博客-——-hexo-clean-amp-hexo-generate"><a href="#3-生成博客-——-hexo-clean-amp-hexo-generate" class="headerlink" title="3. 生成博客 —— hexo clean &amp; hexo generate"></a>3. 生成博客 —— <code>hexo clean</code> &amp; <code>hexo generate</code></h3><p>前面说道，<code>Hexo</code>的工作原理是通过<code>Markdown</code>引擎将<code>Markdown</code>格式的文本渲染成<code>HTML</code>，因此每一次我们在写完文章之后都需要生成一下博文，注意<code>hexo</code>提供了简写命令，因此g、gen、generate都是可以的</p><pre><code>(base) jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo gen</code></pre><p>可以看到生成了不少文件内容</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113215116668.png" alt="hexo gen生成博文"></p><p>最后输出一下目录方便后面查看hexo的运行原理</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> after_gen.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-新加一篇博客-——-hexo-new"><a href="#4-新加一篇博客-——-hexo-new" class="headerlink" title="4. 新加一篇博客 —— hexo new"></a>4. 新加一篇博客 —— <code>hexo new</code></h3><p>我们自己添加博客，需要使用<code>hexo new 文章名</code>，如果文章名称中含有特殊字符，需要用<code>''</code>包裹起来</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo new 第一篇博文<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新添加的博客在<code>source/_posts/</code>下，使用编辑器打开即可，后面会写一个<code>Typora + 腾讯云床</code>的博客编写环境教程，挖个坑</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ <span class="token keyword">echo</span> <span class="token string">"# 大标题"</span> <span class="token operator">>></span> source/_posts/第一篇博文.md <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来继续生成博客，然后我们启动server来看看我们新写的博文，server的简写是s</p><p>注意，在生成前需要用clean清除一下中间的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo clean<span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ hexo gen<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113220005285.png" alt="新添加一篇博文"></p><p>可以看到多了一篇文章</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113220330894.png" alt="添加文章之后的结果"></p><p>同样，我们记录一下，方便后面讲解原理</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree <span class="token operator">>></span> added_gen.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上就是关于<code>Hexo</code>的一些基础命令使用</p><h2 id="2-Hexo的运行原理"><a href="#2-Hexo的运行原理" class="headerlink" title="2. Hexo的运行原理"></a>2. Hexo的运行原理</h2><h3 id="1-Hexo的目录结构"><a href="#1-Hexo的目录结构" class="headerlink" title="1. Hexo的目录结构"></a>1. Hexo的目录结构</h3><p>我们通过<code>tree</code>命令来查看</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ tree -L 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，每个文件/文件夹的作用为：</p><ul><li><code>_config.yml</code>：网站的<strong>基础配置</strong>信息，可以在这里配置网站的一些基本参数，例如作者等等。<strong>之所以是基础配置信息，是因为使用不同的主题将会在极大程度上修改、覆盖这里的配置信息</strong>。</li><li><code>package.json</code>：Hexo生成网页、运行服务器等的应用程序信息。<code>EJS</code>, <code>Stylus</code> 和 <code>Markdown renderer</code> 已默认安装，可以由我们自由移除。</li><li><code>scaffolds</code>：模版文件夹。当您生成、新建文章时，<code>Hexo</code> 会根据 <code>scaffold</code> 来建立文件。<strong>不建议修改</strong></li><li><code>source</code>：资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</li><li><code>themes</code>：主题文件夹。<code>Hexo</code> 会根据主题来生成静态页面。</li></ul><p>这些文件、文件夹中对我们而言最重要的就是<code>_config.yml</code>、<code>themes</code>、<code>source</code>这三个，其他的其实一般我们用不到也不需要改</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114095916621.png" alt="Hexo博客的架构"></p><h3 id="2-Hexo是如何生成和发布的博文"><a href="#2-Hexo是如何生成和发布的博文" class="headerlink" title="2. Hexo是如何生成和发布的博文"></a>2. Hexo是如何生成和发布的博文</h3><p>上面从整体上介绍了<code>Hexo</code>的目录结构。下面我们将深入了解一下<code>Hexo</code>生成博文的原理。</p><p>我们上面使用tree生成了三次目录结构，接下来我们查看下生成博文和添加博文之后博客项目的变化，使用<code>vim -d</code>比较下三个文件的内容</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim -d before_gen.txt after_gen.txt added_gen.txt <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，我们编写的博客都被添加到了<code>source/_posts</code>文件夹下，而我们运行<code>hexo generate</code>后生成的静态博文网页资源就都放在<code>public</code>文件夹下，具体来说，文章放在以日期为名的系列文件夹下，<code>CSS</code>等资源文件则是单独放置</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113223040926.png" alt="hexo new、add之后文件目录的变化"></p><h3 id="3-Hexo是如何管理主题的"><a href="#3-Hexo是如何管理主题的" class="headerlink" title="3. Hexo是如何管理主题的"></a>3. Hexo是如何管理主题的</h3><p>下面我们通过我当前的这个博客来了解下<code>Hexo</code>是如何管理主题的，以及主题是如何工作的</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/hexo-blogs$ tree themes/  -L 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到，<code>theme</code>文件夹下，一个文件夹就是一个主题。一个主题内部又有其自身的结构，不同的目录有不同的作用。例如<code>language</code>负责不同语言的博文的设置，<code>source</code>则存放主题的<code>css</code>、<code>js</code>等资源文件，<code>_config.yml</code>则负责主题的配置。</p><p><strong>因此在后续我们美化、深度定制Hexo时候就是修改下载好的主题</strong></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114021748798.png" alt="Hexo的主题目录"></p><h2 id="3-Hexo-基础信息配置"><a href="#3-Hexo-基础信息配置" class="headerlink" title="3. Hexo 基础信息配置"></a>3. Hexo 基础信息配置</h2><p>前面我们讲到，<code>Hexo</code>自身的<code>_config.yml</code>虽然负责整个项目的配置，但是通常会被我们自己下载的主题的<code>_config.yml</code>所覆盖，因此我们只在Hexo的<code>_config.yml</code>中进行一些基础信息的配置，以便于我们为我们的博客打上自己的信息。</p><p>首先通过<code>vim</code>或者其他编辑器打开根目录下的<code>_config.yml</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/project/blog-test$ vim _config.yml <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114022512202.png" alt="Hexo 根目录下的配置文件"></p><h3 id="1-个人信息设置"><a href="#1-个人信息设置" class="headerlink" title="1. 个人信息设置"></a>1. 个人信息设置</h3><p>我们只需要修改 <code># Site</code>中的信息即可，这样将网站的默认信息改为我们自己的信息</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114023546668.png" alt="修改后的个人信息"></p><h3 id="2-URL修改"><a href="#2-URL修改" class="headerlink" title="2. URL修改"></a>2. URL修改</h3><p>注意，<code># URL</code>下的内容修改则在未来将会在别人从我们的网站中复制内容之后作为后续的内容提醒版权，此外也会在文章底部说明版权。</p><p>我们暂时先不做这个修改，等后续博客上线、具有具体的域名/网址后再进行修改。</p><p>进行完上面所有的配置之后，我们就可以查看最终的效果了，我们开启下server查看效果</p><p>可以看到首页的文字和页脚的信息已经改掉了，当然，每篇文章里作者的信息也已经改变了。</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114023717905.png" alt="修改后的首页"></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211114023757242.png" alt="修改后的页脚信息"></p><p>至此，本章就已经结束了。本章我们首先讲解了<code>Hexo</code>的基础命令，然后研究了<code>Hexo</code>的目录结构和工作原理，方便我们后续修改，最后我们对网站的基础信息做了修改，更多的网站内容和信息的设置详见下一章~</p><p>码字不易，2200多字，欢迎打赏~，一起推动开源事业进步~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人技术博客搭建-Part 1 Hexo介绍以及环境搭建</title>
      <link href="/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-1-hexo-jie-shao-yi-ji-huan-jing-da-jian-md/"/>
      <url>/2021/11/13/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-1-hexo-jie-shao-yi-ji-huan-jing-da-jian-md/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍什么是Hexo，为什么我们要使用Hexo搭建我们的博客以及Hexo环境搭建</p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113024418805.png" alt="Hexo官网"></p><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-Part-1-Hexo介绍以及环境搭建-md"><a href="#基于Hexo的个人技术博客搭建-Part-1-Hexo介绍以及环境搭建-md" class="headerlink" title="基于Hexo的个人技术博客搭建-Part 1 Hexo介绍以及环境搭建.md"></a>基于Hexo的个人技术博客搭建-Part 1 Hexo介绍以及环境搭建.md</h1><p>在前一章概述中，我们讲解了为什么我认为一个Geek需要一个个人技术博客，并且简单的展示了最终效果，在接下来的章节里，我将一步步的介绍如何打造这样的效果。</p><h2 id="1-What-is-Hexo"><a href="#1-What-is-Hexo" class="headerlink" title="1. What is Hexo"></a>1. What is Hexo</h2><blockquote><p>等等，什么是<code>Hexo</code>？</p></blockquote><p>在开始学习前，我们需要<strong>首先</strong>知道我们将要学的东西是什么以及学习它能带来的好处（为什么要学他），这样我们学起来会轻松很多。因为这样做我们首先对需要学的东西搭建了一个大的框架，后续的学习都是在填充它，不断丰满这个框架，并且也有了充足的动力去学习。</p><ul><li>正如<code>Hexo</code>官网上所说：<strong>Hexo是一个快速、简洁且高效的博客框架</strong>。（<del>虽然这个官网充满了不少广告</del>）</li></ul><p>所谓框架，即指已经为我们构建了基本的博客工具和博客结构（框架），我们后续只需要在这个框架上不断的填充（发布自己的文章）、修改（修改<code>Hexo</code>的代码）。因为<code>Hexo</code>开源，因此我们实际上可以针对<code>Hexo</code>进行任意程度的自定义修改，只有你想不到，没有你改不了。非常庆幸的是，<code>Hexo</code>的作者是台湾人，因此他的官方文档的中文支持是非常好的，这也为我们使用<code>Hexo</code>提供了便利。</p><ol><li><code>Hexo</code>是基于<code>Node.js</code>开发的应用（因此我们稍后在安装的时候会安装<code>Node.js</code>的环境）。借助于<code>Node.js</code>，<code>Hexo</code>可以快速的渲染出漂亮的文章</li></ol><blockquote><p><strong>什么是<code>Node.js</code></strong></p><p>说清这个问题，要说的可不少。接触过网络的人都应该知道，前端页面是由<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>三大技术/三件套支持的，其中<code>HTML</code>负责定义网页改在哪个地方显示什么内容，<code>CSS</code>定义哪个地方的哪个内容该以什么样的方式显示，<code>JavaScript</code>则定义当你与这个内容交互的时候会有什么样的效果。</p><p>举个简单例子，在<a href="https://www.baidu.com/">百度</a>的首页，</p><ol><li>为什么百度的Logo会显示在中间，而备案等网站信息显示在底部？–&gt; <code>HTML</code></li><li>为什么百度的背景是白色的，而不是黑色？  –&gt; <code>CSS</code></li><li>为什么鼠标悬停在左上角的更多的时候会弹出来浮窗？  –&gt; <code>JavaScript</code></li></ol><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113031023828.png" alt="百度的首页"></p><p>正是因为有了这三件套，我们的网页变得多姿多彩了起来，有有价值的信息(<code>HTML</code>)、漂亮的页面(<code>CSS</code>)和友好的交互(<code>JavaScript</code>)。</p><p>然而，渐渐地，<strong>本来地位平等的三件套逐渐开始出现区别</strong>。<code>HTML</code>和<code>CSS</code>都是静态的，在编写结束之后用户能看到的内容就已经固定（关于模板稍后再说），当用户访问这个网页，看到的就是其中的内容；然而<code>JavaScript</code>却由于需要处理的用户的操作不同而做不同的处理，例如在百度的页面中，如果我不是悬浮而是右击怎么办？如果我不是悬浮而是掠过怎么办？正是由于需要处理诸多用户导致的多种多样的Event，<code>JavaScript</code>也具有了if-else等编程语言常见的语句。<strong>渐渐地，随着技术的进步，JavaScript需要处理的问题越来越多，在其能力变强的同时，JavaScript也变得越来越像一门编程语言</strong>。</p><p>然而，这个时候的<code>JavaScript</code>还并不能独当一面。因为在最早的网页中，<code>JavaScript</code>、<code>HTML</code>、<code>CSS</code>是绑定的三件套，当用户访问某个网页，服务器会将该网页的三件套发送给用户，然后由<strong>用户的浏览器解析、渲染、执行HTML、CSS、JavaScript三件套</strong>，从而显示网页。因此这个时候的<code>JavaScript</code>是无法脱离浏览器的。我们从另一个角度考虑，由于JavaScript是由浏览器解析执行的，因此其可以看做是一门解释性语言，在执行<code>JavaScript</code>的时候，CPU执行的机器码来自于其<code>解释器</code>——浏览器。</p><p>后来随着，<code>JavaScript</code>的功能越来越强大，简单的在网页中进行交互已经完全发挥其能力了。因此就出现了诸多项目，这些项目独立于传统浏览器，基于浏览器的<code>JavaScript</code>解析器内核（学名：引擎）亦或是自己编写了<code>JavaScript</code>的解析器来执行<code>JavaScript</code>。至此，<code>JavaScript</code>已经能够独立于浏览器被单独执行了，而非必须在浏览器中以网页的形式打开。</p><p>在前面介绍了那么多之后，终于，到了我们的主角，<code>Node.js</code>。大名鼎鼎的<code>Node.js</code>其实就是基于<code>Chrome V8</code> 引擎的 <code>JavaScript</code> 运行时环境。简单的来说，它能够利用<code>Chrome V8</code>引擎来解析、执行<code>JavaScript</code>。<code>Node.js</code>可以粗暴的理解成<code>JavaScript</code>的解释器。基于此，<code>JavaScript</code>在很多方面都很像<code>Python</code>，包括包管理器、解释器等等</p></blockquote><ol start="2"><li><code>Hexo</code>利用<code>Markdown</code>来作为源文章，其内置<code>Markdown</code>的渲染引擎，我们只需要书写Markdown，而后通过<code>Hexo</code>就能够生成<code>HTML</code>等前端文件，非常方便</li></ol><blockquote><p>正如下面这张图，这篇文章也是我用Markdown写出来的，在后续部分除了网站搭建以外，还会讲讲如何搭建写作环境，以实现畅快写作</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113110048831.png" alt="我的Markdown写作环境：Typora+腾讯云图床+Dracula主题"></p></blockquote><ol start="3"><li>Hexo搭建出的博客网站是一个静态网站，这就意味着单纯<code>Hexo</code>本身只能提供博客的显示、有限的交互，如果需要登录、发表评论这类需要后端程序支持的运用，就需要第三方插件了。如果非常需要这些功能，要么使用<code>WordPress</code>，要么折腾<code>Hexo</code>的插件</li></ol><p>到这里，你应该明白了<code>Hexo</code>是一个基于<code>Node.js</code>的程序，他帮助我们渲染文章、管理文章，通过这个<code>Hexo</code>我们可以快速、低成本的部署自己的博客</p><h2 id="2-Why-is-Hexo"><a href="#2-Why-is-Hexo" class="headerlink" title="2. Why is Hexo"></a>2. Why is Hexo</h2><blockquote><p>Ok，我知道了什么<code>Hexo</code>，可是为什么要用它它？</p></blockquote><p>事实上，选取<code>Hexo</code>作为我们的博客网站框架来帮助我们搭建技术博客有很多好处：</p><ol><li><code>Hexo</code>框架的学习成本非常低，学起来非常快速，命令行几条语句就能够学会。在整个<code>博客搭建过程</code>中，学习<code>Hexo</code>可能只占很少的时间，主要时间在于挑选一个好看的主题并自己修改、添加自己的个人信息</li><li><code>Hexo</code>搭建的博客非常易于管理。<code>Hexo</code>管理的博客本质上是一个文件夹。因为Hexo搭建出的只是静态博客网站，因此不需要后端程序，所以网站所有的资源（<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>）都放在一个文件夹里就行。如果中间配置出问题了，那么直接删掉整个文件夹就行。</li><li><code>Hexo</code>搭建的博客部署、迁移非常方便。同样是由于Hexo管理的博客网站是一个文件夹，因此我们可利用Git<code>来保存</code>、同步你的博客。此外，由于<code>Github</code>和<code>Gitee</code>提供静态网页的<code>Page</code>服务，所以我们其实可以利用<code>Github</code>和<code>Gitee</code>等<code>Git</code>托管网站来托管我们的网站。防止网络攻击这些都由他们帮我们做好了。</li><li><code>Hexo</code>搭建的博客成本非常低。正是因为我们利用<code>Github</code>和<code>Gitee</code>来托管我们的网站，因此我们只需要花钱买域名和图床即可，买公网服务器什么的全部省掉了。</li><li><code>Hexo</code>具有非常多美观的主题。通过这些主题，我们只需要进行配置和有限的修改就能够做出来非常美观的博客网站。</li></ol><blockquote><p><code>Hexo</code>的官网上提供了非常多的主题（<a href="https://hexo.io/themes/">点击查看</a>），截止我写这篇文章的时候一共有348个官方收录的主题。除此以外还有非常多的未被收录的主题，强推我现在正在用的由<code>闪烁之狐</code>制作的<code>Matery</code>主题，后面也会讲解如何配置<code>Matery</code>主题，这是Matery主题的<a href="http://blinkfox.com/">展示网站</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113112326777.png" alt="Hexo官网收录的主题"></p></blockquote><ol start="6"><li>……（暂时只想到这几个点）</li></ol><h2 id="3-Hexo环境搭建"><a href="#3-Hexo环境搭建" class="headerlink" title="3. Hexo环境搭建"></a>3. Hexo环境搭建</h2><blockquote><p>开发第一步：搭建环境</p></blockquote><p>注意，由于我本人长期使用<code>Debian/Ubuntu</code>来做开发，因此以下教程都将是基于<code>Ubuntu</code>编写的教程。如果你是其他<code>Linux</code>发行版用户，适度修改即可；如果你是<code>Windows</code>用户，那么你还需要配置不少东西，知乎、简书上你还得查查。</p><p>下面我们就将一步步搭建Hexo环境出来</p><h3 id="1-安装Node-js环境"><a href="#1-安装Node-js环境" class="headerlink" title="1. 安装Node.js环境"></a>1. 安装Node.js环境</h3><p>前面说道，<code>Hexo</code>是基于<code>Node.js</code>开发的程序，因此其运行就需要<code>Node.js</code>，所以我们第一步就是安装<code>Node.js</code></p><blockquote><p>注意：官网上说明，<code>Hexo</code>需要的<code>Node.js</code>的版本不低于<strong>10.13</strong>，强烈建议<code>Node.js</code><strong>12.0</strong>以上的版本</p></blockquote><p>我们首先用<code>apt</code>查一下Ubuntu的仓库里的nodejs的版本</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~$ <span class="token function">sudo</span> apt search nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113124733292.png" alt="apt搜索nodejs的结果"></p><p>不难看出来，<code>apt</code>仓库里的<code>nodejs</code>的版本过低，因此我们需要自己从<code>nodejs</code>官网上下载新版本的<code>nodejs</code>，<a href="https://nodejs.org/zh-cn/">官网传送门</a></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113124918179.png" alt="Node.js的官网"></p><p>在我写这篇文章的时候最新版是16.13，由于遵循Linux的传统，双数版本是LTS（Long Time Supported）版本，而单数版本都是尝鲜（Beta）版本，所以选择<strong>稳定版即可</strong></p><p>下载之后解压会得到一个文件夹，这个文件夹里<code>bin</code>目录放的就是官方替我们已经编译好了的二进制可执行文件，可以看到除了node，别的都是软连接</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ tree -L 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意，我这里是已经安装过了<code>Node.js</code>，正常情况下是没有<code>cnpm</code>的，稍后会安装<code>cnpm</code></p></blockquote><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113125500195.png" alt="解压之后的文件夹"></p><p>由于后续需要在命令行中调用<code>Node.js</code>，因此还要把这个<code>bin</code>文件的路径加入到<code>Shell</code>搜索可执行文件路径的<code>PATH</code>环境变量中，这里图方便直接在.<code>bashrc</code>中添加了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ vim ~/.bashrc  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113125903583.png" alt="添加了Node.js的PATH"></p><p>这样未来在命令行就可以正常的调用<code>node.js</code>和附带的<code>npm</code>了，测试一波</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ node <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113130048060.png" alt="测试Node.js"></p><p>OK，装完了<code>Node.js</code>，下一步</p><h3 id="2-安装cnpm"><a href="#2-安装cnpm" class="headerlink" title="2. 安装cnpm"></a>2. 安装cnpm</h3><p>前面讲到，Node.js中利用了Chrome V8引擎从而实现了JavaScript的运行时环境，从而做到了类似于解释器的效果。做过<code>Python</code>的人应该都会知道<code>pip</code>和<code>conda</code>，他们都是<code>Python</code>的包管理器（当然conda还可以管理环境）。通过<code>pip install xxx</code>或者<code>conda install xxx</code>就能安装Python的第三方库。</p><p><code>Node.js</code>也提供了类似的包管理工具，即<code>npm（Node.js Package Management）</code>，通过npm我们就能够安装<code>Node.js</code>的第三方库。</p><p>但是这些包管理工具的共性就是下载的这些库都是在包管理工具官网上维护的包，我们使用<code>xxx install xxx</code>的时候，会去<code>xxx</code>的包管理网站上搜索<code>xxx</code>包，然后下载。问题的关键就出在了下载这一步，由于这些包管理网站服务器都在国外，因此国内下载就会很慢。为此，我们通过换源来解决，即指定去国内的包管理网站上下载。在<code>pip</code>中我们可以指定<code>-i</code>参数，从而指定去清华源或者中科大源下载<code>Python</code>第三方包。而<code>npm</code>我们同样也可以指定<code>--registry</code>参数，从而指定国内的源（一般都是淘宝源）。</p><p>但是每次都使用<code>--registry</code>参数有点蠢，我们直接使用淘宝做好的<code>cnpm</code>包管理工具就行。<code>cnpm</code>和<code>npm</code>在作用上是一样的，不过对国内用户做了很不错的优化。</p><p>我们首先通过npm指定<code>--registry</code>参数来安装<code>cnpm</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ <span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span><span class="token string">"https://registry.npm.taobao.org"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍等片刻即可，警告是已经安装的别的包报的错，都后面没啥影响，因为我已经安装过了cnpm，所以下面的截图和你的可能不一样</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113131609169.png" alt="安装cnpm"></p><p>安装之后检查下安装是否成功，当然由于路径等环境不一样，输出结果也不太一样，但是能够正常输出就表示安装对了</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ cnpm --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113131849887.png" alt="检查cnpm是否安装成功"></p><p>OK，下一步安装Git</p><h3 id="3-安装git"><a href="#3-安装git" class="headerlink" title="3. 安装git"></a>3. 安装git</h3><p>由于<code>Hexo</code>内置了博客的同步、部署等功能，因此<code>Hexo</code>依赖于<code>git</code>，所以我们首先需要安装<code>git</code></p><p>安装git就简单了，直接<code>apt</code>安装即可，同样由于我已经安装过了，所以输出会不一样</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ <span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113132146054.png" alt="apt安装git"></p><p>同样，查看下<code>git</code>的版本确认安装成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ <span class="token function">git</span> --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113132257442.png" alt="确认git安装成功"></p><h3 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4. 安装Hexo"></a>4. 安装Hexo</h3><p>在前面所有必备的环境安装成功后，下面将安装<code>Hexo</code></p><p>前面由于已经安装了<code>cnpm</code>，因此我们直接使用<code>cnpm</code>来安装<code>Hexo</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ cnpm <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍等片刻就安装好了</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113132546043.png" alt="安装hexo"></p><p>为了后续我们能够直接在命令行调用<code>hexo</code>的命令，我们把<code>hexo</code>的可执行文件添加到<code>PATH</code>中去</p><p>注意，<code>npm</code>和<code>cnpm</code>的工作原理都是把下载的包放到<code>node.js</code>所在的根目录的<code>lib</code>中，和<code>pip</code>是异曲同工之秒，我们打开之前node.js在的文件夹就能看到</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113133034708.png" alt="hexo的安装位置"></p><p>同样用<code>vim</code>编辑<code>.bashrc</code></p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113133331507.png" alt="添加hexo可执行文件"></p><p>最后命令行查看下hexo的版本确认成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">(</span>base<span class="token punctuation">)</span> jack@jack-Alienware-m15-R3:~/桌面/node-v16.13.0-linux-x64$ hexo --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211113133455333.png" alt="确认hexo安装成功"></p><p>至此，我们已经成功搭建了Hexo的环境。</p><p>本章结束~</p><p>本章我们首先讲解了什么是<code>hexo</code>，然后讲解了为什么我们要使用<code>hexo</code>，最后讲解了如何安装<code>hexo</code>。</p><p>下一节预告：<code>Hexo使用以及配置</code></p><p>码字不易，4000字，欢迎打赏~，一起为开源事业做贡献~</p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo的个人技术博客搭建 —— Part 0 概述</title>
      <link href="/2021/11/12/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-0-gai-shu/"/>
      <url>/2021/11/12/ji-yu-hexo-de-ge-ren-ji-zhu-bo-ke-da-jian-part-0-gai-shu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本系列文章面向前端小白，希望以尽量简单而又不啰嗦的语言介绍如何搭建<code>基于Hexo的个人技术博客</code></p></blockquote><span id="more"></span><h1 id="基于Hexo的个人技术博客搭建-——-Part-0-概述"><a href="#基于Hexo的个人技术博客搭建-——-Part-0-概述" class="headerlink" title="基于Hexo的个人技术博客搭建 —— Part 0 概述"></a>基于Hexo的个人技术博客搭建 —— Part 0 概述</h1><p>作为一个热爱开源的技术爱好者，我热爱学习新的技术、也热衷分享自己掌握的技术。然而分享却并非易事，想要将你的开源技术以个人技术博客的形式分享到互联网上需要有以下的诸多步骤：</p><ol><li>掌握HTML、CSS、JavaScript、Vue.js、Node.js等前端技术，至少能够写出来一个静态网站；或者在静态网页的基础上掌握Nginx、Apache等等后端技术，为前端提供登陆等功能以实现一个动态网站。</li><li>购买具有公网IP的服务器以运行你的网站，使得任何想要访问你网站的人都能够通过公网上的服务器来访问你的网站。</li><li>购买一个域名并为其添加DNS解析、安装SSL证书</li><li>Optional：中国域名<strong>xxxx.xxxx.cn</strong>下的网站需要进行备案</li><li>配置你的服务器以避免来自公网上的攻击</li><li>……</li></ol><p>完成了以上诸多步骤，你的技术网站才能够被其他人访问，别人才能够正常的来阅读你的技术博客。<strong>如此繁琐的程序，往往在前几步就吓退了不少人</strong>。也正是因为如此，就出现了不少帮助我们分享技术的工具，例如：帮助我们快速搭建博客而不需要自己掌握前端技术的<code>WordPress</code>、帮助我们维护文章的<code>CSDN</code>、<code>知乎</code>、<code>简书</code>等等；然而这些工具，也有他们的缺点</p><ul><li><code>WordPress</code>：尽管<code>WordPress</code>使得我们可以可视化的建立、管理前端页面。但是首先，上面的流程中诸多步骤仍然需要自己来完成，购买公网服务器、购买域名等等都是不小的开销；其次<code>WordPress</code>类似于<code>Vscode</code>，具有一个强大的插件系统，即软件本身只具有一定的功能，更多的功能需要靠插件来实现。然而和<code>Vscode</code>不同的是<code>WordPress</code>上好用的插件是要收费的，而且价格不菲（<del>忽略掉万能的淘宝</del>）</li><li><code>CSDN</code>、<code>简书</code>、<code>博客园</code>：尽管类似于<code>CSDN</code>、<code>简书</code>、<code>博客园</code>等这类博客网站已经帮助我们完成了网站安全防护、搜索引擎优化、文章编辑发布和管理等功能，他们的问题存在于盗帖实在太过于严重，很多时候搜索自己需要解决的问题，结果搜出来的全都是一模一样的、爬虫复制粘贴的文章，对解决问题毫无帮助，自己的文章和这些垃圾文章在一起，实在是于心不忍；其次，作为<strong>一名优秀的程序员，拥有自己的技术博客网站将会极大地帮助自己的未来，无论是求职也好亦或是求学……</strong></li></ul><p>因此自己搭建一个博客就非常有必要了。</p><p>本系列最终将通过一系列文章，来帮助你低成本（<strong>可能也就几块钱</strong>）的构建出属于你自己的、美观的个人技术博客</p><p><img src="https://jack-1307599355.cos.ap-shanghai.myqcloud.com/img/image-20211112180102412.png" alt="最终效果展示"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/12/hello-world/"/>
      <url>/2021/11/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
